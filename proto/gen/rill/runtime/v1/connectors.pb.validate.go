// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/runtime/v1/connectors.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on ListS3BucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BucketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BucketsRequestMultiError, or nil if none found.
func (m *ListS3BucketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BucketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListS3BucketsRequestMultiError(errors)
	}

	return nil
}

// ListS3BucketsRequestMultiError is an error wrapping multiple validation
// errors returned by ListS3BucketsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListS3BucketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BucketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BucketsRequestMultiError) AllErrors() []error { return m }

// ListS3BucketsRequestValidationError is the validation error returned by
// ListS3BucketsRequest.Validate if the designated constraints aren't met.
type ListS3BucketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BucketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BucketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BucketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BucketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BucketsRequestValidationError) ErrorName() string {
	return "ListS3BucketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BucketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BucketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BucketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BucketsRequestValidationError{}

// Validate checks the field values on ListS3BucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BucketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BucketsResponseMultiError, or nil if none found.
func (m *ListS3BucketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BucketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListS3BucketsResponseMultiError(errors)
	}

	return nil
}

// ListS3BucketsResponseMultiError is an error wrapping multiple validation
// errors returned by ListS3BucketsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListS3BucketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BucketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BucketsResponseMultiError) AllErrors() []error { return m }

// ListS3BucketsResponseValidationError is the validation error returned by
// ListS3BucketsResponse.Validate if the designated constraints aren't met.
type ListS3BucketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BucketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BucketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BucketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BucketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BucketsResponseValidationError) ErrorName() string {
	return "ListS3BucketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BucketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BucketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BucketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BucketsResponseValidationError{}

// Validate checks the field values on ListS3BucketObjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BucketObjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BucketObjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BucketObjectsRequestMultiError, or nil if none found.
func (m *ListS3BucketObjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BucketObjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for BucketName

	// no validation rules for Prefix

	// no validation rules for StartOffset

	if len(errors) > 0 {
		return ListS3BucketObjectsRequestMultiError(errors)
	}

	return nil
}

// ListS3BucketObjectsRequestMultiError is an error wrapping multiple
// validation errors returned by ListS3BucketObjectsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListS3BucketObjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BucketObjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BucketObjectsRequestMultiError) AllErrors() []error { return m }

// ListS3BucketObjectsRequestValidationError is the validation error returned
// by ListS3BucketObjectsRequest.Validate if the designated constraints aren't met.
type ListS3BucketObjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BucketObjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BucketObjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BucketObjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BucketObjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BucketObjectsRequestValidationError) ErrorName() string {
	return "ListS3BucketObjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BucketObjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BucketObjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BucketObjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BucketObjectsRequestValidationError{}

// Validate checks the field values on ListS3BucketObjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListS3BucketObjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListS3BucketObjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListS3BucketObjectsResponseMultiError, or nil if none found.
func (m *ListS3BucketObjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListS3BucketObjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListS3BucketObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListS3BucketObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListS3BucketObjectsResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListS3BucketObjectsResponseMultiError(errors)
	}

	return nil
}

// ListS3BucketObjectsResponseMultiError is an error wrapping multiple
// validation errors returned by ListS3BucketObjectsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListS3BucketObjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListS3BucketObjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListS3BucketObjectsResponseMultiError) AllErrors() []error { return m }

// ListS3BucketObjectsResponseValidationError is the validation error returned
// by ListS3BucketObjectsResponse.Validate if the designated constraints
// aren't met.
type ListS3BucketObjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListS3BucketObjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListS3BucketObjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListS3BucketObjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListS3BucketObjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListS3BucketObjectsResponseValidationError) ErrorName() string {
	return "ListS3BucketObjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListS3BucketObjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListS3BucketObjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListS3BucketObjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListS3BucketObjectsResponseValidationError{}

// Validate checks the field values on ListGCSBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGCSBucketsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGCSBucketsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGCSBucketsRequestMultiError, or nil if none found.
func (m *ListGCSBucketsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGCSBucketsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListGCSBucketsRequestMultiError(errors)
	}

	return nil
}

// ListGCSBucketsRequestMultiError is an error wrapping multiple validation
// errors returned by ListGCSBucketsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListGCSBucketsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGCSBucketsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGCSBucketsRequestMultiError) AllErrors() []error { return m }

// ListGCSBucketsRequestValidationError is the validation error returned by
// ListGCSBucketsRequest.Validate if the designated constraints aren't met.
type ListGCSBucketsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGCSBucketsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGCSBucketsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGCSBucketsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGCSBucketsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGCSBucketsRequestValidationError) ErrorName() string {
	return "ListGCSBucketsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGCSBucketsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGCSBucketsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGCSBucketsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGCSBucketsRequestValidationError{}

// Validate checks the field values on ListGCSBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGCSBucketsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGCSBucketsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGCSBucketsResponseMultiError, or nil if none found.
func (m *ListGCSBucketsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGCSBucketsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListGCSBucketsResponseMultiError(errors)
	}

	return nil
}

// ListGCSBucketsResponseMultiError is an error wrapping multiple validation
// errors returned by ListGCSBucketsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListGCSBucketsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGCSBucketsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGCSBucketsResponseMultiError) AllErrors() []error { return m }

// ListGCSBucketsResponseValidationError is the validation error returned by
// ListGCSBucketsResponse.Validate if the designated constraints aren't met.
type ListGCSBucketsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGCSBucketsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGCSBucketsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGCSBucketsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGCSBucketsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGCSBucketsResponseValidationError) ErrorName() string {
	return "ListGCSBucketsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGCSBucketsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGCSBucketsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGCSBucketsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGCSBucketsResponseValidationError{}

// Validate checks the field values on ListGCSBucketObjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGCSBucketObjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGCSBucketObjectsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGCSBucketObjectsRequestMultiError, or nil if none found.
func (m *ListGCSBucketObjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGCSBucketObjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	// no validation rules for BucketName

	// no validation rules for Prefix

	// no validation rules for StartOffset

	if len(errors) > 0 {
		return ListGCSBucketObjectsRequestMultiError(errors)
	}

	return nil
}

// ListGCSBucketObjectsRequestMultiError is an error wrapping multiple
// validation errors returned by ListGCSBucketObjectsRequest.ValidateAll() if
// the designated constraints aren't met.
type ListGCSBucketObjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGCSBucketObjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGCSBucketObjectsRequestMultiError) AllErrors() []error { return m }

// ListGCSBucketObjectsRequestValidationError is the validation error returned
// by ListGCSBucketObjectsRequest.Validate if the designated constraints
// aren't met.
type ListGCSBucketObjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGCSBucketObjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGCSBucketObjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGCSBucketObjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGCSBucketObjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGCSBucketObjectsRequestValidationError) ErrorName() string {
	return "ListGCSBucketObjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListGCSBucketObjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGCSBucketObjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGCSBucketObjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGCSBucketObjectsRequestValidationError{}

// Validate checks the field values on ListGCSBucketObjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListGCSBucketObjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListGCSBucketObjectsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListGCSBucketObjectsResponseMultiError, or nil if none found.
func (m *ListGCSBucketObjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListGCSBucketObjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NextPageToken

	for idx, item := range m.GetObjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListGCSBucketObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListGCSBucketObjectsResponseValidationError{
						field:  fmt.Sprintf("Objects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListGCSBucketObjectsResponseValidationError{
					field:  fmt.Sprintf("Objects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListGCSBucketObjectsResponseMultiError(errors)
	}

	return nil
}

// ListGCSBucketObjectsResponseMultiError is an error wrapping multiple
// validation errors returned by ListGCSBucketObjectsResponse.ValidateAll() if
// the designated constraints aren't met.
type ListGCSBucketObjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListGCSBucketObjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListGCSBucketObjectsResponseMultiError) AllErrors() []error { return m }

// ListGCSBucketObjectsResponseValidationError is the validation error returned
// by ListGCSBucketObjectsResponse.Validate if the designated constraints
// aren't met.
type ListGCSBucketObjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListGCSBucketObjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListGCSBucketObjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListGCSBucketObjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListGCSBucketObjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListGCSBucketObjectsResponseValidationError) ErrorName() string {
	return "ListGCSBucketObjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListGCSBucketObjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListGCSBucketObjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListGCSBucketObjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListGCSBucketObjectsResponseValidationError{}

// Validate checks the field values on S3Object with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *S3Object) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on S3Object with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in S3ObjectMultiError, or nil
// if none found.
func (m *S3Object) ValidateAll() error {
	return m.validate(true)
}

func (m *S3Object) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetModifiedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, S3ObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, S3ObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return S3ObjectValidationError{
				field:  "ModifiedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	// no validation rules for IsDir

	if len(errors) > 0 {
		return S3ObjectMultiError(errors)
	}

	return nil
}

// S3ObjectMultiError is an error wrapping multiple validation errors returned
// by S3Object.ValidateAll() if the designated constraints aren't met.
type S3ObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m S3ObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m S3ObjectMultiError) AllErrors() []error { return m }

// S3ObjectValidationError is the validation error returned by
// S3Object.Validate if the designated constraints aren't met.
type S3ObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e S3ObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e S3ObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e S3ObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e S3ObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e S3ObjectValidationError) ErrorName() string { return "S3ObjectValidationError" }

// Error satisfies the builtin error interface
func (e S3ObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sS3Object.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = S3ObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = S3ObjectValidationError{}

// Validate checks the field values on GCSObject with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GCSObject) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GCSObject with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GCSObjectMultiError, or nil
// if none found.
func (m *GCSObject) ValidateAll() error {
	return m.validate(true)
}

func (m *GCSObject) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetModifiedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GCSObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GCSObjectValidationError{
					field:  "ModifiedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetModifiedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GCSObjectValidationError{
				field:  "ModifiedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Size

	// no validation rules for IsDir

	if len(errors) > 0 {
		return GCSObjectMultiError(errors)
	}

	return nil
}

// GCSObjectMultiError is an error wrapping multiple validation errors returned
// by GCSObject.ValidateAll() if the designated constraints aren't met.
type GCSObjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GCSObjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GCSObjectMultiError) AllErrors() []error { return m }

// GCSObjectValidationError is the validation error returned by
// GCSObject.Validate if the designated constraints aren't met.
type GCSObjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GCSObjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GCSObjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GCSObjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GCSObjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GCSObjectValidationError) ErrorName() string { return "GCSObjectValidationError" }

// Error satisfies the builtin error interface
func (e GCSObjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGCSObject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GCSObjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GCSObjectValidationError{}
