// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: rill/runtime/v1/api.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RuntimeService_Ping_FullMethodName                    = "/rill.runtime.v1.RuntimeService/Ping"
	RuntimeService_ListInstances_FullMethodName           = "/rill.runtime.v1.RuntimeService/ListInstances"
	RuntimeService_GetInstance_FullMethodName             = "/rill.runtime.v1.RuntimeService/GetInstance"
	RuntimeService_CreateInstance_FullMethodName          = "/rill.runtime.v1.RuntimeService/CreateInstance"
	RuntimeService_EditInstance_FullMethodName            = "/rill.runtime.v1.RuntimeService/EditInstance"
	RuntimeService_EditInstanceVariables_FullMethodName   = "/rill.runtime.v1.RuntimeService/EditInstanceVariables"
	RuntimeService_EditInstanceAnnotations_FullMethodName = "/rill.runtime.v1.RuntimeService/EditInstanceAnnotations"
	RuntimeService_DeleteInstance_FullMethodName          = "/rill.runtime.v1.RuntimeService/DeleteInstance"
	RuntimeService_ListFiles_FullMethodName               = "/rill.runtime.v1.RuntimeService/ListFiles"
	RuntimeService_WatchFiles_FullMethodName              = "/rill.runtime.v1.RuntimeService/WatchFiles"
	RuntimeService_GetFile_FullMethodName                 = "/rill.runtime.v1.RuntimeService/GetFile"
	RuntimeService_PutFile_FullMethodName                 = "/rill.runtime.v1.RuntimeService/PutFile"
	RuntimeService_DeleteFile_FullMethodName              = "/rill.runtime.v1.RuntimeService/DeleteFile"
	RuntimeService_RenameFile_FullMethodName              = "/rill.runtime.v1.RuntimeService/RenameFile"
	RuntimeService_ListExamples_FullMethodName            = "/rill.runtime.v1.RuntimeService/ListExamples"
	RuntimeService_UnpackExample_FullMethodName           = "/rill.runtime.v1.RuntimeService/UnpackExample"
	RuntimeService_UnpackEmpty_FullMethodName             = "/rill.runtime.v1.RuntimeService/UnpackEmpty"
	RuntimeService_GetLogs_FullMethodName                 = "/rill.runtime.v1.RuntimeService/GetLogs"
	RuntimeService_WatchLogs_FullMethodName               = "/rill.runtime.v1.RuntimeService/WatchLogs"
	RuntimeService_ListResources_FullMethodName           = "/rill.runtime.v1.RuntimeService/ListResources"
	RuntimeService_WatchResources_FullMethodName          = "/rill.runtime.v1.RuntimeService/WatchResources"
	RuntimeService_GetResource_FullMethodName             = "/rill.runtime.v1.RuntimeService/GetResource"
	RuntimeService_CreateTrigger_FullMethodName           = "/rill.runtime.v1.RuntimeService/CreateTrigger"
	RuntimeService_ListCatalogEntries_FullMethodName      = "/rill.runtime.v1.RuntimeService/ListCatalogEntries"
	RuntimeService_GetCatalogEntry_FullMethodName         = "/rill.runtime.v1.RuntimeService/GetCatalogEntry"
	RuntimeService_TriggerRefresh_FullMethodName          = "/rill.runtime.v1.RuntimeService/TriggerRefresh"
	RuntimeService_TriggerSync_FullMethodName             = "/rill.runtime.v1.RuntimeService/TriggerSync"
	RuntimeService_Reconcile_FullMethodName               = "/rill.runtime.v1.RuntimeService/Reconcile"
	RuntimeService_PutFileAndReconcile_FullMethodName     = "/rill.runtime.v1.RuntimeService/PutFileAndReconcile"
	RuntimeService_DeleteFileAndReconcile_FullMethodName  = "/rill.runtime.v1.RuntimeService/DeleteFileAndReconcile"
	RuntimeService_RenameFileAndReconcile_FullMethodName  = "/rill.runtime.v1.RuntimeService/RenameFileAndReconcile"
	RuntimeService_RefreshAndReconcile_FullMethodName     = "/rill.runtime.v1.RuntimeService/RefreshAndReconcile"
	RuntimeService_ListConnectors_FullMethodName          = "/rill.runtime.v1.RuntimeService/ListConnectors"
	RuntimeService_IssueDevJWT_FullMethodName             = "/rill.runtime.v1.RuntimeService/IssueDevJWT"
)

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	// Ping returns information about the runtime
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// GetInstance returns information about a specific instance
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// CreateInstance creates a new instance
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	// EditInstance edits an existing instance
	EditInstance(ctx context.Context, in *EditInstanceRequest, opts ...grpc.CallOption) (*EditInstanceResponse, error)
	// EditInstanceVariables edits the instance variable
	EditInstanceVariables(ctx context.Context, in *EditInstanceVariablesRequest, opts ...grpc.CallOption) (*EditInstanceVariablesResponse, error)
	// EditInstanceAnnotations edits the instance annotations
	EditInstanceAnnotations(ctx context.Context, in *EditInstanceAnnotationsRequest, opts ...grpc.CallOption) (*EditInstanceAnnotationsResponse, error)
	// DeleteInstance deletes an instance
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// WatchFiles streams repo file update events. It is not supported on all backends.
	WatchFiles(ctx context.Context, in *WatchFilesRequest, opts ...grpc.CallOption) (RuntimeService_WatchFilesClient, error)
	// GetFile returns the contents of a specific file in a repo.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// PutFile creates or updates a file in a repo
	PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error)
	// DeleteFile deletes a file from a repo
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// RenameFile renames a file in a repo
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	// ListExamples lists all the examples embedded into binary
	ListExamples(ctx context.Context, in *ListExamplesRequest, opts ...grpc.CallOption) (*ListExamplesResponse, error)
	// UnpackExample unpacks an example project
	UnpackExample(ctx context.Context, in *UnpackExampleRequest, opts ...grpc.CallOption) (*UnpackExampleResponse, error)
	// UnpackEmpty unpacks an empty project
	UnpackEmpty(ctx context.Context, in *UnpackEmptyRequest, opts ...grpc.CallOption) (*UnpackEmptyResponse, error)
	// GetLogs returns recent logs from a controller
	GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error)
	// WatchLogs streams new logs emitted from a controller
	WatchLogs(ctx context.Context, in *WatchLogsRequest, opts ...grpc.CallOption) (RuntimeService_WatchLogsClient, error)
	// ListResources lists the resources stored in the catalog
	ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error)
	// WatchResources streams updates to catalog resources (including creation and deletion events)
	WatchResources(ctx context.Context, in *WatchResourcesRequest, opts ...grpc.CallOption) (RuntimeService_WatchResourcesClient, error)
	// GetResource looks up a specific catalog resource
	GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error)
	// CreateTrigger creates a trigger in the catalog.
	// Triggers are ephemeral resources that will be cleaned up by the controller.
	CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...grpc.CallOption) (*CreateTriggerResponse, error)
	// ListCatalogEntries lists all the entries registered in an instance's catalog (like tables, sources or metrics views)
	ListCatalogEntries(ctx context.Context, in *ListCatalogEntriesRequest, opts ...grpc.CallOption) (*ListCatalogEntriesResponse, error)
	// GetCatalogEntry returns information about a specific entry in the catalog
	GetCatalogEntry(ctx context.Context, in *GetCatalogEntryRequest, opts ...grpc.CallOption) (*GetCatalogEntryResponse, error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(ctx context.Context, in *TriggerRefreshRequest, opts ...grpc.CallOption) (*TriggerRefreshResponse, error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error)
	// Reconcile applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*ReconcileResponse, error)
	// PutFileAndReconcile combines PutFile and Reconcile in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndReconcile(ctx context.Context, in *PutFileAndReconcileRequest, opts ...grpc.CallOption) (*PutFileAndReconcileResponse, error)
	// DeleteFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	DeleteFileAndReconcile(ctx context.Context, in *DeleteFileAndReconcileRequest, opts ...grpc.CallOption) (*DeleteFileAndReconcileResponse, error)
	// RenameFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	RenameFileAndReconcile(ctx context.Context, in *RenameFileAndReconcileRequest, opts ...grpc.CallOption) (*RenameFileAndReconcileResponse, error)
	RefreshAndReconcile(ctx context.Context, in *RefreshAndReconcileRequest, opts ...grpc.CallOption) (*RefreshAndReconcileResponse, error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
	IssueDevJWT(ctx context.Context, in *IssueDevJWTRequest, opts ...grpc.CallOption) (*IssueDevJWTResponse, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, RuntimeService_Ping_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListInstances_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, RuntimeService_CreateInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EditInstance(ctx context.Context, in *EditInstanceRequest, opts ...grpc.CallOption) (*EditInstanceResponse, error) {
	out := new(EditInstanceResponse)
	err := c.cc.Invoke(ctx, RuntimeService_EditInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EditInstanceVariables(ctx context.Context, in *EditInstanceVariablesRequest, opts ...grpc.CallOption) (*EditInstanceVariablesResponse, error) {
	out := new(EditInstanceVariablesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_EditInstanceVariables_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EditInstanceAnnotations(ctx context.Context, in *EditInstanceAnnotationsRequest, opts ...grpc.CallOption) (*EditInstanceAnnotationsResponse, error) {
	out := new(EditInstanceAnnotationsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_EditInstanceAnnotations_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteInstance_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListFiles_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) WatchFiles(ctx context.Context, in *WatchFilesRequest, opts ...grpc.CallOption) (RuntimeService_WatchFilesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[0], RuntimeService_WatchFiles_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceWatchFilesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_WatchFilesClient interface {
	Recv() (*WatchFilesResponse, error)
	grpc.ClientStream
}

type runtimeServiceWatchFilesClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceWatchFilesClient) Recv() (*WatchFilesResponse, error) {
	m := new(WatchFilesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error) {
	out := new(PutFileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_PutFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_RenameFile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListExamples(ctx context.Context, in *ListExamplesRequest, opts ...grpc.CallOption) (*ListExamplesResponse, error) {
	out := new(ListExamplesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListExamples_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UnpackExample(ctx context.Context, in *UnpackExampleRequest, opts ...grpc.CallOption) (*UnpackExampleResponse, error) {
	out := new(UnpackExampleResponse)
	err := c.cc.Invoke(ctx, RuntimeService_UnpackExample_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) UnpackEmpty(ctx context.Context, in *UnpackEmptyRequest, opts ...grpc.CallOption) (*UnpackEmptyResponse, error) {
	out := new(UnpackEmptyResponse)
	err := c.cc.Invoke(ctx, RuntimeService_UnpackEmpty_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetLogs(ctx context.Context, in *GetLogsRequest, opts ...grpc.CallOption) (*GetLogsResponse, error) {
	out := new(GetLogsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetLogs_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) WatchLogs(ctx context.Context, in *WatchLogsRequest, opts ...grpc.CallOption) (RuntimeService_WatchLogsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[1], RuntimeService_WatchLogs_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceWatchLogsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_WatchLogsClient interface {
	Recv() (*WatchLogsResponse, error)
	grpc.ClientStream
}

type runtimeServiceWatchLogsClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceWatchLogsClient) Recv() (*WatchLogsResponse, error) {
	m := new(WatchLogsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) ListResources(ctx context.Context, in *ListResourcesRequest, opts ...grpc.CallOption) (*ListResourcesResponse, error) {
	out := new(ListResourcesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListResources_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) WatchResources(ctx context.Context, in *WatchResourcesRequest, opts ...grpc.CallOption) (RuntimeService_WatchResourcesClient, error) {
	stream, err := c.cc.NewStream(ctx, &RuntimeService_ServiceDesc.Streams[2], RuntimeService_WatchResources_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &runtimeServiceWatchResourcesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RuntimeService_WatchResourcesClient interface {
	Recv() (*WatchResourcesResponse, error)
	grpc.ClientStream
}

type runtimeServiceWatchResourcesClient struct {
	grpc.ClientStream
}

func (x *runtimeServiceWatchResourcesClient) Recv() (*WatchResourcesResponse, error) {
	m := new(WatchResourcesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *runtimeServiceClient) GetResource(ctx context.Context, in *GetResourceRequest, opts ...grpc.CallOption) (*GetResourceResponse, error) {
	out := new(GetResourceResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetResource_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateTrigger(ctx context.Context, in *CreateTriggerRequest, opts ...grpc.CallOption) (*CreateTriggerResponse, error) {
	out := new(CreateTriggerResponse)
	err := c.cc.Invoke(ctx, RuntimeService_CreateTrigger_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListCatalogEntries(ctx context.Context, in *ListCatalogEntriesRequest, opts ...grpc.CallOption) (*ListCatalogEntriesResponse, error) {
	out := new(ListCatalogEntriesResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListCatalogEntries_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetCatalogEntry(ctx context.Context, in *GetCatalogEntryRequest, opts ...grpc.CallOption) (*GetCatalogEntryResponse, error) {
	out := new(GetCatalogEntryResponse)
	err := c.cc.Invoke(ctx, RuntimeService_GetCatalogEntry_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) TriggerRefresh(ctx context.Context, in *TriggerRefreshRequest, opts ...grpc.CallOption) (*TriggerRefreshResponse, error) {
	out := new(TriggerRefreshResponse)
	err := c.cc.Invoke(ctx, RuntimeService_TriggerRefresh_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error) {
	out := new(TriggerSyncResponse)
	err := c.cc.Invoke(ctx, RuntimeService_TriggerSync_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Reconcile(ctx context.Context, in *ReconcileRequest, opts ...grpc.CallOption) (*ReconcileResponse, error) {
	out := new(ReconcileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_Reconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) PutFileAndReconcile(ctx context.Context, in *PutFileAndReconcileRequest, opts ...grpc.CallOption) (*PutFileAndReconcileResponse, error) {
	out := new(PutFileAndReconcileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_PutFileAndReconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteFileAndReconcile(ctx context.Context, in *DeleteFileAndReconcileRequest, opts ...grpc.CallOption) (*DeleteFileAndReconcileResponse, error) {
	out := new(DeleteFileAndReconcileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_DeleteFileAndReconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RenameFileAndReconcile(ctx context.Context, in *RenameFileAndReconcileRequest, opts ...grpc.CallOption) (*RenameFileAndReconcileResponse, error) {
	out := new(RenameFileAndReconcileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_RenameFileAndReconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RefreshAndReconcile(ctx context.Context, in *RefreshAndReconcileRequest, opts ...grpc.CallOption) (*RefreshAndReconcileResponse, error) {
	out := new(RefreshAndReconcileResponse)
	err := c.cc.Invoke(ctx, RuntimeService_RefreshAndReconcile_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, RuntimeService_ListConnectors_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) IssueDevJWT(ctx context.Context, in *IssueDevJWTRequest, opts ...grpc.CallOption) (*IssueDevJWTResponse, error) {
	out := new(IssueDevJWTResponse)
	err := c.cc.Invoke(ctx, RuntimeService_IssueDevJWT_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	// Ping returns information about the runtime
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// GetInstance returns information about a specific instance
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// CreateInstance creates a new instance
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	// EditInstance edits an existing instance
	EditInstance(context.Context, *EditInstanceRequest) (*EditInstanceResponse, error)
	// EditInstanceVariables edits the instance variable
	EditInstanceVariables(context.Context, *EditInstanceVariablesRequest) (*EditInstanceVariablesResponse, error)
	// EditInstanceAnnotations edits the instance annotations
	EditInstanceAnnotations(context.Context, *EditInstanceAnnotationsRequest) (*EditInstanceAnnotationsResponse, error)
	// DeleteInstance deletes an instance
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// WatchFiles streams repo file update events. It is not supported on all backends.
	WatchFiles(*WatchFilesRequest, RuntimeService_WatchFilesServer) error
	// GetFile returns the contents of a specific file in a repo.
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// PutFile creates or updates a file in a repo
	PutFile(context.Context, *PutFileRequest) (*PutFileResponse, error)
	// DeleteFile deletes a file from a repo
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// RenameFile renames a file in a repo
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	// ListExamples lists all the examples embedded into binary
	ListExamples(context.Context, *ListExamplesRequest) (*ListExamplesResponse, error)
	// UnpackExample unpacks an example project
	UnpackExample(context.Context, *UnpackExampleRequest) (*UnpackExampleResponse, error)
	// UnpackEmpty unpacks an empty project
	UnpackEmpty(context.Context, *UnpackEmptyRequest) (*UnpackEmptyResponse, error)
	// GetLogs returns recent logs from a controller
	GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error)
	// WatchLogs streams new logs emitted from a controller
	WatchLogs(*WatchLogsRequest, RuntimeService_WatchLogsServer) error
	// ListResources lists the resources stored in the catalog
	ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error)
	// WatchResources streams updates to catalog resources (including creation and deletion events)
	WatchResources(*WatchResourcesRequest, RuntimeService_WatchResourcesServer) error
	// GetResource looks up a specific catalog resource
	GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error)
	// CreateTrigger creates a trigger in the catalog.
	// Triggers are ephemeral resources that will be cleaned up by the controller.
	CreateTrigger(context.Context, *CreateTriggerRequest) (*CreateTriggerResponse, error)
	// ListCatalogEntries lists all the entries registered in an instance's catalog (like tables, sources or metrics views)
	ListCatalogEntries(context.Context, *ListCatalogEntriesRequest) (*ListCatalogEntriesResponse, error)
	// GetCatalogEntry returns information about a specific entry in the catalog
	GetCatalogEntry(context.Context, *GetCatalogEntryRequest) (*GetCatalogEntryResponse, error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(context.Context, *TriggerRefreshRequest) (*TriggerRefreshResponse, error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error)
	// Reconcile applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Reconcile(context.Context, *ReconcileRequest) (*ReconcileResponse, error)
	// PutFileAndReconcile combines PutFile and Reconcile in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndReconcile(context.Context, *PutFileAndReconcileRequest) (*PutFileAndReconcileResponse, error)
	// DeleteFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	DeleteFileAndReconcile(context.Context, *DeleteFileAndReconcileRequest) (*DeleteFileAndReconcileResponse, error)
	// RenameFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
	RenameFileAndReconcile(context.Context, *RenameFileAndReconcileRequest) (*RenameFileAndReconcileResponse, error)
	RefreshAndReconcile(context.Context, *RefreshAndReconcileRequest) (*RefreshAndReconcileResponse, error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	IssueDevJWT(context.Context, *IssueDevJWTRequest) (*IssueDevJWTResponse, error)
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRuntimeServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedRuntimeServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) EditInstance(context.Context, *EditInstanceRequest) (*EditInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) EditInstanceVariables(context.Context, *EditInstanceVariablesRequest) (*EditInstanceVariablesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInstanceVariables not implemented")
}
func (UnimplementedRuntimeServiceServer) EditInstanceAnnotations(context.Context, *EditInstanceAnnotationsRequest) (*EditInstanceAnnotationsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditInstanceAnnotations not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedRuntimeServiceServer) WatchFiles(*WatchFilesRequest, RuntimeService_WatchFilesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchFiles not implemented")
}
func (UnimplementedRuntimeServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedRuntimeServiceServer) PutFile(context.Context, *PutFileRequest) (*PutFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedRuntimeServiceServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedRuntimeServiceServer) ListExamples(context.Context, *ListExamplesRequest) (*ListExamplesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListExamples not implemented")
}
func (UnimplementedRuntimeServiceServer) UnpackExample(context.Context, *UnpackExampleRequest) (*UnpackExampleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpackExample not implemented")
}
func (UnimplementedRuntimeServiceServer) UnpackEmpty(context.Context, *UnpackEmptyRequest) (*UnpackEmptyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnpackEmpty not implemented")
}
func (UnimplementedRuntimeServiceServer) GetLogs(context.Context, *GetLogsRequest) (*GetLogsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLogs not implemented")
}
func (UnimplementedRuntimeServiceServer) WatchLogs(*WatchLogsRequest, RuntimeService_WatchLogsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchLogs not implemented")
}
func (UnimplementedRuntimeServiceServer) ListResources(context.Context, *ListResourcesRequest) (*ListResourcesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListResources not implemented")
}
func (UnimplementedRuntimeServiceServer) WatchResources(*WatchResourcesRequest, RuntimeService_WatchResourcesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchResources not implemented")
}
func (UnimplementedRuntimeServiceServer) GetResource(context.Context, *GetResourceRequest) (*GetResourceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetResource not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateTrigger(context.Context, *CreateTriggerRequest) (*CreateTriggerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTrigger not implemented")
}
func (UnimplementedRuntimeServiceServer) ListCatalogEntries(context.Context, *ListCatalogEntriesRequest) (*ListCatalogEntriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogEntries not implemented")
}
func (UnimplementedRuntimeServiceServer) GetCatalogEntry(context.Context, *GetCatalogEntryRequest) (*GetCatalogEntryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogEntry not implemented")
}
func (UnimplementedRuntimeServiceServer) TriggerRefresh(context.Context, *TriggerRefreshRequest) (*TriggerRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRefresh not implemented")
}
func (UnimplementedRuntimeServiceServer) TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSync not implemented")
}
func (UnimplementedRuntimeServiceServer) Reconcile(context.Context, *ReconcileRequest) (*ReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Reconcile not implemented")
}
func (UnimplementedRuntimeServiceServer) PutFileAndReconcile(context.Context, *PutFileAndReconcileRequest) (*PutFileAndReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileAndReconcile not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteFileAndReconcile(context.Context, *DeleteFileAndReconcileRequest) (*DeleteFileAndReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileAndReconcile not implemented")
}
func (UnimplementedRuntimeServiceServer) RenameFileAndReconcile(context.Context, *RenameFileAndReconcileRequest) (*RenameFileAndReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFileAndReconcile not implemented")
}
func (UnimplementedRuntimeServiceServer) RefreshAndReconcile(context.Context, *RefreshAndReconcileRequest) (*RefreshAndReconcileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshAndReconcile not implemented")
}
func (UnimplementedRuntimeServiceServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedRuntimeServiceServer) IssueDevJWT(context.Context, *IssueDevJWTRequest) (*IssueDevJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IssueDevJWT not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListInstances_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_CreateInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EditInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EditInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_EditInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EditInstance(ctx, req.(*EditInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EditInstanceVariables_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInstanceVariablesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EditInstanceVariables(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_EditInstanceVariables_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EditInstanceVariables(ctx, req.(*EditInstanceVariablesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EditInstanceAnnotations_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditInstanceAnnotationsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EditInstanceAnnotations(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_EditInstanceAnnotations_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EditInstanceAnnotations(ctx, req.(*EditInstanceAnnotationsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteInstance_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListFiles_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_WatchFiles_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchFilesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).WatchFiles(m, &runtimeServiceWatchFilesServer{stream})
}

type RuntimeService_WatchFilesServer interface {
	Send(*WatchFilesResponse) error
	grpc.ServerStream
}

type runtimeServiceWatchFilesServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceWatchFilesServer) Send(m *WatchFilesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_PutFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).PutFile(ctx, req.(*PutFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RenameFile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListExamples_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListExamplesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListExamples(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListExamples_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListExamples(ctx, req.(*ListExamplesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UnpackExample_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpackExampleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UnpackExample(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UnpackExample_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UnpackExample(ctx, req.(*UnpackExampleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_UnpackEmpty_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnpackEmptyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).UnpackEmpty(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_UnpackEmpty_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).UnpackEmpty(ctx, req.(*UnpackEmptyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetLogs_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLogsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetLogs(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetLogs_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetLogs(ctx, req.(*GetLogsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_WatchLogs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchLogsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).WatchLogs(m, &runtimeServiceWatchLogsServer{stream})
}

type RuntimeService_WatchLogsServer interface {
	Send(*WatchLogsResponse) error
	grpc.ServerStream
}

type runtimeServiceWatchLogsServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceWatchLogsServer) Send(m *WatchLogsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_ListResources_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListResourcesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListResources(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListResources_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListResources(ctx, req.(*ListResourcesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_WatchResources_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchResourcesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RuntimeServiceServer).WatchResources(m, &runtimeServiceWatchResourcesServer{stream})
}

type RuntimeService_WatchResourcesServer interface {
	Send(*WatchResourcesResponse) error
	grpc.ServerStream
}

type runtimeServiceWatchResourcesServer struct {
	grpc.ServerStream
}

func (x *runtimeServiceWatchResourcesServer) Send(m *WatchResourcesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RuntimeService_GetResource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetResourceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetResource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetResource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetResource(ctx, req.(*GetResourceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateTrigger_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTriggerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateTrigger(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_CreateTrigger_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateTrigger(ctx, req.(*CreateTriggerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListCatalogEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListCatalogEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListCatalogEntries_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListCatalogEntries(ctx, req.(*ListCatalogEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetCatalogEntry_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogEntryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetCatalogEntry(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_GetCatalogEntry_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetCatalogEntry(ctx, req.(*GetCatalogEntryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_TriggerRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).TriggerRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_TriggerRefresh_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).TriggerRefresh(ctx, req.(*TriggerRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_TriggerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).TriggerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_TriggerSync_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).TriggerSync(ctx, req.(*TriggerSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Reconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Reconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_Reconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Reconcile(ctx, req.(*ReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_PutFileAndReconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileAndReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).PutFileAndReconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_PutFileAndReconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).PutFileAndReconcile(ctx, req.(*PutFileAndReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteFileAndReconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileAndReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteFileAndReconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_DeleteFileAndReconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteFileAndReconcile(ctx, req.(*DeleteFileAndReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RenameFileAndReconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileAndReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RenameFileAndReconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RenameFileAndReconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RenameFileAndReconcile(ctx, req.(*RenameFileAndReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RefreshAndReconcile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshAndReconcileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RefreshAndReconcile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_RefreshAndReconcile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RefreshAndReconcile(ctx, req.(*RefreshAndReconcileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_ListConnectors_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_IssueDevJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IssueDevJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).IssueDevJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: RuntimeService_IssueDevJWT_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).IssueDevJWT(ctx, req.(*IssueDevJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.runtime.v1.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RuntimeService_Ping_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _RuntimeService_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _RuntimeService_GetInstance_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _RuntimeService_CreateInstance_Handler,
		},
		{
			MethodName: "EditInstance",
			Handler:    _RuntimeService_EditInstance_Handler,
		},
		{
			MethodName: "EditInstanceVariables",
			Handler:    _RuntimeService_EditInstanceVariables_Handler,
		},
		{
			MethodName: "EditInstanceAnnotations",
			Handler:    _RuntimeService_EditInstanceAnnotations_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _RuntimeService_DeleteInstance_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _RuntimeService_ListFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _RuntimeService_GetFile_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _RuntimeService_PutFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RuntimeService_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _RuntimeService_RenameFile_Handler,
		},
		{
			MethodName: "ListExamples",
			Handler:    _RuntimeService_ListExamples_Handler,
		},
		{
			MethodName: "UnpackExample",
			Handler:    _RuntimeService_UnpackExample_Handler,
		},
		{
			MethodName: "UnpackEmpty",
			Handler:    _RuntimeService_UnpackEmpty_Handler,
		},
		{
			MethodName: "GetLogs",
			Handler:    _RuntimeService_GetLogs_Handler,
		},
		{
			MethodName: "ListResources",
			Handler:    _RuntimeService_ListResources_Handler,
		},
		{
			MethodName: "GetResource",
			Handler:    _RuntimeService_GetResource_Handler,
		},
		{
			MethodName: "CreateTrigger",
			Handler:    _RuntimeService_CreateTrigger_Handler,
		},
		{
			MethodName: "ListCatalogEntries",
			Handler:    _RuntimeService_ListCatalogEntries_Handler,
		},
		{
			MethodName: "GetCatalogEntry",
			Handler:    _RuntimeService_GetCatalogEntry_Handler,
		},
		{
			MethodName: "TriggerRefresh",
			Handler:    _RuntimeService_TriggerRefresh_Handler,
		},
		{
			MethodName: "TriggerSync",
			Handler:    _RuntimeService_TriggerSync_Handler,
		},
		{
			MethodName: "Reconcile",
			Handler:    _RuntimeService_Reconcile_Handler,
		},
		{
			MethodName: "PutFileAndReconcile",
			Handler:    _RuntimeService_PutFileAndReconcile_Handler,
		},
		{
			MethodName: "DeleteFileAndReconcile",
			Handler:    _RuntimeService_DeleteFileAndReconcile_Handler,
		},
		{
			MethodName: "RenameFileAndReconcile",
			Handler:    _RuntimeService_RenameFileAndReconcile_Handler,
		},
		{
			MethodName: "RefreshAndReconcile",
			Handler:    _RuntimeService_RefreshAndReconcile_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _RuntimeService_ListConnectors_Handler,
		},
		{
			MethodName: "IssueDevJWT",
			Handler:    _RuntimeService_IssueDevJWT_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFiles",
			Handler:       _RuntimeService_WatchFiles_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchLogs",
			Handler:       _RuntimeService_WatchLogs_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "WatchResources",
			Handler:       _RuntimeService_WatchResources_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rill/runtime/v1/api.proto",
}
