// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rill/runtime/v1/api.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RuntimeServiceClient is the client API for RuntimeService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RuntimeServiceClient interface {
	// Ping returns information about the runtime
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
	// ListRepos lists all the repos currently managed by the runtime
	ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error)
	// GetRepo returns info about a specific repo
	GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error)
	// CreateRepo creates a new repo. See the Repo message for an explanation of repos.
	CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error)
	// DeleteRepo deletes a repo
	DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*DeleteRepoResponse, error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error)
	// GetFile returns the contents of a specific file in a repo.
	GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error)
	// PutFile creates or updates a file in a repo
	PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error)
	// DeleteFile deletes a file from a repo
	DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error)
	// RenameFile renames a file in a repo
	RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error)
	// GetInstance returns information about a specific instance
	GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error)
	// CreateInstance creates a new instance
	CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error)
	// DeleteInstance deletes an instance
	DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error)
	// ListCatalogObjects lists all the objects (like tables, sources or metrics views) registered in an instance's catalog
	ListCatalogObjects(ctx context.Context, in *ListCatalogObjectsRequest, opts ...grpc.CallOption) (*ListCatalogObjectsResponse, error)
	// GetCatalogObject returns information about a specific object in the catalog
	GetCatalogObject(ctx context.Context, in *GetCatalogObjectRequest, opts ...grpc.CallOption) (*GetCatalogObjectResponse, error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(ctx context.Context, in *TriggerRefreshRequest, opts ...grpc.CallOption) (*TriggerRefreshResponse, error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error)
	// Migrate applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error)
	// PutFileAndMigrate combines PutFile and Migrate in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndMigrate(ctx context.Context, in *PutFileAndMigrateRequest, opts ...grpc.CallOption) (*PutFileAndMigrateResponse, error)
	// DeleteFileAndMigrate combines RenameFile and Migrate in a single endpoint to reduce latency.
	DeleteFileAndMigrate(ctx context.Context, in *DeleteFileAndMigrateRequest, opts ...grpc.CallOption) (*DeleteFileAndMigrateResponse, error)
	// RenameFileAndMigrate combines RenameFile and Migrate in a single endpoint to reduce latency.
	RenameFileAndMigrate(ctx context.Context, in *RenameFileAndMigrateRequest, opts ...grpc.CallOption) (*RenameFileAndMigrateResponse, error)
	// DEPRECATED: MigrateSingle applies a single `CREATE` statement.
	// It bypasses the reconciling migrations described in Migrate.
	// We aim to deprecate this function once reconciling migrations are mature and adopted in the modeller.
	MigrateSingle(ctx context.Context, in *MigrateSingleRequest, opts ...grpc.CallOption) (*MigrateSingleResponse, error)
	// DEPRECATED: MigrateDelete deletes a single object.
	// It bypasses the reconciling migrations described in Migrate.
	// We aim to deprecate this function once reconciling migrations are mature and adopted in the modeller.
	MigrateDelete(ctx context.Context, in *MigrateDeleteRequest, opts ...grpc.CallOption) (*MigrateDeleteResponse, error)
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// DEPRECATED: QueryDirect runs a SQL query by directly executing it against the instance's OLAP datastore.
	QueryDirect(ctx context.Context, in *QueryDirectRequest, opts ...grpc.CallOption) (*QueryDirectResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error)
	// EstimateRollupInterval (TODO: add description)
	EstimateRollupInterval(ctx context.Context, in *EstimateRollupIntervalRequest, opts ...grpc.CallOption) (*EstimateRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	GetTopK(ctx context.Context, in *GetTopKRequest, opts ...grpc.CallOption) (*GetTopKResponse, error)
	// Get the number of nulls in a column
	GetNullCount(ctx context.Context, in *GetNullCountRequest, opts ...grpc.CallOption) (*GetNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	GetDescriptiveStatistics(ctx context.Context, in *GetDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*GetDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	EstimateSmallestTimeGrain(ctx context.Context, in *EstimateSmallestTimeGrainRequest, opts ...grpc.CallOption) (*EstimateSmallestTimeGrainResponse, error)
	// Get the histogram for values in a column
	GetNumericHistogram(ctx context.Context, in *GetNumericHistogramRequest, opts ...grpc.CallOption) (*GetNumericHistogramResponse, error)
	// Get outliers for a numeric column
	GetRugHistogram(ctx context.Context, in *GetRugHistogramRequest, opts ...grpc.CallOption) (*GetRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	GetTimeRangeSummary(ctx context.Context, in *GetTimeRangeSummaryRequest, opts ...grpc.CallOption) (*GetTimeRangeSummaryResponse, error)
	// Get cardinality for a column
	GetCardinalityOfColumn(ctx context.Context, in *GetCardinalityOfColumnRequest, opts ...grpc.CallOption) (*GetCardinalityOfColumnResponse, error)
	// Generate time series
	GenerateTimeSeries(ctx context.Context, in *GenerateTimeSeriesRequest, opts ...grpc.CallOption) (*GenerateTimeSeriesResponse, error)
	// TableCardinality (TODO: add description)
	GetTableCardinality(ctx context.Context, in *GetTableCardinalityRequest, opts ...grpc.CallOption) (*GetTableCardinalityResponse, error)
	// ProfileColumns (TODO: add description)
	ProfileColumns(ctx context.Context, in *ProfileColumnsRequest, opts ...grpc.CallOption) (*ProfileColumnsResponse, error)
	// TableRows (TODO: add description)
	GetTableRows(ctx context.Context, in *GetTableRowsRequest, opts ...grpc.CallOption) (*GetTableRowsResponse, error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error)
}

type runtimeServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewRuntimeServiceClient(cc grpc.ClientConnInterface) RuntimeServiceClient {
	return &runtimeServiceClient{cc}
}

func (c *runtimeServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListRepos(ctx context.Context, in *ListReposRequest, opts ...grpc.CallOption) (*ListReposResponse, error) {
	out := new(ListReposResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ListRepos", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetRepo(ctx context.Context, in *GetRepoRequest, opts ...grpc.CallOption) (*GetRepoResponse, error) {
	out := new(GetRepoResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateRepo(ctx context.Context, in *CreateRepoRequest, opts ...grpc.CallOption) (*CreateRepoResponse, error) {
	out := new(CreateRepoResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/CreateRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteRepo(ctx context.Context, in *DeleteRepoRequest, opts ...grpc.CallOption) (*DeleteRepoResponse, error) {
	out := new(DeleteRepoResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/DeleteRepo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListFiles(ctx context.Context, in *ListFilesRequest, opts ...grpc.CallOption) (*ListFilesResponse, error) {
	out := new(ListFilesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ListFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetFile(ctx context.Context, in *GetFileRequest, opts ...grpc.CallOption) (*GetFileResponse, error) {
	out := new(GetFileResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) PutFile(ctx context.Context, in *PutFileRequest, opts ...grpc.CallOption) (*PutFileResponse, error) {
	out := new(PutFileResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/PutFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteFile(ctx context.Context, in *DeleteFileRequest, opts ...grpc.CallOption) (*DeleteFileResponse, error) {
	out := new(DeleteFileResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/DeleteFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RenameFile(ctx context.Context, in *RenameFileRequest, opts ...grpc.CallOption) (*RenameFileResponse, error) {
	out := new(RenameFileResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/RenameFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListInstances(ctx context.Context, in *ListInstancesRequest, opts ...grpc.CallOption) (*ListInstancesResponse, error) {
	out := new(ListInstancesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ListInstances", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetInstance(ctx context.Context, in *GetInstanceRequest, opts ...grpc.CallOption) (*GetInstanceResponse, error) {
	out := new(GetInstanceResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) CreateInstance(ctx context.Context, in *CreateInstanceRequest, opts ...grpc.CallOption) (*CreateInstanceResponse, error) {
	out := new(CreateInstanceResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/CreateInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteInstance(ctx context.Context, in *DeleteInstanceRequest, opts ...grpc.CallOption) (*DeleteInstanceResponse, error) {
	out := new(DeleteInstanceResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/DeleteInstance", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListCatalogObjects(ctx context.Context, in *ListCatalogObjectsRequest, opts ...grpc.CallOption) (*ListCatalogObjectsResponse, error) {
	out := new(ListCatalogObjectsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ListCatalogObjects", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetCatalogObject(ctx context.Context, in *GetCatalogObjectRequest, opts ...grpc.CallOption) (*GetCatalogObjectResponse, error) {
	out := new(GetCatalogObjectResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetCatalogObject", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) TriggerRefresh(ctx context.Context, in *TriggerRefreshRequest, opts ...grpc.CallOption) (*TriggerRefreshResponse, error) {
	out := new(TriggerRefreshResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/TriggerRefresh", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) TriggerSync(ctx context.Context, in *TriggerSyncRequest, opts ...grpc.CallOption) (*TriggerSyncResponse, error) {
	out := new(TriggerSyncResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/TriggerSync", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Migrate(ctx context.Context, in *MigrateRequest, opts ...grpc.CallOption) (*MigrateResponse, error) {
	out := new(MigrateResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/Migrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) PutFileAndMigrate(ctx context.Context, in *PutFileAndMigrateRequest, opts ...grpc.CallOption) (*PutFileAndMigrateResponse, error) {
	out := new(PutFileAndMigrateResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/PutFileAndMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) DeleteFileAndMigrate(ctx context.Context, in *DeleteFileAndMigrateRequest, opts ...grpc.CallOption) (*DeleteFileAndMigrateResponse, error) {
	out := new(DeleteFileAndMigrateResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/DeleteFileAndMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) RenameFileAndMigrate(ctx context.Context, in *RenameFileAndMigrateRequest, opts ...grpc.CallOption) (*RenameFileAndMigrateResponse, error) {
	out := new(RenameFileAndMigrateResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/RenameFileAndMigrate", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) MigrateSingle(ctx context.Context, in *MigrateSingleRequest, opts ...grpc.CallOption) (*MigrateSingleResponse, error) {
	out := new(MigrateSingleResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/MigrateSingle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) MigrateDelete(ctx context.Context, in *MigrateDeleteRequest, opts ...grpc.CallOption) (*MigrateDeleteResponse, error) {
	out := new(MigrateDeleteResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/MigrateDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) QueryDirect(ctx context.Context, in *QueryDirectRequest, opts ...grpc.CallOption) (*QueryDirectResponse, error) {
	out := new(QueryDirectResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/QueryDirect", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error) {
	out := new(MetricsViewToplistResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/MetricsViewToplist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error) {
	out := new(MetricsViewTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/MetricsViewTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error) {
	out := new(MetricsViewTotalsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/MetricsViewTotals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EstimateRollupInterval(ctx context.Context, in *EstimateRollupIntervalRequest, opts ...grpc.CallOption) (*EstimateRollupIntervalResponse, error) {
	out := new(EstimateRollupIntervalResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/EstimateRollupInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTopK(ctx context.Context, in *GetTopKRequest, opts ...grpc.CallOption) (*GetTopKResponse, error) {
	out := new(GetTopKResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetTopK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetNullCount(ctx context.Context, in *GetNullCountRequest, opts ...grpc.CallOption) (*GetNullCountResponse, error) {
	out := new(GetNullCountResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetNullCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetDescriptiveStatistics(ctx context.Context, in *GetDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*GetDescriptiveStatisticsResponse, error) {
	out := new(GetDescriptiveStatisticsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetDescriptiveStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) EstimateSmallestTimeGrain(ctx context.Context, in *EstimateSmallestTimeGrainRequest, opts ...grpc.CallOption) (*EstimateSmallestTimeGrainResponse, error) {
	out := new(EstimateSmallestTimeGrainResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/EstimateSmallestTimeGrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetNumericHistogram(ctx context.Context, in *GetNumericHistogramRequest, opts ...grpc.CallOption) (*GetNumericHistogramResponse, error) {
	out := new(GetNumericHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetNumericHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetRugHistogram(ctx context.Context, in *GetRugHistogramRequest, opts ...grpc.CallOption) (*GetRugHistogramResponse, error) {
	out := new(GetRugHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetRugHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTimeRangeSummary(ctx context.Context, in *GetTimeRangeSummaryRequest, opts ...grpc.CallOption) (*GetTimeRangeSummaryResponse, error) {
	out := new(GetTimeRangeSummaryResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetTimeRangeSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetCardinalityOfColumn(ctx context.Context, in *GetCardinalityOfColumnRequest, opts ...grpc.CallOption) (*GetCardinalityOfColumnResponse, error) {
	out := new(GetCardinalityOfColumnResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetCardinalityOfColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GenerateTimeSeries(ctx context.Context, in *GenerateTimeSeriesRequest, opts ...grpc.CallOption) (*GenerateTimeSeriesResponse, error) {
	out := new(GenerateTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GenerateTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTableCardinality(ctx context.Context, in *GetTableCardinalityRequest, opts ...grpc.CallOption) (*GetTableCardinalityResponse, error) {
	out := new(GetTableCardinalityResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetTableCardinality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ProfileColumns(ctx context.Context, in *ProfileColumnsRequest, opts ...grpc.CallOption) (*ProfileColumnsResponse, error) {
	out := new(ProfileColumnsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ProfileColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) GetTableRows(ctx context.Context, in *GetTableRowsRequest, opts ...grpc.CallOption) (*GetTableRowsResponse, error) {
	out := new(GetTableRowsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/GetTableRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *runtimeServiceClient) ListConnectors(ctx context.Context, in *ListConnectorsRequest, opts ...grpc.CallOption) (*ListConnectorsResponse, error) {
	out := new(ListConnectorsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.RuntimeService/ListConnectors", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RuntimeServiceServer is the server API for RuntimeService service.
// All implementations must embed UnimplementedRuntimeServiceServer
// for forward compatibility
type RuntimeServiceServer interface {
	// Ping returns information about the runtime
	Ping(context.Context, *PingRequest) (*PingResponse, error)
	// ListRepos lists all the repos currently managed by the runtime
	ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error)
	// GetRepo returns info about a specific repo
	GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error)
	// CreateRepo creates a new repo. See the Repo message for an explanation of repos.
	CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error)
	// DeleteRepo deletes a repo
	DeleteRepo(context.Context, *DeleteRepoRequest) (*DeleteRepoResponse, error)
	// ListFiles lists all the files matching a glob in a repo.
	// The files are sorted by their full path.
	ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error)
	// GetFile returns the contents of a specific file in a repo.
	GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error)
	// PutFile creates or updates a file in a repo
	PutFile(context.Context, *PutFileRequest) (*PutFileResponse, error)
	// DeleteFile deletes a file from a repo
	DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error)
	// RenameFile renames a file in a repo
	RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error)
	// ListInstances lists all the instances currently managed by the runtime
	ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error)
	// GetInstance returns information about a specific instance
	GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error)
	// CreateInstance creates a new instance
	CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error)
	// DeleteInstance deletes an instance
	DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error)
	// ListCatalogObjects lists all the objects (like tables, sources or metrics views) registered in an instance's catalog
	ListCatalogObjects(context.Context, *ListCatalogObjectsRequest) (*ListCatalogObjectsResponse, error)
	// GetCatalogObject returns information about a specific object in the catalog
	GetCatalogObject(context.Context, *GetCatalogObjectRequest) (*GetCatalogObjectResponse, error)
	// TriggerRefresh triggers a refresh of a refreshable catalog object.
	// It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
	// It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
	TriggerRefresh(context.Context, *TriggerRefreshRequest) (*TriggerRefreshResponse, error)
	// TriggerSync syncronizes the instance's catalog with the underlying OLAP's information schema.
	// If the instance has exposed=true, tables found in the information schema will be added to the catalog.
	TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error)
	// Migrate applies a full set of artifacts from a repo to the catalog and infra.
	// It attempts to infer a minimal number of migrations to apply to reconcile the current state with
	// the desired state expressed in the artifacts. Any existing objects not described in the submitted
	// artifacts will be deleted.
	Migrate(context.Context, *MigrateRequest) (*MigrateResponse, error)
	// PutFileAndMigrate combines PutFile and Migrate in a single endpoint to reduce latency.
	// It is equivalent to calling the two RPCs sequentially.
	PutFileAndMigrate(context.Context, *PutFileAndMigrateRequest) (*PutFileAndMigrateResponse, error)
	// DeleteFileAndMigrate combines RenameFile and Migrate in a single endpoint to reduce latency.
	DeleteFileAndMigrate(context.Context, *DeleteFileAndMigrateRequest) (*DeleteFileAndMigrateResponse, error)
	// RenameFileAndMigrate combines RenameFile and Migrate in a single endpoint to reduce latency.
	RenameFileAndMigrate(context.Context, *RenameFileAndMigrateRequest) (*RenameFileAndMigrateResponse, error)
	// DEPRECATED: MigrateSingle applies a single `CREATE` statement.
	// It bypasses the reconciling migrations described in Migrate.
	// We aim to deprecate this function once reconciling migrations are mature and adopted in the modeller.
	MigrateSingle(context.Context, *MigrateSingleRequest) (*MigrateSingleResponse, error)
	// DEPRECATED: MigrateDelete deletes a single object.
	// It bypasses the reconciling migrations described in Migrate.
	// We aim to deprecate this function once reconciling migrations are mature and adopted in the modeller.
	MigrateDelete(context.Context, *MigrateDeleteRequest) (*MigrateDeleteResponse, error)
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// DEPRECATED: QueryDirect runs a SQL query by directly executing it against the instance's OLAP datastore.
	QueryDirect(context.Context, *QueryDirectRequest) (*QueryDirectResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error)
	// EstimateRollupInterval (TODO: add description)
	EstimateRollupInterval(context.Context, *EstimateRollupIntervalRequest) (*EstimateRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	GetTopK(context.Context, *GetTopKRequest) (*GetTopKResponse, error)
	// Get the number of nulls in a column
	GetNullCount(context.Context, *GetNullCountRequest) (*GetNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	GetDescriptiveStatistics(context.Context, *GetDescriptiveStatisticsRequest) (*GetDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	EstimateSmallestTimeGrain(context.Context, *EstimateSmallestTimeGrainRequest) (*EstimateSmallestTimeGrainResponse, error)
	// Get the histogram for values in a column
	GetNumericHistogram(context.Context, *GetNumericHistogramRequest) (*GetNumericHistogramResponse, error)
	// Get outliers for a numeric column
	GetRugHistogram(context.Context, *GetRugHistogramRequest) (*GetRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	GetTimeRangeSummary(context.Context, *GetTimeRangeSummaryRequest) (*GetTimeRangeSummaryResponse, error)
	// Get cardinality for a column
	GetCardinalityOfColumn(context.Context, *GetCardinalityOfColumnRequest) (*GetCardinalityOfColumnResponse, error)
	// Generate time series
	GenerateTimeSeries(context.Context, *GenerateTimeSeriesRequest) (*GenerateTimeSeriesResponse, error)
	// TableCardinality (TODO: add description)
	GetTableCardinality(context.Context, *GetTableCardinalityRequest) (*GetTableCardinalityResponse, error)
	// ProfileColumns (TODO: add description)
	ProfileColumns(context.Context, *ProfileColumnsRequest) (*ProfileColumnsResponse, error)
	// TableRows (TODO: add description)
	GetTableRows(context.Context, *GetTableRowsRequest) (*GetTableRowsResponse, error)
	// ListConnectors returns a description of all the connectors implemented in the runtime,
	// including their schema and validation rules
	ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error)
	mustEmbedUnimplementedRuntimeServiceServer()
}

// UnimplementedRuntimeServiceServer must be embedded to have forward compatible implementations.
type UnimplementedRuntimeServiceServer struct {
}

func (UnimplementedRuntimeServiceServer) Ping(context.Context, *PingRequest) (*PingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedRuntimeServiceServer) ListRepos(context.Context, *ListReposRequest) (*ListReposResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListRepos not implemented")
}
func (UnimplementedRuntimeServiceServer) GetRepo(context.Context, *GetRepoRequest) (*GetRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRepo not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateRepo(context.Context, *CreateRepoRequest) (*CreateRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRepo not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteRepo(context.Context, *DeleteRepoRequest) (*DeleteRepoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRepo not implemented")
}
func (UnimplementedRuntimeServiceServer) ListFiles(context.Context, *ListFilesRequest) (*ListFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListFiles not implemented")
}
func (UnimplementedRuntimeServiceServer) GetFile(context.Context, *GetFileRequest) (*GetFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFile not implemented")
}
func (UnimplementedRuntimeServiceServer) PutFile(context.Context, *PutFileRequest) (*PutFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFile not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteFile(context.Context, *DeleteFileRequest) (*DeleteFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFile not implemented")
}
func (UnimplementedRuntimeServiceServer) RenameFile(context.Context, *RenameFileRequest) (*RenameFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFile not implemented")
}
func (UnimplementedRuntimeServiceServer) ListInstances(context.Context, *ListInstancesRequest) (*ListInstancesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListInstances not implemented")
}
func (UnimplementedRuntimeServiceServer) GetInstance(context.Context, *GetInstanceRequest) (*GetInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) CreateInstance(context.Context, *CreateInstanceRequest) (*CreateInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteInstance(context.Context, *DeleteInstanceRequest) (*DeleteInstanceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteInstance not implemented")
}
func (UnimplementedRuntimeServiceServer) ListCatalogObjects(context.Context, *ListCatalogObjectsRequest) (*ListCatalogObjectsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListCatalogObjects not implemented")
}
func (UnimplementedRuntimeServiceServer) GetCatalogObject(context.Context, *GetCatalogObjectRequest) (*GetCatalogObjectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCatalogObject not implemented")
}
func (UnimplementedRuntimeServiceServer) TriggerRefresh(context.Context, *TriggerRefreshRequest) (*TriggerRefreshResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerRefresh not implemented")
}
func (UnimplementedRuntimeServiceServer) TriggerSync(context.Context, *TriggerSyncRequest) (*TriggerSyncResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerSync not implemented")
}
func (UnimplementedRuntimeServiceServer) Migrate(context.Context, *MigrateRequest) (*MigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Migrate not implemented")
}
func (UnimplementedRuntimeServiceServer) PutFileAndMigrate(context.Context, *PutFileAndMigrateRequest) (*PutFileAndMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PutFileAndMigrate not implemented")
}
func (UnimplementedRuntimeServiceServer) DeleteFileAndMigrate(context.Context, *DeleteFileAndMigrateRequest) (*DeleteFileAndMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteFileAndMigrate not implemented")
}
func (UnimplementedRuntimeServiceServer) RenameFileAndMigrate(context.Context, *RenameFileAndMigrateRequest) (*RenameFileAndMigrateResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenameFileAndMigrate not implemented")
}
func (UnimplementedRuntimeServiceServer) MigrateSingle(context.Context, *MigrateSingleRequest) (*MigrateSingleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateSingle not implemented")
}
func (UnimplementedRuntimeServiceServer) MigrateDelete(context.Context, *MigrateDeleteRequest) (*MigrateDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MigrateDelete not implemented")
}
func (UnimplementedRuntimeServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedRuntimeServiceServer) QueryDirect(context.Context, *QueryDirectRequest) (*QueryDirectResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryDirect not implemented")
}
func (UnimplementedRuntimeServiceServer) MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewToplist not implemented")
}
func (UnimplementedRuntimeServiceServer) MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeSeries not implemented")
}
func (UnimplementedRuntimeServiceServer) MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTotals not implemented")
}
func (UnimplementedRuntimeServiceServer) EstimateRollupInterval(context.Context, *EstimateRollupIntervalRequest) (*EstimateRollupIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRollupInterval not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTopK(context.Context, *GetTopKRequest) (*GetTopKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopK not implemented")
}
func (UnimplementedRuntimeServiceServer) GetNullCount(context.Context, *GetNullCountRequest) (*GetNullCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNullCount not implemented")
}
func (UnimplementedRuntimeServiceServer) GetDescriptiveStatistics(context.Context, *GetDescriptiveStatisticsRequest) (*GetDescriptiveStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptiveStatistics not implemented")
}
func (UnimplementedRuntimeServiceServer) EstimateSmallestTimeGrain(context.Context, *EstimateSmallestTimeGrainRequest) (*EstimateSmallestTimeGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSmallestTimeGrain not implemented")
}
func (UnimplementedRuntimeServiceServer) GetNumericHistogram(context.Context, *GetNumericHistogramRequest) (*GetNumericHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumericHistogram not implemented")
}
func (UnimplementedRuntimeServiceServer) GetRugHistogram(context.Context, *GetRugHistogramRequest) (*GetRugHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRugHistogram not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTimeRangeSummary(context.Context, *GetTimeRangeSummaryRequest) (*GetTimeRangeSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeRangeSummary not implemented")
}
func (UnimplementedRuntimeServiceServer) GetCardinalityOfColumn(context.Context, *GetCardinalityOfColumnRequest) (*GetCardinalityOfColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardinalityOfColumn not implemented")
}
func (UnimplementedRuntimeServiceServer) GenerateTimeSeries(context.Context, *GenerateTimeSeriesRequest) (*GenerateTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTimeSeries not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTableCardinality(context.Context, *GetTableCardinalityRequest) (*GetTableCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableCardinality not implemented")
}
func (UnimplementedRuntimeServiceServer) ProfileColumns(context.Context, *ProfileColumnsRequest) (*ProfileColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileColumns not implemented")
}
func (UnimplementedRuntimeServiceServer) GetTableRows(context.Context, *GetTableRowsRequest) (*GetTableRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRows not implemented")
}
func (UnimplementedRuntimeServiceServer) ListConnectors(context.Context, *ListConnectorsRequest) (*ListConnectorsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListConnectors not implemented")
}
func (UnimplementedRuntimeServiceServer) mustEmbedUnimplementedRuntimeServiceServer() {}

// UnsafeRuntimeServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RuntimeServiceServer will
// result in compilation errors.
type UnsafeRuntimeServiceServer interface {
	mustEmbedUnimplementedRuntimeServiceServer()
}

func RegisterRuntimeServiceServer(s grpc.ServiceRegistrar, srv RuntimeServiceServer) {
	s.RegisterService(&RuntimeService_ServiceDesc, srv)
}

func _RuntimeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListRepos_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListReposRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListRepos(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ListRepos",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListRepos(ctx, req.(*ListReposRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetRepo(ctx, req.(*GetRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/CreateRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateRepo(ctx, req.(*CreateRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteRepo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRepoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteRepo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/DeleteRepo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteRepo(ctx, req.(*DeleteRepoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ListFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListFiles(ctx, req.(*ListFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetFile(ctx, req.(*GetFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_PutFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).PutFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/PutFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).PutFile(ctx, req.(*PutFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/DeleteFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteFile(ctx, req.(*DeleteFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RenameFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RenameFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/RenameFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RenameFile(ctx, req.(*RenameFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListInstances_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListInstancesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListInstances(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ListInstances",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListInstances(ctx, req.(*ListInstancesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetInstance(ctx, req.(*GetInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_CreateInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).CreateInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/CreateInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).CreateInstance(ctx, req.(*CreateInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteInstance_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteInstanceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteInstance(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/DeleteInstance",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteInstance(ctx, req.(*DeleteInstanceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListCatalogObjects_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListCatalogObjectsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListCatalogObjects(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ListCatalogObjects",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListCatalogObjects(ctx, req.(*ListCatalogObjectsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetCatalogObject_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCatalogObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetCatalogObject(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetCatalogObject",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetCatalogObject(ctx, req.(*GetCatalogObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_TriggerRefresh_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerRefreshRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).TriggerRefresh(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/TriggerRefresh",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).TriggerRefresh(ctx, req.(*TriggerRefreshRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_TriggerSync_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerSyncRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).TriggerSync(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/TriggerSync",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).TriggerSync(ctx, req.(*TriggerSyncRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Migrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Migrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/Migrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Migrate(ctx, req.(*MigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_PutFileAndMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PutFileAndMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).PutFileAndMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/PutFileAndMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).PutFileAndMigrate(ctx, req.(*PutFileAndMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_DeleteFileAndMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteFileAndMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).DeleteFileAndMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/DeleteFileAndMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).DeleteFileAndMigrate(ctx, req.(*DeleteFileAndMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_RenameFileAndMigrate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenameFileAndMigrateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).RenameFileAndMigrate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/RenameFileAndMigrate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).RenameFileAndMigrate(ctx, req.(*RenameFileAndMigrateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_MigrateSingle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateSingleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).MigrateSingle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/MigrateSingle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).MigrateSingle(ctx, req.(*MigrateSingleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_MigrateDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MigrateDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).MigrateDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/MigrateDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).MigrateDelete(ctx, req.(*MigrateDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_QueryDirect_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryDirectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).QueryDirect(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/QueryDirect",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).QueryDirect(ctx, req.(*QueryDirectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_MetricsViewToplist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewToplistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).MetricsViewToplist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/MetricsViewToplist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).MetricsViewToplist(ctx, req.(*MetricsViewToplistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_MetricsViewTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).MetricsViewTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/MetricsViewTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).MetricsViewTimeSeries(ctx, req.(*MetricsViewTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_MetricsViewTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTotalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).MetricsViewTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/MetricsViewTotals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).MetricsViewTotals(ctx, req.(*MetricsViewTotalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EstimateRollupInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRollupIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EstimateRollupInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/EstimateRollupInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EstimateRollupInterval(ctx, req.(*EstimateRollupIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetTopK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTopK(ctx, req.(*GetTopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetNullCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNullCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetNullCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetNullCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetNullCount(ctx, req.(*GetNullCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetDescriptiveStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptiveStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetDescriptiveStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetDescriptiveStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetDescriptiveStatistics(ctx, req.(*GetDescriptiveStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_EstimateSmallestTimeGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSmallestTimeGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).EstimateSmallestTimeGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/EstimateSmallestTimeGrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).EstimateSmallestTimeGrain(ctx, req.(*EstimateSmallestTimeGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetNumericHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumericHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetNumericHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetNumericHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetNumericHistogram(ctx, req.(*GetNumericHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetRugHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRugHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetRugHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetRugHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetRugHistogram(ctx, req.(*GetRugHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTimeRangeSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeRangeSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTimeRangeSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetTimeRangeSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTimeRangeSummary(ctx, req.(*GetTimeRangeSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetCardinalityOfColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardinalityOfColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetCardinalityOfColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetCardinalityOfColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetCardinalityOfColumn(ctx, req.(*GetCardinalityOfColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GenerateTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GenerateTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GenerateTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GenerateTimeSeries(ctx, req.(*GenerateTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTableCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTableCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetTableCardinality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTableCardinality(ctx, req.(*GetTableCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ProfileColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ProfileColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ProfileColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ProfileColumns(ctx, req.(*ProfileColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_GetTableRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).GetTableRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/GetTableRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).GetTableRows(ctx, req.(*GetTableRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RuntimeService_ListConnectors_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListConnectorsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RuntimeServiceServer).ListConnectors(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.RuntimeService/ListConnectors",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RuntimeServiceServer).ListConnectors(ctx, req.(*ListConnectorsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RuntimeService_ServiceDesc is the grpc.ServiceDesc for RuntimeService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RuntimeService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.runtime.v1.RuntimeService",
	HandlerType: (*RuntimeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _RuntimeService_Ping_Handler,
		},
		{
			MethodName: "ListRepos",
			Handler:    _RuntimeService_ListRepos_Handler,
		},
		{
			MethodName: "GetRepo",
			Handler:    _RuntimeService_GetRepo_Handler,
		},
		{
			MethodName: "CreateRepo",
			Handler:    _RuntimeService_CreateRepo_Handler,
		},
		{
			MethodName: "DeleteRepo",
			Handler:    _RuntimeService_DeleteRepo_Handler,
		},
		{
			MethodName: "ListFiles",
			Handler:    _RuntimeService_ListFiles_Handler,
		},
		{
			MethodName: "GetFile",
			Handler:    _RuntimeService_GetFile_Handler,
		},
		{
			MethodName: "PutFile",
			Handler:    _RuntimeService_PutFile_Handler,
		},
		{
			MethodName: "DeleteFile",
			Handler:    _RuntimeService_DeleteFile_Handler,
		},
		{
			MethodName: "RenameFile",
			Handler:    _RuntimeService_RenameFile_Handler,
		},
		{
			MethodName: "ListInstances",
			Handler:    _RuntimeService_ListInstances_Handler,
		},
		{
			MethodName: "GetInstance",
			Handler:    _RuntimeService_GetInstance_Handler,
		},
		{
			MethodName: "CreateInstance",
			Handler:    _RuntimeService_CreateInstance_Handler,
		},
		{
			MethodName: "DeleteInstance",
			Handler:    _RuntimeService_DeleteInstance_Handler,
		},
		{
			MethodName: "ListCatalogObjects",
			Handler:    _RuntimeService_ListCatalogObjects_Handler,
		},
		{
			MethodName: "GetCatalogObject",
			Handler:    _RuntimeService_GetCatalogObject_Handler,
		},
		{
			MethodName: "TriggerRefresh",
			Handler:    _RuntimeService_TriggerRefresh_Handler,
		},
		{
			MethodName: "TriggerSync",
			Handler:    _RuntimeService_TriggerSync_Handler,
		},
		{
			MethodName: "Migrate",
			Handler:    _RuntimeService_Migrate_Handler,
		},
		{
			MethodName: "PutFileAndMigrate",
			Handler:    _RuntimeService_PutFileAndMigrate_Handler,
		},
		{
			MethodName: "DeleteFileAndMigrate",
			Handler:    _RuntimeService_DeleteFileAndMigrate_Handler,
		},
		{
			MethodName: "RenameFileAndMigrate",
			Handler:    _RuntimeService_RenameFileAndMigrate_Handler,
		},
		{
			MethodName: "MigrateSingle",
			Handler:    _RuntimeService_MigrateSingle_Handler,
		},
		{
			MethodName: "MigrateDelete",
			Handler:    _RuntimeService_MigrateDelete_Handler,
		},
		{
			MethodName: "Query",
			Handler:    _RuntimeService_Query_Handler,
		},
		{
			MethodName: "QueryDirect",
			Handler:    _RuntimeService_QueryDirect_Handler,
		},
		{
			MethodName: "MetricsViewToplist",
			Handler:    _RuntimeService_MetricsViewToplist_Handler,
		},
		{
			MethodName: "MetricsViewTimeSeries",
			Handler:    _RuntimeService_MetricsViewTimeSeries_Handler,
		},
		{
			MethodName: "MetricsViewTotals",
			Handler:    _RuntimeService_MetricsViewTotals_Handler,
		},
		{
			MethodName: "EstimateRollupInterval",
			Handler:    _RuntimeService_EstimateRollupInterval_Handler,
		},
		{
			MethodName: "GetTopK",
			Handler:    _RuntimeService_GetTopK_Handler,
		},
		{
			MethodName: "GetNullCount",
			Handler:    _RuntimeService_GetNullCount_Handler,
		},
		{
			MethodName: "GetDescriptiveStatistics",
			Handler:    _RuntimeService_GetDescriptiveStatistics_Handler,
		},
		{
			MethodName: "EstimateSmallestTimeGrain",
			Handler:    _RuntimeService_EstimateSmallestTimeGrain_Handler,
		},
		{
			MethodName: "GetNumericHistogram",
			Handler:    _RuntimeService_GetNumericHistogram_Handler,
		},
		{
			MethodName: "GetRugHistogram",
			Handler:    _RuntimeService_GetRugHistogram_Handler,
		},
		{
			MethodName: "GetTimeRangeSummary",
			Handler:    _RuntimeService_GetTimeRangeSummary_Handler,
		},
		{
			MethodName: "GetCardinalityOfColumn",
			Handler:    _RuntimeService_GetCardinalityOfColumn_Handler,
		},
		{
			MethodName: "GenerateTimeSeries",
			Handler:    _RuntimeService_GenerateTimeSeries_Handler,
		},
		{
			MethodName: "GetTableCardinality",
			Handler:    _RuntimeService_GetTableCardinality_Handler,
		},
		{
			MethodName: "ProfileColumns",
			Handler:    _RuntimeService_ProfileColumns_Handler,
		},
		{
			MethodName: "GetTableRows",
			Handler:    _RuntimeService_GetTableRows_Handler,
		},
		{
			MethodName: "ListConnectors",
			Handler:    _RuntimeService_ListConnectors_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rill/runtime/v1/api.proto",
}
