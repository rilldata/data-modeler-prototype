// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/runtime/v1/api.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on Instance with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Instance) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Instance with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in InstanceMultiError, or nil
// if none found.
func (m *Instance) ValidateAll() error {
	return m.validate(true)
}

func (m *Instance) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetInstanceId()) < 10 {
		err := InstanceValidationError{
			field:  "InstanceId",
			reason: "value length must be at least 10 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for OlapDriver

	// no validation rules for OlapDsn

	// no validation rules for RepoDriver

	// no validation rules for RepoDsn

	// no validation rules for EmbedCatalog

	if len(errors) > 0 {
		return InstanceMultiError(errors)
	}

	return nil
}

// InstanceMultiError is an error wrapping multiple validation errors returned
// by Instance.ValidateAll() if the designated constraints aren't met.
type InstanceMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m InstanceMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m InstanceMultiError) AllErrors() []error { return m }

// InstanceValidationError is the validation error returned by
// Instance.Validate if the designated constraints aren't met.
type InstanceValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e InstanceValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e InstanceValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e InstanceValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e InstanceValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e InstanceValidationError) ErrorName() string { return "InstanceValidationError" }

// Error satisfies the builtin error interface
func (e InstanceValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sInstance.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = InstanceValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = InstanceValidationError{}

// Validate checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesRequestMultiError, or nil if none found.
func (m *ListInstancesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListInstancesRequestMultiError(errors)
	}

	return nil
}

// ListInstancesRequestMultiError is an error wrapping multiple validation
// errors returned by ListInstancesRequest.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesRequestMultiError) AllErrors() []error { return m }

// ListInstancesRequestValidationError is the validation error returned by
// ListInstancesRequest.Validate if the designated constraints aren't met.
type ListInstancesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesRequestValidationError) ErrorName() string {
	return "ListInstancesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesRequestValidationError{}

// Validate checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListInstancesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListInstancesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListInstancesResponseMultiError, or nil if none found.
func (m *ListInstancesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListInstancesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInstances() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListInstancesResponseValidationError{
						field:  fmt.Sprintf("Instances[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListInstancesResponseValidationError{
					field:  fmt.Sprintf("Instances[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListInstancesResponseMultiError(errors)
	}

	return nil
}

// ListInstancesResponseMultiError is an error wrapping multiple validation
// errors returned by ListInstancesResponse.ValidateAll() if the designated
// constraints aren't met.
type ListInstancesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListInstancesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListInstancesResponseMultiError) AllErrors() []error { return m }

// ListInstancesResponseValidationError is the validation error returned by
// ListInstancesResponse.Validate if the designated constraints aren't met.
type ListInstancesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListInstancesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListInstancesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListInstancesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListInstancesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListInstancesResponseValidationError) ErrorName() string {
	return "ListInstancesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListInstancesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListInstancesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListInstancesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListInstancesResponseValidationError{}

// Validate checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstanceRequestMultiError, or nil if none found.
func (m *GetInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return GetInstanceRequestMultiError(errors)
	}

	return nil
}

// GetInstanceRequestMultiError is an error wrapping multiple validation errors
// returned by GetInstanceRequest.ValidateAll() if the designated constraints
// aren't met.
type GetInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceRequestMultiError) AllErrors() []error { return m }

// GetInstanceRequestValidationError is the validation error returned by
// GetInstanceRequest.Validate if the designated constraints aren't met.
type GetInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceRequestValidationError) ErrorName() string {
	return "GetInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceRequestValidationError{}

// Validate checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetInstanceResponseMultiError, or nil if none found.
func (m *GetInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetInstanceResponseMultiError(errors)
	}

	return nil
}

// GetInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by GetInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type GetInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetInstanceResponseMultiError) AllErrors() []error { return m }

// GetInstanceResponseValidationError is the validation error returned by
// GetInstanceResponse.Validate if the designated constraints aren't met.
type GetInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetInstanceResponseValidationError) ErrorName() string {
	return "GetInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetInstanceResponseValidationError{}

// Validate checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceRequestMultiError, or nil if none found.
func (m *CreateInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for OlapDriver

	// no validation rules for OlapDsn

	// no validation rules for RepoDriver

	// no validation rules for RepoDsn

	// no validation rules for EmbedCatalog

	if len(errors) > 0 {
		return CreateInstanceRequestMultiError(errors)
	}

	return nil
}

// CreateInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceRequestMultiError) AllErrors() []error { return m }

// CreateInstanceRequestValidationError is the validation error returned by
// CreateInstanceRequest.Validate if the designated constraints aren't met.
type CreateInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceRequestValidationError) ErrorName() string {
	return "CreateInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceRequestValidationError{}

// Validate checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateInstanceResponseMultiError, or nil if none found.
func (m *CreateInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetInstance()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateInstanceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateInstanceResponseValidationError{
				field:  "Instance",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateInstanceResponseMultiError(errors)
	}

	return nil
}

// CreateInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by CreateInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateInstanceResponseMultiError) AllErrors() []error { return m }

// CreateInstanceResponseValidationError is the validation error returned by
// CreateInstanceResponse.Validate if the designated constraints aren't met.
type CreateInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateInstanceResponseValidationError) ErrorName() string {
	return "CreateInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateInstanceResponseValidationError{}

// Validate checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceRequestMultiError, or nil if none found.
func (m *DeleteInstanceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return DeleteInstanceRequestMultiError(errors)
	}

	return nil
}

// DeleteInstanceRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceRequestMultiError) AllErrors() []error { return m }

// DeleteInstanceRequestValidationError is the validation error returned by
// DeleteInstanceRequest.Validate if the designated constraints aren't met.
type DeleteInstanceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceRequestValidationError) ErrorName() string {
	return "DeleteInstanceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceRequestValidationError{}

// Validate checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteInstanceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteInstanceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteInstanceResponseMultiError, or nil if none found.
func (m *DeleteInstanceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteInstanceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteInstanceResponseMultiError(errors)
	}

	return nil
}

// DeleteInstanceResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteInstanceResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteInstanceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteInstanceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteInstanceResponseMultiError) AllErrors() []error { return m }

// DeleteInstanceResponseValidationError is the validation error returned by
// DeleteInstanceResponse.Validate if the designated constraints aren't met.
type DeleteInstanceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteInstanceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteInstanceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteInstanceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteInstanceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteInstanceResponseValidationError) ErrorName() string {
	return "DeleteInstanceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteInstanceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteInstanceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteInstanceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteInstanceResponseValidationError{}

// Validate checks the field values on ListFilesRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesRequestMultiError, or nil if none found.
func (m *ListFilesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Glob

	if len(errors) > 0 {
		return ListFilesRequestMultiError(errors)
	}

	return nil
}

// ListFilesRequestMultiError is an error wrapping multiple validation errors
// returned by ListFilesRequest.ValidateAll() if the designated constraints
// aren't met.
type ListFilesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesRequestMultiError) AllErrors() []error { return m }

// ListFilesRequestValidationError is the validation error returned by
// ListFilesRequest.Validate if the designated constraints aren't met.
type ListFilesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesRequestValidationError) ErrorName() string { return "ListFilesRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListFilesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesRequestValidationError{}

// Validate checks the field values on ListFilesResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ListFilesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListFilesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListFilesResponseMultiError, or nil if none found.
func (m *ListFilesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListFilesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListFilesResponseMultiError(errors)
	}

	return nil
}

// ListFilesResponseMultiError is an error wrapping multiple validation errors
// returned by ListFilesResponse.ValidateAll() if the designated constraints
// aren't met.
type ListFilesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListFilesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListFilesResponseMultiError) AllErrors() []error { return m }

// ListFilesResponseValidationError is the validation error returned by
// ListFilesResponse.Validate if the designated constraints aren't met.
type ListFilesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListFilesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListFilesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListFilesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListFilesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListFilesResponseValidationError) ErrorName() string {
	return "ListFilesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListFilesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListFilesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListFilesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListFilesResponseValidationError{}

// Validate checks the field values on GetFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetFileRequestMultiError,
// or nil if none found.
func (m *GetFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	if len(errors) > 0 {
		return GetFileRequestMultiError(errors)
	}

	return nil
}

// GetFileRequestMultiError is an error wrapping multiple validation errors
// returned by GetFileRequest.ValidateAll() if the designated constraints
// aren't met.
type GetFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileRequestMultiError) AllErrors() []error { return m }

// GetFileRequestValidationError is the validation error returned by
// GetFileRequest.Validate if the designated constraints aren't met.
type GetFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileRequestValidationError) ErrorName() string { return "GetFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileRequestValidationError{}

// Validate checks the field values on GetFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetFileResponseMultiError, or nil if none found.
func (m *GetFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Blob

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetFileResponseValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetFileResponseValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetFileResponseMultiError(errors)
	}

	return nil
}

// GetFileResponseMultiError is an error wrapping multiple validation errors
// returned by GetFileResponse.ValidateAll() if the designated constraints
// aren't met.
type GetFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetFileResponseMultiError) AllErrors() []error { return m }

// GetFileResponseValidationError is the validation error returned by
// GetFileResponse.Validate if the designated constraints aren't met.
type GetFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetFileResponseValidationError) ErrorName() string { return "GetFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetFileResponseValidationError{}

// Validate checks the field values on PutFileRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PutFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PutFileRequestMultiError,
// or nil if none found.
func (m *PutFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	// no validation rules for Blob

	// no validation rules for Create

	// no validation rules for CreateOnly

	if len(errors) > 0 {
		return PutFileRequestMultiError(errors)
	}

	return nil
}

// PutFileRequestMultiError is an error wrapping multiple validation errors
// returned by PutFileRequest.ValidateAll() if the designated constraints
// aren't met.
type PutFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileRequestMultiError) AllErrors() []error { return m }

// PutFileRequestValidationError is the validation error returned by
// PutFileRequest.Validate if the designated constraints aren't met.
type PutFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileRequestValidationError) ErrorName() string { return "PutFileRequestValidationError" }

// Error satisfies the builtin error interface
func (e PutFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileRequestValidationError{}

// Validate checks the field values on PutFileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *PutFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutFileResponseMultiError, or nil if none found.
func (m *PutFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for FilePath

	if len(errors) > 0 {
		return PutFileResponseMultiError(errors)
	}

	return nil
}

// PutFileResponseMultiError is an error wrapping multiple validation errors
// returned by PutFileResponse.ValidateAll() if the designated constraints
// aren't met.
type PutFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileResponseMultiError) AllErrors() []error { return m }

// PutFileResponseValidationError is the validation error returned by
// PutFileResponse.Validate if the designated constraints aren't met.
type PutFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileResponseValidationError) ErrorName() string { return "PutFileResponseValidationError" }

// Error satisfies the builtin error interface
func (e PutFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileResponseValidationError{}

// Validate checks the field values on DeleteFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileRequestMultiError, or nil if none found.
func (m *DeleteFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	if len(errors) > 0 {
		return DeleteFileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileRequestMultiError is an error wrapping multiple validation errors
// returned by DeleteFileRequest.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileRequestMultiError) AllErrors() []error { return m }

// DeleteFileRequestValidationError is the validation error returned by
// DeleteFileRequest.Validate if the designated constraints aren't met.
type DeleteFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileRequestValidationError) ErrorName() string {
	return "DeleteFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileRequestValidationError{}

// Validate checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteFileResponseMultiError, or nil if none found.
func (m *DeleteFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteFileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileResponseMultiError is an error wrapping multiple validation errors
// returned by DeleteFileResponse.ValidateAll() if the designated constraints
// aren't met.
type DeleteFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileResponseMultiError) AllErrors() []error { return m }

// DeleteFileResponseValidationError is the validation error returned by
// DeleteFileResponse.Validate if the designated constraints aren't met.
type DeleteFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileResponseValidationError) ErrorName() string {
	return "DeleteFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileResponseValidationError{}

// Validate checks the field values on RenameFileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *RenameFileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameFileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameFileRequestMultiError, or nil if none found.
func (m *RenameFileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameFileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for FromPath

	// no validation rules for ToPath

	if len(errors) > 0 {
		return RenameFileRequestMultiError(errors)
	}

	return nil
}

// RenameFileRequestMultiError is an error wrapping multiple validation errors
// returned by RenameFileRequest.ValidateAll() if the designated constraints
// aren't met.
type RenameFileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameFileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameFileRequestMultiError) AllErrors() []error { return m }

// RenameFileRequestValidationError is the validation error returned by
// RenameFileRequest.Validate if the designated constraints aren't met.
type RenameFileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameFileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameFileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameFileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameFileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameFileRequestValidationError) ErrorName() string {
	return "RenameFileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameFileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameFileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameFileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameFileRequestValidationError{}

// Validate checks the field values on RenameFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameFileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameFileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RenameFileResponseMultiError, or nil if none found.
func (m *RenameFileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameFileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RenameFileResponseMultiError(errors)
	}

	return nil
}

// RenameFileResponseMultiError is an error wrapping multiple validation errors
// returned by RenameFileResponse.ValidateAll() if the designated constraints
// aren't met.
type RenameFileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameFileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameFileResponseMultiError) AllErrors() []error { return m }

// RenameFileResponseValidationError is the validation error returned by
// RenameFileResponse.Validate if the designated constraints aren't met.
type RenameFileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameFileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameFileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameFileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameFileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameFileResponseValidationError) ErrorName() string {
	return "RenameFileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameFileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameFileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameFileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameFileResponseValidationError{}

// Validate checks the field values on CatalogEntry with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *CatalogEntry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CatalogEntry with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in CatalogEntryMultiError, or
// nil if none found.
func (m *CatalogEntry) ValidateAll() error {
	return m.validate(true)
}

func (m *CatalogEntry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Path

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CatalogEntryValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CatalogEntryValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetRefreshedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "RefreshedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CatalogEntryValidationError{
					field:  "RefreshedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRefreshedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CatalogEntryValidationError{
				field:  "RefreshedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	switch m.Object.(type) {

	case *CatalogEntry_Table:

		if all {
			switch v := interface{}(m.GetTable()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Table",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Table",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTable()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogEntryValidationError{
					field:  "Table",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CatalogEntry_Source:

		if all {
			switch v := interface{}(m.GetSource()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Source",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Source",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetSource()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogEntryValidationError{
					field:  "Source",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CatalogEntry_Model:

		if all {
			switch v := interface{}(m.GetModel()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Model",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "Model",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetModel()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogEntryValidationError{
					field:  "Model",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CatalogEntry_MetricsView:

		if all {
			switch v := interface{}(m.GetMetricsView()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "MetricsView",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CatalogEntryValidationError{
						field:  "MetricsView",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetMetricsView()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CatalogEntryValidationError{
					field:  "MetricsView",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return CatalogEntryMultiError(errors)
	}

	return nil
}

// CatalogEntryMultiError is an error wrapping multiple validation errors
// returned by CatalogEntry.ValidateAll() if the designated constraints aren't met.
type CatalogEntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CatalogEntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CatalogEntryMultiError) AllErrors() []error { return m }

// CatalogEntryValidationError is the validation error returned by
// CatalogEntry.Validate if the designated constraints aren't met.
type CatalogEntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CatalogEntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CatalogEntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CatalogEntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CatalogEntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CatalogEntryValidationError) ErrorName() string { return "CatalogEntryValidationError" }

// Error satisfies the builtin error interface
func (e CatalogEntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCatalogEntry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CatalogEntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CatalogEntryValidationError{}

// Validate checks the field values on ListCatalogEntriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCatalogEntriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCatalogEntriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCatalogEntriesRequestMultiError, or nil if none found.
func (m *ListCatalogEntriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCatalogEntriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Type

	if len(errors) > 0 {
		return ListCatalogEntriesRequestMultiError(errors)
	}

	return nil
}

// ListCatalogEntriesRequestMultiError is an error wrapping multiple validation
// errors returned by ListCatalogEntriesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListCatalogEntriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCatalogEntriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCatalogEntriesRequestMultiError) AllErrors() []error { return m }

// ListCatalogEntriesRequestValidationError is the validation error returned by
// ListCatalogEntriesRequest.Validate if the designated constraints aren't met.
type ListCatalogEntriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogEntriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogEntriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogEntriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogEntriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogEntriesRequestValidationError) ErrorName() string {
	return "ListCatalogEntriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogEntriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogEntriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogEntriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogEntriesRequestValidationError{}

// Validate checks the field values on ListCatalogEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListCatalogEntriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListCatalogEntriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListCatalogEntriesResponseMultiError, or nil if none found.
func (m *ListCatalogEntriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListCatalogEntriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListCatalogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListCatalogEntriesResponseValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListCatalogEntriesResponseValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListCatalogEntriesResponseMultiError(errors)
	}

	return nil
}

// ListCatalogEntriesResponseMultiError is an error wrapping multiple
// validation errors returned by ListCatalogEntriesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListCatalogEntriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListCatalogEntriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListCatalogEntriesResponseMultiError) AllErrors() []error { return m }

// ListCatalogEntriesResponseValidationError is the validation error returned
// by ListCatalogEntriesResponse.Validate if the designated constraints aren't met.
type ListCatalogEntriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListCatalogEntriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListCatalogEntriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListCatalogEntriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListCatalogEntriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListCatalogEntriesResponseValidationError) ErrorName() string {
	return "ListCatalogEntriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListCatalogEntriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListCatalogEntriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListCatalogEntriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListCatalogEntriesResponseValidationError{}

// Validate checks the field values on GetCatalogEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCatalogEntryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCatalogEntryRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCatalogEntryRequestMultiError, or nil if none found.
func (m *GetCatalogEntryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCatalogEntryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Name

	if len(errors) > 0 {
		return GetCatalogEntryRequestMultiError(errors)
	}

	return nil
}

// GetCatalogEntryRequestMultiError is an error wrapping multiple validation
// errors returned by GetCatalogEntryRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCatalogEntryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCatalogEntryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCatalogEntryRequestMultiError) AllErrors() []error { return m }

// GetCatalogEntryRequestValidationError is the validation error returned by
// GetCatalogEntryRequest.Validate if the designated constraints aren't met.
type GetCatalogEntryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCatalogEntryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCatalogEntryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCatalogEntryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCatalogEntryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCatalogEntryRequestValidationError) ErrorName() string {
	return "GetCatalogEntryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCatalogEntryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCatalogEntryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCatalogEntryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCatalogEntryRequestValidationError{}

// Validate checks the field values on GetCatalogEntryResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCatalogEntryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCatalogEntryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCatalogEntryResponseMultiError, or nil if none found.
func (m *GetCatalogEntryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCatalogEntryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetEntry()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCatalogEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCatalogEntryResponseValidationError{
					field:  "Entry",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEntry()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCatalogEntryResponseValidationError{
				field:  "Entry",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCatalogEntryResponseMultiError(errors)
	}

	return nil
}

// GetCatalogEntryResponseMultiError is an error wrapping multiple validation
// errors returned by GetCatalogEntryResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCatalogEntryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCatalogEntryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCatalogEntryResponseMultiError) AllErrors() []error { return m }

// GetCatalogEntryResponseValidationError is the validation error returned by
// GetCatalogEntryResponse.Validate if the designated constraints aren't met.
type GetCatalogEntryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCatalogEntryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCatalogEntryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCatalogEntryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCatalogEntryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCatalogEntryResponseValidationError) ErrorName() string {
	return "GetCatalogEntryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCatalogEntryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCatalogEntryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCatalogEntryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCatalogEntryResponseValidationError{}

// Validate checks the field values on TriggerRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRefreshRequestMultiError, or nil if none found.
func (m *TriggerRefreshRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Name

	if len(errors) > 0 {
		return TriggerRefreshRequestMultiError(errors)
	}

	return nil
}

// TriggerRefreshRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerRefreshRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerRefreshRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshRequestMultiError) AllErrors() []error { return m }

// TriggerRefreshRequestValidationError is the validation error returned by
// TriggerRefreshRequest.Validate if the designated constraints aren't met.
type TriggerRefreshRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshRequestValidationError) ErrorName() string {
	return "TriggerRefreshRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshRequestValidationError{}

// Validate checks the field values on TriggerRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRefreshResponseMultiError, or nil if none found.
func (m *TriggerRefreshResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerRefreshResponseMultiError(errors)
	}

	return nil
}

// TriggerRefreshResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerRefreshResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerRefreshResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshResponseMultiError) AllErrors() []error { return m }

// TriggerRefreshResponseValidationError is the validation error returned by
// TriggerRefreshResponse.Validate if the designated constraints aren't met.
type TriggerRefreshResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshResponseValidationError) ErrorName() string {
	return "TriggerRefreshResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshResponseValidationError{}

// Validate checks the field values on TriggerSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerSyncRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerSyncRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerSyncRequestMultiError, or nil if none found.
func (m *TriggerSyncRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerSyncRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	if len(errors) > 0 {
		return TriggerSyncRequestMultiError(errors)
	}

	return nil
}

// TriggerSyncRequestMultiError is an error wrapping multiple validation errors
// returned by TriggerSyncRequest.ValidateAll() if the designated constraints
// aren't met.
type TriggerSyncRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerSyncRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerSyncRequestMultiError) AllErrors() []error { return m }

// TriggerSyncRequestValidationError is the validation error returned by
// TriggerSyncRequest.Validate if the designated constraints aren't met.
type TriggerSyncRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerSyncRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerSyncRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerSyncRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerSyncRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerSyncRequestValidationError) ErrorName() string {
	return "TriggerSyncRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerSyncRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerSyncRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerSyncRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerSyncRequestValidationError{}

// Validate checks the field values on TriggerSyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerSyncResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerSyncResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerSyncResponseMultiError, or nil if none found.
func (m *TriggerSyncResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerSyncResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ObjectsCount

	// no validation rules for ObjectsAddedCount

	// no validation rules for ObjectsUpdatedCount

	// no validation rules for ObjectsRemovedCount

	if len(errors) > 0 {
		return TriggerSyncResponseMultiError(errors)
	}

	return nil
}

// TriggerSyncResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerSyncResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerSyncResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerSyncResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerSyncResponseMultiError) AllErrors() []error { return m }

// TriggerSyncResponseValidationError is the validation error returned by
// TriggerSyncResponse.Validate if the designated constraints aren't met.
type TriggerSyncResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerSyncResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerSyncResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerSyncResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerSyncResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerSyncResponseValidationError) ErrorName() string {
	return "TriggerSyncResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerSyncResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerSyncResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerSyncResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerSyncResponseValidationError{}

// Validate checks the field values on ReconcileRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconcileRequestMultiError, or nil if none found.
func (m *ReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Dry

	// no validation rules for Strict

	if len(errors) > 0 {
		return ReconcileRequestMultiError(errors)
	}

	return nil
}

// ReconcileRequestMultiError is an error wrapping multiple validation errors
// returned by ReconcileRequest.ValidateAll() if the designated constraints
// aren't met.
type ReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileRequestMultiError) AllErrors() []error { return m }

// ReconcileRequestValidationError is the validation error returned by
// ReconcileRequest.Validate if the designated constraints aren't met.
type ReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileRequestValidationError) ErrorName() string { return "ReconcileRequestValidationError" }

// Error satisfies the builtin error interface
func (e ReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileRequestValidationError{}

// Validate checks the field values on ReconcileResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *ReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconcileResponseMultiError, or nil if none found.
func (m *ReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ReconcileResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ReconcileResponseMultiError(errors)
	}

	return nil
}

// ReconcileResponseMultiError is an error wrapping multiple validation errors
// returned by ReconcileResponse.ValidateAll() if the designated constraints
// aren't met.
type ReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileResponseMultiError) AllErrors() []error { return m }

// ReconcileResponseValidationError is the validation error returned by
// ReconcileResponse.Validate if the designated constraints aren't met.
type ReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileResponseValidationError) ErrorName() string {
	return "ReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileResponseValidationError{}

// Validate checks the field values on ReconcileError with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ReconcileError) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileError with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ReconcileErrorMultiError,
// or nil if none found.
func (m *ReconcileError) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileError) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Message

	// no validation rules for FilePath

	if all {
		switch v := interface{}(m.GetStartLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReconcileErrorValidationError{
					field:  "StartLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReconcileErrorValidationError{
					field:  "StartLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReconcileErrorValidationError{
				field:  "StartLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEndLocation()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ReconcileErrorValidationError{
					field:  "EndLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ReconcileErrorValidationError{
					field:  "EndLocation",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEndLocation()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ReconcileErrorValidationError{
				field:  "EndLocation",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ReconcileErrorMultiError(errors)
	}

	return nil
}

// ReconcileErrorMultiError is an error wrapping multiple validation errors
// returned by ReconcileError.ValidateAll() if the designated constraints
// aren't met.
type ReconcileErrorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileErrorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileErrorMultiError) AllErrors() []error { return m }

// ReconcileErrorValidationError is the validation error returned by
// ReconcileError.Validate if the designated constraints aren't met.
type ReconcileErrorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileErrorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileErrorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileErrorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileErrorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileErrorValidationError) ErrorName() string { return "ReconcileErrorValidationError" }

// Error satisfies the builtin error interface
func (e ReconcileErrorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileError.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileErrorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileErrorValidationError{}

// Validate checks the field values on PutFileAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutFileAndReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutFileAndReconcileRequestMultiError, or nil if none found.
func (m *PutFileAndReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileAndReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	// no validation rules for Blob

	// no validation rules for Create

	// no validation rules for CreateOnly

	// no validation rules for Dry

	// no validation rules for Strict

	if len(errors) > 0 {
		return PutFileAndReconcileRequestMultiError(errors)
	}

	return nil
}

// PutFileAndReconcileRequestMultiError is an error wrapping multiple
// validation errors returned by PutFileAndReconcileRequest.ValidateAll() if
// the designated constraints aren't met.
type PutFileAndReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileAndReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileAndReconcileRequestMultiError) AllErrors() []error { return m }

// PutFileAndReconcileRequestValidationError is the validation error returned
// by PutFileAndReconcileRequest.Validate if the designated constraints aren't met.
type PutFileAndReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileAndReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileAndReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileAndReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileAndReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileAndReconcileRequestValidationError) ErrorName() string {
	return "PutFileAndReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PutFileAndReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileAndReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileAndReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileAndReconcileRequestValidationError{}

// Validate checks the field values on PutFileAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PutFileAndReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PutFileAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PutFileAndReconcileResponseMultiError, or nil if none found.
func (m *PutFileAndReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PutFileAndReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, PutFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, PutFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return PutFileAndReconcileResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return PutFileAndReconcileResponseMultiError(errors)
	}

	return nil
}

// PutFileAndReconcileResponseMultiError is an error wrapping multiple
// validation errors returned by PutFileAndReconcileResponse.ValidateAll() if
// the designated constraints aren't met.
type PutFileAndReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PutFileAndReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PutFileAndReconcileResponseMultiError) AllErrors() []error { return m }

// PutFileAndReconcileResponseValidationError is the validation error returned
// by PutFileAndReconcileResponse.Validate if the designated constraints
// aren't met.
type PutFileAndReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PutFileAndReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PutFileAndReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PutFileAndReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PutFileAndReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PutFileAndReconcileResponseValidationError) ErrorName() string {
	return "PutFileAndReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PutFileAndReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPutFileAndReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PutFileAndReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PutFileAndReconcileResponseValidationError{}

// Validate checks the field values on DeleteFileAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileAndReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileAndReconcileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteFileAndReconcileRequestMultiError, or nil if none found.
func (m *DeleteFileAndReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileAndReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	// no validation rules for Dry

	// no validation rules for Strict

	if len(errors) > 0 {
		return DeleteFileAndReconcileRequestMultiError(errors)
	}

	return nil
}

// DeleteFileAndReconcileRequestMultiError is an error wrapping multiple
// validation errors returned by DeleteFileAndReconcileRequest.ValidateAll()
// if the designated constraints aren't met.
type DeleteFileAndReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileAndReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileAndReconcileRequestMultiError) AllErrors() []error { return m }

// DeleteFileAndReconcileRequestValidationError is the validation error
// returned by DeleteFileAndReconcileRequest.Validate if the designated
// constraints aren't met.
type DeleteFileAndReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileAndReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileAndReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileAndReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileAndReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileAndReconcileRequestValidationError) ErrorName() string {
	return "DeleteFileAndReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileAndReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileAndReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileAndReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileAndReconcileRequestValidationError{}

// Validate checks the field values on DeleteFileAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteFileAndReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteFileAndReconcileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// DeleteFileAndReconcileResponseMultiError, or nil if none found.
func (m *DeleteFileAndReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteFileAndReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, DeleteFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, DeleteFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return DeleteFileAndReconcileResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return DeleteFileAndReconcileResponseMultiError(errors)
	}

	return nil
}

// DeleteFileAndReconcileResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteFileAndReconcileResponse.ValidateAll()
// if the designated constraints aren't met.
type DeleteFileAndReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteFileAndReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteFileAndReconcileResponseMultiError) AllErrors() []error { return m }

// DeleteFileAndReconcileResponseValidationError is the validation error
// returned by DeleteFileAndReconcileResponse.Validate if the designated
// constraints aren't met.
type DeleteFileAndReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteFileAndReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteFileAndReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteFileAndReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteFileAndReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteFileAndReconcileResponseValidationError) ErrorName() string {
	return "DeleteFileAndReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteFileAndReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteFileAndReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteFileAndReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteFileAndReconcileResponseValidationError{}

// Validate checks the field values on RenameFileAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameFileAndReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameFileAndReconcileRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameFileAndReconcileRequestMultiError, or nil if none found.
func (m *RenameFileAndReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameFileAndReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for FromPath

	// no validation rules for ToPath

	// no validation rules for Dry

	// no validation rules for Strict

	if len(errors) > 0 {
		return RenameFileAndReconcileRequestMultiError(errors)
	}

	return nil
}

// RenameFileAndReconcileRequestMultiError is an error wrapping multiple
// validation errors returned by RenameFileAndReconcileRequest.ValidateAll()
// if the designated constraints aren't met.
type RenameFileAndReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameFileAndReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameFileAndReconcileRequestMultiError) AllErrors() []error { return m }

// RenameFileAndReconcileRequestValidationError is the validation error
// returned by RenameFileAndReconcileRequest.Validate if the designated
// constraints aren't met.
type RenameFileAndReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameFileAndReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameFileAndReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameFileAndReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameFileAndReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameFileAndReconcileRequestValidationError) ErrorName() string {
	return "RenameFileAndReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RenameFileAndReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameFileAndReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameFileAndReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameFileAndReconcileRequestValidationError{}

// Validate checks the field values on RenameFileAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RenameFileAndReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RenameFileAndReconcileResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RenameFileAndReconcileResponseMultiError, or nil if none found.
func (m *RenameFileAndReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RenameFileAndReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RenameFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RenameFileAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RenameFileAndReconcileResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RenameFileAndReconcileResponseMultiError(errors)
	}

	return nil
}

// RenameFileAndReconcileResponseMultiError is an error wrapping multiple
// validation errors returned by RenameFileAndReconcileResponse.ValidateAll()
// if the designated constraints aren't met.
type RenameFileAndReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RenameFileAndReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RenameFileAndReconcileResponseMultiError) AllErrors() []error { return m }

// RenameFileAndReconcileResponseValidationError is the validation error
// returned by RenameFileAndReconcileResponse.Validate if the designated
// constraints aren't met.
type RenameFileAndReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RenameFileAndReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RenameFileAndReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RenameFileAndReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RenameFileAndReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RenameFileAndReconcileResponseValidationError) ErrorName() string {
	return "RenameFileAndReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RenameFileAndReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRenameFileAndReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RenameFileAndReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RenameFileAndReconcileResponseValidationError{}

// Validate checks the field values on RefreshAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAndReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAndReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAndReconcileRequestMultiError, or nil if none found.
func (m *RefreshAndReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAndReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Path

	// no validation rules for Dry

	// no validation rules for Strict

	if len(errors) > 0 {
		return RefreshAndReconcileRequestMultiError(errors)
	}

	return nil
}

// RefreshAndReconcileRequestMultiError is an error wrapping multiple
// validation errors returned by RefreshAndReconcileRequest.ValidateAll() if
// the designated constraints aren't met.
type RefreshAndReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAndReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAndReconcileRequestMultiError) AllErrors() []error { return m }

// RefreshAndReconcileRequestValidationError is the validation error returned
// by RefreshAndReconcileRequest.Validate if the designated constraints aren't met.
type RefreshAndReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAndReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAndReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAndReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAndReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAndReconcileRequestValidationError) ErrorName() string {
	return "RefreshAndReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAndReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAndReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAndReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAndReconcileRequestValidationError{}

// Validate checks the field values on RefreshAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RefreshAndReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RefreshAndReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RefreshAndReconcileResponseMultiError, or nil if none found.
func (m *RefreshAndReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RefreshAndReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetErrors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, RefreshAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, RefreshAndReconcileResponseValidationError{
						field:  fmt.Sprintf("Errors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return RefreshAndReconcileResponseValidationError{
					field:  fmt.Sprintf("Errors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return RefreshAndReconcileResponseMultiError(errors)
	}

	return nil
}

// RefreshAndReconcileResponseMultiError is an error wrapping multiple
// validation errors returned by RefreshAndReconcileResponse.ValidateAll() if
// the designated constraints aren't met.
type RefreshAndReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RefreshAndReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RefreshAndReconcileResponseMultiError) AllErrors() []error { return m }

// RefreshAndReconcileResponseValidationError is the validation error returned
// by RefreshAndReconcileResponse.Validate if the designated constraints
// aren't met.
type RefreshAndReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RefreshAndReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RefreshAndReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RefreshAndReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RefreshAndReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RefreshAndReconcileResponseValidationError) ErrorName() string {
	return "RefreshAndReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RefreshAndReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRefreshAndReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RefreshAndReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RefreshAndReconcileResponseValidationError{}

// Validate checks the field values on QueryRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryRequestMultiError, or
// nil if none found.
func (m *QueryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for Sql

	for idx, item := range m.GetArgs() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryRequestValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryRequestValidationError{
						field:  fmt.Sprintf("Args[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryRequestValidationError{
					field:  fmt.Sprintf("Args[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for Priority

	// no validation rules for DryRun

	if len(errors) > 0 {
		return QueryRequestMultiError(errors)
	}

	return nil
}

// QueryRequestMultiError is an error wrapping multiple validation errors
// returned by QueryRequest.ValidateAll() if the designated constraints aren't met.
type QueryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryRequestMultiError) AllErrors() []error { return m }

// QueryRequestValidationError is the validation error returned by
// QueryRequest.Validate if the designated constraints aren't met.
type QueryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryRequestValidationError) ErrorName() string { return "QueryRequestValidationError" }

// Error satisfies the builtin error interface
func (e QueryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryRequestValidationError{}

// Validate checks the field values on QueryResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *QueryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on QueryResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in QueryResponseMultiError, or
// nil if none found.
func (m *QueryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *QueryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, QueryResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, QueryResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return QueryResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, QueryResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return QueryResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return QueryResponseMultiError(errors)
	}

	return nil
}

// QueryResponseMultiError is an error wrapping multiple validation errors
// returned by QueryResponse.ValidateAll() if the designated constraints
// aren't met.
type QueryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m QueryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m QueryResponseMultiError) AllErrors() []error { return m }

// QueryResponseValidationError is the validation error returned by
// QueryResponse.Validate if the designated constraints aren't met.
type QueryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e QueryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e QueryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e QueryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e QueryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e QueryResponseValidationError) ErrorName() string { return "QueryResponseValidationError" }

// Error satisfies the builtin error interface
func (e QueryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sQueryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = QueryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = QueryResponseValidationError{}

// Validate checks the field values on MetricsViewToplistRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewToplistRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewToplistRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewToplistRequestMultiError, or nil if none found.
func (m *MetricsViewToplistRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewToplistRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for MetricsViewName

	// no validation rules for DimensionName

	if all {
		switch v := interface{}(m.GetTimeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewToplistRequestValidationError{
				field:  "TimeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewToplistRequestValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Limit

	// no validation rules for Offset

	for idx, item := range m.GetSort() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewToplistRequestValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewToplistRequestValidationError{
						field:  fmt.Sprintf("Sort[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewToplistRequestValidationError{
					field:  fmt.Sprintf("Sort[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewToplistRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewToplistRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	if len(errors) > 0 {
		return MetricsViewToplistRequestMultiError(errors)
	}

	return nil
}

// MetricsViewToplistRequestMultiError is an error wrapping multiple validation
// errors returned by MetricsViewToplistRequest.ValidateAll() if the
// designated constraints aren't met.
type MetricsViewToplistRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewToplistRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewToplistRequestMultiError) AllErrors() []error { return m }

// MetricsViewToplistRequestValidationError is the validation error returned by
// MetricsViewToplistRequest.Validate if the designated constraints aren't met.
type MetricsViewToplistRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewToplistRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewToplistRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewToplistRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewToplistRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewToplistRequestValidationError) ErrorName() string {
	return "MetricsViewToplistRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewToplistRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewToplistRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewToplistRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewToplistRequestValidationError{}

// Validate checks the field values on MetricsViewToplistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewToplistResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewToplistResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewToplistResponseMultiError, or nil if none found.
func (m *MetricsViewToplistResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewToplistResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMeta() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewToplistResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewToplistResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewToplistResponseValidationError{
					field:  fmt.Sprintf("Meta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewToplistResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewToplistResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewToplistResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewToplistResponseMultiError(errors)
	}

	return nil
}

// MetricsViewToplistResponseMultiError is an error wrapping multiple
// validation errors returned by MetricsViewToplistResponse.ValidateAll() if
// the designated constraints aren't met.
type MetricsViewToplistResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewToplistResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewToplistResponseMultiError) AllErrors() []error { return m }

// MetricsViewToplistResponseValidationError is the validation error returned
// by MetricsViewToplistResponse.Validate if the designated constraints aren't met.
type MetricsViewToplistResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewToplistResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewToplistResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewToplistResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewToplistResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewToplistResponseValidationError) ErrorName() string {
	return "MetricsViewToplistResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewToplistResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewToplistResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewToplistResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewToplistResponseValidationError{}

// Validate checks the field values on MetricsViewTimeSeriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewTimeSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewTimeSeriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewTimeSeriesRequestMultiError, or nil if none found.
func (m *MetricsViewTimeSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewTimeSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for MetricsViewName

	if all {
		switch v := interface{}(m.GetTimeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTimeSeriesRequestValidationError{
				field:  "TimeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTimeSeriesRequestValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for TimeGranularity

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTimeSeriesRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTimeSeriesRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	if len(errors) > 0 {
		return MetricsViewTimeSeriesRequestMultiError(errors)
	}

	return nil
}

// MetricsViewTimeSeriesRequestMultiError is an error wrapping multiple
// validation errors returned by MetricsViewTimeSeriesRequest.ValidateAll() if
// the designated constraints aren't met.
type MetricsViewTimeSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewTimeSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewTimeSeriesRequestMultiError) AllErrors() []error { return m }

// MetricsViewTimeSeriesRequestValidationError is the validation error returned
// by MetricsViewTimeSeriesRequest.Validate if the designated constraints
// aren't met.
type MetricsViewTimeSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewTimeSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewTimeSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewTimeSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewTimeSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewTimeSeriesRequestValidationError) ErrorName() string {
	return "MetricsViewTimeSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewTimeSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewTimeSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewTimeSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewTimeSeriesRequestValidationError{}

// Validate checks the field values on MetricsViewTimeSeriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewTimeSeriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewTimeSeriesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// MetricsViewTimeSeriesResponseMultiError, or nil if none found.
func (m *MetricsViewTimeSeriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewTimeSeriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMeta() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewTimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewTimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewTimeSeriesResponseValidationError{
					field:  fmt.Sprintf("Meta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewTimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewTimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewTimeSeriesResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewTimeSeriesResponseMultiError(errors)
	}

	return nil
}

// MetricsViewTimeSeriesResponseMultiError is an error wrapping multiple
// validation errors returned by MetricsViewTimeSeriesResponse.ValidateAll()
// if the designated constraints aren't met.
type MetricsViewTimeSeriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewTimeSeriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewTimeSeriesResponseMultiError) AllErrors() []error { return m }

// MetricsViewTimeSeriesResponseValidationError is the validation error
// returned by MetricsViewTimeSeriesResponse.Validate if the designated
// constraints aren't met.
type MetricsViewTimeSeriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewTimeSeriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewTimeSeriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewTimeSeriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewTimeSeriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewTimeSeriesResponseValidationError) ErrorName() string {
	return "MetricsViewTimeSeriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewTimeSeriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewTimeSeriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewTimeSeriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewTimeSeriesResponseValidationError{}

// Validate checks the field values on MetricsViewTotalsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewTotalsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewTotalsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewTotalsRequestMultiError, or nil if none found.
func (m *MetricsViewTotalsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewTotalsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for MetricsViewName

	if all {
		switch v := interface{}(m.GetTimeStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "TimeStart",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTotalsRequestValidationError{
				field:  "TimeStart",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetTimeEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "TimeEnd",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTotalsRequestValidationError{
				field:  "TimeEnd",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilter()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTotalsRequestValidationError{
					field:  "Filter",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilter()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTotalsRequestValidationError{
				field:  "Filter",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Priority

	if len(errors) > 0 {
		return MetricsViewTotalsRequestMultiError(errors)
	}

	return nil
}

// MetricsViewTotalsRequestMultiError is an error wrapping multiple validation
// errors returned by MetricsViewTotalsRequest.ValidateAll() if the designated
// constraints aren't met.
type MetricsViewTotalsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewTotalsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewTotalsRequestMultiError) AllErrors() []error { return m }

// MetricsViewTotalsRequestValidationError is the validation error returned by
// MetricsViewTotalsRequest.Validate if the designated constraints aren't met.
type MetricsViewTotalsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewTotalsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewTotalsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewTotalsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewTotalsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewTotalsRequestValidationError) ErrorName() string {
	return "MetricsViewTotalsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewTotalsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewTotalsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewTotalsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewTotalsRequestValidationError{}

// Validate checks the field values on MetricsViewTotalsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewTotalsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewTotalsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewTotalsResponseMultiError, or nil if none found.
func (m *MetricsViewTotalsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewTotalsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMeta() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewTotalsResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewTotalsResponseValidationError{
						field:  fmt.Sprintf("Meta[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewTotalsResponseValidationError{
					field:  fmt.Sprintf("Meta[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetData()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MetricsViewTotalsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MetricsViewTotalsResponseValidationError{
					field:  "Data",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetData()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MetricsViewTotalsResponseValidationError{
				field:  "Data",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MetricsViewTotalsResponseMultiError(errors)
	}

	return nil
}

// MetricsViewTotalsResponseMultiError is an error wrapping multiple validation
// errors returned by MetricsViewTotalsResponse.ValidateAll() if the
// designated constraints aren't met.
type MetricsViewTotalsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewTotalsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewTotalsResponseMultiError) AllErrors() []error { return m }

// MetricsViewTotalsResponseValidationError is the validation error returned by
// MetricsViewTotalsResponse.Validate if the designated constraints aren't met.
type MetricsViewTotalsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewTotalsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewTotalsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewTotalsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewTotalsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewTotalsResponseValidationError) ErrorName() string {
	return "MetricsViewTotalsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewTotalsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewTotalsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewTotalsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewTotalsResponseValidationError{}

// Validate checks the field values on MetricsViewSort with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewSort) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewSort with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewSortMultiError, or nil if none found.
func (m *MetricsViewSort) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewSort) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Ascending

	if len(errors) > 0 {
		return MetricsViewSortMultiError(errors)
	}

	return nil
}

// MetricsViewSortMultiError is an error wrapping multiple validation errors
// returned by MetricsViewSort.ValidateAll() if the designated constraints
// aren't met.
type MetricsViewSortMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewSortMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewSortMultiError) AllErrors() []error { return m }

// MetricsViewSortValidationError is the validation error returned by
// MetricsViewSort.Validate if the designated constraints aren't met.
type MetricsViewSortValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewSortValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewSortValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewSortValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewSortValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewSortValidationError) ErrorName() string { return "MetricsViewSortValidationError" }

// Error satisfies the builtin error interface
func (e MetricsViewSortValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewSort.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewSortValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewSortValidationError{}

// Validate checks the field values on MetricsViewFilter with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewFilterMultiError, or nil if none found.
func (m *MetricsViewFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInclude() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewFilterValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewFilterValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewFilterValidationError{
					field:  fmt.Sprintf("Include[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExclude() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewFilterValidationError{
						field:  fmt.Sprintf("Exclude[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewFilterValidationError{
						field:  fmt.Sprintf("Exclude[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewFilterValidationError{
					field:  fmt.Sprintf("Exclude[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewFilterMultiError(errors)
	}

	return nil
}

// MetricsViewFilterMultiError is an error wrapping multiple validation errors
// returned by MetricsViewFilter.ValidateAll() if the designated constraints
// aren't met.
type MetricsViewFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewFilterMultiError) AllErrors() []error { return m }

// MetricsViewFilterValidationError is the validation error returned by
// MetricsViewFilter.Validate if the designated constraints aren't met.
type MetricsViewFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewFilterValidationError) ErrorName() string {
	return "MetricsViewFilterValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewFilterValidationError{}

// Validate checks the field values on MetricsViewColumn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewColumn with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewColumnMultiError, or nil if none found.
func (m *MetricsViewColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for Nullable

	if len(errors) > 0 {
		return MetricsViewColumnMultiError(errors)
	}

	return nil
}

// MetricsViewColumnMultiError is an error wrapping multiple validation errors
// returned by MetricsViewColumn.ValidateAll() if the designated constraints
// aren't met.
type MetricsViewColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewColumnMultiError) AllErrors() []error { return m }

// MetricsViewColumnValidationError is the validation error returned by
// MetricsViewColumn.Validate if the designated constraints aren't met.
type MetricsViewColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewColumnValidationError) ErrorName() string {
	return "MetricsViewColumnValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewColumnValidationError{}

// Validate checks the field values on EstimateRollupIntervalRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRollupIntervalRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRollupIntervalRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EstimateRollupIntervalRequestMultiError, or nil if none found.
func (m *EstimateRollupIntervalRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRollupIntervalRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return EstimateRollupIntervalRequestMultiError(errors)
	}

	return nil
}

// EstimateRollupIntervalRequestMultiError is an error wrapping multiple
// validation errors returned by EstimateRollupIntervalRequest.ValidateAll()
// if the designated constraints aren't met.
type EstimateRollupIntervalRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRollupIntervalRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRollupIntervalRequestMultiError) AllErrors() []error { return m }

// EstimateRollupIntervalRequestValidationError is the validation error
// returned by EstimateRollupIntervalRequest.Validate if the designated
// constraints aren't met.
type EstimateRollupIntervalRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRollupIntervalRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRollupIntervalRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRollupIntervalRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRollupIntervalRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRollupIntervalRequestValidationError) ErrorName() string {
	return "EstimateRollupIntervalRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRollupIntervalRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRollupIntervalRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRollupIntervalRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRollupIntervalRequestValidationError{}

// Validate checks the field values on EstimateRollupIntervalResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *EstimateRollupIntervalResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateRollupIntervalResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EstimateRollupIntervalResponseMultiError, or nil if none found.
func (m *EstimateRollupIntervalResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateRollupIntervalResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRollupIntervalResponseValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRollupIntervalResponseValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRollupIntervalResponseValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, EstimateRollupIntervalResponseValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, EstimateRollupIntervalResponseValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return EstimateRollupIntervalResponseValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Interval

	if len(errors) > 0 {
		return EstimateRollupIntervalResponseMultiError(errors)
	}

	return nil
}

// EstimateRollupIntervalResponseMultiError is an error wrapping multiple
// validation errors returned by EstimateRollupIntervalResponse.ValidateAll()
// if the designated constraints aren't met.
type EstimateRollupIntervalResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateRollupIntervalResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateRollupIntervalResponseMultiError) AllErrors() []error { return m }

// EstimateRollupIntervalResponseValidationError is the validation error
// returned by EstimateRollupIntervalResponse.Validate if the designated
// constraints aren't met.
type EstimateRollupIntervalResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateRollupIntervalResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateRollupIntervalResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateRollupIntervalResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateRollupIntervalResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateRollupIntervalResponseValidationError) ErrorName() string {
	return "EstimateRollupIntervalResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateRollupIntervalResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateRollupIntervalResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateRollupIntervalResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateRollupIntervalResponseValidationError{}

// Validate checks the field values on ProfileColumnSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileColumnSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileColumnSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileColumnSummaryMultiError, or nil if none found.
func (m *ProfileColumnSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileColumnSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Case.(type) {

	case *ProfileColumnSummary_CategoricalSummary:

		if all {
			switch v := interface{}(m.GetCategoricalSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "CategoricalSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "CategoricalSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetCategoricalSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileColumnSummaryValidationError{
					field:  "CategoricalSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProfileColumnSummary_NumericSummary:

		if all {
			switch v := interface{}(m.GetNumericSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "NumericSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "NumericSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNumericSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileColumnSummaryValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *ProfileColumnSummary_TimeRangeSummary:

		if all {
			switch v := interface{}(m.GetTimeRangeSummary()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "TimeRangeSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileColumnSummaryValidationError{
						field:  "TimeRangeSummary",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTimeRangeSummary()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileColumnSummaryValidationError{
					field:  "TimeRangeSummary",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileColumnSummaryMultiError(errors)
	}

	return nil
}

// ProfileColumnSummaryMultiError is an error wrapping multiple validation
// errors returned by ProfileColumnSummary.ValidateAll() if the designated
// constraints aren't met.
type ProfileColumnSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileColumnSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileColumnSummaryMultiError) AllErrors() []error { return m }

// ProfileColumnSummaryValidationError is the validation error returned by
// ProfileColumnSummary.Validate if the designated constraints aren't met.
type ProfileColumnSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileColumnSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileColumnSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileColumnSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileColumnSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileColumnSummaryValidationError) ErrorName() string {
	return "ProfileColumnSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileColumnSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileColumnSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileColumnSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileColumnSummaryValidationError{}

// Validate checks the field values on CategoricalSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CategoricalSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CategoricalSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CategoricalSummaryMultiError, or nil if none found.
func (m *CategoricalSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *CategoricalSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Case.(type) {

	case *CategoricalSummary_TopK:

		if all {
			switch v := interface{}(m.GetTopK()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, CategoricalSummaryValidationError{
						field:  "TopK",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, CategoricalSummaryValidationError{
						field:  "TopK",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetTopK()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return CategoricalSummaryValidationError{
					field:  "TopK",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *CategoricalSummary_Cardinality:
		// no validation rules for Cardinality

	}

	if len(errors) > 0 {
		return CategoricalSummaryMultiError(errors)
	}

	return nil
}

// CategoricalSummaryMultiError is an error wrapping multiple validation errors
// returned by CategoricalSummary.ValidateAll() if the designated constraints
// aren't met.
type CategoricalSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CategoricalSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CategoricalSummaryMultiError) AllErrors() []error { return m }

// CategoricalSummaryValidationError is the validation error returned by
// CategoricalSummary.Validate if the designated constraints aren't met.
type CategoricalSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CategoricalSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CategoricalSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CategoricalSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CategoricalSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CategoricalSummaryValidationError) ErrorName() string {
	return "CategoricalSummaryValidationError"
}

// Error satisfies the builtin error interface
func (e CategoricalSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCategoricalSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CategoricalSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CategoricalSummaryValidationError{}

// Validate checks the field values on GetCardinalityOfColumnResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardinalityOfColumnResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardinalityOfColumnResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCardinalityOfColumnResponseMultiError, or nil if none found.
func (m *GetCardinalityOfColumnResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardinalityOfColumnResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategoricalSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCardinalityOfColumnResponseValidationError{
					field:  "CategoricalSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCardinalityOfColumnResponseValidationError{
					field:  "CategoricalSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoricalSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCardinalityOfColumnResponseValidationError{
				field:  "CategoricalSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCardinalityOfColumnResponseMultiError(errors)
	}

	return nil
}

// GetCardinalityOfColumnResponseMultiError is an error wrapping multiple
// validation errors returned by GetCardinalityOfColumnResponse.ValidateAll()
// if the designated constraints aren't met.
type GetCardinalityOfColumnResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardinalityOfColumnResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardinalityOfColumnResponseMultiError) AllErrors() []error { return m }

// GetCardinalityOfColumnResponseValidationError is the validation error
// returned by GetCardinalityOfColumnResponse.Validate if the designated
// constraints aren't met.
type GetCardinalityOfColumnResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardinalityOfColumnResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardinalityOfColumnResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardinalityOfColumnResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardinalityOfColumnResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardinalityOfColumnResponseValidationError) ErrorName() string {
	return "GetCardinalityOfColumnResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardinalityOfColumnResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardinalityOfColumnResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardinalityOfColumnResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardinalityOfColumnResponseValidationError{}

// Validate checks the field values on GetTopKResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetTopKResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopKResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTopKResponseMultiError, or nil if none found.
func (m *GetTopKResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopKResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetCategoricalSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTopKResponseValidationError{
					field:  "CategoricalSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTopKResponseValidationError{
					field:  "CategoricalSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCategoricalSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTopKResponseValidationError{
				field:  "CategoricalSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTopKResponseMultiError(errors)
	}

	return nil
}

// GetTopKResponseMultiError is an error wrapping multiple validation errors
// returned by GetTopKResponse.ValidateAll() if the designated constraints
// aren't met.
type GetTopKResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopKResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopKResponseMultiError) AllErrors() []error { return m }

// GetTopKResponseValidationError is the validation error returned by
// GetTopKResponse.Validate if the designated constraints aren't met.
type GetTopKResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopKResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopKResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopKResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopKResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopKResponseValidationError) ErrorName() string { return "GetTopKResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetTopKResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopKResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopKResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopKResponseValidationError{}

// Validate checks the field values on NumericSummary with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *NumericSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in NumericSummaryMultiError,
// or nil if none found.
func (m *NumericSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch m.Case.(type) {

	case *NumericSummary_NumericHistogramBins:

		if all {
			switch v := interface{}(m.GetNumericHistogramBins()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericHistogramBins",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericHistogramBins",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNumericHistogramBins()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NumericSummaryValidationError{
					field:  "NumericHistogramBins",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NumericSummary_NumericStatistics:

		if all {
			switch v := interface{}(m.GetNumericStatistics()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericStatistics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericStatistics",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNumericStatistics()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NumericSummaryValidationError{
					field:  "NumericStatistics",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *NumericSummary_NumericOutliers:

		if all {
			switch v := interface{}(m.GetNumericOutliers()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericOutliers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NumericSummaryValidationError{
						field:  "NumericOutliers",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetNumericOutliers()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NumericSummaryValidationError{
					field:  "NumericOutliers",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NumericSummaryMultiError(errors)
	}

	return nil
}

// NumericSummaryMultiError is an error wrapping multiple validation errors
// returned by NumericSummary.ValidateAll() if the designated constraints
// aren't met.
type NumericSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericSummaryMultiError) AllErrors() []error { return m }

// NumericSummaryValidationError is the validation error returned by
// NumericSummary.Validate if the designated constraints aren't met.
type NumericSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericSummaryValidationError) ErrorName() string { return "NumericSummaryValidationError" }

// Error satisfies the builtin error interface
func (e NumericSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericSummaryValidationError{}

// Validate checks the field values on GetRugHistogramResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRugHistogramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRugHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRugHistogramResponseMultiError, or nil if none found.
func (m *GetRugHistogramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRugHistogramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNumericSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetRugHistogramResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetRugHistogramResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumericSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetRugHistogramResponseValidationError{
				field:  "NumericSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetRugHistogramResponseMultiError(errors)
	}

	return nil
}

// GetRugHistogramResponseMultiError is an error wrapping multiple validation
// errors returned by GetRugHistogramResponse.ValidateAll() if the designated
// constraints aren't met.
type GetRugHistogramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRugHistogramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRugHistogramResponseMultiError) AllErrors() []error { return m }

// GetRugHistogramResponseValidationError is the validation error returned by
// GetRugHistogramResponse.Validate if the designated constraints aren't met.
type GetRugHistogramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRugHistogramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRugHistogramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRugHistogramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRugHistogramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRugHistogramResponseValidationError) ErrorName() string {
	return "GetRugHistogramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetRugHistogramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRugHistogramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRugHistogramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRugHistogramResponseValidationError{}

// Validate checks the field values on GetNumericHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNumericHistogramResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNumericHistogramResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNumericHistogramResponseMultiError, or nil if none found.
func (m *GetNumericHistogramResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNumericHistogramResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNumericSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetNumericHistogramResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetNumericHistogramResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumericSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetNumericHistogramResponseValidationError{
				field:  "NumericSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetNumericHistogramResponseMultiError(errors)
	}

	return nil
}

// GetNumericHistogramResponseMultiError is an error wrapping multiple
// validation errors returned by GetNumericHistogramResponse.ValidateAll() if
// the designated constraints aren't met.
type GetNumericHistogramResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNumericHistogramResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNumericHistogramResponseMultiError) AllErrors() []error { return m }

// GetNumericHistogramResponseValidationError is the validation error returned
// by GetNumericHistogramResponse.Validate if the designated constraints
// aren't met.
type GetNumericHistogramResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNumericHistogramResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNumericHistogramResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNumericHistogramResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNumericHistogramResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNumericHistogramResponseValidationError) ErrorName() string {
	return "GetNumericHistogramResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNumericHistogramResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNumericHistogramResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNumericHistogramResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNumericHistogramResponseValidationError{}

// Validate checks the field values on GetDescriptiveStatisticsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *GetDescriptiveStatisticsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDescriptiveStatisticsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDescriptiveStatisticsResponseMultiError, or nil if none found.
func (m *GetDescriptiveStatisticsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDescriptiveStatisticsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetNumericSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetDescriptiveStatisticsResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetDescriptiveStatisticsResponseValidationError{
					field:  "NumericSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetNumericSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetDescriptiveStatisticsResponseValidationError{
				field:  "NumericSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetDescriptiveStatisticsResponseMultiError(errors)
	}

	return nil
}

// GetDescriptiveStatisticsResponseMultiError is an error wrapping multiple
// validation errors returned by
// GetDescriptiveStatisticsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetDescriptiveStatisticsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDescriptiveStatisticsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDescriptiveStatisticsResponseMultiError) AllErrors() []error { return m }

// GetDescriptiveStatisticsResponseValidationError is the validation error
// returned by GetDescriptiveStatisticsResponse.Validate if the designated
// constraints aren't met.
type GetDescriptiveStatisticsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDescriptiveStatisticsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDescriptiveStatisticsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDescriptiveStatisticsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDescriptiveStatisticsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDescriptiveStatisticsResponseValidationError) ErrorName() string {
	return "GetDescriptiveStatisticsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetDescriptiveStatisticsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDescriptiveStatisticsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDescriptiveStatisticsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDescriptiveStatisticsResponseValidationError{}

// Validate checks the field values on GetTimeRangeSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangeSummaryResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeRangeSummaryResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeRangeSummaryResponseMultiError, or nil if none found.
func (m *GetTimeRangeSummaryResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangeSummaryResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetTimeRangeSummary()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetTimeRangeSummaryResponseValidationError{
					field:  "TimeRangeSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetTimeRangeSummaryResponseValidationError{
					field:  "TimeRangeSummary",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRangeSummary()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetTimeRangeSummaryResponseValidationError{
				field:  "TimeRangeSummary",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetTimeRangeSummaryResponseMultiError(errors)
	}

	return nil
}

// GetTimeRangeSummaryResponseMultiError is an error wrapping multiple
// validation errors returned by GetTimeRangeSummaryResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTimeRangeSummaryResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangeSummaryResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangeSummaryResponseMultiError) AllErrors() []error { return m }

// GetTimeRangeSummaryResponseValidationError is the validation error returned
// by GetTimeRangeSummaryResponse.Validate if the designated constraints
// aren't met.
type GetTimeRangeSummaryResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangeSummaryResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangeSummaryResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangeSummaryResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangeSummaryResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangeSummaryResponseValidationError) ErrorName() string {
	return "GetTimeRangeSummaryResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangeSummaryResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangeSummaryResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangeSummaryResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangeSummaryResponseValidationError{}

// Validate checks the field values on TimeRangeSummary with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimeRangeSummary) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeRangeSummary with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeRangeSummaryMultiError, or nil if none found.
func (m *TimeRangeSummary) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeRangeSummary) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMin()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Min",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Min",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMin()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeSummaryValidationError{
				field:  "Min",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMax()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Max",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Max",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMax()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeSummaryValidationError{
				field:  "Max",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetInterval()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeRangeSummaryValidationError{
					field:  "Interval",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetInterval()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeRangeSummaryValidationError{
				field:  "Interval",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TimeRangeSummaryMultiError(errors)
	}

	return nil
}

// TimeRangeSummaryMultiError is an error wrapping multiple validation errors
// returned by TimeRangeSummary.ValidateAll() if the designated constraints
// aren't met.
type TimeRangeSummaryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeRangeSummaryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeRangeSummaryMultiError) AllErrors() []error { return m }

// TimeRangeSummaryValidationError is the validation error returned by
// TimeRangeSummary.Validate if the designated constraints aren't met.
type TimeRangeSummaryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeSummaryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeSummaryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeSummaryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeSummaryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeSummaryValidationError) ErrorName() string { return "TimeRangeSummaryValidationError" }

// Error satisfies the builtin error interface
func (e TimeRangeSummaryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRangeSummary.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeSummaryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeSummaryValidationError{}

// Validate checks the field values on NumericOutliers with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NumericOutliers) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericOutliers with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NumericOutliersMultiError, or nil if none found.
func (m *NumericOutliers) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericOutliers) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOutliers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NumericOutliersValidationError{
						field:  fmt.Sprintf("Outliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NumericOutliersValidationError{
						field:  fmt.Sprintf("Outliers[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NumericOutliersValidationError{
					field:  fmt.Sprintf("Outliers[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NumericOutliersMultiError(errors)
	}

	return nil
}

// NumericOutliersMultiError is an error wrapping multiple validation errors
// returned by NumericOutliers.ValidateAll() if the designated constraints
// aren't met.
type NumericOutliersMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericOutliersMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericOutliersMultiError) AllErrors() []error { return m }

// NumericOutliersValidationError is the validation error returned by
// NumericOutliers.Validate if the designated constraints aren't met.
type NumericOutliersValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericOutliersValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericOutliersValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericOutliersValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericOutliersValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericOutliersValidationError) ErrorName() string { return "NumericOutliersValidationError" }

// Error satisfies the builtin error interface
func (e NumericOutliersValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericOutliers.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericOutliersValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericOutliersValidationError{}

// Validate checks the field values on GetTopKRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetTopKRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTopKRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetTopKRequestMultiError,
// or nil if none found.
func (m *GetTopKRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTopKRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Agg

	// no validation rules for K

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetTopKRequestMultiError(errors)
	}

	return nil
}

// GetTopKRequestMultiError is an error wrapping multiple validation errors
// returned by GetTopKRequest.ValidateAll() if the designated constraints
// aren't met.
type GetTopKRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTopKRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTopKRequestMultiError) AllErrors() []error { return m }

// GetTopKRequestValidationError is the validation error returned by
// GetTopKRequest.Validate if the designated constraints aren't met.
type GetTopKRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTopKRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTopKRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTopKRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTopKRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTopKRequestValidationError) ErrorName() string { return "GetTopKRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetTopKRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTopKRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTopKRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTopKRequestValidationError{}

// Validate checks the field values on TopK with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *TopK) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopK with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TopKMultiError, or nil if none found.
func (m *TopK) ValidateAll() error {
	return m.validate(true)
}

func (m *TopK) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetEntries() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TopKValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TopKValidationError{
						field:  fmt.Sprintf("Entries[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TopKValidationError{
					field:  fmt.Sprintf("Entries[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return TopKMultiError(errors)
	}

	return nil
}

// TopKMultiError is an error wrapping multiple validation errors returned by
// TopK.ValidateAll() if the designated constraints aren't met.
type TopKMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopKMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopKMultiError) AllErrors() []error { return m }

// TopKValidationError is the validation error returned by TopK.Validate if the
// designated constraints aren't met.
type TopKValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopKValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopKValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopKValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopKValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopKValidationError) ErrorName() string { return "TopKValidationError" }

// Error satisfies the builtin error interface
func (e TopKValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopK.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopKValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopKValidationError{}

// Validate checks the field values on GetNullCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNullCountRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNullCountRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNullCountRequestMultiError, or nil if none found.
func (m *GetNullCountRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNullCountRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetNullCountRequestMultiError(errors)
	}

	return nil
}

// GetNullCountRequestMultiError is an error wrapping multiple validation
// errors returned by GetNullCountRequest.ValidateAll() if the designated
// constraints aren't met.
type GetNullCountRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNullCountRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNullCountRequestMultiError) AllErrors() []error { return m }

// GetNullCountRequestValidationError is the validation error returned by
// GetNullCountRequest.Validate if the designated constraints aren't met.
type GetNullCountRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNullCountRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNullCountRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNullCountRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNullCountRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNullCountRequestValidationError) ErrorName() string {
	return "GetNullCountRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNullCountRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNullCountRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNullCountRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNullCountRequestValidationError{}

// Validate checks the field values on GetNullCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNullCountResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNullCountResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNullCountResponseMultiError, or nil if none found.
func (m *GetNullCountResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNullCountResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Count

	if len(errors) > 0 {
		return GetNullCountResponseMultiError(errors)
	}

	return nil
}

// GetNullCountResponseMultiError is an error wrapping multiple validation
// errors returned by GetNullCountResponse.ValidateAll() if the designated
// constraints aren't met.
type GetNullCountResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNullCountResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNullCountResponseMultiError) AllErrors() []error { return m }

// GetNullCountResponseValidationError is the validation error returned by
// GetNullCountResponse.Validate if the designated constraints aren't met.
type GetNullCountResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNullCountResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNullCountResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNullCountResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNullCountResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNullCountResponseValidationError) ErrorName() string {
	return "GetNullCountResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetNullCountResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNullCountResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNullCountResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNullCountResponseValidationError{}

// Validate checks the field values on GetDescriptiveStatisticsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetDescriptiveStatisticsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetDescriptiveStatisticsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetDescriptiveStatisticsRequestMultiError, or nil if none found.
func (m *GetDescriptiveStatisticsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetDescriptiveStatisticsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetDescriptiveStatisticsRequestMultiError(errors)
	}

	return nil
}

// GetDescriptiveStatisticsRequestMultiError is an error wrapping multiple
// validation errors returned by GetDescriptiveStatisticsRequest.ValidateAll()
// if the designated constraints aren't met.
type GetDescriptiveStatisticsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetDescriptiveStatisticsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetDescriptiveStatisticsRequestMultiError) AllErrors() []error { return m }

// GetDescriptiveStatisticsRequestValidationError is the validation error
// returned by GetDescriptiveStatisticsRequest.Validate if the designated
// constraints aren't met.
type GetDescriptiveStatisticsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetDescriptiveStatisticsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetDescriptiveStatisticsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetDescriptiveStatisticsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetDescriptiveStatisticsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetDescriptiveStatisticsRequestValidationError) ErrorName() string {
	return "GetDescriptiveStatisticsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetDescriptiveStatisticsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetDescriptiveStatisticsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetDescriptiveStatisticsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetDescriptiveStatisticsRequestValidationError{}

// Validate checks the field values on NumericStatistics with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *NumericStatistics) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericStatistics with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NumericStatisticsMultiError, or nil if none found.
func (m *NumericStatistics) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericStatistics) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Min

	// no validation rules for Max

	// no validation rules for Mean

	// no validation rules for Q25

	// no validation rules for Q50

	// no validation rules for Q75

	// no validation rules for Sd

	if len(errors) > 0 {
		return NumericStatisticsMultiError(errors)
	}

	return nil
}

// NumericStatisticsMultiError is an error wrapping multiple validation errors
// returned by NumericStatistics.ValidateAll() if the designated constraints
// aren't met.
type NumericStatisticsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericStatisticsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericStatisticsMultiError) AllErrors() []error { return m }

// NumericStatisticsValidationError is the validation error returned by
// NumericStatistics.Validate if the designated constraints aren't met.
type NumericStatisticsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericStatisticsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericStatisticsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericStatisticsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericStatisticsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericStatisticsValidationError) ErrorName() string {
	return "NumericStatisticsValidationError"
}

// Error satisfies the builtin error interface
func (e NumericStatisticsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericStatistics.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericStatisticsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericStatisticsValidationError{}

// Validate checks the field values on EstimateSmallestTimeGrainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateSmallestTimeGrainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSmallestTimeGrainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// EstimateSmallestTimeGrainRequestMultiError, or nil if none found.
func (m *EstimateSmallestTimeGrainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSmallestTimeGrainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return EstimateSmallestTimeGrainRequestMultiError(errors)
	}

	return nil
}

// EstimateSmallestTimeGrainRequestMultiError is an error wrapping multiple
// validation errors returned by
// EstimateSmallestTimeGrainRequest.ValidateAll() if the designated
// constraints aren't met.
type EstimateSmallestTimeGrainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSmallestTimeGrainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSmallestTimeGrainRequestMultiError) AllErrors() []error { return m }

// EstimateSmallestTimeGrainRequestValidationError is the validation error
// returned by EstimateSmallestTimeGrainRequest.Validate if the designated
// constraints aren't met.
type EstimateSmallestTimeGrainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSmallestTimeGrainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSmallestTimeGrainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSmallestTimeGrainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSmallestTimeGrainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSmallestTimeGrainRequestValidationError) ErrorName() string {
	return "EstimateSmallestTimeGrainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSmallestTimeGrainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSmallestTimeGrainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSmallestTimeGrainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSmallestTimeGrainRequestValidationError{}

// Validate checks the field values on EstimateSmallestTimeGrainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *EstimateSmallestTimeGrainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on EstimateSmallestTimeGrainResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// EstimateSmallestTimeGrainResponseMultiError, or nil if none found.
func (m *EstimateSmallestTimeGrainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *EstimateSmallestTimeGrainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TimeGrain

	if len(errors) > 0 {
		return EstimateSmallestTimeGrainResponseMultiError(errors)
	}

	return nil
}

// EstimateSmallestTimeGrainResponseMultiError is an error wrapping multiple
// validation errors returned by
// EstimateSmallestTimeGrainResponse.ValidateAll() if the designated
// constraints aren't met.
type EstimateSmallestTimeGrainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m EstimateSmallestTimeGrainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m EstimateSmallestTimeGrainResponseMultiError) AllErrors() []error { return m }

// EstimateSmallestTimeGrainResponseValidationError is the validation error
// returned by EstimateSmallestTimeGrainResponse.Validate if the designated
// constraints aren't met.
type EstimateSmallestTimeGrainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EstimateSmallestTimeGrainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EstimateSmallestTimeGrainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EstimateSmallestTimeGrainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EstimateSmallestTimeGrainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EstimateSmallestTimeGrainResponseValidationError) ErrorName() string {
	return "EstimateSmallestTimeGrainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e EstimateSmallestTimeGrainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEstimateSmallestTimeGrainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EstimateSmallestTimeGrainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EstimateSmallestTimeGrainResponseValidationError{}

// Validate checks the field values on GetNumericHistogramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetNumericHistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetNumericHistogramRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetNumericHistogramRequestMultiError, or nil if none found.
func (m *GetNumericHistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetNumericHistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetNumericHistogramRequestMultiError(errors)
	}

	return nil
}

// GetNumericHistogramRequestMultiError is an error wrapping multiple
// validation errors returned by GetNumericHistogramRequest.ValidateAll() if
// the designated constraints aren't met.
type GetNumericHistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetNumericHistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetNumericHistogramRequestMultiError) AllErrors() []error { return m }

// GetNumericHistogramRequestValidationError is the validation error returned
// by GetNumericHistogramRequest.Validate if the designated constraints aren't met.
type GetNumericHistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetNumericHistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetNumericHistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetNumericHistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetNumericHistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetNumericHistogramRequestValidationError) ErrorName() string {
	return "GetNumericHistogramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetNumericHistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetNumericHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetNumericHistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetNumericHistogramRequestValidationError{}

// Validate checks the field values on NumericHistogramBins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NumericHistogramBins) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericHistogramBins with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NumericHistogramBinsMultiError, or nil if none found.
func (m *NumericHistogramBins) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericHistogramBins) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetBins() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, NumericHistogramBinsValidationError{
						field:  fmt.Sprintf("Bins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, NumericHistogramBinsValidationError{
						field:  fmt.Sprintf("Bins[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return NumericHistogramBinsValidationError{
					field:  fmt.Sprintf("Bins[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return NumericHistogramBinsMultiError(errors)
	}

	return nil
}

// NumericHistogramBinsMultiError is an error wrapping multiple validation
// errors returned by NumericHistogramBins.ValidateAll() if the designated
// constraints aren't met.
type NumericHistogramBinsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericHistogramBinsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericHistogramBinsMultiError) AllErrors() []error { return m }

// NumericHistogramBinsValidationError is the validation error returned by
// NumericHistogramBins.Validate if the designated constraints aren't met.
type NumericHistogramBinsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericHistogramBinsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericHistogramBinsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericHistogramBinsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericHistogramBinsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericHistogramBinsValidationError) ErrorName() string {
	return "NumericHistogramBinsValidationError"
}

// Error satisfies the builtin error interface
func (e NumericHistogramBinsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericHistogramBins.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericHistogramBinsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericHistogramBinsValidationError{}

// Validate checks the field values on GetRugHistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetRugHistogramRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetRugHistogramRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetRugHistogramRequestMultiError, or nil if none found.
func (m *GetRugHistogramRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetRugHistogramRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetRugHistogramRequestMultiError(errors)
	}

	return nil
}

// GetRugHistogramRequestMultiError is an error wrapping multiple validation
// errors returned by GetRugHistogramRequest.ValidateAll() if the designated
// constraints aren't met.
type GetRugHistogramRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetRugHistogramRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetRugHistogramRequestMultiError) AllErrors() []error { return m }

// GetRugHistogramRequestValidationError is the validation error returned by
// GetRugHistogramRequest.Validate if the designated constraints aren't met.
type GetRugHistogramRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetRugHistogramRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetRugHistogramRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetRugHistogramRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetRugHistogramRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetRugHistogramRequestValidationError) ErrorName() string {
	return "GetRugHistogramRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetRugHistogramRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetRugHistogramRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetRugHistogramRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetRugHistogramRequestValidationError{}

// Validate checks the field values on GetTimeRangeSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTimeRangeSummaryRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTimeRangeSummaryRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTimeRangeSummaryRequestMultiError, or nil if none found.
func (m *GetTimeRangeSummaryRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTimeRangeSummaryRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetTimeRangeSummaryRequestMultiError(errors)
	}

	return nil
}

// GetTimeRangeSummaryRequestMultiError is an error wrapping multiple
// validation errors returned by GetTimeRangeSummaryRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTimeRangeSummaryRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTimeRangeSummaryRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTimeRangeSummaryRequestMultiError) AllErrors() []error { return m }

// GetTimeRangeSummaryRequestValidationError is the validation error returned
// by GetTimeRangeSummaryRequest.Validate if the designated constraints aren't met.
type GetTimeRangeSummaryRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTimeRangeSummaryRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTimeRangeSummaryRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTimeRangeSummaryRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTimeRangeSummaryRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTimeRangeSummaryRequestValidationError) ErrorName() string {
	return "GetTimeRangeSummaryRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTimeRangeSummaryRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTimeRangeSummaryRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTimeRangeSummaryRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTimeRangeSummaryRequestValidationError{}

// Validate checks the field values on GetCardinalityOfColumnRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCardinalityOfColumnRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCardinalityOfColumnRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// GetCardinalityOfColumnRequestMultiError, or nil if none found.
func (m *GetCardinalityOfColumnRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCardinalityOfColumnRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for ColumnName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetCardinalityOfColumnRequestMultiError(errors)
	}

	return nil
}

// GetCardinalityOfColumnRequestMultiError is an error wrapping multiple
// validation errors returned by GetCardinalityOfColumnRequest.ValidateAll()
// if the designated constraints aren't met.
type GetCardinalityOfColumnRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCardinalityOfColumnRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCardinalityOfColumnRequestMultiError) AllErrors() []error { return m }

// GetCardinalityOfColumnRequestValidationError is the validation error
// returned by GetCardinalityOfColumnRequest.Validate if the designated
// constraints aren't met.
type GetCardinalityOfColumnRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCardinalityOfColumnRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCardinalityOfColumnRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCardinalityOfColumnRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCardinalityOfColumnRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCardinalityOfColumnRequestValidationError) ErrorName() string {
	return "GetCardinalityOfColumnRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCardinalityOfColumnRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCardinalityOfColumnRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCardinalityOfColumnRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCardinalityOfColumnRequestValidationError{}

// Validate checks the field values on GenerateTimeSeriesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateTimeSeriesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTimeSeriesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTimeSeriesRequestMultiError, or nil if none found.
func (m *GenerateTimeSeriesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTimeSeriesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	for idx, item := range m.GetMeasures() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GenerateTimeSeriesRequestValidationError{
						field:  fmt.Sprintf("Measures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GenerateTimeSeriesRequestValidationError{
						field:  fmt.Sprintf("Measures[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GenerateTimeSeriesRequestValidationError{
					field:  fmt.Sprintf("Measures[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for TimestampColumnName

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateTimeSeriesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateTimeSeriesRequestValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateTimeSeriesRequestValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetFilters()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateTimeSeriesRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateTimeSeriesRequestValidationError{
					field:  "Filters",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetFilters()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateTimeSeriesRequestValidationError{
				field:  "Filters",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Pixels

	// no validation rules for SampleSize

	// no validation rules for Priority

	if len(errors) > 0 {
		return GenerateTimeSeriesRequestMultiError(errors)
	}

	return nil
}

// GenerateTimeSeriesRequestMultiError is an error wrapping multiple validation
// errors returned by GenerateTimeSeriesRequest.ValidateAll() if the
// designated constraints aren't met.
type GenerateTimeSeriesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTimeSeriesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTimeSeriesRequestMultiError) AllErrors() []error { return m }

// GenerateTimeSeriesRequestValidationError is the validation error returned by
// GenerateTimeSeriesRequest.Validate if the designated constraints aren't met.
type GenerateTimeSeriesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTimeSeriesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTimeSeriesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTimeSeriesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTimeSeriesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTimeSeriesRequestValidationError) ErrorName() string {
	return "GenerateTimeSeriesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTimeSeriesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTimeSeriesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTimeSeriesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTimeSeriesRequestValidationError{}

// Validate checks the field values on TimeSeriesTimeRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeSeriesTimeRange) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSeriesTimeRange with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSeriesTimeRangeMultiError, or nil if none found.
func (m *TimeSeriesTimeRange) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSeriesTimeRange) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStart()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeSeriesTimeRangeValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeSeriesTimeRangeValidationError{
					field:  "Start",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStart()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeSeriesTimeRangeValidationError{
				field:  "Start",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetEnd()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeSeriesTimeRangeValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeSeriesTimeRangeValidationError{
					field:  "End",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetEnd()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeSeriesTimeRangeValidationError{
				field:  "End",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Interval

	if len(errors) > 0 {
		return TimeSeriesTimeRangeMultiError(errors)
	}

	return nil
}

// TimeSeriesTimeRangeMultiError is an error wrapping multiple validation
// errors returned by TimeSeriesTimeRange.ValidateAll() if the designated
// constraints aren't met.
type TimeSeriesTimeRangeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSeriesTimeRangeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSeriesTimeRangeMultiError) AllErrors() []error { return m }

// TimeSeriesTimeRangeValidationError is the validation error returned by
// TimeSeriesTimeRange.Validate if the designated constraints aren't met.
type TimeSeriesTimeRangeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSeriesTimeRangeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSeriesTimeRangeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSeriesTimeRangeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSeriesTimeRangeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSeriesTimeRangeValidationError) ErrorName() string {
	return "TimeSeriesTimeRangeValidationError"
}

// Error satisfies the builtin error interface
func (e TimeSeriesTimeRangeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSeriesTimeRange.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSeriesTimeRangeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSeriesTimeRangeValidationError{}

// Validate checks the field values on MetricsViewDimensionValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewDimensionValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewDimensionValue with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewDimensionValueMultiError, or nil if none found.
func (m *MetricsViewDimensionValue) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewDimensionValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetIn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewDimensionValueValidationError{
						field:  fmt.Sprintf("In[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewDimensionValueValidationError{
						field:  fmt.Sprintf("In[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewDimensionValueValidationError{
					field:  fmt.Sprintf("In[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewDimensionValueMultiError(errors)
	}

	return nil
}

// MetricsViewDimensionValueMultiError is an error wrapping multiple validation
// errors returned by MetricsViewDimensionValue.ValidateAll() if the
// designated constraints aren't met.
type MetricsViewDimensionValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewDimensionValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewDimensionValueMultiError) AllErrors() []error { return m }

// MetricsViewDimensionValueValidationError is the validation error returned by
// MetricsViewDimensionValue.Validate if the designated constraints aren't met.
type MetricsViewDimensionValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewDimensionValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewDimensionValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewDimensionValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewDimensionValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewDimensionValueValidationError) ErrorName() string {
	return "MetricsViewDimensionValueValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewDimensionValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewDimensionValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewDimensionValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewDimensionValueValidationError{}

// Validate checks the field values on MetricsViewRequestFilter with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewRequestFilter) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewRequestFilter with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewRequestFilterMultiError, or nil if none found.
func (m *MetricsViewRequestFilter) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewRequestFilter) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInclude() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewRequestFilterValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewRequestFilterValidationError{
						field:  fmt.Sprintf("Include[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewRequestFilterValidationError{
					field:  fmt.Sprintf("Include[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetExclude() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewRequestFilterValidationError{
						field:  fmt.Sprintf("Exclude[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewRequestFilterValidationError{
						field:  fmt.Sprintf("Exclude[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewRequestFilterValidationError{
					field:  fmt.Sprintf("Exclude[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewRequestFilterMultiError(errors)
	}

	return nil
}

// MetricsViewRequestFilterMultiError is an error wrapping multiple validation
// errors returned by MetricsViewRequestFilter.ValidateAll() if the designated
// constraints aren't met.
type MetricsViewRequestFilterMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewRequestFilterMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewRequestFilterMultiError) AllErrors() []error { return m }

// MetricsViewRequestFilterValidationError is the validation error returned by
// MetricsViewRequestFilter.Validate if the designated constraints aren't met.
type MetricsViewRequestFilterValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewRequestFilterValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewRequestFilterValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewRequestFilterValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewRequestFilterValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewRequestFilterValidationError) ErrorName() string {
	return "MetricsViewRequestFilterValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewRequestFilterValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewRequestFilter.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewRequestFilterValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewRequestFilterValidationError{}

// Validate checks the field values on TimeSeriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeSeriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSeriesResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSeriesResponseMultiError, or nil if none found.
func (m *TimeSeriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSeriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetResults() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Results[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeSeriesResponseValidationError{
					field:  fmt.Sprintf("Results[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetSpark() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, TimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Spark[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, TimeSeriesResponseValidationError{
						field:  fmt.Sprintf("Spark[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return TimeSeriesResponseValidationError{
					field:  fmt.Sprintf("Spark[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetTimeRange()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TimeSeriesResponseValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TimeSeriesResponseValidationError{
					field:  "TimeRange",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTimeRange()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TimeSeriesResponseValidationError{
				field:  "TimeRange",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for SampleSize

	if len(errors) > 0 {
		return TimeSeriesResponseMultiError(errors)
	}

	return nil
}

// TimeSeriesResponseMultiError is an error wrapping multiple validation errors
// returned by TimeSeriesResponse.ValidateAll() if the designated constraints
// aren't met.
type TimeSeriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSeriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSeriesResponseMultiError) AllErrors() []error { return m }

// TimeSeriesResponseValidationError is the validation error returned by
// TimeSeriesResponse.Validate if the designated constraints aren't met.
type TimeSeriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSeriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSeriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSeriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSeriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSeriesResponseValidationError) ErrorName() string {
	return "TimeSeriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TimeSeriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSeriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSeriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSeriesResponseValidationError{}

// Validate checks the field values on GenerateTimeSeriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GenerateTimeSeriesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GenerateTimeSeriesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GenerateTimeSeriesResponseMultiError, or nil if none found.
func (m *GenerateTimeSeriesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTimeSeriesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetRollup()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GenerateTimeSeriesResponseValidationError{
					field:  "Rollup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GenerateTimeSeriesResponseValidationError{
					field:  "Rollup",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRollup()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GenerateTimeSeriesResponseValidationError{
				field:  "Rollup",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GenerateTimeSeriesResponseMultiError(errors)
	}

	return nil
}

// GenerateTimeSeriesResponseMultiError is an error wrapping multiple
// validation errors returned by GenerateTimeSeriesResponse.ValidateAll() if
// the designated constraints aren't met.
type GenerateTimeSeriesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTimeSeriesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTimeSeriesResponseMultiError) AllErrors() []error { return m }

// GenerateTimeSeriesResponseValidationError is the validation error returned
// by GenerateTimeSeriesResponse.Validate if the designated constraints aren't met.
type GenerateTimeSeriesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTimeSeriesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTimeSeriesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTimeSeriesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTimeSeriesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTimeSeriesResponseValidationError) ErrorName() string {
	return "GenerateTimeSeriesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTimeSeriesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTimeSeriesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTimeSeriesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTimeSeriesResponseValidationError{}

// Validate checks the field values on TimeSeriesValue with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *TimeSeriesValue) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeSeriesValue with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeSeriesValueMultiError, or nil if none found.
func (m *TimeSeriesValue) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeSeriesValue) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Ts

	// no validation rules for Records

	if m.Bin != nil {
		// no validation rules for Bin
	}

	if len(errors) > 0 {
		return TimeSeriesValueMultiError(errors)
	}

	return nil
}

// TimeSeriesValueMultiError is an error wrapping multiple validation errors
// returned by TimeSeriesValue.ValidateAll() if the designated constraints
// aren't met.
type TimeSeriesValueMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeSeriesValueMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeSeriesValueMultiError) AllErrors() []error { return m }

// TimeSeriesValueValidationError is the validation error returned by
// TimeSeriesValue.Validate if the designated constraints aren't met.
type TimeSeriesValueValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeSeriesValueValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeSeriesValueValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeSeriesValueValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeSeriesValueValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeSeriesValueValidationError) ErrorName() string { return "TimeSeriesValueValidationError" }

// Error satisfies the builtin error interface
func (e TimeSeriesValueValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeSeriesValue.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeSeriesValueValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeSeriesValueValidationError{}

// Validate checks the field values on GetTableCardinalityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTableCardinalityRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableCardinalityRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableCardinalityRequestMultiError, or nil if none found.
func (m *GetTableCardinalityRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableCardinalityRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetTableCardinalityRequestMultiError(errors)
	}

	return nil
}

// GetTableCardinalityRequestMultiError is an error wrapping multiple
// validation errors returned by GetTableCardinalityRequest.ValidateAll() if
// the designated constraints aren't met.
type GetTableCardinalityRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableCardinalityRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableCardinalityRequestMultiError) AllErrors() []error { return m }

// GetTableCardinalityRequestValidationError is the validation error returned
// by GetTableCardinalityRequest.Validate if the designated constraints aren't met.
type GetTableCardinalityRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableCardinalityRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableCardinalityRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableCardinalityRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableCardinalityRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableCardinalityRequestValidationError) ErrorName() string {
	return "GetTableCardinalityRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTableCardinalityRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableCardinalityRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableCardinalityRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableCardinalityRequestValidationError{}

// Validate checks the field values on GetTableCardinalityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTableCardinalityResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableCardinalityResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableCardinalityResponseMultiError, or nil if none found.
func (m *GetTableCardinalityResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableCardinalityResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Cardinality

	if len(errors) > 0 {
		return GetTableCardinalityResponseMultiError(errors)
	}

	return nil
}

// GetTableCardinalityResponseMultiError is an error wrapping multiple
// validation errors returned by GetTableCardinalityResponse.ValidateAll() if
// the designated constraints aren't met.
type GetTableCardinalityResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableCardinalityResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableCardinalityResponseMultiError) AllErrors() []error { return m }

// GetTableCardinalityResponseValidationError is the validation error returned
// by GetTableCardinalityResponse.Validate if the designated constraints
// aren't met.
type GetTableCardinalityResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableCardinalityResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableCardinalityResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableCardinalityResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableCardinalityResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableCardinalityResponseValidationError) ErrorName() string {
	return "GetTableCardinalityResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTableCardinalityResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableCardinalityResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableCardinalityResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableCardinalityResponseValidationError{}

// Validate checks the field values on ProfileColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileColumnsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileColumnsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileColumnsRequestMultiError, or nil if none found.
func (m *ProfileColumnsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileColumnsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for Priority

	if len(errors) > 0 {
		return ProfileColumnsRequestMultiError(errors)
	}

	return nil
}

// ProfileColumnsRequestMultiError is an error wrapping multiple validation
// errors returned by ProfileColumnsRequest.ValidateAll() if the designated
// constraints aren't met.
type ProfileColumnsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileColumnsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileColumnsRequestMultiError) AllErrors() []error { return m }

// ProfileColumnsRequestValidationError is the validation error returned by
// ProfileColumnsRequest.Validate if the designated constraints aren't met.
type ProfileColumnsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileColumnsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileColumnsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileColumnsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileColumnsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileColumnsRequestValidationError) ErrorName() string {
	return "ProfileColumnsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileColumnsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileColumnsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileColumnsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileColumnsRequestValidationError{}

// Validate checks the field values on ProfileColumnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProfileColumnsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileColumnsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProfileColumnsResponseMultiError, or nil if none found.
func (m *ProfileColumnsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileColumnsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProfileColumns() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ProfileColumnsResponseValidationError{
						field:  fmt.Sprintf("ProfileColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ProfileColumnsResponseValidationError{
						field:  fmt.Sprintf("ProfileColumns[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ProfileColumnsResponseValidationError{
					field:  fmt.Sprintf("ProfileColumns[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ProfileColumnsResponseMultiError(errors)
	}

	return nil
}

// ProfileColumnsResponseMultiError is an error wrapping multiple validation
// errors returned by ProfileColumnsResponse.ValidateAll() if the designated
// constraints aren't met.
type ProfileColumnsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileColumnsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileColumnsResponseMultiError) AllErrors() []error { return m }

// ProfileColumnsResponseValidationError is the validation error returned by
// ProfileColumnsResponse.Validate if the designated constraints aren't met.
type ProfileColumnsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileColumnsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileColumnsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileColumnsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileColumnsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileColumnsResponseValidationError) ErrorName() string {
	return "ProfileColumnsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ProfileColumnsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileColumnsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileColumnsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileColumnsResponseValidationError{}

// Validate checks the field values on ProfileColumn with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *ProfileColumn) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProfileColumn with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ProfileColumnMultiError, or
// nil if none found.
func (m *ProfileColumn) ValidateAll() error {
	return m.validate(true)
}

func (m *ProfileColumn) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Type

	// no validation rules for LargestStringLength

	if len(errors) > 0 {
		return ProfileColumnMultiError(errors)
	}

	return nil
}

// ProfileColumnMultiError is an error wrapping multiple validation errors
// returned by ProfileColumn.ValidateAll() if the designated constraints
// aren't met.
type ProfileColumnMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProfileColumnMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProfileColumnMultiError) AllErrors() []error { return m }

// ProfileColumnValidationError is the validation error returned by
// ProfileColumn.Validate if the designated constraints aren't met.
type ProfileColumnValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProfileColumnValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProfileColumnValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProfileColumnValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProfileColumnValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProfileColumnValidationError) ErrorName() string { return "ProfileColumnValidationError" }

// Error satisfies the builtin error interface
func (e ProfileColumnValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProfileColumn.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProfileColumnValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProfileColumnValidationError{}

// Validate checks the field values on GetTableRowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTableRowsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableRowsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableRowsRequestMultiError, or nil if none found.
func (m *GetTableRowsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableRowsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for InstanceId

	// no validation rules for TableName

	// no validation rules for Limit

	// no validation rules for Priority

	if len(errors) > 0 {
		return GetTableRowsRequestMultiError(errors)
	}

	return nil
}

// GetTableRowsRequestMultiError is an error wrapping multiple validation
// errors returned by GetTableRowsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetTableRowsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableRowsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableRowsRequestMultiError) AllErrors() []error { return m }

// GetTableRowsRequestValidationError is the validation error returned by
// GetTableRowsRequest.Validate if the designated constraints aren't met.
type GetTableRowsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableRowsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableRowsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableRowsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableRowsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableRowsRequestValidationError) ErrorName() string {
	return "GetTableRowsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetTableRowsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableRowsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableRowsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableRowsRequestValidationError{}

// Validate checks the field values on GetTableRowsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetTableRowsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetTableRowsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetTableRowsResponseMultiError, or nil if none found.
func (m *GetTableRowsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetTableRowsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetData() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetTableRowsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetTableRowsResponseValidationError{
						field:  fmt.Sprintf("Data[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetTableRowsResponseValidationError{
					field:  fmt.Sprintf("Data[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetTableRowsResponseMultiError(errors)
	}

	return nil
}

// GetTableRowsResponseMultiError is an error wrapping multiple validation
// errors returned by GetTableRowsResponse.ValidateAll() if the designated
// constraints aren't met.
type GetTableRowsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetTableRowsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetTableRowsResponseMultiError) AllErrors() []error { return m }

// GetTableRowsResponseValidationError is the validation error returned by
// GetTableRowsResponse.Validate if the designated constraints aren't met.
type GetTableRowsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetTableRowsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetTableRowsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetTableRowsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetTableRowsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetTableRowsResponseValidationError) ErrorName() string {
	return "GetTableRowsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetTableRowsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetTableRowsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetTableRowsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetTableRowsResponseValidationError{}

// Validate checks the field values on Connector with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Connector) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Connector with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in ConnectorMultiError, or nil
// if none found.
func (m *Connector) ValidateAll() error {
	return m.validate(true)
}

func (m *Connector) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for DisplayName

	// no validation rules for Description

	for idx, item := range m.GetProperties() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ConnectorValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ConnectorValidationError{
						field:  fmt.Sprintf("Properties[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ConnectorValidationError{
					field:  fmt.Sprintf("Properties[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ConnectorMultiError(errors)
	}

	return nil
}

// ConnectorMultiError is an error wrapping multiple validation errors returned
// by Connector.ValidateAll() if the designated constraints aren't met.
type ConnectorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ConnectorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ConnectorMultiError) AllErrors() []error { return m }

// ConnectorValidationError is the validation error returned by
// Connector.Validate if the designated constraints aren't met.
type ConnectorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ConnectorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ConnectorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ConnectorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ConnectorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ConnectorValidationError) ErrorName() string { return "ConnectorValidationError" }

// Error satisfies the builtin error interface
func (e ConnectorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnector.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ConnectorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ConnectorValidationError{}

// Validate checks the field values on ListConnectorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConnectorsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConnectorsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConnectorsRequestMultiError, or nil if none found.
func (m *ListConnectorsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConnectorsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListConnectorsRequestMultiError(errors)
	}

	return nil
}

// ListConnectorsRequestMultiError is an error wrapping multiple validation
// errors returned by ListConnectorsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListConnectorsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConnectorsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConnectorsRequestMultiError) AllErrors() []error { return m }

// ListConnectorsRequestValidationError is the validation error returned by
// ListConnectorsRequest.Validate if the designated constraints aren't met.
type ListConnectorsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConnectorsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConnectorsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConnectorsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConnectorsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConnectorsRequestValidationError) ErrorName() string {
	return "ListConnectorsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListConnectorsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConnectorsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConnectorsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConnectorsRequestValidationError{}

// Validate checks the field values on ListConnectorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListConnectorsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListConnectorsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListConnectorsResponseMultiError, or nil if none found.
func (m *ListConnectorsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListConnectorsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetConnectors() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListConnectorsResponseValidationError{
						field:  fmt.Sprintf("Connectors[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListConnectorsResponseValidationError{
					field:  fmt.Sprintf("Connectors[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListConnectorsResponseMultiError(errors)
	}

	return nil
}

// ListConnectorsResponseMultiError is an error wrapping multiple validation
// errors returned by ListConnectorsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListConnectorsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListConnectorsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListConnectorsResponseMultiError) AllErrors() []error { return m }

// ListConnectorsResponseValidationError is the validation error returned by
// ListConnectorsResponse.Validate if the designated constraints aren't met.
type ListConnectorsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListConnectorsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListConnectorsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListConnectorsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListConnectorsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListConnectorsResponseValidationError) ErrorName() string {
	return "ListConnectorsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListConnectorsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListConnectorsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListConnectorsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListConnectorsResponseValidationError{}

// Validate checks the field values on ReconcileError_CharLocation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ReconcileError_CharLocation) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ReconcileError_CharLocation with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ReconcileError_CharLocationMultiError, or nil if none found.
func (m *ReconcileError_CharLocation) ValidateAll() error {
	return m.validate(true)
}

func (m *ReconcileError_CharLocation) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Line

	// no validation rules for Column

	if len(errors) > 0 {
		return ReconcileError_CharLocationMultiError(errors)
	}

	return nil
}

// ReconcileError_CharLocationMultiError is an error wrapping multiple
// validation errors returned by ReconcileError_CharLocation.ValidateAll() if
// the designated constraints aren't met.
type ReconcileError_CharLocationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ReconcileError_CharLocationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ReconcileError_CharLocationMultiError) AllErrors() []error { return m }

// ReconcileError_CharLocationValidationError is the validation error returned
// by ReconcileError_CharLocation.Validate if the designated constraints
// aren't met.
type ReconcileError_CharLocationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ReconcileError_CharLocationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ReconcileError_CharLocationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ReconcileError_CharLocationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ReconcileError_CharLocationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ReconcileError_CharLocationValidationError) ErrorName() string {
	return "ReconcileError_CharLocationValidationError"
}

// Error satisfies the builtin error interface
func (e ReconcileError_CharLocationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sReconcileError_CharLocation.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ReconcileError_CharLocationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ReconcileError_CharLocationValidationError{}

// Validate checks the field values on MetricsViewFilter_Cond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MetricsViewFilter_Cond) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MetricsViewFilter_Cond with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MetricsViewFilter_CondMultiError, or nil if none found.
func (m *MetricsViewFilter_Cond) ValidateAll() error {
	return m.validate(true)
}

func (m *MetricsViewFilter_Cond) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	for idx, item := range m.GetIn() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewFilter_CondValidationError{
						field:  fmt.Sprintf("In[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewFilter_CondValidationError{
						field:  fmt.Sprintf("In[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewFilter_CondValidationError{
					field:  fmt.Sprintf("In[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	for idx, item := range m.GetLike() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, MetricsViewFilter_CondValidationError{
						field:  fmt.Sprintf("Like[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, MetricsViewFilter_CondValidationError{
						field:  fmt.Sprintf("Like[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return MetricsViewFilter_CondValidationError{
					field:  fmt.Sprintf("Like[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return MetricsViewFilter_CondMultiError(errors)
	}

	return nil
}

// MetricsViewFilter_CondMultiError is an error wrapping multiple validation
// errors returned by MetricsViewFilter_Cond.ValidateAll() if the designated
// constraints aren't met.
type MetricsViewFilter_CondMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MetricsViewFilter_CondMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MetricsViewFilter_CondMultiError) AllErrors() []error { return m }

// MetricsViewFilter_CondValidationError is the validation error returned by
// MetricsViewFilter_Cond.Validate if the designated constraints aren't met.
type MetricsViewFilter_CondValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MetricsViewFilter_CondValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MetricsViewFilter_CondValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MetricsViewFilter_CondValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MetricsViewFilter_CondValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MetricsViewFilter_CondValidationError) ErrorName() string {
	return "MetricsViewFilter_CondValidationError"
}

// Error satisfies the builtin error interface
func (e MetricsViewFilter_CondValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMetricsViewFilter_Cond.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MetricsViewFilter_CondValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MetricsViewFilter_CondValidationError{}

// Validate checks the field values on TimeRangeSummary_Interval with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TimeRangeSummary_Interval) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TimeRangeSummary_Interval with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TimeRangeSummary_IntervalMultiError, or nil if none found.
func (m *TimeRangeSummary_Interval) ValidateAll() error {
	return m.validate(true)
}

func (m *TimeRangeSummary_Interval) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Months

	// no validation rules for Days

	// no validation rules for Micros

	if len(errors) > 0 {
		return TimeRangeSummary_IntervalMultiError(errors)
	}

	return nil
}

// TimeRangeSummary_IntervalMultiError is an error wrapping multiple validation
// errors returned by TimeRangeSummary_Interval.ValidateAll() if the
// designated constraints aren't met.
type TimeRangeSummary_IntervalMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TimeRangeSummary_IntervalMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TimeRangeSummary_IntervalMultiError) AllErrors() []error { return m }

// TimeRangeSummary_IntervalValidationError is the validation error returned by
// TimeRangeSummary_Interval.Validate if the designated constraints aren't met.
type TimeRangeSummary_IntervalValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TimeRangeSummary_IntervalValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TimeRangeSummary_IntervalValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TimeRangeSummary_IntervalValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TimeRangeSummary_IntervalValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TimeRangeSummary_IntervalValidationError) ErrorName() string {
	return "TimeRangeSummary_IntervalValidationError"
}

// Error satisfies the builtin error interface
func (e TimeRangeSummary_IntervalValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTimeRangeSummary_Interval.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TimeRangeSummary_IntervalValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TimeRangeSummary_IntervalValidationError{}

// Validate checks the field values on NumericOutliers_Outlier with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NumericOutliers_Outlier) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericOutliers_Outlier with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NumericOutliers_OutlierMultiError, or nil if none found.
func (m *NumericOutliers_Outlier) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericOutliers_Outlier) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bucket

	// no validation rules for Low

	// no validation rules for High

	// no validation rules for Present

	// no validation rules for Count

	if len(errors) > 0 {
		return NumericOutliers_OutlierMultiError(errors)
	}

	return nil
}

// NumericOutliers_OutlierMultiError is an error wrapping multiple validation
// errors returned by NumericOutliers_Outlier.ValidateAll() if the designated
// constraints aren't met.
type NumericOutliers_OutlierMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericOutliers_OutlierMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericOutliers_OutlierMultiError) AllErrors() []error { return m }

// NumericOutliers_OutlierValidationError is the validation error returned by
// NumericOutliers_Outlier.Validate if the designated constraints aren't met.
type NumericOutliers_OutlierValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericOutliers_OutlierValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericOutliers_OutlierValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericOutliers_OutlierValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericOutliers_OutlierValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericOutliers_OutlierValidationError) ErrorName() string {
	return "NumericOutliers_OutlierValidationError"
}

// Error satisfies the builtin error interface
func (e NumericOutliers_OutlierValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericOutliers_Outlier.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericOutliers_OutlierValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericOutliers_OutlierValidationError{}

// Validate checks the field values on TopK_Entry with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TopK_Entry) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TopK_Entry with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TopK_EntryMultiError, or
// nil if none found.
func (m *TopK_Entry) ValidateAll() error {
	return m.validate(true)
}

func (m *TopK_Entry) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetValue()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TopK_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TopK_EntryValidationError{
					field:  "Value",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValue()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TopK_EntryValidationError{
				field:  "Value",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Count

	if len(errors) > 0 {
		return TopK_EntryMultiError(errors)
	}

	return nil
}

// TopK_EntryMultiError is an error wrapping multiple validation errors
// returned by TopK_Entry.ValidateAll() if the designated constraints aren't met.
type TopK_EntryMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TopK_EntryMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TopK_EntryMultiError) AllErrors() []error { return m }

// TopK_EntryValidationError is the validation error returned by
// TopK_Entry.Validate if the designated constraints aren't met.
type TopK_EntryValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TopK_EntryValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TopK_EntryValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TopK_EntryValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TopK_EntryValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TopK_EntryValidationError) ErrorName() string { return "TopK_EntryValidationError" }

// Error satisfies the builtin error interface
func (e TopK_EntryValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTopK_Entry.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TopK_EntryValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TopK_EntryValidationError{}

// Validate checks the field values on NumericHistogramBins_Bin with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *NumericHistogramBins_Bin) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on NumericHistogramBins_Bin with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// NumericHistogramBins_BinMultiError, or nil if none found.
func (m *NumericHistogramBins_Bin) ValidateAll() error {
	return m.validate(true)
}

func (m *NumericHistogramBins_Bin) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Bucket

	// no validation rules for Low

	// no validation rules for High

	// no validation rules for Count

	if len(errors) > 0 {
		return NumericHistogramBins_BinMultiError(errors)
	}

	return nil
}

// NumericHistogramBins_BinMultiError is an error wrapping multiple validation
// errors returned by NumericHistogramBins_Bin.ValidateAll() if the designated
// constraints aren't met.
type NumericHistogramBins_BinMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m NumericHistogramBins_BinMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m NumericHistogramBins_BinMultiError) AllErrors() []error { return m }

// NumericHistogramBins_BinValidationError is the validation error returned by
// NumericHistogramBins_Bin.Validate if the designated constraints aren't met.
type NumericHistogramBins_BinValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e NumericHistogramBins_BinValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e NumericHistogramBins_BinValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e NumericHistogramBins_BinValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e NumericHistogramBins_BinValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e NumericHistogramBins_BinValidationError) ErrorName() string {
	return "NumericHistogramBins_BinValidationError"
}

// Error satisfies the builtin error interface
func (e NumericHistogramBins_BinValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sNumericHistogramBins_Bin.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = NumericHistogramBins_BinValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = NumericHistogramBins_BinValidationError{}

// Validate checks the field values on GenerateTimeSeriesRequest_BasicMeasure
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GenerateTimeSeriesRequest_BasicMeasure) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on
// GenerateTimeSeriesRequest_BasicMeasure with the rules defined in the proto
// definition for this message. If any rules are violated, the result is a
// list of violation errors wrapped in
// GenerateTimeSeriesRequest_BasicMeasureMultiError, or nil if none found.
func (m *GenerateTimeSeriesRequest_BasicMeasure) ValidateAll() error {
	return m.validate(true)
}

func (m *GenerateTimeSeriesRequest_BasicMeasure) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Expression

	// no validation rules for SqlName

	if len(errors) > 0 {
		return GenerateTimeSeriesRequest_BasicMeasureMultiError(errors)
	}

	return nil
}

// GenerateTimeSeriesRequest_BasicMeasureMultiError is an error wrapping
// multiple validation errors returned by
// GenerateTimeSeriesRequest_BasicMeasure.ValidateAll() if the designated
// constraints aren't met.
type GenerateTimeSeriesRequest_BasicMeasureMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GenerateTimeSeriesRequest_BasicMeasureMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GenerateTimeSeriesRequest_BasicMeasureMultiError) AllErrors() []error { return m }

// GenerateTimeSeriesRequest_BasicMeasureValidationError is the validation
// error returned by GenerateTimeSeriesRequest_BasicMeasure.Validate if the
// designated constraints aren't met.
type GenerateTimeSeriesRequest_BasicMeasureValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) ErrorName() string {
	return "GenerateTimeSeriesRequest_BasicMeasureValidationError"
}

// Error satisfies the builtin error interface
func (e GenerateTimeSeriesRequest_BasicMeasureValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGenerateTimeSeriesRequest_BasicMeasure.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GenerateTimeSeriesRequest_BasicMeasureValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GenerateTimeSeriesRequest_BasicMeasureValidationError{}

// Validate checks the field values on Connector_Property with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *Connector_Property) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Connector_Property with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// Connector_PropertyMultiError, or nil if none found.
func (m *Connector_Property) ValidateAll() error {
	return m.validate(true)
}

func (m *Connector_Property) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Key

	// no validation rules for DisplayName

	// no validation rules for Description

	// no validation rules for Placeholder

	// no validation rules for Type

	// no validation rules for Nullable

	// no validation rules for Hint

	// no validation rules for Href

	if len(errors) > 0 {
		return Connector_PropertyMultiError(errors)
	}

	return nil
}

// Connector_PropertyMultiError is an error wrapping multiple validation errors
// returned by Connector_Property.ValidateAll() if the designated constraints
// aren't met.
type Connector_PropertyMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m Connector_PropertyMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m Connector_PropertyMultiError) AllErrors() []error { return m }

// Connector_PropertyValidationError is the validation error returned by
// Connector_Property.Validate if the designated constraints aren't met.
type Connector_PropertyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Connector_PropertyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Connector_PropertyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Connector_PropertyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Connector_PropertyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Connector_PropertyValidationError) ErrorName() string {
	return "Connector_PropertyValidationError"
}

// Error satisfies the builtin error interface
func (e Connector_PropertyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sConnector_Property.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Connector_PropertyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Connector_PropertyValidationError{}
