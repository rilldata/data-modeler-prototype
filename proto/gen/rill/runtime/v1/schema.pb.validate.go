// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/runtime/v1/schema.proto

package runtimev1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Type with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *Type) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Type with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in TypeMultiError, or nil if none found.
func (m *Type) ValidateAll() error {
	return m.validate(true)
}

func (m *Type) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Code

	// no validation rules for Nullable

	if all {
		switch v := interface{}(m.GetArrayElementType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "ArrayElementType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "ArrayElementType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetArrayElementType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypeValidationError{
				field:  "ArrayElementType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetStructType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "StructType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "StructType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStructType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypeValidationError{
				field:  "StructType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetMapType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "MapType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, TypeValidationError{
					field:  "MapType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMapType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return TypeValidationError{
				field:  "MapType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return TypeMultiError(errors)
	}

	return nil
}

// TypeMultiError is an error wrapping multiple validation errors returned by
// Type.ValidateAll() if the designated constraints aren't met.
type TypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TypeMultiError) AllErrors() []error { return m }

// TypeValidationError is the validation error returned by Type.Validate if the
// designated constraints aren't met.
type TypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TypeValidationError) ErrorName() string { return "TypeValidationError" }

// Error satisfies the builtin error interface
func (e TypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TypeValidationError{}

// Validate checks the field values on StructType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *StructType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructType with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in StructTypeMultiError, or
// nil if none found.
func (m *StructType) ValidateAll() error {
	return m.validate(true)
}

func (m *StructType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetFields() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, StructTypeValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, StructTypeValidationError{
						field:  fmt.Sprintf("Fields[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return StructTypeValidationError{
					field:  fmt.Sprintf("Fields[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return StructTypeMultiError(errors)
	}

	return nil
}

// StructTypeMultiError is an error wrapping multiple validation errors
// returned by StructType.ValidateAll() if the designated constraints aren't met.
type StructTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructTypeMultiError) AllErrors() []error { return m }

// StructTypeValidationError is the validation error returned by
// StructType.Validate if the designated constraints aren't met.
type StructTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructTypeValidationError) ErrorName() string { return "StructTypeValidationError" }

// Error satisfies the builtin error interface
func (e StructTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructTypeValidationError{}

// Validate checks the field values on MapType with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *MapType) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MapType with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MapTypeMultiError, or nil if none found.
func (m *MapType) ValidateAll() error {
	return m.validate(true)
}

func (m *MapType) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetKeyType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapTypeValidationError{
					field:  "KeyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapTypeValidationError{
					field:  "KeyType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetKeyType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapTypeValidationError{
				field:  "KeyType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetValueType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MapTypeValidationError{
					field:  "ValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MapTypeValidationError{
					field:  "ValueType",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetValueType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MapTypeValidationError{
				field:  "ValueType",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MapTypeMultiError(errors)
	}

	return nil
}

// MapTypeMultiError is an error wrapping multiple validation errors returned
// by MapType.ValidateAll() if the designated constraints aren't met.
type MapTypeMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MapTypeMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MapTypeMultiError) AllErrors() []error { return m }

// MapTypeValidationError is the validation error returned by MapType.Validate
// if the designated constraints aren't met.
type MapTypeValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MapTypeValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MapTypeValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MapTypeValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MapTypeValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MapTypeValidationError) ErrorName() string { return "MapTypeValidationError" }

// Error satisfies the builtin error interface
func (e MapTypeValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMapType.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MapTypeValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MapTypeValidationError{}

// Validate checks the field values on StructType_Field with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *StructType_Field) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on StructType_Field with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// StructType_FieldMultiError, or nil if none found.
func (m *StructType_Field) ValidateAll() error {
	return m.validate(true)
}

func (m *StructType_Field) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if all {
		switch v := interface{}(m.GetType()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, StructType_FieldValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, StructType_FieldValidationError{
					field:  "Type",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetType()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return StructType_FieldValidationError{
				field:  "Type",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return StructType_FieldMultiError(errors)
	}

	return nil
}

// StructType_FieldMultiError is an error wrapping multiple validation errors
// returned by StructType_Field.ValidateAll() if the designated constraints
// aren't met.
type StructType_FieldMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m StructType_FieldMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m StructType_FieldMultiError) AllErrors() []error { return m }

// StructType_FieldValidationError is the validation error returned by
// StructType_Field.Validate if the designated constraints aren't met.
type StructType_FieldValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e StructType_FieldValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e StructType_FieldValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e StructType_FieldValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e StructType_FieldValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e StructType_FieldValidationError) ErrorName() string { return "StructType_FieldValidationError" }

// Error satisfies the builtin error interface
func (e StructType_FieldValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sStructType_Field.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = StructType_FieldValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = StructType_FieldValidationError{}
