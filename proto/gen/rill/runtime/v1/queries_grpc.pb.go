// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rill/runtime/v1/queries.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error)
	// EstimateRollupInterval (TODO: add description)
	EstimateRollupInterval(ctx context.Context, in *EstimateRollupIntervalRequest, opts ...grpc.CallOption) (*EstimateRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	GetTopK(ctx context.Context, in *GetTopKRequest, opts ...grpc.CallOption) (*GetTopKResponse, error)
	// Get the number of nulls in a column
	GetNullCount(ctx context.Context, in *GetNullCountRequest, opts ...grpc.CallOption) (*GetNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	GetDescriptiveStatistics(ctx context.Context, in *GetDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*GetDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	EstimateSmallestTimeGrain(ctx context.Context, in *EstimateSmallestTimeGrainRequest, opts ...grpc.CallOption) (*EstimateSmallestTimeGrainResponse, error)
	// Get the histogram for values in a column
	GetNumericHistogram(ctx context.Context, in *GetNumericHistogramRequest, opts ...grpc.CallOption) (*GetNumericHistogramResponse, error)
	// Get outliers for a numeric column
	GetRugHistogram(ctx context.Context, in *GetRugHistogramRequest, opts ...grpc.CallOption) (*GetRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	GetTimeRangeSummary(ctx context.Context, in *GetTimeRangeSummaryRequest, opts ...grpc.CallOption) (*GetTimeRangeSummaryResponse, error)
	// Get cardinality for a column
	GetCardinalityOfColumn(ctx context.Context, in *GetCardinalityOfColumnRequest, opts ...grpc.CallOption) (*GetCardinalityOfColumnResponse, error)
	// Generate time series
	GenerateTimeSeries(ctx context.Context, in *GenerateTimeSeriesRequest, opts ...grpc.CallOption) (*GenerateTimeSeriesResponse, error)
	// TableCardinality (TODO: add description)
	GetTableCardinality(ctx context.Context, in *GetTableCardinalityRequest, opts ...grpc.CallOption) (*GetTableCardinalityResponse, error)
	// ProfileColumns (TODO: add description)
	ProfileColumns(ctx context.Context, in *ProfileColumnsRequest, opts ...grpc.CallOption) (*ProfileColumnsResponse, error)
	// TableRows (TODO: add description)
	GetTableRows(ctx context.Context, in *GetTableRowsRequest, opts ...grpc.CallOption) (*GetTableRowsResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error) {
	out := new(MetricsViewToplistResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewToplist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error) {
	out := new(MetricsViewTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error) {
	out := new(MetricsViewTotalsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewTotals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) EstimateRollupInterval(ctx context.Context, in *EstimateRollupIntervalRequest, opts ...grpc.CallOption) (*EstimateRollupIntervalResponse, error) {
	out := new(EstimateRollupIntervalResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/EstimateRollupInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTopK(ctx context.Context, in *GetTopKRequest, opts ...grpc.CallOption) (*GetTopKResponse, error) {
	out := new(GetTopKResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetTopK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNullCount(ctx context.Context, in *GetNullCountRequest, opts ...grpc.CallOption) (*GetNullCountResponse, error) {
	out := new(GetNullCountResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetNullCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetDescriptiveStatistics(ctx context.Context, in *GetDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*GetDescriptiveStatisticsResponse, error) {
	out := new(GetDescriptiveStatisticsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetDescriptiveStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) EstimateSmallestTimeGrain(ctx context.Context, in *EstimateSmallestTimeGrainRequest, opts ...grpc.CallOption) (*EstimateSmallestTimeGrainResponse, error) {
	out := new(EstimateSmallestTimeGrainResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/EstimateSmallestTimeGrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetNumericHistogram(ctx context.Context, in *GetNumericHistogramRequest, opts ...grpc.CallOption) (*GetNumericHistogramResponse, error) {
	out := new(GetNumericHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetNumericHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetRugHistogram(ctx context.Context, in *GetRugHistogramRequest, opts ...grpc.CallOption) (*GetRugHistogramResponse, error) {
	out := new(GetRugHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetRugHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTimeRangeSummary(ctx context.Context, in *GetTimeRangeSummaryRequest, opts ...grpc.CallOption) (*GetTimeRangeSummaryResponse, error) {
	out := new(GetTimeRangeSummaryResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetTimeRangeSummary", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetCardinalityOfColumn(ctx context.Context, in *GetCardinalityOfColumnRequest, opts ...grpc.CallOption) (*GetCardinalityOfColumnResponse, error) {
	out := new(GetCardinalityOfColumnResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetCardinalityOfColumn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GenerateTimeSeries(ctx context.Context, in *GenerateTimeSeriesRequest, opts ...grpc.CallOption) (*GenerateTimeSeriesResponse, error) {
	out := new(GenerateTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GenerateTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTableCardinality(ctx context.Context, in *GetTableCardinalityRequest, opts ...grpc.CallOption) (*GetTableCardinalityResponse, error) {
	out := new(GetTableCardinalityResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetTableCardinality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ProfileColumns(ctx context.Context, in *ProfileColumnsRequest, opts ...grpc.CallOption) (*ProfileColumnsResponse, error) {
	out := new(ProfileColumnsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ProfileColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) GetTableRows(ctx context.Context, in *GetTableRowsRequest, opts ...grpc.CallOption) (*GetTableRowsResponse, error) {
	out := new(GetTableRowsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/GetTableRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error)
	// EstimateRollupInterval (TODO: add description)
	EstimateRollupInterval(context.Context, *EstimateRollupIntervalRequest) (*EstimateRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	GetTopK(context.Context, *GetTopKRequest) (*GetTopKResponse, error)
	// Get the number of nulls in a column
	GetNullCount(context.Context, *GetNullCountRequest) (*GetNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	GetDescriptiveStatistics(context.Context, *GetDescriptiveStatisticsRequest) (*GetDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	EstimateSmallestTimeGrain(context.Context, *EstimateSmallestTimeGrainRequest) (*EstimateSmallestTimeGrainResponse, error)
	// Get the histogram for values in a column
	GetNumericHistogram(context.Context, *GetNumericHistogramRequest) (*GetNumericHistogramResponse, error)
	// Get outliers for a numeric column
	GetRugHistogram(context.Context, *GetRugHistogramRequest) (*GetRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	GetTimeRangeSummary(context.Context, *GetTimeRangeSummaryRequest) (*GetTimeRangeSummaryResponse, error)
	// Get cardinality for a column
	GetCardinalityOfColumn(context.Context, *GetCardinalityOfColumnRequest) (*GetCardinalityOfColumnResponse, error)
	// Generate time series
	GenerateTimeSeries(context.Context, *GenerateTimeSeriesRequest) (*GenerateTimeSeriesResponse, error)
	// TableCardinality (TODO: add description)
	GetTableCardinality(context.Context, *GetTableCardinalityRequest) (*GetTableCardinalityResponse, error)
	// ProfileColumns (TODO: add description)
	ProfileColumns(context.Context, *ProfileColumnsRequest) (*ProfileColumnsResponse, error)
	// TableRows (TODO: add description)
	GetTableRows(context.Context, *GetTableRowsRequest) (*GetTableRowsResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewToplist not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTotals not implemented")
}
func (UnimplementedQueryServiceServer) EstimateRollupInterval(context.Context, *EstimateRollupIntervalRequest) (*EstimateRollupIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateRollupInterval not implemented")
}
func (UnimplementedQueryServiceServer) GetTopK(context.Context, *GetTopKRequest) (*GetTopKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopK not implemented")
}
func (UnimplementedQueryServiceServer) GetNullCount(context.Context, *GetNullCountRequest) (*GetNullCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNullCount not implemented")
}
func (UnimplementedQueryServiceServer) GetDescriptiveStatistics(context.Context, *GetDescriptiveStatisticsRequest) (*GetDescriptiveStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDescriptiveStatistics not implemented")
}
func (UnimplementedQueryServiceServer) EstimateSmallestTimeGrain(context.Context, *EstimateSmallestTimeGrainRequest) (*EstimateSmallestTimeGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EstimateSmallestTimeGrain not implemented")
}
func (UnimplementedQueryServiceServer) GetNumericHistogram(context.Context, *GetNumericHistogramRequest) (*GetNumericHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNumericHistogram not implemented")
}
func (UnimplementedQueryServiceServer) GetRugHistogram(context.Context, *GetRugHistogramRequest) (*GetRugHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRugHistogram not implemented")
}
func (UnimplementedQueryServiceServer) GetTimeRangeSummary(context.Context, *GetTimeRangeSummaryRequest) (*GetTimeRangeSummaryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTimeRangeSummary not implemented")
}
func (UnimplementedQueryServiceServer) GetCardinalityOfColumn(context.Context, *GetCardinalityOfColumnRequest) (*GetCardinalityOfColumnResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardinalityOfColumn not implemented")
}
func (UnimplementedQueryServiceServer) GenerateTimeSeries(context.Context, *GenerateTimeSeriesRequest) (*GenerateTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GenerateTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) GetTableCardinality(context.Context, *GetTableCardinalityRequest) (*GetTableCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableCardinality not implemented")
}
func (UnimplementedQueryServiceServer) ProfileColumns(context.Context, *ProfileColumnsRequest) (*ProfileColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProfileColumns not implemented")
}
func (UnimplementedQueryServiceServer) GetTableRows(context.Context, *GetTableRowsRequest) (*GetTableRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTableRows not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewToplist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewToplistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewToplist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, req.(*MetricsViewToplistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, req.(*MetricsViewTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTotalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewTotals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, req.(*MetricsViewTotalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_EstimateRollupInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateRollupIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).EstimateRollupInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/EstimateRollupInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).EstimateRollupInterval(ctx, req.(*EstimateRollupIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetTopK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTopK(ctx, req.(*GetTopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNullCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNullCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNullCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetNullCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNullCount(ctx, req.(*GetNullCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetDescriptiveStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDescriptiveStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetDescriptiveStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetDescriptiveStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetDescriptiveStatistics(ctx, req.(*GetDescriptiveStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_EstimateSmallestTimeGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EstimateSmallestTimeGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).EstimateSmallestTimeGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/EstimateSmallestTimeGrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).EstimateSmallestTimeGrain(ctx, req.(*EstimateSmallestTimeGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetNumericHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetNumericHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetNumericHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetNumericHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetNumericHistogram(ctx, req.(*GetNumericHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetRugHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRugHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetRugHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetRugHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetRugHistogram(ctx, req.(*GetRugHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTimeRangeSummary_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTimeRangeSummaryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTimeRangeSummary(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetTimeRangeSummary",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTimeRangeSummary(ctx, req.(*GetTimeRangeSummaryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetCardinalityOfColumn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardinalityOfColumnRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetCardinalityOfColumn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetCardinalityOfColumn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetCardinalityOfColumn(ctx, req.(*GetCardinalityOfColumnRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GenerateTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GenerateTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GenerateTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GenerateTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GenerateTimeSeries(ctx, req.(*GenerateTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTableCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTableCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetTableCardinality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTableCardinality(ctx, req.(*GetTableCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ProfileColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProfileColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ProfileColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ProfileColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ProfileColumns(ctx, req.(*ProfileColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_GetTableRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTableRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).GetTableRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/GetTableRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).GetTableRows(ctx, req.(*GetTableRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.runtime.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryService_Query_Handler,
		},
		{
			MethodName: "MetricsViewToplist",
			Handler:    _QueryService_MetricsViewToplist_Handler,
		},
		{
			MethodName: "MetricsViewTimeSeries",
			Handler:    _QueryService_MetricsViewTimeSeries_Handler,
		},
		{
			MethodName: "MetricsViewTotals",
			Handler:    _QueryService_MetricsViewTotals_Handler,
		},
		{
			MethodName: "EstimateRollupInterval",
			Handler:    _QueryService_EstimateRollupInterval_Handler,
		},
		{
			MethodName: "GetTopK",
			Handler:    _QueryService_GetTopK_Handler,
		},
		{
			MethodName: "GetNullCount",
			Handler:    _QueryService_GetNullCount_Handler,
		},
		{
			MethodName: "GetDescriptiveStatistics",
			Handler:    _QueryService_GetDescriptiveStatistics_Handler,
		},
		{
			MethodName: "EstimateSmallestTimeGrain",
			Handler:    _QueryService_EstimateSmallestTimeGrain_Handler,
		},
		{
			MethodName: "GetNumericHistogram",
			Handler:    _QueryService_GetNumericHistogram_Handler,
		},
		{
			MethodName: "GetRugHistogram",
			Handler:    _QueryService_GetRugHistogram_Handler,
		},
		{
			MethodName: "GetTimeRangeSummary",
			Handler:    _QueryService_GetTimeRangeSummary_Handler,
		},
		{
			MethodName: "GetCardinalityOfColumn",
			Handler:    _QueryService_GetCardinalityOfColumn_Handler,
		},
		{
			MethodName: "GenerateTimeSeries",
			Handler:    _QueryService_GenerateTimeSeries_Handler,
		},
		{
			MethodName: "GetTableCardinality",
			Handler:    _QueryService_GetTableCardinality_Handler,
		},
		{
			MethodName: "ProfileColumns",
			Handler:    _QueryService_ProfileColumns_Handler,
		},
		{
			MethodName: "GetTableRows",
			Handler:    _QueryService_GetTableRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rill/runtime/v1/queries.proto",
}
