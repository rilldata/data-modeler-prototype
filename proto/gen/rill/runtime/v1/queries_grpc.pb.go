// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             (unknown)
// source: rill/runtime/v1/queries.proto

package runtimev1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// QueryServiceClient is the client API for QueryService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QueryServiceClient interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(ctx context.Context, in *ColumnRollupIntervalRequest, opts ...grpc.CallOption) (*ColumnRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(ctx context.Context, in *ColumnTopKRequest, opts ...grpc.CallOption) (*ColumnTopKResponse, error)
	// Get the number of nulls in a column
	ColumnNullCount(ctx context.Context, in *ColumnNullCountRequest, opts ...grpc.CallOption) (*ColumnNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(ctx context.Context, in *ColumnDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*ColumnDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(ctx context.Context, in *ColumnTimeGrainRequest, opts ...grpc.CallOption) (*ColumnTimeGrainResponse, error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(ctx context.Context, in *ColumnNumericHistogramRequest, opts ...grpc.CallOption) (*ColumnNumericHistogramResponse, error)
	// Get outliers for a numeric column
	ColumnRugHistogram(ctx context.Context, in *ColumnRugHistogramRequest, opts ...grpc.CallOption) (*ColumnRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(ctx context.Context, in *ColumnTimeRangeRequest, opts ...grpc.CallOption) (*ColumnTimeRangeResponse, error)
	// Get cardinality for a column
	ColumnCardinality(ctx context.Context, in *ColumnCardinalityRequest, opts ...grpc.CallOption) (*ColumnCardinalityResponse, error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(ctx context.Context, in *ColumnTimeSeriesRequest, opts ...grpc.CallOption) (*ColumnTimeSeriesResponse, error)
	// TableCardinality returns row count
	TableCardinality(ctx context.Context, in *TableCardinalityRequest, opts ...grpc.CallOption) (*TableCardinalityResponse, error)
	// TableColumns returns column profiles
	TableColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error)
	// TableRows returns table rows
	TableRows(ctx context.Context, in *TableRowsRequest, opts ...grpc.CallOption) (*TableRowsResponse, error)
}

type queryServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewQueryServiceClient(cc grpc.ClientConnInterface) QueryServiceClient {
	return &queryServiceClient{cc}
}

func (c *queryServiceClient) Query(ctx context.Context, in *QueryRequest, opts ...grpc.CallOption) (*QueryResponse, error) {
	out := new(QueryResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/Query", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewToplist(ctx context.Context, in *MetricsViewToplistRequest, opts ...grpc.CallOption) (*MetricsViewToplistResponse, error) {
	out := new(MetricsViewToplistResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewToplist", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTimeSeries(ctx context.Context, in *MetricsViewTimeSeriesRequest, opts ...grpc.CallOption) (*MetricsViewTimeSeriesResponse, error) {
	out := new(MetricsViewTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) MetricsViewTotals(ctx context.Context, in *MetricsViewTotalsRequest, opts ...grpc.CallOption) (*MetricsViewTotalsResponse, error) {
	out := new(MetricsViewTotalsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/MetricsViewTotals", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnRollupInterval(ctx context.Context, in *ColumnRollupIntervalRequest, opts ...grpc.CallOption) (*ColumnRollupIntervalResponse, error) {
	out := new(ColumnRollupIntervalResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnRollupInterval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTopK(ctx context.Context, in *ColumnTopKRequest, opts ...grpc.CallOption) (*ColumnTopKResponse, error) {
	out := new(ColumnTopKResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnTopK", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnNullCount(ctx context.Context, in *ColumnNullCountRequest, opts ...grpc.CallOption) (*ColumnNullCountResponse, error) {
	out := new(ColumnNullCountResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnNullCount", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnDescriptiveStatistics(ctx context.Context, in *ColumnDescriptiveStatisticsRequest, opts ...grpc.CallOption) (*ColumnDescriptiveStatisticsResponse, error) {
	out := new(ColumnDescriptiveStatisticsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnDescriptiveStatistics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeGrain(ctx context.Context, in *ColumnTimeGrainRequest, opts ...grpc.CallOption) (*ColumnTimeGrainResponse, error) {
	out := new(ColumnTimeGrainResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnTimeGrain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnNumericHistogram(ctx context.Context, in *ColumnNumericHistogramRequest, opts ...grpc.CallOption) (*ColumnNumericHistogramResponse, error) {
	out := new(ColumnNumericHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnNumericHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnRugHistogram(ctx context.Context, in *ColumnRugHistogramRequest, opts ...grpc.CallOption) (*ColumnRugHistogramResponse, error) {
	out := new(ColumnRugHistogramResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnRugHistogram", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeRange(ctx context.Context, in *ColumnTimeRangeRequest, opts ...grpc.CallOption) (*ColumnTimeRangeResponse, error) {
	out := new(ColumnTimeRangeResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnTimeRange", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnCardinality(ctx context.Context, in *ColumnCardinalityRequest, opts ...grpc.CallOption) (*ColumnCardinalityResponse, error) {
	out := new(ColumnCardinalityResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnCardinality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) ColumnTimeSeries(ctx context.Context, in *ColumnTimeSeriesRequest, opts ...grpc.CallOption) (*ColumnTimeSeriesResponse, error) {
	out := new(ColumnTimeSeriesResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/ColumnTimeSeries", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableCardinality(ctx context.Context, in *TableCardinalityRequest, opts ...grpc.CallOption) (*TableCardinalityResponse, error) {
	out := new(TableCardinalityResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/TableCardinality", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableColumns(ctx context.Context, in *TableColumnsRequest, opts ...grpc.CallOption) (*TableColumnsResponse, error) {
	out := new(TableColumnsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/TableColumns", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryServiceClient) TableRows(ctx context.Context, in *TableRowsRequest, opts ...grpc.CallOption) (*TableRowsResponse, error) {
	out := new(TableRowsResponse)
	err := c.cc.Invoke(ctx, "/rill.runtime.v1.QueryService/TableRows", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServiceServer is the server API for QueryService service.
// All implementations must embed UnimplementedQueryServiceServer
// for forward compatibility
type QueryServiceServer interface {
	// Query runs a SQL query against the instance's OLAP datastore.
	Query(context.Context, *QueryRequest) (*QueryResponse, error)
	// MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
	// It's a convenience API for querying a metrics view.
	MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error)
	// MetricsViewTimeSeries returns time series for the measures in the metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error)
	// MetricsViewTotals returns totals over a time period for the measures in a metrics view.
	// It's a convenience API for querying a metrics view.
	MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error)
	// ColumnRollupInterval returns the minimum time granularity (as well as the time range) for a specified timestamp column
	ColumnRollupInterval(context.Context, *ColumnRollupIntervalRequest) (*ColumnRollupIntervalResponse, error)
	// Get TopK elements from a table for a column given an agg function
	// agg function and k are optional, defaults are count(*) and 50 respectively
	ColumnTopK(context.Context, *ColumnTopKRequest) (*ColumnTopKResponse, error)
	// Get the number of nulls in a column
	ColumnNullCount(context.Context, *ColumnNullCountRequest) (*ColumnNullCountResponse, error)
	// Get basic stats for a numeric column like min, max, mean, stddev, etc
	ColumnDescriptiveStatistics(context.Context, *ColumnDescriptiveStatisticsRequest) (*ColumnDescriptiveStatisticsResponse, error)
	// Estimates the smallest time grain present in the column
	ColumnTimeGrain(context.Context, *ColumnTimeGrainRequest) (*ColumnTimeGrainResponse, error)
	// Get the histogram for values in a column
	ColumnNumericHistogram(context.Context, *ColumnNumericHistogramRequest) (*ColumnNumericHistogramResponse, error)
	// Get outliers for a numeric column
	ColumnRugHistogram(context.Context, *ColumnRugHistogramRequest) (*ColumnRugHistogramResponse, error)
	// Get the time range summaries (min, max) for a column
	ColumnTimeRange(context.Context, *ColumnTimeRangeRequest) (*ColumnTimeRangeResponse, error)
	// Get cardinality for a column
	ColumnCardinality(context.Context, *ColumnCardinalityRequest) (*ColumnCardinalityResponse, error)
	// Generate time series for the given measures (aggregation expressions) along with the sparkline timeseries
	ColumnTimeSeries(context.Context, *ColumnTimeSeriesRequest) (*ColumnTimeSeriesResponse, error)
	// TableCardinality returns row count
	TableCardinality(context.Context, *TableCardinalityRequest) (*TableCardinalityResponse, error)
	// TableColumns returns column profiles
	TableColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error)
	// TableRows returns table rows
	TableRows(context.Context, *TableRowsRequest) (*TableRowsResponse, error)
	mustEmbedUnimplementedQueryServiceServer()
}

// UnimplementedQueryServiceServer must be embedded to have forward compatible implementations.
type UnimplementedQueryServiceServer struct {
}

func (UnimplementedQueryServiceServer) Query(context.Context, *QueryRequest) (*QueryResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Query not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewToplist(context.Context, *MetricsViewToplistRequest) (*MetricsViewToplistResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewToplist not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTimeSeries(context.Context, *MetricsViewTimeSeriesRequest) (*MetricsViewTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) MetricsViewTotals(context.Context, *MetricsViewTotalsRequest) (*MetricsViewTotalsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MetricsViewTotals not implemented")
}
func (UnimplementedQueryServiceServer) ColumnRollupInterval(context.Context, *ColumnRollupIntervalRequest) (*ColumnRollupIntervalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnRollupInterval not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTopK(context.Context, *ColumnTopKRequest) (*ColumnTopKResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTopK not implemented")
}
func (UnimplementedQueryServiceServer) ColumnNullCount(context.Context, *ColumnNullCountRequest) (*ColumnNullCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnNullCount not implemented")
}
func (UnimplementedQueryServiceServer) ColumnDescriptiveStatistics(context.Context, *ColumnDescriptiveStatisticsRequest) (*ColumnDescriptiveStatisticsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnDescriptiveStatistics not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeGrain(context.Context, *ColumnTimeGrainRequest) (*ColumnTimeGrainResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeGrain not implemented")
}
func (UnimplementedQueryServiceServer) ColumnNumericHistogram(context.Context, *ColumnNumericHistogramRequest) (*ColumnNumericHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnNumericHistogram not implemented")
}
func (UnimplementedQueryServiceServer) ColumnRugHistogram(context.Context, *ColumnRugHistogramRequest) (*ColumnRugHistogramResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnRugHistogram not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeRange(context.Context, *ColumnTimeRangeRequest) (*ColumnTimeRangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeRange not implemented")
}
func (UnimplementedQueryServiceServer) ColumnCardinality(context.Context, *ColumnCardinalityRequest) (*ColumnCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnCardinality not implemented")
}
func (UnimplementedQueryServiceServer) ColumnTimeSeries(context.Context, *ColumnTimeSeriesRequest) (*ColumnTimeSeriesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ColumnTimeSeries not implemented")
}
func (UnimplementedQueryServiceServer) TableCardinality(context.Context, *TableCardinalityRequest) (*TableCardinalityResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableCardinality not implemented")
}
func (UnimplementedQueryServiceServer) TableColumns(context.Context, *TableColumnsRequest) (*TableColumnsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableColumns not implemented")
}
func (UnimplementedQueryServiceServer) TableRows(context.Context, *TableRowsRequest) (*TableRowsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TableRows not implemented")
}
func (UnimplementedQueryServiceServer) mustEmbedUnimplementedQueryServiceServer() {}

// UnsafeQueryServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QueryServiceServer will
// result in compilation errors.
type UnsafeQueryServiceServer interface {
	mustEmbedUnimplementedQueryServiceServer()
}

func RegisterQueryServiceServer(s grpc.ServiceRegistrar, srv QueryServiceServer) {
	s.RegisterService(&QueryService_ServiceDesc, srv)
}

func _QueryService_Query_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).Query(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/Query",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).Query(ctx, req.(*QueryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewToplist_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewToplistRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewToplist",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewToplist(ctx, req.(*MetricsViewToplistRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTimeSeries(ctx, req.(*MetricsViewTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_MetricsViewTotals_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MetricsViewTotalsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/MetricsViewTotals",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).MetricsViewTotals(ctx, req.(*MetricsViewTotalsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnRollupInterval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnRollupIntervalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnRollupInterval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnRollupInterval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnRollupInterval(ctx, req.(*ColumnRollupIntervalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTopK_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTopKRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTopK(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnTopK",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTopK(ctx, req.(*ColumnTopKRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnNullCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnNullCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnNullCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnNullCount",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnNullCount(ctx, req.(*ColumnNullCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnDescriptiveStatistics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnDescriptiveStatisticsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnDescriptiveStatistics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnDescriptiveStatistics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnDescriptiveStatistics(ctx, req.(*ColumnDescriptiveStatisticsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeGrain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeGrainRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeGrain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnTimeGrain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeGrain(ctx, req.(*ColumnTimeGrainRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnNumericHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnNumericHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnNumericHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnNumericHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnNumericHistogram(ctx, req.(*ColumnNumericHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnRugHistogram_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnRugHistogramRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnRugHistogram(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnRugHistogram",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnRugHistogram(ctx, req.(*ColumnRugHistogramRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeRange_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeRangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeRange(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnTimeRange",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeRange(ctx, req.(*ColumnTimeRangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnCardinality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnCardinality(ctx, req.(*ColumnCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_ColumnTimeSeries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ColumnTimeSeriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).ColumnTimeSeries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/ColumnTimeSeries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).ColumnTimeSeries(ctx, req.(*ColumnTimeSeriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableCardinality_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableCardinalityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableCardinality(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/TableCardinality",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableCardinality(ctx, req.(*TableCardinalityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableColumns_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableColumnsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableColumns(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/TableColumns",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableColumns(ctx, req.(*TableColumnsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _QueryService_TableRows_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TableRowsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServiceServer).TableRows(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rill.runtime.v1.QueryService/TableRows",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServiceServer).TableRows(ctx, req.(*TableRowsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// QueryService_ServiceDesc is the grpc.ServiceDesc for QueryService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var QueryService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rill.runtime.v1.QueryService",
	HandlerType: (*QueryServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Query",
			Handler:    _QueryService_Query_Handler,
		},
		{
			MethodName: "MetricsViewToplist",
			Handler:    _QueryService_MetricsViewToplist_Handler,
		},
		{
			MethodName: "MetricsViewTimeSeries",
			Handler:    _QueryService_MetricsViewTimeSeries_Handler,
		},
		{
			MethodName: "MetricsViewTotals",
			Handler:    _QueryService_MetricsViewTotals_Handler,
		},
		{
			MethodName: "ColumnRollupInterval",
			Handler:    _QueryService_ColumnRollupInterval_Handler,
		},
		{
			MethodName: "ColumnTopK",
			Handler:    _QueryService_ColumnTopK_Handler,
		},
		{
			MethodName: "ColumnNullCount",
			Handler:    _QueryService_ColumnNullCount_Handler,
		},
		{
			MethodName: "ColumnDescriptiveStatistics",
			Handler:    _QueryService_ColumnDescriptiveStatistics_Handler,
		},
		{
			MethodName: "ColumnTimeGrain",
			Handler:    _QueryService_ColumnTimeGrain_Handler,
		},
		{
			MethodName: "ColumnNumericHistogram",
			Handler:    _QueryService_ColumnNumericHistogram_Handler,
		},
		{
			MethodName: "ColumnRugHistogram",
			Handler:    _QueryService_ColumnRugHistogram_Handler,
		},
		{
			MethodName: "ColumnTimeRange",
			Handler:    _QueryService_ColumnTimeRange_Handler,
		},
		{
			MethodName: "ColumnCardinality",
			Handler:    _QueryService_ColumnCardinality_Handler,
		},
		{
			MethodName: "ColumnTimeSeries",
			Handler:    _QueryService_ColumnTimeSeries_Handler,
		},
		{
			MethodName: "TableCardinality",
			Handler:    _QueryService_TableCardinality_Handler,
		},
		{
			MethodName: "TableColumns",
			Handler:    _QueryService_TableColumns_Handler,
		},
		{
			MethodName: "TableRows",
			Handler:    _QueryService_TableRows_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rill/runtime/v1/queries.proto",
}
