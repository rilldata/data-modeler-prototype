// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file rill/ui/v1/dashboard.proto (package rill.ui.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { TimeGrain } from "../../runtime/v1/catalog_pb.js";
import { MetricsViewFilter } from "../../runtime/v1/api_pb.js";

/**
 * @generated from message rill.ui.v1.DashboardState
 */
export class DashboardState extends Message<DashboardState> {
  /**
   * @generated from field: optional google.protobuf.Timestamp time_start = 1;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp time_end = 2;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: optional rill.runtime.v1.TimeGrain time_granularity = 3;
   */
  timeGranularity?: TimeGrain;

  /**
   * @generated from field: optional rill.runtime.v1.MetricsViewFilter filters = 4;
   */
  filters?: MetricsViewFilter;

  constructor(data?: PartialMessage<DashboardState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.ui.v1.DashboardState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_start", kind: "message", T: Timestamp, opt: true },
    { no: 2, name: "time_end", kind: "message", T: Timestamp, opt: true },
    { no: 3, name: "time_granularity", kind: "enum", T: proto3.getEnumType(TimeGrain), opt: true },
    { no: 4, name: "filters", kind: "message", T: MetricsViewFilter, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DashboardState {
    return new DashboardState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DashboardState {
    return new DashboardState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DashboardState {
    return new DashboardState().fromJsonString(jsonString, options);
  }

  static equals(a: DashboardState | PlainMessage<DashboardState> | undefined, b: DashboardState | PlainMessage<DashboardState> | undefined): boolean {
    return proto3.util.equals(DashboardState, a, b);
  }
}

