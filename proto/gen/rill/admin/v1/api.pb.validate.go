// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/admin/v1/api.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationsRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Permissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Permissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateOrganizationRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.NewName != nil {
		// no validation rules for NewName
	}

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on ListProjectsForOrganizationRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsForOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsForOrganizationRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsForOrganizationRequestMultiError, or nil if none found.
func (m *ListProjectsForOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsForOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := ListProjectsForOrganizationRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectsForOrganizationRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectsForOrganizationRequestMultiError(errors)
	}

	return nil
}

// ListProjectsForOrganizationRequestMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsForOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsForOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsForOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsForOrganizationRequestMultiError) AllErrors() []error { return m }

// ListProjectsForOrganizationRequestValidationError is the validation error
// returned by ListProjectsForOrganizationRequest.Validate if the designated
// constraints aren't met.
type ListProjectsForOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsForOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsForOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsForOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsForOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsForOrganizationRequestValidationError) ErrorName() string {
	return "ListProjectsForOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsForOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsForOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsForOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsForOrganizationRequestValidationError{}

// Validate checks the field values on ListProjectsForOrganizationResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *ListProjectsForOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsForOrganizationResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// ListProjectsForOrganizationResponseMultiError, or nil if none found.
func (m *ListProjectsForOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsForOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsForOrganizationResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsForOrganizationResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsForOrganizationResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectsForOrganizationResponseMultiError(errors)
	}

	return nil
}

// ListProjectsForOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by
// ListProjectsForOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsForOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsForOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsForOrganizationResponseMultiError) AllErrors() []error { return m }

// ListProjectsForOrganizationResponseValidationError is the validation error
// returned by ListProjectsForOrganizationResponse.Validate if the designated
// constraints aren't met.
type ListProjectsForOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsForOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsForOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsForOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsForOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsForOrganizationResponseValidationError) ErrorName() string {
	return "ListProjectsForOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsForOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsForOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsForOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsForOrganizationResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProdDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProdDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProdDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProdDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "ProdDeployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jwt

	if all {
		switch v := interface{}(m.GetProjectPermissions()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProjectPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProjectPermissions",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProjectPermissions()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "ProjectPermissions",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on GetProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectVariablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectVariablesRequestMultiError, or nil if none found.
func (m *GetProjectVariablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectVariablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return GetProjectVariablesRequestMultiError(errors)
	}

	return nil
}

// GetProjectVariablesRequestMultiError is an error wrapping multiple
// validation errors returned by GetProjectVariablesRequest.ValidateAll() if
// the designated constraints aren't met.
type GetProjectVariablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectVariablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectVariablesRequestMultiError) AllErrors() []error { return m }

// GetProjectVariablesRequestValidationError is the validation error returned
// by GetProjectVariablesRequest.Validate if the designated constraints aren't met.
type GetProjectVariablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectVariablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectVariablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectVariablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectVariablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectVariablesRequestValidationError) ErrorName() string {
	return "GetProjectVariablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectVariablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectVariablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectVariablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectVariablesRequestValidationError{}

// Validate checks the field values on GetProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectVariablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectVariablesResponseMultiError, or nil if none found.
func (m *GetProjectVariablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectVariablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Variables

	if len(errors) > 0 {
		return GetProjectVariablesResponseMultiError(errors)
	}

	return nil
}

// GetProjectVariablesResponseMultiError is an error wrapping multiple
// validation errors returned by GetProjectVariablesResponse.ValidateAll() if
// the designated constraints aren't met.
type GetProjectVariablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectVariablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectVariablesResponseMultiError) AllErrors() []error { return m }

// GetProjectVariablesResponseValidationError is the validation error returned
// by GetProjectVariablesResponse.Validate if the designated constraints
// aren't met.
type GetProjectVariablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectVariablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectVariablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectVariablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectVariablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectVariablesResponseValidationError) ErrorName() string {
	return "GetProjectVariablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectVariablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectVariablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectVariablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectVariablesResponseValidationError{}

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectRequestMultiError, or nil if none found.
func (m *CreateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := CreateProjectRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := CreateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Region

	// no validation rules for ProdOlapDriver

	// no validation rules for ProdOlapDsn

	// no validation rules for ProdSlots

	// no validation rules for Subpath

	// no validation rules for ProdBranch

	// no validation rules for GithubUrl

	// no validation rules for Variables

	if len(errors) > 0 {
		return CreateProjectRequestMultiError(errors)
	}

	return nil
}

// CreateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectRequestMultiError) AllErrors() []error { return m }

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResponseMultiError, or nil if none found.
func (m *CreateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResponseMultiError) AllErrors() []error { return m }

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRequestMultiError, or nil if none found.
func (m *DeleteProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteProjectRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResponseMultiError, or nil if none found.
func (m *DeleteProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRequestMultiError, or nil if none found.
func (m *UpdateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := UpdateProjectRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateProjectRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.Description != nil {
		// no validation rules for Description
	}

	if m.Public != nil {
		// no validation rules for Public
	}

	if m.ProdBranch != nil {
		// no validation rules for ProdBranch
	}

	if m.GithubUrl != nil {
		// no validation rules for GithubUrl
	}

	if m.ProdSlots != nil {
		// no validation rules for ProdSlots
	}

	if m.Region != nil {
		// no validation rules for Region
	}

	if m.NewName != nil {
		// no validation rules for NewName
	}

	if len(errors) > 0 {
		return UpdateProjectRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResponseMultiError, or nil if none found.
func (m *UpdateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectVariablesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectVariablesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectVariablesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectVariablesRequestMultiError, or nil if none found.
func (m *UpdateProjectVariablesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectVariablesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganizationName()) < 1 {
		err := UpdateProjectVariablesRequestValidationError{
			field:  "OrganizationName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetName()) < 1 {
		err := UpdateProjectVariablesRequestValidationError{
			field:  "Name",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Variables

	if len(errors) > 0 {
		return UpdateProjectVariablesRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectVariablesRequestMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectVariablesRequest.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectVariablesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectVariablesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectVariablesRequestMultiError) AllErrors() []error { return m }

// UpdateProjectVariablesRequestValidationError is the validation error
// returned by UpdateProjectVariablesRequest.Validate if the designated
// constraints aren't met.
type UpdateProjectVariablesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectVariablesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectVariablesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectVariablesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectVariablesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectVariablesRequestValidationError) ErrorName() string {
	return "UpdateProjectVariablesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectVariablesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectVariablesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectVariablesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectVariablesRequestValidationError{}

// Validate checks the field values on UpdateProjectVariablesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectVariablesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectVariablesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// UpdateProjectVariablesResponseMultiError, or nil if none found.
func (m *UpdateProjectVariablesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectVariablesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Variables

	if len(errors) > 0 {
		return UpdateProjectVariablesResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectVariablesResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateProjectVariablesResponse.ValidateAll()
// if the designated constraints aren't met.
type UpdateProjectVariablesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectVariablesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectVariablesResponseMultiError) AllErrors() []error { return m }

// UpdateProjectVariablesResponseValidationError is the validation error
// returned by UpdateProjectVariablesResponse.Validate if the designated
// constraints aren't met.
type UpdateProjectVariablesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectVariablesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectVariablesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectVariablesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectVariablesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectVariablesResponseValidationError) ErrorName() string {
	return "UpdateProjectVariablesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectVariablesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectVariablesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectVariablesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectVariablesResponseValidationError{}

// Validate checks the field values on TriggerReconcileRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconcileRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconcileRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReconcileRequestMultiError, or nil if none found.
func (m *TriggerReconcileRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconcileRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerReconcileRequestMultiError(errors)
	}

	return nil
}

// TriggerReconcileRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerReconcileRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerReconcileRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconcileRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconcileRequestMultiError) AllErrors() []error { return m }

// TriggerReconcileRequestValidationError is the validation error returned by
// TriggerReconcileRequest.Validate if the designated constraints aren't met.
type TriggerReconcileRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconcileRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconcileRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconcileRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconcileRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconcileRequestValidationError) ErrorName() string {
	return "TriggerReconcileRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconcileRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconcileRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconcileRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconcileRequestValidationError{}

// Validate checks the field values on TriggerReconcileResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerReconcileResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerReconcileResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerReconcileResponseMultiError, or nil if none found.
func (m *TriggerReconcileResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerReconcileResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerReconcileResponseMultiError(errors)
	}

	return nil
}

// TriggerReconcileResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerReconcileResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerReconcileResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerReconcileResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerReconcileResponseMultiError) AllErrors() []error { return m }

// TriggerReconcileResponseValidationError is the validation error returned by
// TriggerReconcileResponse.Validate if the designated constraints aren't met.
type TriggerReconcileResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerReconcileResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerReconcileResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerReconcileResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerReconcileResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerReconcileResponseValidationError) ErrorName() string {
	return "TriggerReconcileResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerReconcileResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerReconcileResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerReconcileResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerReconcileResponseValidationError{}

// Validate checks the field values on TriggerRefreshSourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshSourcesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshSourcesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRefreshSourcesRequestMultiError, or nil if none found.
func (m *TriggerRefreshSourcesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshSourcesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerRefreshSourcesRequestMultiError(errors)
	}

	return nil
}

// TriggerRefreshSourcesRequestMultiError is an error wrapping multiple
// validation errors returned by TriggerRefreshSourcesRequest.ValidateAll() if
// the designated constraints aren't met.
type TriggerRefreshSourcesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshSourcesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshSourcesRequestMultiError) AllErrors() []error { return m }

// TriggerRefreshSourcesRequestValidationError is the validation error returned
// by TriggerRefreshSourcesRequest.Validate if the designated constraints
// aren't met.
type TriggerRefreshSourcesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshSourcesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshSourcesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshSourcesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshSourcesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshSourcesRequestValidationError) ErrorName() string {
	return "TriggerRefreshSourcesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshSourcesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshSourcesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshSourcesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshSourcesRequestValidationError{}

// Validate checks the field values on TriggerRefreshSourcesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRefreshSourcesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRefreshSourcesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// TriggerRefreshSourcesResponseMultiError, or nil if none found.
func (m *TriggerRefreshSourcesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRefreshSourcesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerRefreshSourcesResponseMultiError(errors)
	}

	return nil
}

// TriggerRefreshSourcesResponseMultiError is an error wrapping multiple
// validation errors returned by TriggerRefreshSourcesResponse.ValidateAll()
// if the designated constraints aren't met.
type TriggerRefreshSourcesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRefreshSourcesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRefreshSourcesResponseMultiError) AllErrors() []error { return m }

// TriggerRefreshSourcesResponseValidationError is the validation error
// returned by TriggerRefreshSourcesResponse.Validate if the designated
// constraints aren't met.
type TriggerRefreshSourcesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRefreshSourcesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRefreshSourcesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRefreshSourcesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRefreshSourcesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRefreshSourcesResponseValidationError) ErrorName() string {
	return "TriggerRefreshSourcesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRefreshSourcesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRefreshSourcesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRefreshSourcesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRefreshSourcesResponseValidationError{}

// Validate checks the field values on TriggerRedeployRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRedeployRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRedeployRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRedeployRequestMultiError, or nil if none found.
func (m *TriggerRedeployRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRedeployRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for DeploymentId

	if len(errors) > 0 {
		return TriggerRedeployRequestMultiError(errors)
	}

	return nil
}

// TriggerRedeployRequestMultiError is an error wrapping multiple validation
// errors returned by TriggerRedeployRequest.ValidateAll() if the designated
// constraints aren't met.
type TriggerRedeployRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRedeployRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRedeployRequestMultiError) AllErrors() []error { return m }

// TriggerRedeployRequestValidationError is the validation error returned by
// TriggerRedeployRequest.Validate if the designated constraints aren't met.
type TriggerRedeployRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRedeployRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRedeployRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRedeployRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRedeployRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRedeployRequestValidationError) ErrorName() string {
	return "TriggerRedeployRequestValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRedeployRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRedeployRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRedeployRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRedeployRequestValidationError{}

// Validate checks the field values on TriggerRedeployResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *TriggerRedeployResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TriggerRedeployResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// TriggerRedeployResponseMultiError, or nil if none found.
func (m *TriggerRedeployResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *TriggerRedeployResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return TriggerRedeployResponseMultiError(errors)
	}

	return nil
}

// TriggerRedeployResponseMultiError is an error wrapping multiple validation
// errors returned by TriggerRedeployResponse.ValidateAll() if the designated
// constraints aren't met.
type TriggerRedeployResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TriggerRedeployResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TriggerRedeployResponseMultiError) AllErrors() []error { return m }

// TriggerRedeployResponseValidationError is the validation error returned by
// TriggerRedeployResponse.Validate if the designated constraints aren't met.
type TriggerRedeployResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TriggerRedeployResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TriggerRedeployResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TriggerRedeployResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TriggerRedeployResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TriggerRedeployResponseValidationError) ErrorName() string {
	return "TriggerRedeployResponseValidationError"
}

// Error satisfies the builtin error interface
func (e TriggerRedeployResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTriggerRedeployResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TriggerRedeployResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TriggerRedeployResponseValidationError{}

// Validate checks the field values on ListOrganizationMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMembersRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationMembersRequestMultiError, or nil if none found.
func (m *ListOrganizationMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationMembersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationMembersRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationMembersRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationMembersRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMembersRequestMultiError) AllErrors() []error { return m }

// ListOrganizationMembersRequestValidationError is the validation error
// returned by ListOrganizationMembersRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMembersRequestValidationError) ErrorName() string {
	return "ListOrganizationMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMembersRequestValidationError{}

// Validate checks the field values on ListOrganizationMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationMembersResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationMembersResponseMultiError, or nil if none found.
func (m *ListOrganizationMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationMembersResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationMembersResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationMembersResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationMembersResponseMultiError) AllErrors() []error { return m }

// ListOrganizationMembersResponseValidationError is the validation error
// returned by ListOrganizationMembersResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationMembersResponseValidationError) ErrorName() string {
	return "ListOrganizationMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationMembersResponseValidationError{}

// Validate checks the field values on ListOrganizationInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitesRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitesRequestMultiError, or nil if none found.
func (m *ListOrganizationInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListOrganizationInvitesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationInvitesRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitesRequestMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationInvitesRequest.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitesRequestMultiError) AllErrors() []error { return m }

// ListOrganizationInvitesRequestValidationError is the validation error
// returned by ListOrganizationInvitesRequest.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitesRequestValidationError) ErrorName() string {
	return "ListOrganizationInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitesRequestValidationError{}

// Validate checks the field values on ListOrganizationInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationInvitesResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListOrganizationInvitesResponseMultiError, or nil if none found.
func (m *ListOrganizationInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationInvitesResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by ListOrganizationInvitesResponse.ValidateAll()
// if the designated constraints aren't met.
type ListOrganizationInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationInvitesResponseMultiError) AllErrors() []error { return m }

// ListOrganizationInvitesResponseValidationError is the validation error
// returned by ListOrganizationInvitesResponse.Validate if the designated
// constraints aren't met.
type ListOrganizationInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationInvitesResponseValidationError) ErrorName() string {
	return "ListOrganizationInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationInvitesResponseValidationError{}

// Validate checks the field values on AddOrganizationMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrganizationMemberRequestMultiError, or nil if none found.
func (m *AddOrganizationMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddOrganizationMemberRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddOrganizationMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Role

	if len(errors) > 0 {
		return AddOrganizationMemberRequestMultiError(errors)
	}

	return nil
}

func (m *AddOrganizationMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddOrganizationMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddOrganizationMemberRequestMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type AddOrganizationMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberRequestMultiError) AllErrors() []error { return m }

// AddOrganizationMemberRequestValidationError is the validation error returned
// by AddOrganizationMemberRequest.Validate if the designated constraints
// aren't met.
type AddOrganizationMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberRequestValidationError) ErrorName() string {
	return "AddOrganizationMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberRequestValidationError{}

// Validate checks the field values on AddOrganizationMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrganizationMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrganizationMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// AddOrganizationMemberResponseMultiError, or nil if none found.
func (m *AddOrganizationMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrganizationMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PendingSignup

	if len(errors) > 0 {
		return AddOrganizationMemberResponseMultiError(errors)
	}

	return nil
}

// AddOrganizationMemberResponseMultiError is an error wrapping multiple
// validation errors returned by AddOrganizationMemberResponse.ValidateAll()
// if the designated constraints aren't met.
type AddOrganizationMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrganizationMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrganizationMemberResponseMultiError) AllErrors() []error { return m }

// AddOrganizationMemberResponseValidationError is the validation error
// returned by AddOrganizationMemberResponse.Validate if the designated
// constraints aren't met.
type AddOrganizationMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrganizationMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrganizationMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrganizationMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrganizationMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrganizationMemberResponseValidationError) ErrorName() string {
	return "AddOrganizationMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrganizationMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrganizationMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrganizationMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrganizationMemberResponseValidationError{}

// Validate checks the field values on RemoveOrganizationMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrganizationMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationMemberRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationMemberRequestMultiError, or nil if none found.
func (m *RemoveOrganizationMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveOrganizationMemberRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RemoveOrganizationMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for KeepProjectRoles

	if len(errors) > 0 {
		return RemoveOrganizationMemberRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveOrganizationMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RemoveOrganizationMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RemoveOrganizationMemberRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveOrganizationMemberRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveOrganizationMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberRequestMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberRequestValidationError is the validation error
// returned by RemoveOrganizationMemberRequest.Validate if the designated
// constraints aren't met.
type RemoveOrganizationMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberRequestValidationError) ErrorName() string {
	return "RemoveOrganizationMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberRequestValidationError{}

// Validate checks the field values on RemoveOrganizationMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *RemoveOrganizationMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrganizationMemberResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveOrganizationMemberResponseMultiError, or nil if none found.
func (m *RemoveOrganizationMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrganizationMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrganizationMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveOrganizationMemberResponseMultiError is an error wrapping multiple
// validation errors returned by
// RemoveOrganizationMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrganizationMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrganizationMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrganizationMemberResponseMultiError) AllErrors() []error { return m }

// RemoveOrganizationMemberResponseValidationError is the validation error
// returned by RemoveOrganizationMemberResponse.Validate if the designated
// constraints aren't met.
type RemoveOrganizationMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrganizationMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrganizationMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrganizationMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrganizationMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrganizationMemberResponseValidationError) ErrorName() string {
	return "RemoveOrganizationMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrganizationMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrganizationMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrganizationMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrganizationMemberResponseValidationError{}

// Validate checks the field values on LeaveOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationRequestMultiError, or nil if none found.
func (m *LeaveOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := LeaveOrganizationRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LeaveOrganizationRequestMultiError(errors)
	}

	return nil
}

// LeaveOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type LeaveOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationRequestMultiError) AllErrors() []error { return m }

// LeaveOrganizationRequestValidationError is the validation error returned by
// LeaveOrganizationRequest.Validate if the designated constraints aren't met.
type LeaveOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationRequestValidationError) ErrorName() string {
	return "LeaveOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationRequestValidationError{}

// Validate checks the field values on LeaveOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationResponseMultiError, or nil if none found.
func (m *LeaveOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveOrganizationResponseMultiError(errors)
	}

	return nil
}

// LeaveOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationResponse.ValidateAll() if the
// designated constraints aren't met.
type LeaveOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationResponseMultiError) AllErrors() []error { return m }

// LeaveOrganizationResponseValidationError is the validation error returned by
// LeaveOrganizationResponse.Validate if the designated constraints aren't met.
type LeaveOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationResponseValidationError) ErrorName() string {
	return "LeaveOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationResponseValidationError{}

// Validate checks the field values on SetOrganizationMemberRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetOrganizationMemberRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMemberRoleRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// SetOrganizationMemberRoleRequestMultiError, or nil if none found.
func (m *SetOrganizationMemberRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetOrganizationMemberRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetOrganizationMemberRoleRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetOrganizationMemberRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetOrganizationMemberRoleRequestMultiError(errors)
	}

	return nil
}

func (m *SetOrganizationMemberRoleRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetOrganizationMemberRoleRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetOrganizationMemberRoleRequestMultiError is an error wrapping multiple
// validation errors returned by
// SetOrganizationMemberRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberRoleRequestMultiError) AllErrors() []error { return m }

// SetOrganizationMemberRoleRequestValidationError is the validation error
// returned by SetOrganizationMemberRoleRequest.Validate if the designated
// constraints aren't met.
type SetOrganizationMemberRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberRoleRequestValidationError) ErrorName() string {
	return "SetOrganizationMemberRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberRoleRequestValidationError{}

// Validate checks the field values on SetOrganizationMemberRoleResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SetOrganizationMemberRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrganizationMemberRoleResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SetOrganizationMemberRoleResponseMultiError, or nil if none found.
func (m *SetOrganizationMemberRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrganizationMemberRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOrganizationMemberRoleResponseMultiError(errors)
	}

	return nil
}

// SetOrganizationMemberRoleResponseMultiError is an error wrapping multiple
// validation errors returned by
// SetOrganizationMemberRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOrganizationMemberRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrganizationMemberRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrganizationMemberRoleResponseMultiError) AllErrors() []error { return m }

// SetOrganizationMemberRoleResponseValidationError is the validation error
// returned by SetOrganizationMemberRoleResponse.Validate if the designated
// constraints aren't met.
type SetOrganizationMemberRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrganizationMemberRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrganizationMemberRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrganizationMemberRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrganizationMemberRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrganizationMemberRoleResponseValidationError) ErrorName() string {
	return "SetOrganizationMemberRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrganizationMemberRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrganizationMemberRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrganizationMemberRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrganizationMemberRoleResponseValidationError{}

// Validate checks the field values on ListSuperusersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSuperusersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSuperusersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSuperusersRequestMultiError, or nil if none found.
func (m *ListSuperusersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSuperusersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return ListSuperusersRequestMultiError(errors)
	}

	return nil
}

// ListSuperusersRequestMultiError is an error wrapping multiple validation
// errors returned by ListSuperusersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListSuperusersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSuperusersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSuperusersRequestMultiError) AllErrors() []error { return m }

// ListSuperusersRequestValidationError is the validation error returned by
// ListSuperusersRequest.Validate if the designated constraints aren't met.
type ListSuperusersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSuperusersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSuperusersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSuperusersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSuperusersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSuperusersRequestValidationError) ErrorName() string {
	return "ListSuperusersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListSuperusersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSuperusersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSuperusersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSuperusersRequestValidationError{}

// Validate checks the field values on ListSuperusersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListSuperusersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListSuperusersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListSuperusersResponseMultiError, or nil if none found.
func (m *ListSuperusersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListSuperusersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListSuperusersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListSuperusersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListSuperusersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListSuperusersResponseMultiError(errors)
	}

	return nil
}

// ListSuperusersResponseMultiError is an error wrapping multiple validation
// errors returned by ListSuperusersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListSuperusersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListSuperusersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListSuperusersResponseMultiError) AllErrors() []error { return m }

// ListSuperusersResponseValidationError is the validation error returned by
// ListSuperusersResponse.Validate if the designated constraints aren't met.
type ListSuperusersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListSuperusersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListSuperusersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListSuperusersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListSuperusersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListSuperusersResponseValidationError) ErrorName() string {
	return "ListSuperusersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListSuperusersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListSuperusersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListSuperusersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListSuperusersResponseValidationError{}

// Validate checks the field values on SetSuperuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserRequestMultiError, or nil if none found.
func (m *SetSuperuserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetSuperuserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Superuser

	if len(errors) > 0 {
		return SetSuperuserRequestMultiError(errors)
	}

	return nil
}

func (m *SetSuperuserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetSuperuserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetSuperuserRequestMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserRequest.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserRequestMultiError) AllErrors() []error { return m }

// SetSuperuserRequestValidationError is the validation error returned by
// SetSuperuserRequest.Validate if the designated constraints aren't met.
type SetSuperuserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserRequestValidationError) ErrorName() string {
	return "SetSuperuserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserRequestValidationError{}

// Validate checks the field values on SetSuperuserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetSuperuserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetSuperuserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetSuperuserResponseMultiError, or nil if none found.
func (m *SetSuperuserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetSuperuserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetSuperuserResponseMultiError(errors)
	}

	return nil
}

// SetSuperuserResponseMultiError is an error wrapping multiple validation
// errors returned by SetSuperuserResponse.ValidateAll() if the designated
// constraints aren't met.
type SetSuperuserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetSuperuserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetSuperuserResponseMultiError) AllErrors() []error { return m }

// SetSuperuserResponseValidationError is the validation error returned by
// SetSuperuserResponse.Validate if the designated constraints aren't met.
type SetSuperuserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetSuperuserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetSuperuserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetSuperuserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetSuperuserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetSuperuserResponseValidationError) ErrorName() string {
	return "SetSuperuserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetSuperuserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetSuperuserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetSuperuserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetSuperuserResponseValidationError{}

// Validate checks the field values on SudoGetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoGetResourceRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoGetResourceRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoGetResourceRequestMultiError, or nil if none found.
func (m *SudoGetResourceRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoGetResourceRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Id.(type) {
	case *SudoGetResourceRequest_UserId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for UserId
	case *SudoGetResourceRequest_OrgId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for OrgId
	case *SudoGetResourceRequest_ProjectId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for ProjectId
	case *SudoGetResourceRequest_DeploymentId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for DeploymentId
	case *SudoGetResourceRequest_InstanceId:
		if v == nil {
			err := SudoGetResourceRequestValidationError{
				field:  "Id",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}
		// no validation rules for InstanceId
	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SudoGetResourceRequestMultiError(errors)
	}

	return nil
}

// SudoGetResourceRequestMultiError is an error wrapping multiple validation
// errors returned by SudoGetResourceRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoGetResourceRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoGetResourceRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoGetResourceRequestMultiError) AllErrors() []error { return m }

// SudoGetResourceRequestValidationError is the validation error returned by
// SudoGetResourceRequest.Validate if the designated constraints aren't met.
type SudoGetResourceRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoGetResourceRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoGetResourceRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoGetResourceRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoGetResourceRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoGetResourceRequestValidationError) ErrorName() string {
	return "SudoGetResourceRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoGetResourceRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoGetResourceRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoGetResourceRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoGetResourceRequestValidationError{}

// Validate checks the field values on SudoGetResourceResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoGetResourceResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoGetResourceResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoGetResourceResponseMultiError, or nil if none found.
func (m *SudoGetResourceResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoGetResourceResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	switch v := m.Resource.(type) {
	case *SudoGetResourceResponse_User:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetUser()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "User",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Org:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetOrg()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Org",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Org",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetOrg()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Org",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Project:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetProject()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Project",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Project",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Deployment:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetDeployment()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Deployment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Deployment",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetDeployment()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Deployment",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	case *SudoGetResourceResponse_Instance:
		if v == nil {
			err := SudoGetResourceResponseValidationError{
				field:  "Resource",
				reason: "oneof value cannot be a typed-nil",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

		if all {
			switch v := interface{}(m.GetInstance()).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SudoGetResourceResponseValidationError{
						field:  "Instance",
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(m.GetInstance()).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SudoGetResourceResponseValidationError{
					field:  "Instance",
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	default:
		_ = v // ensures v is used
	}

	if len(errors) > 0 {
		return SudoGetResourceResponseMultiError(errors)
	}

	return nil
}

// SudoGetResourceResponseMultiError is an error wrapping multiple validation
// errors returned by SudoGetResourceResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoGetResourceResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoGetResourceResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoGetResourceResponseMultiError) AllErrors() []error { return m }

// SudoGetResourceResponseValidationError is the validation error returned by
// SudoGetResourceResponse.Validate if the designated constraints aren't met.
type SudoGetResourceResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoGetResourceResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoGetResourceResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoGetResourceResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoGetResourceResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoGetResourceResponseValidationError) ErrorName() string {
	return "SudoGetResourceResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoGetResourceResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoGetResourceResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoGetResourceResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoGetResourceResponseValidationError{}

// Validate checks the field values on SudoUpdateOrganizationQuotasRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *SudoUpdateOrganizationQuotasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateOrganizationQuotasRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoUpdateOrganizationQuotasRequestMultiError, or nil if none found.
func (m *SudoUpdateOrganizationQuotasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationQuotasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrgName

	if m.Projects != nil {
		// no validation rules for Projects
	}

	if m.Deployments != nil {
		// no validation rules for Deployments
	}

	if m.SlotsTotal != nil {
		// no validation rules for SlotsTotal
	}

	if m.SlotsPerDeployment != nil {
		// no validation rules for SlotsPerDeployment
	}

	if m.OutstandingInvites != nil {
		// no validation rules for OutstandingInvites
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationQuotasRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationQuotasRequestMultiError is an error wrapping multiple
// validation errors returned by
// SudoUpdateOrganizationQuotasRequest.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationQuotasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationQuotasRequestMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationQuotasRequestValidationError is the validation error
// returned by SudoUpdateOrganizationQuotasRequest.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationQuotasRequestValidationError) ErrorName() string {
	return "SudoUpdateOrganizationQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationQuotasRequestValidationError{}

// Validate checks the field values on SudoUpdateOrganizationQuotasResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *SudoUpdateOrganizationQuotasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateOrganizationQuotasResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// SudoUpdateOrganizationQuotasResponseMultiError, or nil if none found.
func (m *SudoUpdateOrganizationQuotasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateOrganizationQuotasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateOrganizationQuotasResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateOrganizationQuotasResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateOrganizationQuotasResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateOrganizationQuotasResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateOrganizationQuotasResponseMultiError is an error wrapping multiple
// validation errors returned by
// SudoUpdateOrganizationQuotasResponse.ValidateAll() if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateOrganizationQuotasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateOrganizationQuotasResponseMultiError) AllErrors() []error { return m }

// SudoUpdateOrganizationQuotasResponseValidationError is the validation error
// returned by SudoUpdateOrganizationQuotasResponse.Validate if the designated
// constraints aren't met.
type SudoUpdateOrganizationQuotasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateOrganizationQuotasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateOrganizationQuotasResponseValidationError) ErrorName() string {
	return "SudoUpdateOrganizationQuotasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateOrganizationQuotasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateOrganizationQuotasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateOrganizationQuotasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateOrganizationQuotasResponseValidationError{}

// Validate checks the field values on SudoUpdateUserQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateUserQuotasRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateUserQuotasRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoUpdateUserQuotasRequestMultiError, or nil if none found.
func (m *SudoUpdateUserQuotasRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateUserQuotasRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if m.SingleuserOrgs != nil {
		// no validation rules for SingleuserOrgs
	}

	if len(errors) > 0 {
		return SudoUpdateUserQuotasRequestMultiError(errors)
	}

	return nil
}

// SudoUpdateUserQuotasRequestMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateUserQuotasRequest.ValidateAll() if
// the designated constraints aren't met.
type SudoUpdateUserQuotasRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateUserQuotasRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateUserQuotasRequestMultiError) AllErrors() []error { return m }

// SudoUpdateUserQuotasRequestValidationError is the validation error returned
// by SudoUpdateUserQuotasRequest.Validate if the designated constraints
// aren't met.
type SudoUpdateUserQuotasRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateUserQuotasRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateUserQuotasRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateUserQuotasRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateUserQuotasRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateUserQuotasRequestValidationError) ErrorName() string {
	return "SudoUpdateUserQuotasRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateUserQuotasRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateUserQuotasRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateUserQuotasRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateUserQuotasRequestValidationError{}

// Validate checks the field values on SudoUpdateUserQuotasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SudoUpdateUserQuotasResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SudoUpdateUserQuotasResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SudoUpdateUserQuotasResponseMultiError, or nil if none found.
func (m *SudoUpdateUserQuotasResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SudoUpdateUserQuotasResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, SudoUpdateUserQuotasResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, SudoUpdateUserQuotasResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return SudoUpdateUserQuotasResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return SudoUpdateUserQuotasResponseMultiError(errors)
	}

	return nil
}

// SudoUpdateUserQuotasResponseMultiError is an error wrapping multiple
// validation errors returned by SudoUpdateUserQuotasResponse.ValidateAll() if
// the designated constraints aren't met.
type SudoUpdateUserQuotasResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SudoUpdateUserQuotasResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SudoUpdateUserQuotasResponseMultiError) AllErrors() []error { return m }

// SudoUpdateUserQuotasResponseValidationError is the validation error returned
// by SudoUpdateUserQuotasResponse.Validate if the designated constraints
// aren't met.
type SudoUpdateUserQuotasResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SudoUpdateUserQuotasResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SudoUpdateUserQuotasResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SudoUpdateUserQuotasResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SudoUpdateUserQuotasResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SudoUpdateUserQuotasResponseValidationError) ErrorName() string {
	return "SudoUpdateUserQuotasResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SudoUpdateUserQuotasResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSudoUpdateUserQuotasResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SudoUpdateUserQuotasResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SudoUpdateUserQuotasResponseValidationError{}

// Validate checks the field values on ListProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersRequestMultiError, or nil if none found.
func (m *ListProjectMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectMembersRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectMembersRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectMembersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectMembersRequestMultiError(errors)
	}

	return nil
}

// ListProjectMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectMembersRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProjectMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersRequestMultiError) AllErrors() []error { return m }

// ListProjectMembersRequestValidationError is the validation error returned by
// ListProjectMembersRequest.Validate if the designated constraints aren't met.
type ListProjectMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersRequestValidationError) ErrorName() string {
	return "ListProjectMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersRequestValidationError{}

// Validate checks the field values on ListProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersResponseMultiError, or nil if none found.
func (m *ListProjectMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectMembersResponseMultiError(errors)
	}

	return nil
}

// ListProjectMembersResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectMembersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersResponseMultiError) AllErrors() []error { return m }

// ListProjectMembersResponseValidationError is the validation error returned
// by ListProjectMembersResponse.Validate if the designated constraints aren't met.
type ListProjectMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersResponseValidationError) ErrorName() string {
	return "ListProjectMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersResponseValidationError{}

// Validate checks the field values on ListProjectInvitesRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectInvitesRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectInvitesRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectInvitesRequestMultiError, or nil if none found.
func (m *ListProjectInvitesRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectInvitesRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListProjectInvitesRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := ListProjectInvitesRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := ListProjectInvitesRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectInvitesRequestMultiError(errors)
	}

	return nil
}

// ListProjectInvitesRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectInvitesRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProjectInvitesRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectInvitesRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectInvitesRequestMultiError) AllErrors() []error { return m }

// ListProjectInvitesRequestValidationError is the validation error returned by
// ListProjectInvitesRequest.Validate if the designated constraints aren't met.
type ListProjectInvitesRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectInvitesRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectInvitesRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectInvitesRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectInvitesRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectInvitesRequestValidationError) ErrorName() string {
	return "ListProjectInvitesRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectInvitesRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectInvitesRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectInvitesRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectInvitesRequestValidationError{}

// Validate checks the field values on ListProjectInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectInvitesResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectInvitesResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectInvitesResponseMultiError, or nil if none found.
func (m *ListProjectInvitesResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectInvitesResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetInvites() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectInvitesResponseValidationError{
						field:  fmt.Sprintf("Invites[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectInvitesResponseValidationError{
					field:  fmt.Sprintf("Invites[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectInvitesResponseMultiError(errors)
	}

	return nil
}

// ListProjectInvitesResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectInvitesResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectInvitesResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectInvitesResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectInvitesResponseMultiError) AllErrors() []error { return m }

// ListProjectInvitesResponseValidationError is the validation error returned
// by ListProjectInvitesResponse.Validate if the designated constraints aren't met.
type ListProjectInvitesResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectInvitesResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectInvitesResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectInvitesResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectInvitesResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectInvitesResponseValidationError) ErrorName() string {
	return "ListProjectInvitesResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectInvitesResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectInvitesResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectInvitesResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectInvitesResponseValidationError{}

// Validate checks the field values on AddProjectMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberRequestMultiError, or nil if none found.
func (m *AddProjectMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := AddProjectMemberRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := AddProjectMemberRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = AddProjectMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := AddProjectMemberRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return AddProjectMemberRequestMultiError(errors)
	}

	return nil
}

func (m *AddProjectMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *AddProjectMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// AddProjectMemberRequestMultiError is an error wrapping multiple validation
// errors returned by AddProjectMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberRequestMultiError) AllErrors() []error { return m }

// AddProjectMemberRequestValidationError is the validation error returned by
// AddProjectMemberRequest.Validate if the designated constraints aren't met.
type AddProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberRequestValidationError) ErrorName() string {
	return "AddProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberRequestValidationError{}

// Validate checks the field values on AddProjectMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberResponseMultiError, or nil if none found.
func (m *AddProjectMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PendingSignup

	if len(errors) > 0 {
		return AddProjectMemberResponseMultiError(errors)
	}

	return nil
}

// AddProjectMemberResponseMultiError is an error wrapping multiple validation
// errors returned by AddProjectMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberResponseMultiError) AllErrors() []error { return m }

// AddProjectMemberResponseValidationError is the validation error returned by
// AddProjectMemberResponse.Validate if the designated constraints aren't met.
type AddProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberResponseValidationError) ErrorName() string {
	return "AddProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberResponseValidationError{}

// Validate checks the field values on RemoveProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberRequestMultiError, or nil if none found.
func (m *RemoveProjectMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveProjectMemberRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := RemoveProjectMemberRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = RemoveProjectMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveProjectMemberRequestMultiError(errors)
	}

	return nil
}

func (m *RemoveProjectMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *RemoveProjectMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// RemoveProjectMemberRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveProjectMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberRequestMultiError) AllErrors() []error { return m }

// RemoveProjectMemberRequestValidationError is the validation error returned
// by RemoveProjectMemberRequest.Validate if the designated constraints aren't met.
type RemoveProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberRequestValidationError) ErrorName() string {
	return "RemoveProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberRequestValidationError{}

// Validate checks the field values on RemoveProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberResponseMultiError, or nil if none found.
func (m *RemoveProjectMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveProjectMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveProjectMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberResponseMultiError) AllErrors() []error { return m }

// RemoveProjectMemberResponseValidationError is the validation error returned
// by RemoveProjectMemberResponse.Validate if the designated constraints
// aren't met.
type RemoveProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberResponseValidationError) ErrorName() string {
	return "RemoveProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberResponseValidationError{}

// Validate checks the field values on SetProjectMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProjectMemberRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProjectMemberRoleRequestMultiError, or nil if none found.
func (m *SetProjectMemberRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := SetProjectMemberRoleRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := SetProjectMemberRoleRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = SetProjectMemberRoleRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := SetProjectMemberRoleRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return SetProjectMemberRoleRequestMultiError(errors)
	}

	return nil
}

func (m *SetProjectMemberRoleRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *SetProjectMemberRoleRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// SetProjectMemberRoleRequestMultiError is an error wrapping multiple
// validation errors returned by SetProjectMemberRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type SetProjectMemberRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberRoleRequestMultiError) AllErrors() []error { return m }

// SetProjectMemberRoleRequestValidationError is the validation error returned
// by SetProjectMemberRoleRequest.Validate if the designated constraints
// aren't met.
type SetProjectMemberRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberRoleRequestValidationError) ErrorName() string {
	return "SetProjectMemberRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberRoleRequestValidationError{}

// Validate checks the field values on SetProjectMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProjectMemberRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProjectMemberRoleResponseMultiError, or nil if none found.
func (m *SetProjectMemberRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetProjectMemberRoleResponseMultiError(errors)
	}

	return nil
}

// SetProjectMemberRoleResponseMultiError is an error wrapping multiple
// validation errors returned by SetProjectMemberRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type SetProjectMemberRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberRoleResponseMultiError) AllErrors() []error { return m }

// SetProjectMemberRoleResponseValidationError is the validation error returned
// by SetProjectMemberRoleResponse.Validate if the designated constraints
// aren't met.
type SetProjectMemberRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberRoleResponseValidationError) ErrorName() string {
	return "SetProjectMemberRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberRoleResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on GetUserRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GetUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GetUserRequestMultiError,
// or nil if none found.
func (m *GetUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = GetUserRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetUserRequestMultiError(errors)
	}

	return nil
}

func (m *GetUserRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *GetUserRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// GetUserRequestMultiError is an error wrapping multiple validation errors
// returned by GetUserRequest.ValidateAll() if the designated constraints
// aren't met.
type GetUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserRequestMultiError) AllErrors() []error { return m }

// GetUserRequestValidationError is the validation error returned by
// GetUserRequest.Validate if the designated constraints aren't met.
type GetUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserRequestValidationError) ErrorName() string { return "GetUserRequestValidationError" }

// Error satisfies the builtin error interface
func (e GetUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserRequestValidationError{}

// Validate checks the field values on GetUserResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetUserResponseMultiError, or nil if none found.
func (m *GetUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetUserResponseMultiError(errors)
	}

	return nil
}

// GetUserResponseMultiError is an error wrapping multiple validation errors
// returned by GetUserResponse.ValidateAll() if the designated constraints
// aren't met.
type GetUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetUserResponseMultiError) AllErrors() []error { return m }

// GetUserResponseValidationError is the validation error returned by
// GetUserResponse.Validate if the designated constraints aren't met.
type GetUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetUserResponseValidationError) ErrorName() string { return "GetUserResponseValidationError" }

// Error satisfies the builtin error interface
func (e GetUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetUserResponseValidationError{}

// Validate checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUsersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUsersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUsersRequestMultiError, or nil if none found.
func (m *SearchUsersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUsersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetEmailPattern()) < 1 {
		err := SearchUsersRequestValidationError{
			field:  "EmailPattern",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPageSize() != 0 {

		if m.GetPageSize() > 1000 {
			err := SearchUsersRequestValidationError{
				field:  "PageSize",
				reason: "value must be less than or equal to 1000",
			}
			if !all {
				return err
			}
			errors = append(errors, err)
		}

	}

	// no validation rules for PageToken

	if len(errors) > 0 {
		return SearchUsersRequestMultiError(errors)
	}

	return nil
}

// SearchUsersRequestMultiError is an error wrapping multiple validation errors
// returned by SearchUsersRequest.ValidateAll() if the designated constraints
// aren't met.
type SearchUsersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUsersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUsersRequestMultiError) AllErrors() []error { return m }

// SearchUsersRequestValidationError is the validation error returned by
// SearchUsersRequest.Validate if the designated constraints aren't met.
type SearchUsersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUsersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUsersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUsersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUsersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUsersRequestValidationError) ErrorName() string {
	return "SearchUsersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUsersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUsersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUsersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUsersRequestValidationError{}

// Validate checks the field values on SearchUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SearchUsersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SearchUsersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SearchUsersResponseMultiError, or nil if none found.
func (m *SearchUsersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SearchUsersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, SearchUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, SearchUsersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return SearchUsersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return SearchUsersResponseMultiError(errors)
	}

	return nil
}

// SearchUsersResponseMultiError is an error wrapping multiple validation
// errors returned by SearchUsersResponse.ValidateAll() if the designated
// constraints aren't met.
type SearchUsersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SearchUsersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SearchUsersResponseMultiError) AllErrors() []error { return m }

// SearchUsersResponseValidationError is the validation error returned by
// SearchUsersResponse.Validate if the designated constraints aren't met.
type SearchUsersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SearchUsersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SearchUsersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SearchUsersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SearchUsersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SearchUsersResponseValidationError) ErrorName() string {
	return "SearchUsersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SearchUsersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSearchUsersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SearchUsersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SearchUsersResponseValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenRequestMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenRequestMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenRequestValidationError is the validation error
// returned by RevokeCurrentAuthTokenRequest.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenRequestValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenRequestValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenResponseMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenResponseMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenResponseValidationError is the validation error
// returned by RevokeCurrentAuthTokenResponse.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenResponseValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenResponseValidationError{}

// Validate checks the field values on IssueRepresentativeAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the first error encountered is returned, or nil if there are
// no violations.
func (m *IssueRepresentativeAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueRepresentativeAuthTokenRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IssueRepresentativeAuthTokenRequestMultiError, or nil if none found.
func (m *IssueRepresentativeAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueRepresentativeAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = IssueRepresentativeAuthTokenRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for TtlMinutes

	if len(errors) > 0 {
		return IssueRepresentativeAuthTokenRequestMultiError(errors)
	}

	return nil
}

func (m *IssueRepresentativeAuthTokenRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *IssueRepresentativeAuthTokenRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// IssueRepresentativeAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by
// IssueRepresentativeAuthTokenRequest.ValidateAll() if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueRepresentativeAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueRepresentativeAuthTokenRequestMultiError) AllErrors() []error { return m }

// IssueRepresentativeAuthTokenRequestValidationError is the validation error
// returned by IssueRepresentativeAuthTokenRequest.Validate if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueRepresentativeAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueRepresentativeAuthTokenRequestValidationError) ErrorName() string {
	return "IssueRepresentativeAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e IssueRepresentativeAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueRepresentativeAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueRepresentativeAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueRepresentativeAuthTokenRequestValidationError{}

// Validate checks the field values on IssueRepresentativeAuthTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *IssueRepresentativeAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on IssueRepresentativeAuthTokenResponse
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// IssueRepresentativeAuthTokenResponseMultiError, or nil if none found.
func (m *IssueRepresentativeAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *IssueRepresentativeAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Token

	if len(errors) > 0 {
		return IssueRepresentativeAuthTokenResponseMultiError(errors)
	}

	return nil
}

// IssueRepresentativeAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by
// IssueRepresentativeAuthTokenResponse.ValidateAll() if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m IssueRepresentativeAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m IssueRepresentativeAuthTokenResponseMultiError) AllErrors() []error { return m }

// IssueRepresentativeAuthTokenResponseValidationError is the validation error
// returned by IssueRepresentativeAuthTokenResponse.Validate if the designated
// constraints aren't met.
type IssueRepresentativeAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e IssueRepresentativeAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e IssueRepresentativeAuthTokenResponseValidationError) ErrorName() string {
	return "IssueRepresentativeAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e IssueRepresentativeAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sIssueRepresentativeAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = IssueRepresentativeAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = IssueRepresentativeAuthTokenResponseValidationError{}

// Validate checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusRequestMultiError, or nil if none found.
func (m *GetGithubRepoStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GithubUrl

	if len(errors) > 0 {
		return GetGithubRepoStatusRequestMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusRequestMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusRequestValidationError is the validation error returned
// by GetGithubRepoStatusRequest.Validate if the designated constraints aren't met.
type GetGithubRepoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusRequestValidationError) ErrorName() string {
	return "GetGithubRepoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusRequestValidationError{}

// Validate checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusResponseMultiError, or nil if none found.
func (m *GetGithubRepoStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasAccess

	// no validation rules for GrantAccessUrl

	// no validation rules for DefaultBranch

	if len(errors) > 0 {
		return GetGithubRepoStatusResponseMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusResponseMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusResponseValidationError is the validation error returned
// by GetGithubRepoStatusResponse.Validate if the designated constraints
// aren't met.
type GetGithubRepoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusResponseValidationError) ErrorName() string {
	return "GetGithubRepoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusResponseValidationError{}

// Validate checks the field values on GetGitCredentialsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGitCredentialsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGitCredentialsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGitCredentialsRequestMultiError, or nil if none found.
func (m *GetGitCredentialsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGitCredentialsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := GetGitCredentialsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetProject()) < 1 {
		err := GetGitCredentialsRequestValidationError{
			field:  "Project",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetGitCredentialsRequestMultiError(errors)
	}

	return nil
}

// GetGitCredentialsRequestMultiError is an error wrapping multiple validation
// errors returned by GetGitCredentialsRequest.ValidateAll() if the designated
// constraints aren't met.
type GetGitCredentialsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGitCredentialsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGitCredentialsRequestMultiError) AllErrors() []error { return m }

// GetGitCredentialsRequestValidationError is the validation error returned by
// GetGitCredentialsRequest.Validate if the designated constraints aren't met.
type GetGitCredentialsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGitCredentialsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGitCredentialsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGitCredentialsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGitCredentialsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGitCredentialsRequestValidationError) ErrorName() string {
	return "GetGitCredentialsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGitCredentialsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGitCredentialsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGitCredentialsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGitCredentialsRequestValidationError{}

// Validate checks the field values on GetGitCredentialsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGitCredentialsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGitCredentialsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGitCredentialsResponseMultiError, or nil if none found.
func (m *GetGitCredentialsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGitCredentialsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for RepoUrl

	// no validation rules for Username

	// no validation rules for Password

	// no validation rules for Subpath

	// no validation rules for ProdBranch

	if len(errors) > 0 {
		return GetGitCredentialsResponseMultiError(errors)
	}

	return nil
}

// GetGitCredentialsResponseMultiError is an error wrapping multiple validation
// errors returned by GetGitCredentialsResponse.ValidateAll() if the
// designated constraints aren't met.
type GetGitCredentialsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGitCredentialsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGitCredentialsResponseMultiError) AllErrors() []error { return m }

// GetGitCredentialsResponseValidationError is the validation error returned by
// GetGitCredentialsResponse.Validate if the designated constraints aren't met.
type GetGitCredentialsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGitCredentialsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGitCredentialsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGitCredentialsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGitCredentialsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGitCredentialsResponseValidationError) ErrorName() string {
	return "GetGitCredentialsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGitCredentialsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGitCredentialsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGitCredentialsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGitCredentialsResponseValidationError{}

// Validate checks the field values on CreateWhitelistedDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistedDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWhitelistedDomainRequestMultiError, or nil if none found.
func (m *CreateWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetRole()) < 1 {
		err := CreateWhitelistedDomainRequestValidationError{
			field:  "Role",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return CreateWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// CreateWhitelistedDomainRequestMultiError is an error wrapping multiple
// validation errors returned by CreateWhitelistedDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type CreateWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// CreateWhitelistedDomainRequestValidationError is the validation error
// returned by CreateWhitelistedDomainRequest.Validate if the designated
// constraints aren't met.
type CreateWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistedDomainRequestValidationError) ErrorName() string {
	return "CreateWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistedDomainRequestValidationError{}

// Validate checks the field values on CreateWhitelistedDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateWhitelistedDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// CreateWhitelistedDomainResponseMultiError, or nil if none found.
func (m *CreateWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return CreateWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// CreateWhitelistedDomainResponseMultiError is an error wrapping multiple
// validation errors returned by CreateWhitelistedDomainResponse.ValidateAll()
// if the designated constraints aren't met.
type CreateWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// CreateWhitelistedDomainResponseValidationError is the validation error
// returned by CreateWhitelistedDomainResponse.Validate if the designated
// constraints aren't met.
type CreateWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateWhitelistedDomainResponseValidationError) ErrorName() string {
	return "CreateWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateWhitelistedDomainResponseValidationError{}

// Validate checks the field values on RemoveWhitelistedDomainRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWhitelistedDomainRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWhitelistedDomainRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWhitelistedDomainRequestMultiError, or nil if none found.
func (m *RemoveWhitelistedDomainRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWhitelistedDomainRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := RemoveWhitelistedDomainRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDomain()) < 1 {
		err := RemoveWhitelistedDomainRequestValidationError{
			field:  "Domain",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RemoveWhitelistedDomainRequestMultiError(errors)
	}

	return nil
}

// RemoveWhitelistedDomainRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveWhitelistedDomainRequest.ValidateAll()
// if the designated constraints aren't met.
type RemoveWhitelistedDomainRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWhitelistedDomainRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWhitelistedDomainRequestMultiError) AllErrors() []error { return m }

// RemoveWhitelistedDomainRequestValidationError is the validation error
// returned by RemoveWhitelistedDomainRequest.Validate if the designated
// constraints aren't met.
type RemoveWhitelistedDomainRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWhitelistedDomainRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWhitelistedDomainRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWhitelistedDomainRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWhitelistedDomainRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWhitelistedDomainRequestValidationError) ErrorName() string {
	return "RemoveWhitelistedDomainRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWhitelistedDomainRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWhitelistedDomainRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWhitelistedDomainRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWhitelistedDomainRequestValidationError{}

// Validate checks the field values on RemoveWhitelistedDomainResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveWhitelistedDomainResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveWhitelistedDomainResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RemoveWhitelistedDomainResponseMultiError, or nil if none found.
func (m *RemoveWhitelistedDomainResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveWhitelistedDomainResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveWhitelistedDomainResponseMultiError(errors)
	}

	return nil
}

// RemoveWhitelistedDomainResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveWhitelistedDomainResponse.ValidateAll()
// if the designated constraints aren't met.
type RemoveWhitelistedDomainResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveWhitelistedDomainResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveWhitelistedDomainResponseMultiError) AllErrors() []error { return m }

// RemoveWhitelistedDomainResponseValidationError is the validation error
// returned by RemoveWhitelistedDomainResponse.Validate if the designated
// constraints aren't met.
type RemoveWhitelistedDomainResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveWhitelistedDomainResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveWhitelistedDomainResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveWhitelistedDomainResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveWhitelistedDomainResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveWhitelistedDomainResponseValidationError) ErrorName() string {
	return "RemoveWhitelistedDomainResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveWhitelistedDomainResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveWhitelistedDomainResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveWhitelistedDomainResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveWhitelistedDomainResponseValidationError{}

// Validate checks the field values on ListWhitelistedDomainsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistedDomainsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistedDomainsRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistedDomainsRequestMultiError, or nil if none found.
func (m *ListWhitelistedDomainsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistedDomainsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetOrganization()) < 1 {
		err := ListWhitelistedDomainsRequestValidationError{
			field:  "Organization",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return ListWhitelistedDomainsRequestMultiError(errors)
	}

	return nil
}

// ListWhitelistedDomainsRequestMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistedDomainsRequest.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistedDomainsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistedDomainsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistedDomainsRequestMultiError) AllErrors() []error { return m }

// ListWhitelistedDomainsRequestValidationError is the validation error
// returned by ListWhitelistedDomainsRequest.Validate if the designated
// constraints aren't met.
type ListWhitelistedDomainsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistedDomainsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistedDomainsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistedDomainsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistedDomainsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistedDomainsRequestValidationError) ErrorName() string {
	return "ListWhitelistedDomainsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistedDomainsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistedDomainsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistedDomainsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistedDomainsRequestValidationError{}

// Validate checks the field values on ListWhitelistedDomainsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListWhitelistedDomainsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListWhitelistedDomainsResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// ListWhitelistedDomainsResponseMultiError, or nil if none found.
func (m *ListWhitelistedDomainsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListWhitelistedDomainsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetDomains() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListWhitelistedDomainsResponseValidationError{
						field:  fmt.Sprintf("Domains[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListWhitelistedDomainsResponseValidationError{
					field:  fmt.Sprintf("Domains[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return ListWhitelistedDomainsResponseMultiError(errors)
	}

	return nil
}

// ListWhitelistedDomainsResponseMultiError is an error wrapping multiple
// validation errors returned by ListWhitelistedDomainsResponse.ValidateAll()
// if the designated constraints aren't met.
type ListWhitelistedDomainsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListWhitelistedDomainsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListWhitelistedDomainsResponseMultiError) AllErrors() []error { return m }

// ListWhitelistedDomainsResponseValidationError is the validation error
// returned by ListWhitelistedDomainsResponse.Validate if the designated
// constraints aren't met.
type ListWhitelistedDomainsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListWhitelistedDomainsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListWhitelistedDomainsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListWhitelistedDomainsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListWhitelistedDomainsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListWhitelistedDomainsResponseValidationError) ErrorName() string {
	return "ListWhitelistedDomainsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListWhitelistedDomainsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListWhitelistedDomainsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListWhitelistedDomainsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListWhitelistedDomainsResponseValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for DisplayName

	// no validation rules for PhotoUrl

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetQuotas()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "Quotas",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetQuotas()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "Quotas",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on UserQuotas with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserQuotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserQuotas with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserQuotasMultiError, or
// nil if none found.
func (m *UserQuotas) ValidateAll() error {
	return m.validate(true)
}

func (m *UserQuotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for SingleuserOrgs

	if len(errors) > 0 {
		return UserQuotasMultiError(errors)
	}

	return nil
}

// UserQuotasMultiError is an error wrapping multiple validation errors
// returned by UserQuotas.ValidateAll() if the designated constraints aren't met.
type UserQuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserQuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserQuotasMultiError) AllErrors() []error { return m }

// UserQuotasValidationError is the validation error returned by
// UserQuotas.Validate if the designated constraints aren't met.
type UserQuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserQuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserQuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserQuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserQuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserQuotasValidationError) ErrorName() string { return "UserQuotasValidationError" }

// Error satisfies the builtin error interface
func (e UserQuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserQuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserQuotasValidationError{}

// Validate checks the field values on OrganizationQuotas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationQuotas) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationQuotas with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationQuotasMultiError, or nil if none found.
func (m *OrganizationQuotas) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationQuotas) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Projects

	// no validation rules for Deployments

	// no validation rules for SlotsTotal

	// no validation rules for SlotsPerDeployment

	// no validation rules for OutstandingInvites

	if len(errors) > 0 {
		return OrganizationQuotasMultiError(errors)
	}

	return nil
}

// OrganizationQuotasMultiError is an error wrapping multiple validation errors
// returned by OrganizationQuotas.ValidateAll() if the designated constraints
// aren't met.
type OrganizationQuotasMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationQuotasMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationQuotasMultiError) AllErrors() []error { return m }

// OrganizationQuotasValidationError is the validation error returned by
// OrganizationQuotas.Validate if the designated constraints aren't met.
type OrganizationQuotasValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationQuotasValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationQuotasValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationQuotasValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationQuotasValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationQuotasValidationError) ErrorName() string {
	return "OrganizationQuotasValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationQuotasValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationQuotas.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationQuotasValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationQuotasValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for OrgId

	// no validation rules for OrgName

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Region

	// no validation rules for GithubUrl

	// no validation rules for Subpath

	// no validation rules for ProdBranch

	// no validation rules for ProdOlapDriver

	// no validation rules for ProdOlapDsn

	// no validation rules for ProdSlots

	// no validation rules for ProdDeploymentId

	// no validation rules for FrontendUrl

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deployment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentMultiError, or
// nil if none found.
func (m *Deployment) ValidateAll() error {
	return m.validate(true)
}

func (m *Deployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Slots

	// no validation rules for Branch

	// no validation rules for RuntimeHost

	// no validation rules for RuntimeInstanceId

	// no validation rules for Status

	// no validation rules for Logs

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeploymentMultiError(errors)
	}

	return nil
}

// DeploymentMultiError is an error wrapping multiple validation errors
// returned by Deployment.ValidateAll() if the designated constraints aren't met.
type DeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentMultiError) AllErrors() []error { return m }

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on OrganizationPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *OrganizationPermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on OrganizationPermissions with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// OrganizationPermissionsMultiError, or nil if none found.
func (m *OrganizationPermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *OrganizationPermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadOrg

	// no validation rules for ManageOrg

	// no validation rules for ReadProjects

	// no validation rules for CreateProjects

	// no validation rules for ManageProjects

	// no validation rules for ReadOrgMembers

	// no validation rules for ManageOrgMembers

	if len(errors) > 0 {
		return OrganizationPermissionsMultiError(errors)
	}

	return nil
}

// OrganizationPermissionsMultiError is an error wrapping multiple validation
// errors returned by OrganizationPermissions.ValidateAll() if the designated
// constraints aren't met.
type OrganizationPermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationPermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationPermissionsMultiError) AllErrors() []error { return m }

// OrganizationPermissionsValidationError is the validation error returned by
// OrganizationPermissions.Validate if the designated constraints aren't met.
type OrganizationPermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationPermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationPermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationPermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationPermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationPermissionsValidationError) ErrorName() string {
	return "OrganizationPermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e OrganizationPermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganizationPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationPermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationPermissionsValidationError{}

// Validate checks the field values on ProjectPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ProjectPermissions) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ProjectPermissions with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ProjectPermissionsMultiError, or nil if none found.
func (m *ProjectPermissions) ValidateAll() error {
	return m.validate(true)
}

func (m *ProjectPermissions) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for ReadProject

	// no validation rules for ManageProject

	// no validation rules for ReadProd

	// no validation rules for ReadProdStatus

	// no validation rules for ManageProd

	// no validation rules for ReadDev

	// no validation rules for ReadDevStatus

	// no validation rules for ManageDev

	// no validation rules for ReadProjectMembers

	// no validation rules for ManageProjectMembers

	if len(errors) > 0 {
		return ProjectPermissionsMultiError(errors)
	}

	return nil
}

// ProjectPermissionsMultiError is an error wrapping multiple validation errors
// returned by ProjectPermissions.ValidateAll() if the designated constraints
// aren't met.
type ProjectPermissionsMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectPermissionsMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectPermissionsMultiError) AllErrors() []error { return m }

// ProjectPermissionsValidationError is the validation error returned by
// ProjectPermissions.Validate if the designated constraints aren't met.
type ProjectPermissionsValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectPermissionsValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectPermissionsValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectPermissionsValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectPermissionsValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectPermissionsValidationError) ErrorName() string {
	return "ProjectPermissionsValidationError"
}

// Error satisfies the builtin error interface
func (e ProjectPermissionsValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProjectPermissions.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectPermissionsValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectPermissionsValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for UserId

	// no validation rules for UserEmail

	// no validation rules for UserName

	// no validation rules for RoleName

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}

	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on UserInvite with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *UserInvite) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UserInvite with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in UserInviteMultiError, or
// nil if none found.
func (m *UserInvite) ValidateAll() error {
	return m.validate(true)
}

func (m *UserInvite) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	// no validation rules for Role

	// no validation rules for InvitedBy

	if len(errors) > 0 {
		return UserInviteMultiError(errors)
	}

	return nil
}

// UserInviteMultiError is an error wrapping multiple validation errors
// returned by UserInvite.ValidateAll() if the designated constraints aren't met.
type UserInviteMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserInviteMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserInviteMultiError) AllErrors() []error { return m }

// UserInviteValidationError is the validation error returned by
// UserInvite.Validate if the designated constraints aren't met.
type UserInviteValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserInviteValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserInviteValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserInviteValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserInviteValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserInviteValidationError) ErrorName() string { return "UserInviteValidationError" }

// Error satisfies the builtin error interface
func (e UserInviteValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUserInvite.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserInviteValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserInviteValidationError{}

// Validate checks the field values on WhitelistedDomain with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *WhitelistedDomain) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WhitelistedDomain with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WhitelistedDomainMultiError, or nil if none found.
func (m *WhitelistedDomain) ValidateAll() error {
	return m.validate(true)
}

func (m *WhitelistedDomain) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Domain

	// no validation rules for Role

	if len(errors) > 0 {
		return WhitelistedDomainMultiError(errors)
	}

	return nil
}

// WhitelistedDomainMultiError is an error wrapping multiple validation errors
// returned by WhitelistedDomain.ValidateAll() if the designated constraints
// aren't met.
type WhitelistedDomainMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WhitelistedDomainMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WhitelistedDomainMultiError) AllErrors() []error { return m }

// WhitelistedDomainValidationError is the validation error returned by
// WhitelistedDomain.Validate if the designated constraints aren't met.
type WhitelistedDomainValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WhitelistedDomainValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WhitelistedDomainValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WhitelistedDomainValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WhitelistedDomainValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WhitelistedDomainValidationError) ErrorName() string {
	return "WhitelistedDomainValidationError"
}

// Error satisfies the builtin error interface
func (e WhitelistedDomainValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWhitelistedDomain.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WhitelistedDomainValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WhitelistedDomainValidationError{}
