// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: rill/admin/v1/api.proto

package adminv1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingRequestMultiError, or
// nil if none found.
func (m *PingRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PingRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return PingRequestMultiError(errors)
	}

	return nil
}

// PingRequestMultiError is an error wrapping multiple validation errors
// returned by PingRequest.ValidateAll() if the designated constraints aren't met.
type PingRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingRequestMultiError) AllErrors() []error { return m }

// PingRequestValidationError is the validation error returned by
// PingRequest.Validate if the designated constraints aren't met.
type PingRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingRequestValidationError) ErrorName() string { return "PingRequestValidationError" }

// Error satisfies the builtin error interface
func (e PingRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingRequestValidationError{}

// Validate checks the field values on PingResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *PingResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PingResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in PingResponseMultiError, or
// nil if none found.
func (m *PingResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PingResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Version

	if all {
		switch v := interface{}(m.GetTime()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PingResponseValidationError{
					field:  "Time",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetTime()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PingResponseValidationError{
				field:  "Time",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return PingResponseMultiError(errors)
	}

	return nil
}

// PingResponseMultiError is an error wrapping multiple validation errors
// returned by PingResponse.ValidateAll() if the designated constraints aren't met.
type PingResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PingResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PingResponseMultiError) AllErrors() []error { return m }

// PingResponseValidationError is the validation error returned by
// PingResponse.Validate if the designated constraints aren't met.
type PingResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PingResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PingResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PingResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PingResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PingResponseValidationError) ErrorName() string { return "PingResponseValidationError" }

// Error satisfies the builtin error interface
func (e PingResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPingResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PingResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PingResponseValidationError{}

// Validate checks the field values on ListOrganizationsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsRequestMultiError, or nil if none found.
func (m *ListOrganizationsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrganizationsRequestMultiError(errors)
	}

	return nil
}

// ListOrganizationsRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrganizationsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsRequestMultiError) AllErrors() []error { return m }

// ListOrganizationsRequestValidationError is the validation error returned by
// ListOrganizationsRequest.Validate if the designated constraints aren't met.
type ListOrganizationsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsRequestValidationError) ErrorName() string {
	return "ListOrganizationsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsRequestValidationError{}

// Validate checks the field values on ListOrganizationsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrganizationsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrganizationsResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrganizationsResponseMultiError, or nil if none found.
func (m *ListOrganizationsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrganizationsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetOrganizations() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrganizationsResponseValidationError{
						field:  fmt.Sprintf("Organizations[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrganizationsResponseValidationError{
					field:  fmt.Sprintf("Organizations[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrganizationsResponseMultiError(errors)
	}

	return nil
}

// ListOrganizationsResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrganizationsResponse.ValidateAll() if the
// designated constraints aren't met.
type ListOrganizationsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrganizationsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrganizationsResponseMultiError) AllErrors() []error { return m }

// ListOrganizationsResponseValidationError is the validation error returned by
// ListOrganizationsResponse.Validate if the designated constraints aren't met.
type ListOrganizationsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrganizationsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrganizationsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrganizationsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrganizationsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrganizationsResponseValidationError) ErrorName() string {
	return "ListOrganizationsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrganizationsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrganizationsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrganizationsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrganizationsResponseValidationError{}

// Validate checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationRequestMultiError, or nil if none found.
func (m *GetOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return GetOrganizationRequestMultiError(errors)
	}

	return nil
}

// GetOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationRequestMultiError) AllErrors() []error { return m }

// GetOrganizationRequestValidationError is the validation error returned by
// GetOrganizationRequest.Validate if the designated constraints aren't met.
type GetOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationRequestValidationError) ErrorName() string {
	return "GetOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationRequestValidationError{}

// Validate checks the field values on GetOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetOrganizationResponseMultiError, or nil if none found.
func (m *GetOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetOrganizationResponseMultiError(errors)
	}

	return nil
}

// GetOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by GetOrganizationResponse.ValidateAll() if the designated
// constraints aren't met.
type GetOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetOrganizationResponseMultiError) AllErrors() []error { return m }

// GetOrganizationResponseValidationError is the validation error returned by
// GetOrganizationResponse.Validate if the designated constraints aren't met.
type GetOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetOrganizationResponseValidationError) ErrorName() string {
	return "GetOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetOrganizationResponseValidationError{}

// Validate checks the field values on CreateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationRequestMultiError, or nil if none found.
func (m *CreateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return CreateOrganizationRequestMultiError(errors)
	}

	return nil
}

// CreateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by CreateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type CreateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationRequestMultiError) AllErrors() []error { return m }

// CreateOrganizationRequestValidationError is the validation error returned by
// CreateOrganizationRequest.Validate if the designated constraints aren't met.
type CreateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationRequestValidationError) ErrorName() string {
	return "CreateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationRequestValidationError{}

// Validate checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateOrganizationResponseMultiError, or nil if none found.
func (m *CreateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateOrganizationResponseMultiError(errors)
	}

	return nil
}

// CreateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by CreateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type CreateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateOrganizationResponseMultiError) AllErrors() []error { return m }

// CreateOrganizationResponseValidationError is the validation error returned
// by CreateOrganizationResponse.Validate if the designated constraints aren't met.
type CreateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateOrganizationResponseValidationError) ErrorName() string {
	return "CreateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateOrganizationResponseValidationError{}

// Validate checks the field values on DeleteOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationRequestMultiError, or nil if none found.
func (m *DeleteOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteOrganizationRequestMultiError(errors)
	}

	return nil
}

// DeleteOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type DeleteOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationRequestMultiError) AllErrors() []error { return m }

// DeleteOrganizationRequestValidationError is the validation error returned by
// DeleteOrganizationRequest.Validate if the designated constraints aren't met.
type DeleteOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationRequestValidationError) ErrorName() string {
	return "DeleteOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationRequestValidationError{}

// Validate checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteOrganizationResponseMultiError, or nil if none found.
func (m *DeleteOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteOrganizationResponseMultiError(errors)
	}

	return nil
}

// DeleteOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by DeleteOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type DeleteOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteOrganizationResponseMultiError) AllErrors() []error { return m }

// DeleteOrganizationResponseValidationError is the validation error returned
// by DeleteOrganizationResponse.Validate if the designated constraints aren't met.
type DeleteOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteOrganizationResponseValidationError) ErrorName() string {
	return "DeleteOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteOrganizationResponseValidationError{}

// Validate checks the field values on UpdateOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationRequestMultiError, or nil if none found.
func (m *UpdateOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Name

	// no validation rules for Description

	if len(errors) > 0 {
		return UpdateOrganizationRequestMultiError(errors)
	}

	return nil
}

// UpdateOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateOrganizationRequest.ValidateAll() if the
// designated constraints aren't met.
type UpdateOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationRequestMultiError) AllErrors() []error { return m }

// UpdateOrganizationRequestValidationError is the validation error returned by
// UpdateOrganizationRequest.Validate if the designated constraints aren't met.
type UpdateOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationRequestValidationError) ErrorName() string {
	return "UpdateOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationRequestValidationError{}

// Validate checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateOrganizationResponseMultiError, or nil if none found.
func (m *UpdateOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetOrganization()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateOrganizationResponseValidationError{
					field:  "Organization",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOrganization()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateOrganizationResponseValidationError{
				field:  "Organization",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateOrganizationResponseMultiError(errors)
	}

	return nil
}

// UpdateOrganizationResponseMultiError is an error wrapping multiple
// validation errors returned by UpdateOrganizationResponse.ValidateAll() if
// the designated constraints aren't met.
type UpdateOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateOrganizationResponseMultiError) AllErrors() []error { return m }

// UpdateOrganizationResponseValidationError is the validation error returned
// by UpdateOrganizationResponse.Validate if the designated constraints aren't met.
type UpdateOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateOrganizationResponseValidationError) ErrorName() string {
	return "UpdateOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateOrganizationResponseValidationError{}

// Validate checks the field values on ListProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsRequestMultiError, or nil if none found.
func (m *ListProjectsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectsRequestMultiError(errors)
	}

	return nil
}

// ListProjectsRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectsRequest.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsRequestMultiError) AllErrors() []error { return m }

// ListProjectsRequestValidationError is the validation error returned by
// ListProjectsRequest.Validate if the designated constraints aren't met.
type ListProjectsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsRequestValidationError) ErrorName() string {
	return "ListProjectsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsRequestValidationError{}

// Validate checks the field values on ListProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectsResponseMultiError, or nil if none found.
func (m *ListProjectsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetProjects() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectsResponseValidationError{
						field:  fmt.Sprintf("Projects[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectsResponseValidationError{
					field:  fmt.Sprintf("Projects[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectsResponseMultiError(errors)
	}

	return nil
}

// ListProjectsResponseMultiError is an error wrapping multiple validation
// errors returned by ListProjectsResponse.ValidateAll() if the designated
// constraints aren't met.
type ListProjectsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectsResponseMultiError) AllErrors() []error { return m }

// ListProjectsResponseValidationError is the validation error returned by
// ListProjectsResponse.Validate if the designated constraints aren't met.
type ListProjectsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectsResponseValidationError) ErrorName() string {
	return "ListProjectsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectsResponseValidationError{}

// Validate checks the field values on GetProjectRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectRequestMultiError, or nil if none found.
func (m *GetProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return GetProjectRequestMultiError(errors)
	}

	return nil
}

// GetProjectRequestMultiError is an error wrapping multiple validation errors
// returned by GetProjectRequest.ValidateAll() if the designated constraints
// aren't met.
type GetProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectRequestMultiError) AllErrors() []error { return m }

// GetProjectRequestValidationError is the validation error returned by
// GetProjectRequest.Validate if the designated constraints aren't met.
type GetProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectRequestValidationError) ErrorName() string {
	return "GetProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectRequestValidationError{}

// Validate checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetProjectResponseMultiError, or nil if none found.
func (m *GetProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetProductionDeployment()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProductionDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetProjectResponseValidationError{
					field:  "ProductionDeployment",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProductionDeployment()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetProjectResponseValidationError{
				field:  "ProductionDeployment",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Jwt

	if len(errors) > 0 {
		return GetProjectResponseMultiError(errors)
	}

	return nil
}

// GetProjectResponseMultiError is an error wrapping multiple validation errors
// returned by GetProjectResponse.ValidateAll() if the designated constraints
// aren't met.
type GetProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetProjectResponseMultiError) AllErrors() []error { return m }

// GetProjectResponseValidationError is the validation error returned by
// GetProjectResponse.Validate if the designated constraints aren't met.
type GetProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetProjectResponseValidationError) ErrorName() string {
	return "GetProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetProjectResponseValidationError{}

// Validate checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectRequestMultiError, or nil if none found.
func (m *CreateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Region

	// no validation rules for ProductionOlapDriver

	// no validation rules for ProductionOlapDsn

	// no validation rules for ProductionSlots

	// no validation rules for ProductionBranch

	// no validation rules for GithubUrl

	// no validation rules for Variables

	if len(errors) > 0 {
		return CreateProjectRequestMultiError(errors)
	}

	return nil
}

// CreateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by CreateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectRequestMultiError) AllErrors() []error { return m }

// CreateProjectRequestValidationError is the validation error returned by
// CreateProjectRequest.Validate if the designated constraints aren't met.
type CreateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectRequestValidationError) ErrorName() string {
	return "CreateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectRequestValidationError{}

// Validate checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateProjectResponseMultiError, or nil if none found.
func (m *CreateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateProjectResponseMultiError(errors)
	}

	return nil
}

// CreateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by CreateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateProjectResponseMultiError) AllErrors() []error { return m }

// CreateProjectResponseValidationError is the validation error returned by
// CreateProjectResponse.Validate if the designated constraints aren't met.
type CreateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateProjectResponseValidationError) ErrorName() string {
	return "CreateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateProjectResponseValidationError{}

// Validate checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectRequestMultiError, or nil if none found.
func (m *DeleteProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	if len(errors) > 0 {
		return DeleteProjectRequestMultiError(errors)
	}

	return nil
}

// DeleteProjectRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectRequestMultiError) AllErrors() []error { return m }

// DeleteProjectRequestValidationError is the validation error returned by
// DeleteProjectRequest.Validate if the designated constraints aren't met.
type DeleteProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectRequestValidationError) ErrorName() string {
	return "DeleteProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectRequestValidationError{}

// Validate checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteProjectResponseMultiError, or nil if none found.
func (m *DeleteProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return DeleteProjectResponseMultiError(errors)
	}

	return nil
}

// DeleteProjectResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteProjectResponseMultiError) AllErrors() []error { return m }

// DeleteProjectResponseValidationError is the validation error returned by
// DeleteProjectResponse.Validate if the designated constraints aren't met.
type DeleteProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteProjectResponseValidationError) ErrorName() string {
	return "DeleteProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteProjectResponseValidationError{}

// Validate checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectRequestMultiError, or nil if none found.
func (m *UpdateProjectRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for OrganizationName

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for ProductionBranch

	// no validation rules for GithubUrl

	// no validation rules for Variables

	if len(errors) > 0 {
		return UpdateProjectRequestMultiError(errors)
	}

	return nil
}

// UpdateProjectRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectRequestMultiError) AllErrors() []error { return m }

// UpdateProjectRequestValidationError is the validation error returned by
// UpdateProjectRequest.Validate if the designated constraints aren't met.
type UpdateProjectRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectRequestValidationError) ErrorName() string {
	return "UpdateProjectRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectRequestValidationError{}

// Validate checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateProjectResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateProjectResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateProjectResponseMultiError, or nil if none found.
func (m *UpdateProjectResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateProjectResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetProject()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateProjectResponseValidationError{
					field:  "Project",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetProject()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateProjectResponseValidationError{
				field:  "Project",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateProjectResponseMultiError(errors)
	}

	return nil
}

// UpdateProjectResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateProjectResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateProjectResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateProjectResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateProjectResponseMultiError) AllErrors() []error { return m }

// UpdateProjectResponseValidationError is the validation error returned by
// UpdateProjectResponse.Validate if the designated constraints aren't met.
type UpdateProjectResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateProjectResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateProjectResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateProjectResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateProjectResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateProjectResponseValidationError) ErrorName() string {
	return "UpdateProjectResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateProjectResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateProjectResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateProjectResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateProjectResponseValidationError{}

// Validate checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserRequestMultiError, or nil if none found.
func (m *GetCurrentUserRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return GetCurrentUserRequestMultiError(errors)
	}

	return nil
}

// GetCurrentUserRequestMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserRequest.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserRequestMultiError) AllErrors() []error { return m }

// GetCurrentUserRequestValidationError is the validation error returned by
// GetCurrentUserRequest.Validate if the designated constraints aren't met.
type GetCurrentUserRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserRequestValidationError) ErrorName() string {
	return "GetCurrentUserRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserRequestValidationError{}

// Validate checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetCurrentUserResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetCurrentUserResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetCurrentUserResponseMultiError, or nil if none found.
func (m *GetCurrentUserResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetCurrentUserResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetUser()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetCurrentUserResponseValidationError{
					field:  "User",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUser()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetCurrentUserResponseValidationError{
				field:  "User",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetCurrentUserResponseMultiError(errors)
	}

	return nil
}

// GetCurrentUserResponseMultiError is an error wrapping multiple validation
// errors returned by GetCurrentUserResponse.ValidateAll() if the designated
// constraints aren't met.
type GetCurrentUserResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetCurrentUserResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetCurrentUserResponseMultiError) AllErrors() []error { return m }

// GetCurrentUserResponseValidationError is the validation error returned by
// GetCurrentUserResponse.Validate if the designated constraints aren't met.
type GetCurrentUserResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetCurrentUserResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetCurrentUserResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetCurrentUserResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetCurrentUserResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetCurrentUserResponseValidationError) ErrorName() string {
	return "GetCurrentUserResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetCurrentUserResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetCurrentUserResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetCurrentUserResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetCurrentUserResponseValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenRequest with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenRequestMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenRequestMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenRequestMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenRequest.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenRequestMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenRequestValidationError is the validation error
// returned by RevokeCurrentAuthTokenRequest.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenRequestValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenRequestValidationError{}

// Validate checks the field values on RevokeCurrentAuthTokenResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RevokeCurrentAuthTokenResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeCurrentAuthTokenResponse with
// the rules defined in the proto definition for this message. If any rules
// are violated, the result is a list of violation errors wrapped in
// RevokeCurrentAuthTokenResponseMultiError, or nil if none found.
func (m *RevokeCurrentAuthTokenResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeCurrentAuthTokenResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for TokenId

	if len(errors) > 0 {
		return RevokeCurrentAuthTokenResponseMultiError(errors)
	}

	return nil
}

// RevokeCurrentAuthTokenResponseMultiError is an error wrapping multiple
// validation errors returned by RevokeCurrentAuthTokenResponse.ValidateAll()
// if the designated constraints aren't met.
type RevokeCurrentAuthTokenResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeCurrentAuthTokenResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeCurrentAuthTokenResponseMultiError) AllErrors() []error { return m }

// RevokeCurrentAuthTokenResponseValidationError is the validation error
// returned by RevokeCurrentAuthTokenResponse.Validate if the designated
// constraints aren't met.
type RevokeCurrentAuthTokenResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeCurrentAuthTokenResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeCurrentAuthTokenResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeCurrentAuthTokenResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeCurrentAuthTokenResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeCurrentAuthTokenResponseValidationError) ErrorName() string {
	return "RevokeCurrentAuthTokenResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RevokeCurrentAuthTokenResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeCurrentAuthTokenResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeCurrentAuthTokenResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeCurrentAuthTokenResponseValidationError{}

// Validate checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusRequestMultiError, or nil if none found.
func (m *GetGithubRepoStatusRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for GithubUrl

	if len(errors) > 0 {
		return GetGithubRepoStatusRequestMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusRequestMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusRequest.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusRequestMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusRequestValidationError is the validation error returned
// by GetGithubRepoStatusRequest.Validate if the designated constraints aren't met.
type GetGithubRepoStatusRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusRequestValidationError) ErrorName() string {
	return "GetGithubRepoStatusRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusRequestValidationError{}

// Validate checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetGithubRepoStatusResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetGithubRepoStatusResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetGithubRepoStatusResponseMultiError, or nil if none found.
func (m *GetGithubRepoStatusResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetGithubRepoStatusResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for HasAccess

	// no validation rules for GrantAccessUrl

	// no validation rules for DefaultBranch

	if len(errors) > 0 {
		return GetGithubRepoStatusResponseMultiError(errors)
	}

	return nil
}

// GetGithubRepoStatusResponseMultiError is an error wrapping multiple
// validation errors returned by GetGithubRepoStatusResponse.ValidateAll() if
// the designated constraints aren't met.
type GetGithubRepoStatusResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetGithubRepoStatusResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetGithubRepoStatusResponseMultiError) AllErrors() []error { return m }

// GetGithubRepoStatusResponseValidationError is the validation error returned
// by GetGithubRepoStatusResponse.Validate if the designated constraints
// aren't met.
type GetGithubRepoStatusResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetGithubRepoStatusResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetGithubRepoStatusResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetGithubRepoStatusResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetGithubRepoStatusResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetGithubRepoStatusResponseValidationError) ErrorName() string {
	return "GetGithubRepoStatusResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetGithubRepoStatusResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetGithubRepoStatusResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetGithubRepoStatusResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetGithubRepoStatusResponseValidationError{}

// Validate checks the field values on Organization with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Organization) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Organization with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in OrganizationMultiError, or
// nil if none found.
func (m *Organization) ValidateAll() error {
	return m.validate(true)
}

func (m *Organization) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, OrganizationValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return OrganizationValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return OrganizationMultiError(errors)
	}

	return nil
}

// OrganizationMultiError is an error wrapping multiple validation errors
// returned by Organization.ValidateAll() if the designated constraints aren't met.
type OrganizationMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m OrganizationMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m OrganizationMultiError) AllErrors() []error { return m }

// OrganizationValidationError is the validation error returned by
// Organization.Validate if the designated constraints aren't met.
type OrganizationValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e OrganizationValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e OrganizationValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e OrganizationValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e OrganizationValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e OrganizationValidationError) ErrorName() string { return "OrganizationValidationError" }

// Error satisfies the builtin error interface
func (e OrganizationValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sOrganization.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = OrganizationValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = OrganizationValidationError{}

// Validate checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Project) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Project with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in ProjectMultiError, or nil if none found.
func (m *Project) ValidateAll() error {
	return m.validate(true)
}

func (m *Project) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Description

	// no validation rules for Public

	// no validation rules for Region

	// no validation rules for ProductionOlapDriver

	// no validation rules for ProductionOlapDsn

	// no validation rules for ProductionSlots

	// no validation rules for ProductionBranch

	// no validation rules for GithubUrl

	// no validation rules for ProductionDeploymentId

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ProjectValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ProjectValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Variables

	if len(errors) > 0 {
		return ProjectMultiError(errors)
	}

	return nil
}

// ProjectMultiError is an error wrapping multiple validation errors returned
// by Project.ValidateAll() if the designated constraints aren't met.
type ProjectMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ProjectMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ProjectMultiError) AllErrors() []error { return m }

// ProjectValidationError is the validation error returned by Project.Validate
// if the designated constraints aren't met.
type ProjectValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ProjectValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ProjectValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ProjectValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ProjectValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ProjectValidationError) ErrorName() string { return "ProjectValidationError" }

// Error satisfies the builtin error interface
func (e ProjectValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sProject.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ProjectValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ProjectValidationError{}

// Validate checks the field values on User with the rules defined in the proto
// definition for this message. If any rules are violated, the first error
// encountered is returned, or nil if there are no violations.
func (m *User) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on User with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in UserMultiError, or nil if none found.
func (m *User) ValidateAll() error {
	return m.validate(true)
}

func (m *User) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Email

	// no validation rules for DisplayName

	// no validation rules for PhotoUrl

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UserValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UserValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UserMultiError(errors)
	}

	return nil
}

// UserMultiError is an error wrapping multiple validation errors returned by
// User.ValidateAll() if the designated constraints aren't met.
type UserMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UserMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UserMultiError) AllErrors() []error { return m }

// UserValidationError is the validation error returned by User.Validate if the
// designated constraints aren't met.
type UserValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UserValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UserValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UserValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UserValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UserValidationError) ErrorName() string { return "UserValidationError" }

// Error satisfies the builtin error interface
func (e UserValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUser.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UserValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UserValidationError{}

// Validate checks the field values on Deployment with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Deployment) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Deployment with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in DeploymentMultiError, or
// nil if none found.
func (m *Deployment) ValidateAll() error {
	return m.validate(true)
}

func (m *Deployment) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for ProjectId

	// no validation rules for Slots

	// no validation rules for Branch

	// no validation rules for RuntimeHost

	// no validation rules for RuntimeInstanceId

	// no validation rules for Status

	// no validation rules for Logs

	if all {
		switch v := interface{}(m.GetCreatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "CreatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "CreatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedOn()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeploymentValidationError{
					field:  "UpdatedOn",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedOn()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeploymentValidationError{
				field:  "UpdatedOn",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeploymentMultiError(errors)
	}

	return nil
}

// DeploymentMultiError is an error wrapping multiple validation errors
// returned by Deployment.ValidateAll() if the designated constraints aren't met.
type DeploymentMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeploymentMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeploymentMultiError) AllErrors() []error { return m }

// DeploymentValidationError is the validation error returned by
// Deployment.Validate if the designated constraints aren't met.
type DeploymentValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeploymentValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeploymentValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeploymentValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeploymentValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeploymentValidationError) ErrorName() string { return "DeploymentValidationError" }

// Error satisfies the builtin error interface
func (e DeploymentValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeployment.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeploymentValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeploymentValidationError{}

// Validate checks the field values on ListOrgMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgMembersRequestMultiError, or nil if none found.
func (m *ListOrgMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListOrgMembersRequestMultiError(errors)
	}

	return nil
}

// ListOrgMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListOrgMembersRequest.ValidateAll() if the designated
// constraints aren't met.
type ListOrgMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgMembersRequestMultiError) AllErrors() []error { return m }

// ListOrgMembersRequestValidationError is the validation error returned by
// ListOrgMembersRequest.Validate if the designated constraints aren't met.
type ListOrgMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMembersRequestValidationError) ErrorName() string {
	return "ListOrgMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMembersRequestValidationError{}

// Validate checks the field values on ListOrgMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListOrgMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListOrgMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListOrgMembersResponseMultiError, or nil if none found.
func (m *ListOrgMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListOrgMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListOrgMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListOrgMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListOrgMembersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListOrgMembersResponseMultiError(errors)
	}

	return nil
}

// ListOrgMembersResponseMultiError is an error wrapping multiple validation
// errors returned by ListOrgMembersResponse.ValidateAll() if the designated
// constraints aren't met.
type ListOrgMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListOrgMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListOrgMembersResponseMultiError) AllErrors() []error { return m }

// ListOrgMembersResponseValidationError is the validation error returned by
// ListOrgMembersResponse.Validate if the designated constraints aren't met.
type ListOrgMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListOrgMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListOrgMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListOrgMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListOrgMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListOrgMembersResponseValidationError) ErrorName() string {
	return "ListOrgMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListOrgMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListOrgMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListOrgMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListOrgMembersResponseValidationError{}

// Validate checks the field values on AddOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgMemberRequestMultiError, or nil if none found.
func (m *AddOrgMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Email

	// no validation rules for Role

	if len(errors) > 0 {
		return AddOrgMemberRequestMultiError(errors)
	}

	return nil
}

// AddOrgMemberRequestMultiError is an error wrapping multiple validation
// errors returned by AddOrgMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type AddOrgMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgMemberRequestMultiError) AllErrors() []error { return m }

// AddOrgMemberRequestValidationError is the validation error returned by
// AddOrgMemberRequest.Validate if the designated constraints aren't met.
type AddOrgMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgMemberRequestValidationError) ErrorName() string {
	return "AddOrgMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgMemberRequestValidationError{}

// Validate checks the field values on AddOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddOrgMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddOrgMemberResponseMultiError, or nil if none found.
func (m *AddOrgMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddOrgMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddOrgMemberResponseMultiError(errors)
	}

	return nil
}

// AddOrgMemberResponseMultiError is an error wrapping multiple validation
// errors returned by AddOrgMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type AddOrgMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddOrgMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddOrgMemberResponseMultiError) AllErrors() []error { return m }

// AddOrgMemberResponseValidationError is the validation error returned by
// AddOrgMemberResponse.Validate if the designated constraints aren't met.
type AddOrgMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddOrgMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddOrgMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddOrgMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddOrgMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddOrgMemberResponseValidationError) ErrorName() string {
	return "AddOrgMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddOrgMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddOrgMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddOrgMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddOrgMemberResponseValidationError{}

// Validate checks the field values on RemoveOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrgMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrgMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrgMemberRequestMultiError, or nil if none found.
func (m *RemoveOrgMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrgMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Email

	if len(errors) > 0 {
		return RemoveOrgMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveOrgMemberRequestMultiError is an error wrapping multiple validation
// errors returned by RemoveOrgMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrgMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrgMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrgMemberRequestMultiError) AllErrors() []error { return m }

// RemoveOrgMemberRequestValidationError is the validation error returned by
// RemoveOrgMemberRequest.Validate if the designated constraints aren't met.
type RemoveOrgMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMemberRequestValidationError) ErrorName() string {
	return "RemoveOrgMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMemberRequestValidationError{}

// Validate checks the field values on RemoveOrgMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveOrgMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveOrgMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveOrgMemberResponseMultiError, or nil if none found.
func (m *RemoveOrgMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveOrgMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveOrgMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveOrgMemberResponseMultiError is an error wrapping multiple validation
// errors returned by RemoveOrgMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type RemoveOrgMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveOrgMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveOrgMemberResponseMultiError) AllErrors() []error { return m }

// RemoveOrgMemberResponseValidationError is the validation error returned by
// RemoveOrgMemberResponse.Validate if the designated constraints aren't met.
type RemoveOrgMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveOrgMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveOrgMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveOrgMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveOrgMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveOrgMemberResponseValidationError) ErrorName() string {
	return "RemoveOrgMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveOrgMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveOrgMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveOrgMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveOrgMemberResponseValidationError{}

// Validate checks the field values on SetOrgMemberRoleRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrgMemberRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrgMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrgMemberRoleRequestMultiError, or nil if none found.
func (m *SetOrgMemberRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrgMemberRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Email

	// no validation rules for Role

	if len(errors) > 0 {
		return SetOrgMemberRoleRequestMultiError(errors)
	}

	return nil
}

// SetOrgMemberRoleRequestMultiError is an error wrapping multiple validation
// errors returned by SetOrgMemberRoleRequest.ValidateAll() if the designated
// constraints aren't met.
type SetOrgMemberRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrgMemberRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrgMemberRoleRequestMultiError) AllErrors() []error { return m }

// SetOrgMemberRoleRequestValidationError is the validation error returned by
// SetOrgMemberRoleRequest.Validate if the designated constraints aren't met.
type SetOrgMemberRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrgMemberRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrgMemberRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrgMemberRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrgMemberRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrgMemberRoleRequestValidationError) ErrorName() string {
	return "SetOrgMemberRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrgMemberRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrgMemberRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrgMemberRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrgMemberRoleRequestValidationError{}

// Validate checks the field values on SetOrgMemberRoleResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetOrgMemberRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetOrgMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetOrgMemberRoleResponseMultiError, or nil if none found.
func (m *SetOrgMemberRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetOrgMemberRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetOrgMemberRoleResponseMultiError(errors)
	}

	return nil
}

// SetOrgMemberRoleResponseMultiError is an error wrapping multiple validation
// errors returned by SetOrgMemberRoleResponse.ValidateAll() if the designated
// constraints aren't met.
type SetOrgMemberRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetOrgMemberRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetOrgMemberRoleResponseMultiError) AllErrors() []error { return m }

// SetOrgMemberRoleResponseValidationError is the validation error returned by
// SetOrgMemberRoleResponse.Validate if the designated constraints aren't met.
type SetOrgMemberRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetOrgMemberRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetOrgMemberRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetOrgMemberRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetOrgMemberRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetOrgMemberRoleResponseValidationError) ErrorName() string {
	return "SetOrgMemberRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetOrgMemberRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetOrgMemberRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetOrgMemberRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetOrgMemberRoleResponseValidationError{}

// Validate checks the field values on LeaveOrganizationRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationRequestMultiError, or nil if none found.
func (m *LeaveOrganizationRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	if len(errors) > 0 {
		return LeaveOrganizationRequestMultiError(errors)
	}

	return nil
}

// LeaveOrganizationRequestMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationRequest.ValidateAll() if the designated
// constraints aren't met.
type LeaveOrganizationRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationRequestMultiError) AllErrors() []error { return m }

// LeaveOrganizationRequestValidationError is the validation error returned by
// LeaveOrganizationRequest.Validate if the designated constraints aren't met.
type LeaveOrganizationRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationRequestValidationError) ErrorName() string {
	return "LeaveOrganizationRequestValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationRequestValidationError{}

// Validate checks the field values on LeaveOrganizationResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *LeaveOrganizationResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaveOrganizationResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// LeaveOrganizationResponseMultiError, or nil if none found.
func (m *LeaveOrganizationResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaveOrganizationResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return LeaveOrganizationResponseMultiError(errors)
	}

	return nil
}

// LeaveOrganizationResponseMultiError is an error wrapping multiple validation
// errors returned by LeaveOrganizationResponse.ValidateAll() if the
// designated constraints aren't met.
type LeaveOrganizationResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaveOrganizationResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaveOrganizationResponseMultiError) AllErrors() []error { return m }

// LeaveOrganizationResponseValidationError is the validation error returned by
// LeaveOrganizationResponse.Validate if the designated constraints aren't met.
type LeaveOrganizationResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaveOrganizationResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaveOrganizationResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaveOrganizationResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaveOrganizationResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaveOrganizationResponseValidationError) ErrorName() string {
	return "LeaveOrganizationResponseValidationError"
}

// Error satisfies the builtin error interface
func (e LeaveOrganizationResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaveOrganizationResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaveOrganizationResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaveOrganizationResponseValidationError{}

// Validate checks the field values on ListProjectMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersRequestMultiError, or nil if none found.
func (m *ListProjectMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for PageSize

	// no validation rules for PageToken

	if len(errors) > 0 {
		return ListProjectMembersRequestMultiError(errors)
	}

	return nil
}

// ListProjectMembersRequestMultiError is an error wrapping multiple validation
// errors returned by ListProjectMembersRequest.ValidateAll() if the
// designated constraints aren't met.
type ListProjectMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersRequestMultiError) AllErrors() []error { return m }

// ListProjectMembersRequestValidationError is the validation error returned by
// ListProjectMembersRequest.Validate if the designated constraints aren't met.
type ListProjectMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersRequestValidationError) ErrorName() string {
	return "ListProjectMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersRequestValidationError{}

// Validate checks the field values on ListProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListProjectMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListProjectMembersResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListProjectMembersResponseMultiError, or nil if none found.
func (m *ListProjectMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListProjectMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetUsers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListProjectMembersResponseValidationError{
						field:  fmt.Sprintf("Users[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListProjectMembersResponseValidationError{
					field:  fmt.Sprintf("Users[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	// no validation rules for NextPageToken

	if len(errors) > 0 {
		return ListProjectMembersResponseMultiError(errors)
	}

	return nil
}

// ListProjectMembersResponseMultiError is an error wrapping multiple
// validation errors returned by ListProjectMembersResponse.ValidateAll() if
// the designated constraints aren't met.
type ListProjectMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListProjectMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListProjectMembersResponseMultiError) AllErrors() []error { return m }

// ListProjectMembersResponseValidationError is the validation error returned
// by ListProjectMembersResponse.Validate if the designated constraints aren't met.
type ListProjectMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListProjectMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListProjectMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListProjectMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListProjectMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListProjectMembersResponseValidationError) ErrorName() string {
	return "ListProjectMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListProjectMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListProjectMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListProjectMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListProjectMembersResponseValidationError{}

// Validate checks the field values on AddProjectMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberRequestMultiError, or nil if none found.
func (m *AddProjectMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Email

	// no validation rules for Role

	if len(errors) > 0 {
		return AddProjectMemberRequestMultiError(errors)
	}

	return nil
}

// AddProjectMemberRequestMultiError is an error wrapping multiple validation
// errors returned by AddProjectMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberRequestMultiError) AllErrors() []error { return m }

// AddProjectMemberRequestValidationError is the validation error returned by
// AddProjectMemberRequest.Validate if the designated constraints aren't met.
type AddProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberRequestValidationError) ErrorName() string {
	return "AddProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberRequestValidationError{}

// Validate checks the field values on AddProjectMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *AddProjectMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AddProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// AddProjectMemberResponseMultiError, or nil if none found.
func (m *AddProjectMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AddProjectMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AddProjectMemberResponseMultiError(errors)
	}

	return nil
}

// AddProjectMemberResponseMultiError is an error wrapping multiple validation
// errors returned by AddProjectMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type AddProjectMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AddProjectMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AddProjectMemberResponseMultiError) AllErrors() []error { return m }

// AddProjectMemberResponseValidationError is the validation error returned by
// AddProjectMemberResponse.Validate if the designated constraints aren't met.
type AddProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AddProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AddProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AddProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AddProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AddProjectMemberResponseValidationError) ErrorName() string {
	return "AddProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e AddProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAddProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AddProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AddProjectMemberResponseValidationError{}

// Validate checks the field values on RemoveProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberRequestMultiError, or nil if none found.
func (m *RemoveProjectMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Email

	if len(errors) > 0 {
		return RemoveProjectMemberRequestMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberRequestMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberRequest.ValidateAll() if
// the designated constraints aren't met.
type RemoveProjectMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberRequestMultiError) AllErrors() []error { return m }

// RemoveProjectMemberRequestValidationError is the validation error returned
// by RemoveProjectMemberRequest.Validate if the designated constraints aren't met.
type RemoveProjectMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberRequestValidationError) ErrorName() string {
	return "RemoveProjectMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberRequestValidationError{}

// Validate checks the field values on RemoveProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *RemoveProjectMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RemoveProjectMemberResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// RemoveProjectMemberResponseMultiError, or nil if none found.
func (m *RemoveProjectMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RemoveProjectMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RemoveProjectMemberResponseMultiError(errors)
	}

	return nil
}

// RemoveProjectMemberResponseMultiError is an error wrapping multiple
// validation errors returned by RemoveProjectMemberResponse.ValidateAll() if
// the designated constraints aren't met.
type RemoveProjectMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RemoveProjectMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RemoveProjectMemberResponseMultiError) AllErrors() []error { return m }

// RemoveProjectMemberResponseValidationError is the validation error returned
// by RemoveProjectMemberResponse.Validate if the designated constraints
// aren't met.
type RemoveProjectMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RemoveProjectMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RemoveProjectMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RemoveProjectMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RemoveProjectMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RemoveProjectMemberResponseValidationError) ErrorName() string {
	return "RemoveProjectMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e RemoveProjectMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRemoveProjectMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RemoveProjectMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RemoveProjectMemberResponseValidationError{}

// Validate checks the field values on SetProjectMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProjectMemberRoleRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberRoleRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProjectMemberRoleRequestMultiError, or nil if none found.
func (m *SetProjectMemberRoleRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberRoleRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Organization

	// no validation rules for Project

	// no validation rules for Email

	// no validation rules for Role

	if len(errors) > 0 {
		return SetProjectMemberRoleRequestMultiError(errors)
	}

	return nil
}

// SetProjectMemberRoleRequestMultiError is an error wrapping multiple
// validation errors returned by SetProjectMemberRoleRequest.ValidateAll() if
// the designated constraints aren't met.
type SetProjectMemberRoleRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberRoleRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberRoleRequestMultiError) AllErrors() []error { return m }

// SetProjectMemberRoleRequestValidationError is the validation error returned
// by SetProjectMemberRoleRequest.Validate if the designated constraints
// aren't met.
type SetProjectMemberRoleRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberRoleRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberRoleRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberRoleRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberRoleRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberRoleRequestValidationError) ErrorName() string {
	return "SetProjectMemberRoleRequestValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberRoleRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberRoleRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberRoleRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberRoleRequestValidationError{}

// Validate checks the field values on SetProjectMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *SetProjectMemberRoleResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on SetProjectMemberRoleResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// SetProjectMemberRoleResponseMultiError, or nil if none found.
func (m *SetProjectMemberRoleResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *SetProjectMemberRoleResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return SetProjectMemberRoleResponseMultiError(errors)
	}

	return nil
}

// SetProjectMemberRoleResponseMultiError is an error wrapping multiple
// validation errors returned by SetProjectMemberRoleResponse.ValidateAll() if
// the designated constraints aren't met.
type SetProjectMemberRoleResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m SetProjectMemberRoleResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m SetProjectMemberRoleResponseMultiError) AllErrors() []error { return m }

// SetProjectMemberRoleResponseValidationError is the validation error returned
// by SetProjectMemberRoleResponse.Validate if the designated constraints
// aren't met.
type SetProjectMemberRoleResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e SetProjectMemberRoleResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e SetProjectMemberRoleResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e SetProjectMemberRoleResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e SetProjectMemberRoleResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e SetProjectMemberRoleResponseValidationError) ErrorName() string {
	return "SetProjectMemberRoleResponseValidationError"
}

// Error satisfies the builtin error interface
func (e SetProjectMemberRoleResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sSetProjectMemberRoleResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = SetProjectMemberRoleResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = SetProjectMemberRoleResponseValidationError{}
