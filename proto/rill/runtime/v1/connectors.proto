syntax = "proto3";
package rill.runtime.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "validate/validate.proto";

service ConnectorService {
  // S3ListBuckets lists buckets accessible with the configured credentials.
  rpc S3ListBuckets(S3ListBucketsRequest) returns (S3ListBucketsResponse) {
    option (google.api.http) = {get: "/v1/s3/buckets"};
  }

  // S3ListBuckets lists objects for the given bucket.
  rpc S3ListObjects(S3ListObjectsRequest) returns (S3ListObjectsResponse) {
    option (google.api.http) = {get: "/v1/s3/bucket/{bucket}/objects"};
  }

  // S3GetBucketMetadata returns metadata for the given bucket.
  rpc S3GetBucketMetadata(S3GetBucketMetadataRequest) returns (S3GetBucketMetadataResponse) {
    option (google.api.http) = {get: "/v1/s3/bucket/{bucket}/metadata"};
  }

  // S3GetCredentialsInfo returns metadata for the given bucket.
  rpc S3GetCredentialsInfo(S3GetCredentialsInfoRequest) returns (S3GetCredentialsInfoResponse) {
    option (google.api.http) = {get: "/v1/s3/credentials_info"};
  }

  // GCSListBuckets lists buckets accessible with the configured credentials.
  rpc GCSListBuckets(GCSListBucketsRequest) returns (GCSListBucketsResponse) {
    option (google.api.http) = {get: "/v1/gcs/buckets"};
  }

  // GCSListObjects lists objects for the given bucket.
  rpc GCSListObjects(GCSListObjectsRequest) returns (GCSListObjectsResponse) {
    option (google.api.http) = {get: "/v1/gcs/bucket/{bucket}/objects"};
  }

  // GCSGetCredentialsInfo returns metadata for the given bucket.
  rpc GCSGetCredentialsInfo(GCSGetCredentialsInfoRequest) returns (GCSGetCredentialsInfoResponse) {
    option (google.api.http) = {get: "/v1/gcs/credentials_info"};
  }
}

message S3Object {
  string name = 1;
  google.protobuf.Timestamp modified_on = 2;
  int64 size = 3;
  bool is_dir = 4;
}

message S3ListBucketsRequest {
  uint32 page_size = 1;
  string page_token = 2;
}

message S3ListBucketsResponse {
  string next_page_token = 1;
  repeated string buckets = 2;
}

message S3ListObjectsRequest {
  uint32 page_size = 1 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 2;
  string bucket = 3 [(validate.rules).string.min_len = 1];
  string region = 4;
  string prefix = 5;
  string start_after = 6;
  string delimiter = 7;
}

message S3ListObjectsResponse {
  string next_page_token = 1;
  repeated S3Object objects = 2;
}

message S3GetBucketMetadataRequest {
  string bucket = 1 [(validate.rules).string.min_len = 1];
}

message S3GetBucketMetadataResponse {
  string region = 1;
}

message S3GetCredentialsInfoRequest {}

message S3GetCredentialsInfoResponse {
  bool exist = 1;
  string provider = 2;
}

message GCSObject {
  string name = 1;
  google.protobuf.Timestamp modified_on = 2;
  int64 size = 3;
  bool is_dir = 4;
}

message GCSListBucketsRequest {
  uint32 page_size = 1 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 2;
}

message GCSListBucketsResponse {
  string next_page_token = 1;
  repeated string buckets = 2;
}

message GCSListObjectsRequest {
  uint32 page_size = 1 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 2;
  string bucket = 3 [(validate.rules).string.min_len = 1];
  string prefix = 4;
  string start_offset = 5;
  string end_offset = 6;
  string delimiter = 7;
}

message GCSListObjectsResponse {
  string next_page_token = 1;
  repeated GCSObject objects = 2;
}

message GCSGetCredentialsInfoRequest {}

message GCSGetCredentialsInfoResponse {
  bool exist = 1;
  string project_id = 2;
}