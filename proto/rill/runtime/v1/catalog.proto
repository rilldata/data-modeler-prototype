syntax = "proto3";
package rill.runtime.v1;

import "google/protobuf/struct.proto";
import "rill/runtime/v1/schema.proto";

// ObjectType represents the different kinds of catalog objects
enum ObjectType {
  OBJECT_TYPE_UNSPECIFIED = 0;
  OBJECT_TYPE_TABLE = 1;
  OBJECT_TYPE_SOURCE = 2;
  OBJECT_TYPE_MODEL = 3;
  OBJECT_TYPE_METRICS_VIEW = 4;
}

// Table represents a table in the OLAP database. These include pre-existing tables discovered by periodically
// scanning the database's information schema when the instance is created with exposed=true. Pre-existing tables
// have managed = false.
message Table {
  // Table name
  string name = 1;
  // Table schema
  StructType schema = 2;
  // Managed is true if the table was created through a runtime migration, false if it was discovered in by
  // scanning the database's information schema.
  bool managed = 3;
}

// Source is the internal representation of a source definition
message Source {
  // Name of the source
  string name = 1;
  // Connector used by the source
  string connector = 2;
  // Connector properties assigned in the source
  google.protobuf.Struct properties = 3;
  // Detected schema of the source
  StructType schema = 5;
  // Extract policy for glob connectors
  message ExtractPolicy {
    enum Strategy {
      STRATEGY_UNSPECIFIED = 0;
      STRATEGY_HEAD = 1;
      STRATEGY_TAIL = 2;
    }
    // strategy for selecting rows in a file
    Strategy rows_strategy = 1;
    // could in future add: uint64 rows_limit = n;
    // limit on data fetched in bytes
    uint64 rows_limit_bytes = 2;
    // strategy for selecting files
    Strategy files_strategy = 3;
    // limit on number of files
    uint64 files_limit = 4;
  }
  // extraction policy for the source
  ExtractPolicy policy = 6;
  // timeout for source ingestion in seconds
  int32 timeout_seconds = 7;
}

// Model is the internal representation of a model definition
message Model {
  // Dialects supported for models
  enum Dialect {
    DIALECT_UNSPECIFIED = 0;
    DIALECT_DUCKDB = 1;
  }
  // Name of the model
  string name = 1;
  // SQL is a SELECT statement representing the model
  string sql = 2;
  // Dialect of the SQL statement
  Dialect dialect = 3;
  // Detected schema of the model
  StructType schema = 4;
  // To materialize model or not
  bool materialize = 5;
}

// Metrics view is the internal representation of a metrics view definition
message MetricsView {
  // Dimensions are columns to filter and group by
  message Dimension {
    string name = 1;
    string label = 2;
    string description = 3;
    string column = 4;
  }
  // Measures are aggregated computed values
  message Measure {
    string name = 1;
    string label = 2;
    string expression = 3;
    string description = 4;
    string format = 5;
    bool valid_percent_of_total = 6;
  }
  // Name of the metrics view
  string name = 1;
  // Name of the source or model that the metrics view is based on
  string model = 2;
  // Name of the primary time dimension, used for rendering time series
  string time_dimension = 3;
  // Dimensions in the metrics view
  repeated Dimension dimensions = 5;
  // Measures in the metrics view
  repeated Measure measures = 6;
  // User friendly label for the dashboard
  string label = 7;
  // Brief description of the dashboard
  string description = 8;
  // Smallest time grain to show in the dashboard
  TimeGrain smallest_time_grain = 9;
  // Default time range for the dashboard. It should be a valid ISO 8601 duration string.
  string default_time_range = 10;
  // Available time zones list preferred time zones using IANA location identifiers.
  repeated string available_time_zones = 11;
}

enum TimeGrain {
  TIME_GRAIN_UNSPECIFIED = 0;
  TIME_GRAIN_MILLISECOND = 1;
  TIME_GRAIN_SECOND = 2;
  TIME_GRAIN_MINUTE = 3;
  TIME_GRAIN_HOUR = 4;
  TIME_GRAIN_DAY = 5;
  TIME_GRAIN_WEEK = 6;
  TIME_GRAIN_MONTH = 7;
  TIME_GRAIN_QUARTER = 8;
  TIME_GRAIN_YEAR = 9;
}
