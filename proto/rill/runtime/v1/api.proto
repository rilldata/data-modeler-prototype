syntax = "proto3";
package rill.runtime.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "rill/runtime/v1/catalog.proto";
import "rill/runtime/v1/resources.proto";
import "validate/validate.proto";

// RuntimeService is a data infrastructure proxy and orchestrator based on Rill SQL.
// It has a concept of instances, which are fully isolated data projects, enabling optional multi-tenancy.
service RuntimeService {
  // Ping returns information about the runtime
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {get: "/v1/ping"};
  }

  // Instances

  // ListInstances lists all the instances currently managed by the runtime
  rpc ListInstances(ListInstancesRequest) returns (ListInstancesResponse) {
    option (google.api.http) = {get: "/v1/instances"};
  }

  // GetInstance returns information about a specific instance
  rpc GetInstance(GetInstanceRequest) returns (GetInstanceResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}"};
  }

  // CreateInstance creates a new instance
  rpc CreateInstance(CreateInstanceRequest) returns (CreateInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/instances",
      body: "*"
    };
  }

  // EditInstance edits an existing instance
  rpc EditInstance(EditInstanceRequest) returns (EditInstanceResponse) {
    option (google.api.http) = {
      patch: "/v1/instances/{instance_id}",
      body: "*"
    };
  }

  // DeleteInstance deletes an instance
  rpc DeleteInstance(DeleteInstanceRequest) returns (DeleteInstanceResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}",
      body: "*"
    };
  }

  // Repos

  // ListFiles lists all the files matching a glob in a repo.
  // The files are sorted by their full path.
  rpc ListFiles(ListFilesRequest) returns (ListFilesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files"};
  }

  // WatchFiles streams repo file update events. It is not supported on all backends.
  rpc WatchFiles(WatchFilesRequest) returns (stream WatchFilesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files/watch"};
  }

  // GetFile returns the contents of a specific file in a repo.
  rpc GetFile(GetFileRequest) returns (GetFileResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/files/-/{path=**}"};
  }

  // PutFile creates or updates a file in a repo
  rpc PutFile(PutFileRequest) returns (PutFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/-/{path=**}",
      body: "*"
    };
  }

  // CreateDirectory create a directory for the given path
  rpc CreateDirectory(CreateDirectoryRequest) returns (CreateDirectoryResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/create-dir/-/{path=**}",
      body: "*"
    };
  }

  // DeleteFile deletes a file from a repo
  rpc DeleteFile(DeleteFileRequest) returns (DeleteFileResponse) {
    option (google.api.http) = {delete: "/v1/instances/{instance_id}/files/-/{path=**}"};
  }

  // RenameFile renames a file in a repo
  rpc RenameFile(RenameFileRequest) returns (RenameFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/rename",
      body: "*"
    };
  }

  // ListExamples lists all the examples embedded into binary
  rpc ListExamples(ListExamplesRequest) returns (ListExamplesResponse) {
    option (google.api.http) = {get: "/v1/examples"};
  }

  // UnpackExample unpacks an example project
  rpc UnpackExample(UnpackExampleRequest) returns (UnpackExampleResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/unpack-example",
      body: "*"
    };
  }

  // UnpackEmpty unpacks an empty project
  rpc UnpackEmpty(UnpackEmptyRequest) returns (UnpackEmptyResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/unpack-empty",
      body: "*"
    };
  }

  // GenerateMetricsViewFile generates a metrics view YAML file from a table in an OLAP database
  rpc GenerateMetricsViewFile(GenerateMetricsViewFileRequest) returns (GenerateMetricsViewFileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/files/generate-metrics-view",
      body: "*"
    };
  }

  // GenerateResolver generates resolver and resolver properties from a table or a metrics view
  rpc GenerateResolver(GenerateResolverRequest) returns (GenerateResolverResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/generate/resolver",
      body: "*"
    };
  }

  // GenerateChartSpec generates a vega lite spec from a resolver and resolver properties
  rpc GenerateChartSpec(GenerateChartSpecRequest) returns (GenerateChartSpecResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/generate/chart",
      body: "*"
    };
  }

  // Controller
  
  // GetLogs returns recent logs from a controller
  rpc GetLogs(GetLogsRequest) returns (GetLogsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/logs"};
  }

  // WatchLogs streams new logs emitted from a controller
  rpc WatchLogs(WatchLogsRequest) returns (stream WatchLogsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/logs/watch"};
  }

  // ListResources lists the resources stored in the catalog
  rpc ListResources(ListResourcesRequest) returns (ListResourcesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resources"};
  }
  
  // WatchResources streams updates to catalog resources (including creation and deletion events)
  rpc WatchResources(WatchResourcesRequest) returns (stream WatchResourcesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resources/-/watch"};
  }
  
  // GetResource looks up a specific catalog resource
  rpc GetResource(GetResourceRequest) returns (GetResourceResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/resource"};
  }
  
  // CreateTrigger creates a trigger in the catalog.
  // Triggers are ephemeral resources that will be cleaned up by the controller.
  rpc CreateTrigger(CreateTriggerRequest) returns (CreateTriggerResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/trigger",
      body: "*"
    };
  }

  // Connectors

  // ListConnectorDrivers returns a description of all the connector drivers registed in the runtime,
  // including their configuration specs and the capabilities they support.
  rpc ListConnectorDrivers(ListConnectorDriversRequest) returns (ListConnectorDriversResponse) {
    option (google.api.http) = {get: "/v1/connectors/meta"};
  }

  // AnalyzeConnectors scans all the project files and returns information about all referenced connectors.
  rpc AnalyzeConnectors(AnalyzeConnectorsRequest) returns (AnalyzeConnectorsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/connectors/analyze"};
  }

  // ListNotifierConnectors returns the names of all configured connectors that can be used as notifiers.
  // This API is much faster than AnalyzeConnectors and can be called without admin-level permissions.
  rpc ListNotifierConnectors(ListNotifierConnectorsRequest) returns (ListNotifierConnectorsResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/connectors/notifiers"};
  }

  // DEPRECATE:

  // Catalog

  // ListCatalogEntries lists all the entries registered in an instance's catalog (like tables, sources or metrics views)
  rpc ListCatalogEntries(ListCatalogEntriesRequest) returns (ListCatalogEntriesResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/catalog"};
  }

  // GetCatalogEntry returns information about a specific entry in the catalog
  rpc GetCatalogEntry(GetCatalogEntryRequest) returns (GetCatalogEntryResponse) {
    option (google.api.http) = {get: "/v1/instances/{instance_id}/catalog/{name}"};
  }

  // TriggerRefresh triggers a refresh of a refreshable catalog object.
  // It currently only supports sources (which will be re-ingested), but will also support materialized models in the future.
  // It does not respond until the refresh has completed (will move to async jobs when the task scheduler is in place).
  rpc TriggerRefresh(TriggerRefreshRequest) returns (TriggerRefreshResponse) {
    option (google.api.http) = {post: "/v1/instances/{instance_id}/catalog/{name}/refresh"};
  }

  // Reconcile applies a full set of artifacts from a repo to the catalog and infra.
  // It attempts to infer a minimal number of migrations to apply to reconcile the current state with
  // the desired state expressed in the artifacts. Any existing objects not described in the submitted
  // artifacts will be deleted.
  rpc Reconcile(ReconcileRequest) returns (ReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/instances/{instance_id}/reconcile",
      body: "*"
    };
  }

  // PutFileAndReconcile combines PutFile and Reconcile in a single endpoint to reduce latency.
  // It is equivalent to calling the two RPCs sequentially.
  rpc PutFileAndReconcile(PutFileAndReconcileRequest) returns (PutFileAndReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/put-and-reconcile",
      body: "*"
    };
  }

  // DeleteFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
  rpc DeleteFileAndReconcile(DeleteFileAndReconcileRequest) returns (DeleteFileAndReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/delete-and-reconcile",
      body: "*"
    };
  }

  // RenameFileAndReconcile combines RenameFile and Reconcile in a single endpoint to reduce latency.
  rpc RenameFileAndReconcile(RenameFileAndReconcileRequest) returns (RenameFileAndReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/rename-and-reconcile",
      body: "*"
    };
  }

  rpc RefreshAndReconcile(RefreshAndReconcileRequest) returns (RefreshAndReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/refresh-and-reconcile",
      body: "*"
    };
  }

  rpc IssueDevJWT(IssueDevJWTRequest) returns (IssueDevJWTResponse) {
    option (google.api.http) = {get: "/v1/dev-jwt"};
  }
}

// Request message for RuntimeService.Ping
message PingRequest {}

// Response message for RuntimeService.Ping
message PingResponse {
  // Runtime version
  string version = 1;

  // Runtime server time
  google.protobuf.Timestamp time = 2;
}

// **********
// Instances
// **********

// Instance represents a single data project, meaning one set of code artifacts,
// one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
// metadata (such as reconciliation state). Instances are the unit of isolation within
// the runtime. They enable one runtime deployment to serve not only multiple data
// projects, but also multiple tenants. On local, the runtime will usually have
// just a single instance.
message Instance {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string environment = 20;
  string olap_connector = 2;
  string repo_connector = 4;
  string admin_connector = 19;
  string ai_connector = 21;
  google.protobuf.Timestamp created_on = 11;
  google.protobuf.Timestamp updated_on = 12;
  repeated Connector connectors = 10;
  repeated Connector project_connectors = 13;
  map<string, string> variables = 7;
  map<string, string> project_variables = 8;
  map<string, string> annotations = 14;
  bool embed_catalog = 6;
  bool watch_repo = 15;
}
 
message Connector {
  // Type of the connector. One of the infra driver supported.
  string type = 1;
  // Name of the connector
  string name = 2;
  // Config for the connector
  map<string, string> config = 3;
}

// Request message for RuntimeService.ListInstances
message ListInstancesRequest {
  uint32 page_size = 1;
  string page_token = 2;
}

// Response message for RuntimeService.ListInstances
message ListInstancesResponse {
  repeated Instance instances = 1;
  string next_page_token = 2;
}

// Request message for RuntimeService.GetInstance
message GetInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
}

// Response message for RuntimeService.GetInstance
message GetInstanceResponse {
  Instance instance = 1;
}

// Request message for RuntimeService.CreateInstance.
// See message Instance for field descriptions.
message CreateInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {
    ignore_empty: true,
    pattern: "^[_\\-a-zA-Z0-9]+$"
  }];
  string environment = 16;
  string olap_connector = 2;
  string repo_connector = 4;
  string admin_connector = 15;
  string ai_connector = 17;
  repeated Connector connectors = 10;
  map<string, string> variables = 7;
  map<string, string> annotations = 9;
  bool embed_catalog = 6;
  bool watch_repo = 11;
}

// Response message for RuntimeService.CreateInstance
message CreateInstanceResponse {
  Instance instance = 1;
}

// Request message for RuntimeService.DeleteInstance
message DeleteInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
}

// Response message for RuntimeService.DeleteInstance
message DeleteInstanceResponse {}

// Request message for RuntimeService.EditInstance.
// See message Instance for field descriptions.
message EditInstanceRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  optional string environment = 17;
  optional string olap_connector = 2;
  optional string repo_connector = 4;
  optional string admin_connector = 16;
  optional string ai_connector = 18;
  repeated Connector connectors = 9;
  map<string, string> variables = 15;
  map<string, string> annotations = 10;
  optional bool embed_catalog = 6;
  optional bool watch_repo = 11;
}

// Response message for RuntimeService.EditInstance
message EditInstanceResponse {
  Instance instance = 1;
}

// **********
// Repos
// **********

// Request message for RuntimeService.ListFiles
message ListFilesRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string glob = 2;
}

// Response message for RuntimeService.ListFiles
message ListFilesResponse {
  repeated DirEntry files = 1;
}

message DirEntry {
  string path = 1;
  bool is_dir = 2;
}

// FileEvent describes a file change.
enum FileEvent {
  FILE_EVENT_UNSPECIFIED = 0;
  FILE_EVENT_WRITE = 1;
  FILE_EVENT_DELETE = 2;
}

// Request message for RuntimeService.WatchFiles
message WatchFilesRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  bool replay = 2;
}

// Response message for RuntimeService.WatchFiles
message WatchFilesResponse {
  FileEvent event = 1;
  string path = 2;
  bool is_dir = 3;
}

// Request message for RuntimeService.GetFile
message GetFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.GetFile
message GetFileResponse {
  string blob = 1;
  google.protobuf.Timestamp updated_on = 2;
}

// Request message for RuntimeService.PutFile
message PutFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
  string blob = 3;
  // Create indicates whether to create the file if it doesn't already exist
  bool create = 4;
  // Will cause the operation to fail if the file already exists.
  // It should only be set when create = true.
  bool create_only = 5;
}

// Response message for RuntimeService.PutFile
message PutFileResponse {
  string file_path = 1; // TODO: Redundant, should be removed (but frontend currently uses it)
}

// Request message for RuntimeService.CreateDirectory
message CreateDirectoryRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.CreateDirectory
message CreateDirectoryResponse {}

// Request message for RuntimeService.DeleteFile
message DeleteFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string path = 2 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.DeleteFile
message DeleteFileResponse {}

// Request message for RuntimeService.RenameFile
message RenameFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string from_path = 2 [(validate.rules).string.min_len = 1];
  string to_path = 3 [(validate.rules).string.min_len = 1];
}

// Response message for RuntimeService.RenameFile
message RenameFileResponse {}

// Example contains metadata about an example project that is available for unpacking.
message Example {
  string name = 1;
  string title = 2;
  string description = 3;
}

// Request message for RuntimeService.ListExamples
message ListExamplesRequest {}

// Response message for RuntimeService.ListExamples
message ListExamplesResponse {
  repeated Example examples = 1;
}

// Request message for RuntimeService.UnpackExample
message UnpackExampleRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string name = 2 [(validate.rules).string.min_len = 1];
  bool force = 3;
}

// Response message for RuntimeService.UnpackExample
message UnpackExampleResponse {}

// Request message for RuntimeService.UnpackEmpty
message UnpackEmptyRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string title = 2;
  bool force = 3;
}

// Response message for RuntimeService.UnpackEmpty
message UnpackEmptyResponse {}

// Request message for RuntimeService.GenerateMetricsViewFile
message GenerateMetricsViewFileRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string connector = 2;
  string database = 6;
  string database_schema = 7;
  string table = 3;
  string path = 4;
  bool use_ai = 5;
}

// Response message for RuntimeService.GenerateMetricsViewFile
message GenerateMetricsViewFileResponse {
  bool ai_succeeded = 1;
}

message GenerateResolverRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string prompt = 2;
  // Both connector and table must be specified if metrics_view is not.
  string connector = 3;
  string table = 4;
  // table and connector should not be provided if metrics_view is provided.
  string metrics_view = 5;
}

message GenerateResolverResponse {
  string resolver = 1;
  google.protobuf.Struct resolver_properties = 2;
}

message GenerateChartSpecRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string prompt = 2;
  string resolver = 3;
  google.protobuf.Struct resolver_properties = 4;
}

message GenerateChartSpecResponse {
  string vega_lite_spec = 2;
}

// **********
// Controller
// **********

message Log {
  LogLevel level = 1;
  google.protobuf.Timestamp time = 2;
  string message = 3;
  string json_payload = 4;
}

enum LogLevel {
  LOG_LEVEL_UNSPECIFIED = 0;
  LOG_LEVEL_DEBUG = 4;
  LOG_LEVEL_INFO = 8;
  LOG_LEVEL_WARN = 12;
  LOG_LEVEL_ERROR = 16;
  LOG_LEVEL_FATAL = 20;
}

enum ResourceEvent {
  RESOURCE_EVENT_UNSPECIFIED = 0;
  RESOURCE_EVENT_WRITE = 1;
  RESOURCE_EVENT_DELETE = 2;
}

message GetLogsRequest {
  string instance_id = 1;
  bool ascending = 2;
  int32 limit = 3 [(validate.rules).int32 = {gte: -1}];
  LogLevel level = 4;
}

message GetLogsResponse {
  repeated Log logs = 1;
}

message WatchLogsRequest {
  string instance_id = 1;
  bool replay = 2;
  int32 replay_limit = 3 [(validate.rules).int32 = {gte: -1}];
  LogLevel level = 4;
}

message WatchLogsResponse {
  Log log = 1;
}

message ListResourcesRequest {
  string instance_id = 1;
  string kind = 2;
}

message ListResourcesResponse {
  repeated Resource resources = 1;
}

message WatchResourcesRequest {
  string instance_id = 1;
  string kind = 2;
  bool replay = 3;
  string level = 4;
}

message WatchResourcesResponse {
  ResourceEvent event = 1;
  ResourceName name = 2;
  Resource resource = 3;
}

message GetResourceRequest {
  string instance_id = 1;
  ResourceName name = 2;
}

message GetResourceResponse {
  Resource resource = 1;
}

message CreateTriggerRequest {
  string instance_id = 1;
  oneof trigger {
    PullTriggerSpec pull_trigger_spec = 2;
    RefreshTriggerSpec refresh_trigger_spec = 3;
  }
}

message CreateTriggerResponse {}

// **********
// Connectors
// **********

// ConnectorDriver represents a connector driver available in the runtime.
message ConnectorDriver {
  // Property represents the spec of one of the driver's config properties
  message Property {
    // Type of the property
    enum Type {
      TYPE_UNSPECIFIED = 0;
      TYPE_NUMBER = 1;
      TYPE_BOOLEAN = 2;
      TYPE_STRING = 3;
      TYPE_FILE = 4;
      TYPE_INFORMATIONAL = 5;
    }
    // The property key
    string key = 1;
    // The type expected for this property
    Type type = 2;
    // Required is true if the field must be set
    bool required = 3;
    // Pretty name for the property
    string display_name = 4;
    // Human readable description of the field
    string description = 5;
    // Link to documentation for this property
    string docs_url = 6;
    // Additional textual explanation for use in UIs
    string hint = 7;
    // Default value for the property
    string default = 8;
    // Placeholder value for use in UIs
    string placeholder = 9;
    // If true, the property is a secret and should not be displayed in UIs
    bool secret = 10;
  }
  // Name is the name of the connector
  string name = 1;
  // Properties for configuring the connector
  repeated Property config_properties = 2;
  // Properties that can be provided to the connector when using it as a source
  repeated Property source_properties = 3;
  // Pretty display name for use in UIs
  string display_name = 4;
  // Human readable description of the connector
  string description = 5;
  // Capabilities supported by the connector
  bool implements_registry = 10;
  bool implements_catalog = 11;
  bool implements_repo = 12;
  bool implements_admin = 13;
  bool implements_ai = 14;
  bool implements_sql_store = 15;
  bool implements_olap = 16;
  bool implements_object_store = 17;
  bool implements_file_store = 18;
  bool implements_notifier = 19;
}

// AnalyzedConnector contains information about a connector that is referenced in the project files.
message AnalyzedConnector {
  // Connector name
  string name = 1;
  // Connector driver metadata
  ConnectorDriver driver = 2;
  // Combined config properties for the connector
  map<string, string> config = 3;
  // Config properties preset by the runtime or when the instance was created
  map<string, string> preset_config = 4;
  // Config properties set in project YAML files
  map<string, string> project_config = 5;
  // Config properties set as dynamic variables
  map<string, string> env_config = 6;
  // True if the connector can be accessed without credentials
  bool has_anonymous_access = 7;
  // List of resources that appear to use the connector
  repeated ResourceName used_by = 8;
}

// Request message for RuntimeService.ListConnectorDrivers
message ListConnectorDriversRequest {}

// Response message for RuntimeService.ListConnectorDrivers
message ListConnectorDriversResponse {
  repeated ConnectorDriver connectors = 1;
}

// Request message for RuntimeService.AnalyzeConnectors
message AnalyzeConnectorsRequest {
  string instance_id = 1;
}

// Response message for RuntimeService.AnalyzeConnectors
message AnalyzeConnectorsResponse {
  repeated AnalyzedConnector connectors = 1;
}

// Request message for RuntimeService.ListNotifierConnectors
message ListNotifierConnectorsRequest {
  string instance_id = 1;
}

// Response message for RuntimeService.ListNotifierConnectors
message ListNotifierConnectorsResponse {
  // Note: In this list, the Connector.config property will always be empty.
  repeated Connector connectors = 1;
}

// **********
// Catalog
// **********

// CatalogEntry contains information about an object in the catalog
message CatalogEntry {
  string name = 1;
  oneof object {
    Table table = 2;
    Source source = 3;
    Model model = 4;
    MetricsView metrics_view = 5;
  }
  string path = 6;
  // Marks whether this entry is embedded or not. If yes then this will not have a corresponding artifact.
  bool embedded = 7;
  // Immediate parent entries in the DAG
  repeated string parents = 8;
  // Immediate child entries in the DAG
  repeated string children = 9;
  google.protobuf.Timestamp created_on = 10;
  google.protobuf.Timestamp updated_on = 11;
  google.protobuf.Timestamp refreshed_on = 12;
}

// Request message for RuntimeService.ListCatalogEntries
message ListCatalogEntriesRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  ObjectType type = 2 [(validate.rules).enum.defined_only = true];
}

// Response message for RuntimeService.ListCatalogEntries
message ListCatalogEntriesResponse {
  repeated CatalogEntry entries = 1;
}

// Request message for RuntimeService.GetCatalogEntry
message GetCatalogEntryRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string name = 2;
}

// Response message for RuntimeService.GetCatalogEntry
message GetCatalogEntryResponse {
  CatalogEntry entry = 1;
}

// Request message for RuntimeService.TriggerRefresh
message TriggerRefreshRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  string name = 2;
}

// Response message for RuntimeService.TriggerRefresh
message TriggerRefreshResponse {}

// Request message for RuntimeService.TriggerSync
message TriggerSyncRequest {
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
}

// Response message for RuntimeService.TriggerSync
message TriggerSyncResponse {
  uint32 objects_count = 1;
  uint32 objects_added_count = 2;
  uint32 objects_updated_count = 3;
  uint32 objects_removed_count = 4;
}

// **********
// Migrations
// **********

// Request message for RuntimeService.Reconcile
message ReconcileRequest {
  // Instance to reconcile
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Changed paths provides a way to "hint" what files have changed in the repo, enabling
  // reconciliation to execute faster by not scanning all code artifacts for changes.
  repeated string changed_paths = 2;
  // Forced paths is used to force run reconcile on certain files.
  // This is mainly used by UI to reconcile paths missing in catalog and get errors if any.
  repeated string forced_paths = 3;
  // If true, will validate the file artifacts, but not actually execute any migrations
  bool dry = 4;
  // If true, will not execute any migrations if any artifact fails to validate.
  // Otherwise, it will execute a best-effort reconciliation (including dropping objects with
  // artifacts that fail to validate.)
  bool strict = 5;
}

// Response message for RuntimeService.Reconcile
message ReconcileResponse {
  // Errors encountered during reconciliation. If strict = false, any path in
  // affected_paths without an error can be assumed to have been reconciled succesfully.
  repeated ReconcileError errors = 1;
  // affected_paths lists all the file artifact paths that were considered while
  // executing the reconciliation. If changed_paths was empty, this will include all
  // code artifacts in the repo.
  repeated string affected_paths = 2;
}

// ReconcileError represents an error encountered while running Reconcile.
message ReconcileError {
  // Code represents different categories of reconciliation errors
  enum Code {
    // Unspecified error
    CODE_UNSPECIFIED = 0;
    // Code artifact failed to parse
    CODE_SYNTAX = 1;
    // Code artifact has internal validation errors
    CODE_VALIDATION = 2;
    // Code artifact is valid, but has invalid dependencies
    CODE_DEPENDENCY = 3;
    // Error returned from the OLAP database
    CODE_OLAP = 4;
    // Error encountered during source inspection or ingestion
    CODE_SOURCE = 5;
    // Error returned when unauthorised to access remote sources
    CODE_SOURCE_PERMISSION_DENIED = 6;
  }
  // CharLocation is a line and column in a code artifact
  message CharLocation {
    uint32 line = 1;
    uint32 column = 2;
  }
  // Code denotes the category of error
  Code code = 1 [(validate.rules).enum.defined_only = true];
  // Message is a developer-friendly error message
  string message = 2;
  // File path of the code artifact that this error relates to (if any)
  string file_path = 3;
  // Property path of the error in the code artifact (if any).
  // It's represented as a JS-style property path, e.g. "key0.key1[index2].key3".
  // It only applies to structured code artifacts (i.e. YAML).
  // Only applicable if file_path is set.
  repeated string property_path = 4;
  // Start location of the error in the code artifact (if any).
  // Only applicable if file_path is set.
  CharLocation start_location = 5;
  // End location of the error in the code artifact (if any).
  // Only applicable if file_path and start_location is set.
  CharLocation end_location = 6;
}

message PutFileAndReconcileRequest {
  // Instance to store file in and reconcile
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Path to store the file at
  string path = 2;
  // Contents to save to the file
  string blob = 3;
  // Create indicates whether to create the file if it doesn't already exist
  bool create = 4;
  // create_only will cause the operation to fail if a file already exists at path.
  // It should only be set when create = true.
  bool create_only = 5;

  // If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
  bool dry = 6;
  // If true, will not execute any migrations if any artifact fails to validate.
  // Otherwise, it will execute a best-effort reconciliation (including dropping objects with
  // artifacts that fail to validate.)
  bool strict = 7;
}

message PutFileAndReconcileResponse {
  // Errors encountered during reconciliation. If strict = false, any path in
  // affected_paths without an error can be assumed to have been reconciled succesfully.
  repeated ReconcileError errors = 1;
  // affected_paths lists all the file artifact paths that were considered while
  // executing the reconciliation. If changed_paths was empty, this will include all
  // code artifacts in the repo.
  repeated string affected_paths = 2;
}

message DeleteFileAndReconcileRequest {
  // Instance to store file in and reconcile
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Path to store the file at
  string path = 2;
  // If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
  bool dry = 3;
  // If true, will not execute any migrations if any artifact fails to validate.
  // Otherwise, it will execute a best-effort reconciliation (including dropping objects with
  // artifacts that fail to validate.)
  bool strict = 4;
}

message DeleteFileAndReconcileResponse {
  // Errors encountered during reconciliation. If strict = false, any path in
  // affected_paths without an error can be assumed to have been reconciled succesfully.
  repeated ReconcileError errors = 1;
  // affected_paths lists all the file artifact paths that were considered while
  // executing the reconciliation. If changed_paths was empty, this will include all
  // code artifacts in the repo.
  repeated string affected_paths = 2;
}

message RenameFileAndReconcileRequest {
  // Instance to store file in and reconcile
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Current path of the file
  string from_path = 2;
  // New path of the file
  string to_path = 3;
  // If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
  bool dry = 4;
  // If true, will not execute any migrations if any artifact fails to validate.
  // Otherwise, it will execute a best-effort reconciliation (including dropping objects with
  // artifacts that fail to validate.)
  bool strict = 5;
}

message RenameFileAndReconcileResponse {
  // Errors encountered during reconciliation. If strict = false, any path in
  // affected_paths without an error can be assumed to have been reconciled succesfully.
  repeated ReconcileError errors = 1;
  // affected_paths lists all the file artifact paths that were considered while
  // executing the reconciliation. If changed_paths was empty, this will include all
  // code artifacts in the repo.
  repeated string affected_paths = 2;
}

message RefreshAndReconcileRequest {
  // Instance to store file in and reconcile
  string instance_id = 1 [(validate.rules).string = {pattern: "^[_\\-a-zA-Z0-9]+$"}];
  // Current path of the file
  string path = 2;
  // If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
  bool dry = 3;
  // If true, will not execute any migrations if any artifact fails to validate.
  // Otherwise, it will execute a best-effort reconciliation (including dropping objects with
  // artifacts that fail to validate.)
  bool strict = 5;
}

message RefreshAndReconcileResponse {
  // Errors encountered during reconciliation. If strict = false, any path in
  // affected_paths without an error can be assumed to have been reconciled succesfully.
  repeated ReconcileError errors = 1;
  // affected_paths lists all the file artifact paths that were considered while
  // executing the reconciliation. If changed_paths was empty, this will include all
  // code artifacts in the repo.
  repeated string affected_paths = 2;
}

// Request message for RuntimeService.IssueDevJWT
message IssueDevJWTRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string email = 2 [(validate.rules).string.min_len = 1];
  repeated string groups = 3;
  bool admin = 4;
}

// Response message for RuntimeService.IssueDevJWT
message IssueDevJWTResponse {
  string jwt = 1;
}
