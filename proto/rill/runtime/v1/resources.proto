syntax = "proto3";
package rill.runtime.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "rill/runtime/v1/export_format.proto";
import "rill/runtime/v1/time_grain.proto";
import "rill/runtime/v1/colors.proto";

enum ReconcileStatus {
  RECONCILE_STATUS_UNSPECIFIED = 0;
  RECONCILE_STATUS_IDLE = 1;
  RECONCILE_STATUS_PENDING = 2;
  RECONCILE_STATUS_RUNNING = 3;
}

message Resource {
  ResourceMeta meta = 1;
  oneof resource {
    // Well-known types only, for now. If required, we can add support for a google.protobuf.Any later.
    ProjectParser project_parser = 2;
    SourceV2 source = 3;
    ModelV2 model = 4;
    MetricsViewV2 metrics_view = 5;
    Migration migration = 9;
    Report report = 10;
    PullTrigger pull_trigger = 6;
    RefreshTrigger refresh_trigger = 7;
    BucketPlanner bucket_planner = 8;
    Theme theme = 11;
  }
}

message ResourceMeta {
  ResourceName name = 1;
  repeated ResourceName refs = 2;
  optional ResourceName owner = 3;
  repeated string file_paths = 4;
  bool hidden = 7;
  int64 version = 15;
  int64 spec_version = 5;
  int64 state_version = 6;
  google.protobuf.Timestamp created_on = 9;
  google.protobuf.Timestamp spec_updated_on = 10;
  google.protobuf.Timestamp state_updated_on = 11;
  optional google.protobuf.Timestamp deleted_on = 12;
  ReconcileStatus reconcile_status = 16;
  string reconcile_error = 8;
  google.protobuf.Timestamp reconcile_on = 17;
  optional ResourceName renamed_from = 13;
}

message ResourceName {
  string kind = 1;
  string name = 2;
}

message ProjectParser {
  ProjectParserSpec spec = 1;
  ProjectParserState state = 2;
}

message ProjectParserSpec {}

message ProjectParserState {
  repeated ParseError parse_errors = 1;
  string current_commit_sha = 2;
  bool watching = 3;
}

message SourceV2 {
  SourceSpec spec = 1;
  SourceState state = 2;
}

message SourceSpec {
  string source_connector = 1;
  string sink_connector = 2;
  google.protobuf.Struct properties = 3;
  Schedule refresh_schedule = 5;
  uint32 timeout_seconds = 6;
  // Fields not derived from code files
  bool stage_changes = 7;
  bool stream_ingestion = 8;
  bool trigger = 9;
}

message SourceState {
  string connector = 1;
  string table = 2;
  string spec_hash = 3;
  google.protobuf.Timestamp refreshed_on = 4;
}

message ModelV2 {
  ModelSpec spec = 1;
  ModelState state = 2;
}

message ModelSpec {
  string connector = 1;
  string sql = 2;
  optional bool materialize = 3;
  Schedule refresh_schedule = 4;
  uint32 timeout_seconds = 5;
  bool uses_templating = 6;
  // Fields not derived from code files
  bool stage_changes = 7;
  uint32 materialize_delay_seconds = 8;
  bool trigger = 9;
}

message ModelState {
  string connector = 1;
  string table = 2;
  string spec_hash = 3;
  google.protobuf.Timestamp refreshed_on = 4;
}

message MetricsViewV2 {
  MetricsViewSpec spec = 1;
  MetricsViewState state = 2;
}

message MetricsViewSpec {
  // Dimensions are columns to filter and group by
  message DimensionV2 {
    string name = 1;
    string column = 2;
    string expression = 6;
    string label = 3;
    string description = 4;
    bool unnest = 5;
  }
  // Measures are aggregated computed values
  message MeasureV2 {
    string name = 1;
    string expression = 2;
    string label = 3;
    string description = 4;
    string format_preset = 5;
    string format_d3 = 7;
    bool valid_percent_of_total = 6;
  }
  // Security for the dashboard
  message SecurityV2 {
    // Dashboard level access condition
    string access = 1;
    // row level access condition
    string row_filter = 2;
    // Dimension/measure level access condition
    message FieldConditionV2 {
      string condition = 1;
      repeated string names = 2;
    }
    // either one of include or exclude will be specified
    repeated FieldConditionV2 include = 3;
    repeated FieldConditionV2 exclude = 4;
  }
  enum ComparisonMode {
    COMPARISON_MODE_UNSPECIFIED = 0;
    COMPARISON_MODE_NONE = 1;
    COMPARISON_MODE_TIME = 2;
    COMPARISON_MODE_DIMENSION = 3;
  }
  message AvailableComparisonOffset {
    string offset = 1;
    // Used to override the range for the comparison with something other than the selected range.
    string range = 2;
  }
  message AvailableTimeRange {
    string range = 1;
    // Available comparison offsets for this time range.
    repeated AvailableComparisonOffset comparison_offsets = 2;
  }
  // Connector containing the table
  string connector = 1;
  // Name of the table the metrics view is based on
  string table = 2;
  // User friendly label for the dashboard
  string title = 3;
  // Description of the dashboard
  string description = 4;
  // Name of the primary time dimension, used for rendering time series
  string time_dimension = 5;
  // Dimensions in the metrics view
  repeated DimensionV2 dimensions = 6;
  // Measures in the metrics view
  repeated MeasureV2 measures = 7;
  // Smallest time grain to show in the dashboard
  TimeGrain smallest_time_grain = 8;
  // Default time range for the dashboard. It should be a valid ISO 8601 duration string.
  string default_time_range = 9;
  // Available time zones list preferred time zones using IANA location identifiers
  repeated string available_time_zones = 10;
  // Security for the dashboard
  SecurityV2 security = 11;
  // ISO 8601 weekday number to use as the base for time aggregations by week. Defaults to 1 (Monday).
  uint32 first_day_of_week = 12;
  // Month number to use as the base for time aggregations by year. Defaults to 1 (January).
  uint32 first_month_of_year = 13;
  // Selected default comparison mode.
  ComparisonMode default_comparison_mode = 14;
  // If comparison mode is dimension then this determines which is the default dimension
  string default_comparison_dimension = 15;
  // List of available time ranges with comparison ranges that would replace the default list.
  repeated AvailableTimeRange available_time_ranges = 16;
  // Default theme to apply
  string default_theme = 17;
}

message MetricsViewState {
  MetricsViewSpec valid_spec = 1;
}

message Migration {
  MigrationSpec spec = 1;
  MigrationState state = 2;
}

message MigrationSpec {
  string connector = 1;
  string sql = 2;
  uint32 version = 3;
}

message MigrationState {
  uint32 version = 1;
}

message Report {
  ReportSpec spec = 1;
  ReportState state = 2;
}

message ReportSpec {
  bool trigger = 1;
  string title = 2;
  Schedule refresh_schedule = 3;
  uint32 timeout_seconds = 4;
  string query_name = 5;
  string query_args_json = 6;
  uint64 export_limit = 7;
  ExportFormat export_format = 8;
  repeated string email_recipients = 9;
  map<string, string> annotations = 10;
}

message ReportState {
  google.protobuf.Timestamp next_run_on = 1;
  ReportExecution current_execution = 2;
  repeated ReportExecution execution_history = 3;
  uint32 execution_count = 4;
}

message ReportExecution {
  bool adhoc = 1;
  string error_message = 2;
  google.protobuf.Timestamp report_time = 3;
  google.protobuf.Timestamp started_on = 4;
  google.protobuf.Timestamp finished_on = 5;
}

message PullTrigger {
  PullTriggerSpec spec = 1;
  PullTriggerState state = 2;
}

message PullTriggerSpec {}

message PullTriggerState {}

message RefreshTrigger {
  RefreshTriggerSpec spec = 1;
  RefreshTriggerState state = 2;
}

message RefreshTriggerSpec {
  repeated ResourceName only_names = 1;
}

message RefreshTriggerState {}

message BucketPlanner {
  BucketPlannerSpec spec = 1;
  BucketPlannerState state = 2;
}

message BucketPlannerSpec {
  BucketExtractPolicy extract_policy = 1;
}

message BucketPlannerState {
  string region = 1;
}

message BucketExtractPolicy {
  enum Strategy {
    STRATEGY_UNSPECIFIED = 0;
    STRATEGY_HEAD = 1;
    STRATEGY_TAIL = 2;
  }
  Strategy rows_strategy = 1;
  uint64 rows_limit_bytes = 2;
  Strategy files_strategy = 3;
  uint64 files_limit = 4;
}

message Theme {
  ThemeSpec spec = 1;
  ThemeState state = 2;
}

message ThemeSpec {
  optional Color primary_color = 1;
  optional Color secondary_color = 2;
}

message ThemeState {}

message Schedule {
  string cron = 1;
  uint32 ticker_seconds = 2;
  string time_zone = 3;
}

message ParseError {
  string message = 1;
  string file_path = 2;
  CharLocation start_location = 3;
  bool external = 4;
}

message ValidationError {
  string message = 1;
  repeated string property_path = 2;
}

message DependencyError {
  string message = 1;
  string dependency = 2;
}

message ExecutionError {
  string message = 1;
}

message CharLocation {
  uint32 line = 1;
}
