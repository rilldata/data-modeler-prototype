syntax = "proto3";
package rill.runtime.v1;

import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";
import "rill/runtime/v1/colors.proto";
import "rill/runtime/v1/export_format.proto";
import "rill/runtime/v1/expression.proto";
import "rill/runtime/v1/schema.proto";
import "rill/runtime/v1/time_grain.proto";

enum ReconcileStatus {
  RECONCILE_STATUS_UNSPECIFIED = 0;
  RECONCILE_STATUS_IDLE = 1;
  RECONCILE_STATUS_PENDING = 2;
  RECONCILE_STATUS_RUNNING = 3;
}

message Resource {
  ResourceMeta meta = 1;
  oneof resource {
    // Well-known types only, for now. If required, we can add support for a google.protobuf.Any later.
    ProjectParser project_parser = 2;
    SourceV2 source = 3;
    ModelV2 model = 4;
    MetricsViewV2 metrics_view = 5;
    Explore explore = 17;
    Migration migration = 9;
    Report report = 10;
    Alert alert = 12;
    PullTrigger pull_trigger = 6;
    RefreshTrigger refresh_trigger = 7;
    BucketPlanner bucket_planner = 8;
    Theme theme = 11;
    Component component = 13;
    Dashboard dashboard = 14;
    API api = 15;
    ConnectorV2 connector = 16;
  }
}

message ResourceMeta {
  ResourceName name = 1;
  repeated ResourceName refs = 2;
  optional ResourceName owner = 3;
  repeated string file_paths = 4;
  bool hidden = 7;
  int64 version = 15;
  int64 spec_version = 5;
  int64 state_version = 6;
  google.protobuf.Timestamp created_on = 9;
  google.protobuf.Timestamp spec_updated_on = 10;
  google.protobuf.Timestamp state_updated_on = 11;
  optional google.protobuf.Timestamp deleted_on = 12;
  ReconcileStatus reconcile_status = 16;
  string reconcile_error = 8;
  google.protobuf.Timestamp reconcile_on = 17;
  optional ResourceName renamed_from = 13;
}

message ResourceName {
  string kind = 1;
  string name = 2;
}

message ProjectParser {
  ProjectParserSpec spec = 1;
  ProjectParserState state = 2;
}

message ProjectParserSpec {}

message ProjectParserState {
  repeated ParseError parse_errors = 1;
  string current_commit_sha = 2;
  bool watching = 3;
}

message SourceV2 {
  SourceSpec spec = 1;
  SourceState state = 2;
}

message SourceSpec {
  string source_connector = 1;
  string sink_connector = 2;
  google.protobuf.Struct properties = 3;
  Schedule refresh_schedule = 5;
  uint32 timeout_seconds = 6;
  // Fields not derived from code files
  bool stage_changes = 7;
  bool stream_ingestion = 8;
  bool trigger = 9;
}

message SourceState {
  string connector = 1;
  string table = 2;
  string spec_hash = 3;
  google.protobuf.Timestamp refreshed_on = 4;
}

message ModelV2 {
  ModelSpec spec = 1;
  ModelState state = 2;
}

message ModelSpec {
  Schedule refresh_schedule = 4;
  uint32 timeout_seconds = 5;
  bool incremental = 13;
  string incremental_state_resolver = 14;
  google.protobuf.Struct incremental_state_resolver_properties = 15;
  string splits_resolver = 18;
  google.protobuf.Struct splits_resolver_properties = 19;
  string splits_watermark_field = 20;
  uint32 splits_concurrency_limit = 21;
  string input_connector = 10;
  google.protobuf.Struct input_properties = 11;
  // stage_connector is optional.
  string stage_connector = 16;
  google.protobuf.Struct stage_properties = 17;
  string output_connector = 1;
  google.protobuf.Struct output_properties = 12;
  bool trigger = 9;
  bool trigger_full = 22;
  reserved 2, 3, 6, 7, 8;
}

message ModelState {
  // executor_connector is the ModelExecutor that produced the model's result.
  string executor_connector = 6;
  // result_connector is the connector where the model's result is stored.
  string result_connector = 1;
  // result_properties are returned by the executor and contains metadata about the result.
  google.protobuf.Struct result_properties = 5;
  // result_table contains the model's result table for SQL models. It is a convenience field that can also be derived from result_properties.
  string result_table = 2;
  // spec_hash is a hash of those parts of the spec that affect the model's result.
  string spec_hash = 3;
  // refs_hash is a hash of the model's refs current state. It is used to determine if the model's refs have changed.
  string refs_hash = 9;
  // refreshed_on is the time the model was last executed.
  google.protobuf.Timestamp refreshed_on = 4;
  // incremental_state contains the result of the most recent invocation of the model's incremental state resolver.
  google.protobuf.Struct incremental_state = 7;
  // incremental_state_schema contains a schema for the data in incremental_state.
  StructType incremental_state_schema = 8;
  // splits_model_id is a randomly generated ID used to store the model's splits in the CatalogStore.
  string splits_model_id = 10;
  // splits_have_errors is true if one or more splits failed to execute.
  bool splits_have_errors = 11;
}

message MetricsViewV2 {
  MetricsViewSpec spec = 1;
  MetricsViewState state = 2;
}

message MetricsViewSpec {
  // Dimensions are columns to filter and group by
  message DimensionV2 {
    string name = 1;
    string column = 2;
    string expression = 6;
    string label = 3;
    string description = 4;
    bool unnest = 5;
    string uri = 7;
  }
  // Selector for a dimension
  message DimensionSelector {
    string name = 1;
    TimeGrain time_grain = 2; // Only for time dimensions (optional)
    bool desc = 3; // Only for when ordering (optional)
  }
  // Type of measure query to generate
  enum MeasureType {
    MEASURE_TYPE_UNSPECIFIED = 0;
    MEASURE_TYPE_SIMPLE = 1;
    MEASURE_TYPE_DERIVED = 2;
    MEASURE_TYPE_TIME_COMPARISON = 3;
  }
  // Window to apply to the measure calculation
  message MeasureWindow {
    // If true, partitions the window by all present dimensions except those in order_by
    bool partition = 1;
    // Dimensions to order the window by. Must be present in required_dimensions.
    repeated DimensionSelector order_by = 3;
    // Raw SQL expression to use as the frame (starting with "ROWS ...")
    string frame_expression = 2;
  }
  // Measures are aggregated computed values
  message MeasureV2 {
    string name = 1;
    string expression = 2;
    MeasureType type = 8;
    MeasureWindow window = 9;
    repeated DimensionSelector per_dimensions = 10;
    repeated DimensionSelector required_dimensions = 11;
    repeated string referenced_measures = 12;
    string label = 3;
    string description = 4;
    string format_preset = 5;
    string format_d3 = 7;
    bool valid_percent_of_total = 6;
  }
  // Connector containing the table
  string connector = 1;
  // Name of the database where table is located (optional)
  string database = 21;
  // Name of the database schema where table is located (optional)
  string database_schema = 22;
  // Name of the table the metrics view is based on
  string table = 2;
  // Name of the model the metrics view is based on. Either table or model should be set.
  string model = 24;
  // User-facing title
  string title = 3;
  // User-facing description
  string description = 4;
  // Name of the primary time dimension, used for rendering time series
  string time_dimension = 5;
  // The smallest time grain that can be queried for.
  // This can be useful to set if the time_dimension is not available below a certain granularity.
  TimeGrain smallest_time_grain = 8;
  // Expression to evaluate a watermark for the metrics view. If not set, the watermark defaults to max(time_dimension).
  string watermark_expression = 20;
  // Dimensions in the metrics view
  repeated DimensionV2 dimensions = 6;
  // Measures in the metrics view
  repeated MeasureV2 measures = 7;
  // Security for the dashboard
  repeated SecurityRule security_rules = 23;
  // ISO 8601 weekday number to use as the base for time aggregations by week. Defaults to 1 (Monday).
  uint32 first_day_of_week = 12;
  // Month number to use as the base for time aggregations by year. Defaults to 1 (January).
  uint32 first_month_of_year = 13;
}

message SecurityRule {
  oneof rule {
    SecurityRuleAccess access = 1;
    SecurityRuleFieldAccess field_access = 2;
    SecurityRuleRowFilter row_filter = 3;
  }
}
  
message SecurityRuleAccess {
  string condition = 1;
  bool allow = 2;
}

message SecurityRuleFieldAccess {
  string condition = 1;
  bool allow = 2;
  repeated string fields = 3;
  bool all_fields = 4;
}

message SecurityRuleRowFilter {
  string condition = 1;
  string sql = 2; // Raw SQL expression to apply to the underlying table
  Expression expression = 3; // Regular query expression referencing dimension names
}

message MetricsViewState {
  // Valid spec is a (potentially previous) version of the spec that is known to currently be valid.
  MetricsViewSpec valid_spec = 1;
  // Streaming is true if the underlying data may change without the metrics view's spec/state version changing.
  // It's set to true if the metrics view is based on an externally managed table.
  bool streaming = 2;
}

message Explore {
  ExploreSpec spec = 1;
  ExploreState state = 2;
}

message ExploreSpec {
  // User-facing title
  string title = 1;
  // User-facing description
  string description = 2;
  // The metrics view the explore is based on
  string metrics_view = 3;
  // Dimensions to show.
  repeated string dimensions = 4;
  // If true, `dimensions` will be inverted during validation to include all dimensions except the ones listed.
  bool dimensions_exclude = 5;
  // Measures available
  repeated string measures = 6;
  // If true, `measures` will be inverted during validation to include all measures except the ones listed.
  bool measures_exclude = 7;
  // Theme to use
  string theme = 8;
  // List of selectable time ranges with comparison time ranges.
  // If the list is empty, a default list should be shown.
  repeated ExploreTimeRange time_ranges = 9;
  // List of selectable time zones.
  // If the list is empty, a default list should be shown.
  // The values should be valid IANA location identifiers.
  repeated string time_zones = 10;
  // List of preconfigured UI states that can be toggled between.
  // If the list is not empty, the first item should be selected by default.
  repeated ExplorePreset presets = 11;
  // Security for the explore dashboard.
  // These are not currently parsed from YAML, but will be derived from the parent metrics view.
  repeated SecurityRule security_rules = 23;
}

message ExploreState {
  ExploreSpec valid_spec = 1;
}

message ExploreTimeRange {
  // ISO 8601 duration string for the time range
  string range = 1;
  // Comparison time ranges available for this time range
  repeated ExploreComparisonTimeRange comparison_time_ranges = 2;
}

message ExploreComparisonTimeRange {
  // ISO 8601 duration string to use as an offset from the base time range.
  string offset = 1;
  // ISO 8601 duration string for the duration of the comparison time range.
  // If not specified, it should fallback to the range of the base time range.
  string range = 2;
}

message ExplorePreset {
  // Display name of the preset
  string label = 1;
  // Dimensions to show
  repeated string dimensions = 2;
  // If true, the `dimensions` will be inverted during validation to include all dimensions except the ones listed.
  bool dimensions_exclude = 3;
  // Measures to show
  repeated string measures = 4;
  // If true, `measures` will be inverted during validation to include all measures except the ones listed.
  bool measures_exclude = 5;
  // Time range for the explore.
  // It corresponds to the `range` property of the explore's `time_ranges`.
  // If not found in `time_ranges`, it should be added to the list.
  string time_range = 6;
  // Comparison mode.
  ExploreComparisonMode comparison_mode = 7;
  // If comparison_mode is EXPLORE_COMPARISON_MODE_DIMENSION, this indicates the dimension to use.
  string comparison_dimension = 8;
}

enum ExploreComparisonMode {
  EXPLORE_COMPARISON_MODE_UNSPECIFIED = 0;
  EXPLORE_COMPARISON_MODE_NONE = 1;
  EXPLORE_COMPARISON_MODE_TIME = 2;
  EXPLORE_COMPARISON_MODE_DIMENSION = 3;
}

message Migration {
  MigrationSpec spec = 1;
  MigrationState state = 2;
}

message MigrationSpec {
  string connector = 1;
  string sql = 2;
  uint32 version = 3;
}

message MigrationState {
  uint32 version = 1;
}

message Report {
  ReportSpec spec = 1;
  ReportState state = 2;
}

message ReportSpec {
  bool trigger = 1;
  string title = 2;
  Schedule refresh_schedule = 3;
  uint32 timeout_seconds = 4;
  string query_name = 5;
  string query_args_json = 6;
  uint64 export_limit = 7;
  ExportFormat export_format = 8;
  repeated Notifier notifiers = 11;
  map<string, string> annotations = 10;
  bool watermark_inherit = 12; // If true, will use the lowest watermark of its refs instead of the trigger time.
  string intervals_iso_duration = 13;
  int32 intervals_limit = 14;
  bool intervals_check_unclosed = 15;
}

message ReportState {
  google.protobuf.Timestamp next_run_on = 1;
  ReportExecution current_execution = 2;
  repeated ReportExecution execution_history = 3;
  uint32 execution_count = 4;
}

message ReportExecution {
  bool adhoc = 1;
  string error_message = 2;
  google.protobuf.Timestamp report_time = 3;
  google.protobuf.Timestamp started_on = 4;
  google.protobuf.Timestamp finished_on = 5;
}

message Alert {
  AlertSpec spec = 1;
  AlertState state = 2;
}

message AlertSpec {
  bool trigger = 1;
  string title = 2;
  Schedule refresh_schedule = 3;
  bool watermark_inherit = 4; // If true, will use the lowest watermark of its refs instead of the trigger time.
  string intervals_iso_duration = 5;
  int32 intervals_limit = 6;
  bool intervals_check_unclosed = 7;
  uint32 timeout_seconds = 8;
  // for alerts that have not been edited since resolver and resolver_properties have been added
  string query_name = 9;
  string query_args_json = 10;
  string resolver = 22;
  google.protobuf.Struct resolver_properties = 23;
  oneof query_for {
    string query_for_user_id = 11;
    string query_for_user_email = 12;
    google.protobuf.Struct query_for_attributes = 13;
  }
  bool notify_on_recover = 15;
  bool notify_on_fail = 16;
  bool notify_on_error = 17;
  bool renotify = 18;
  uint32 renotify_after_seconds = 19;
  repeated Notifier notifiers = 21;
  map<string, string> annotations = 20;
}

message Notifier {
  string connector = 1;
  google.protobuf.Struct properties = 2;
}

message AlertState {
  string spec_hash = 1;
  string refs_hash = 2;
  google.protobuf.Timestamp next_run_on = 3;
  AlertExecution current_execution = 4;
  repeated AlertExecution execution_history = 5;
  uint32 execution_count = 6;
}

message AlertExecution {
  bool adhoc = 1;
  AssertionResult result = 2;
  bool sent_notifications = 3;
  google.protobuf.Timestamp execution_time = 4;
  google.protobuf.Timestamp started_on = 5;
  google.protobuf.Timestamp finished_on = 6;
  // Stores the last notification time in suppressed alerts
  google.protobuf.Timestamp suppressed_since = 7;
}

message AssertionResult {
  AssertionStatus status = 1;
  google.protobuf.Struct fail_row = 2;
  string error_message = 3;
}

enum AssertionStatus {
  ASSERTION_STATUS_UNSPECIFIED = 0;
  ASSERTION_STATUS_PASS = 1;
  ASSERTION_STATUS_FAIL = 2;
  ASSERTION_STATUS_ERROR = 3;
}

// DEPRECATED (2024-08-28): Use a RefreshTrigger that targets the project parser instead.
message PullTrigger {
  PullTriggerSpec spec = 1;
  PullTriggerState state = 2;
}

message PullTriggerSpec {}

message PullTriggerState {}

message RefreshTrigger {
  RefreshTriggerSpec spec = 1;
  RefreshTriggerState state = 2;
}

message RefreshTriggerSpec {
  // Resources to refresh. The refreshable types are sources, models, alerts, reports, and the project parser.
  // If a model is specified, a normal incremental refresh is triggered. Use the "models" field to trigger other kinds of model refreshes.
  repeated ResourceName resources = 1;
  // Models to refresh. These are specified separately to enable more fine-grained configuration.
  repeated RefreshModelTrigger models = 2;
}

message RefreshTriggerState {}

message RefreshModelTrigger {
  // The model to refresh.
  string model = 1;
  // If true, the current table and state will be dropped before refreshing.
  // For non-incremental models, this is equivalent to a normal refresh.
  bool full = 2;
  // Keys of specific splits to refresh.
  repeated string splits = 3;
  // If true, it will refresh all splits that errored on their last execution.
  bool all_errored_splits = 4;
}

message BucketPlanner {
  BucketPlannerSpec spec = 1;
  BucketPlannerState state = 2;
}

message BucketPlannerSpec {
  BucketExtractPolicy extract_policy = 1;
}

message BucketPlannerState {
  string region = 1;
}

message BucketExtractPolicy {
  enum Strategy {
    STRATEGY_UNSPECIFIED = 0;
    STRATEGY_HEAD = 1;
    STRATEGY_TAIL = 2;
  }
  Strategy rows_strategy = 1;
  uint64 rows_limit_bytes = 2;
  Strategy files_strategy = 3;
  uint64 files_limit = 4;
}

message Theme {
  ThemeSpec spec = 1;
  ThemeState state = 2;
}

message ThemeSpec {
  optional Color primary_color = 1;
  optional Color secondary_color = 2;
}

message ThemeState {}

message Component {
  ComponentSpec spec = 1;
  ComponentState state = 2;
}

message ComponentSpec {
  string title = 1;
  string subtitle = 7;
  string resolver = 2;
  google.protobuf.Struct resolver_properties = 3;
  string renderer = 4;
  google.protobuf.Struct renderer_properties = 5;
  repeated ComponentVariable input = 8;
  ComponentVariable output = 9;
  string show = 10; // Templated string that should evaluate to a boolean.
  bool defined_in_dashboard = 6;
}

message ComponentState {}

message ComponentVariable {
  string name = 1;
  string type = 2;
  google.protobuf.Value default_value = 3;
}

message Dashboard {
  DashboardSpec spec = 1;
  DashboardState state = 2;
}

message DashboardSpec {
  string title = 1;
  uint32 columns = 2;
  uint32 gap = 3;
  repeated ComponentVariable variables = 5;
  repeated DashboardItem items = 4;
}

message DashboardState {}

message DashboardItem {
  string component = 1;
  bool defined_in_dashboard = 8;
  optional uint32 x = 2;
  optional uint32 y = 3;
  optional uint32 width = 4;
  optional uint32 height = 5;
}

// API defines a custom operation for querying data stored in Rill.
message API {
  APISpec spec = 1;
  APIState state = 2;
}

message APISpec {
  string resolver = 1;
  google.protobuf.Struct resolver_properties = 2;
  string openapi_summary = 3;
  repeated google.protobuf.Struct openapi_parameters = 4;
  google.protobuf.Struct openapi_response_schema = 5;
}

message APIState {}

message Schedule {
  bool ref_update = 4;
  bool disable = 5;
  string cron = 1;
  uint32 ticker_seconds = 2;
  string time_zone = 3;
}

message ParseError {
  string message = 1;
  string file_path = 2;
  CharLocation start_location = 3;
  bool external = 4;
}

message ValidationError {
  string message = 1;
  repeated string property_path = 2;
}

message DependencyError {
  string message = 1;
  string dependency = 2;
}

message ExecutionError {
  string message = 1;
}

message CharLocation {
  uint32 line = 1;
}

message ConnectorSpec {
  string driver = 1;
  map<string, string> properties = 2;
  repeated string templated_properties = 4;
  // DEPRECATED: properties_from_variables stores properties whose value is a variable.
  // NOTE : properties_from_variables and properties both should be used to get all properties.
  map<string, string> properties_from_variables = 3;
}

message ConnectorState {
  string spec_hash = 1;
}

message ConnectorV2 {
  ConnectorSpec spec = 1;
  ConnectorState state = 2;
}
