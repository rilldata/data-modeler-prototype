syntax = "proto3";
package rill.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
// import "validate/validate.proto";

service AdminService {
  // Ping returns information about the server
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {get: "/v1/ping"};
  }

  // ListOrganizations lists all the organizations currently managed by the admin
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {get: "/v1/organizations"};
  }

  // GetOrganization returns information about a specific organization
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {get: "/v1/organizations/{name}"};
  }

  // CreateOrganization creates a new organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations",
      body: "*"
    };
  }

  // DeleteOrganization deletes an organizations
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{name}"};
  }

  // UpdateOrganization deletes an organizations
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{name}",
      body: "*"
    };
  }

  // ListProjects lists all the projects currently available for given organizations
  rpc ListProjects(ListProjectsRequest) returns (ListProjectsResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/projects"};
  }

  // GetProject returns information about a specific project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/projects/{name}"};
  }

  // CreateProject creates a new project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/projects",
      body: "*"
    };
  }

  // DeleteProject deletes an project
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization_name}/projects/{name}"};
  }

  // UpdateProject updates a project
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_name}/projects/{name}",
      body: "*"
    };
  }

  // GetCurrentUser returns the currently authenticated user (if any)
  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/current"
    };
  }

  // RevokeCurrentAuthToken revoke the current auth token
  rpc RevokeCurrentAuthToken(RevokeCurrentAuthTokenRequest) returns (RevokeCurrentAuthTokenResponse) {
    option (google.api.http) = {delete: "/v1/tokens/current"};
  }

  // GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
  // If the caller has not granted access to the repository, instructions for granting access are returned.
  rpc GetGithubRepoStatus(GetGithubRepoStatusRequest) returns (GetGithubRepoStatusResponse) {
    option (google.api.http) = {get: "/v1/github/repositories"};
  }
}

message PingRequest {}

message PingResponse {
  string version = 1;
  google.protobuf.Timestamp time = 2;
}

message ListOrganizationsRequest {
  uint32 page_size = 1;
  string page_token = 2;
}

message ListOrganizationsResponse {
  repeated Organization organization = 1;
  string next_page_token = 2;
}

message GetOrganizationRequest {
  string name = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
}

message CreateOrganizationRequest {
  string id = 1;
  string name = 2;
  string description = 3;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string name = 1;
}

message DeleteOrganizationResponse {
  string name = 1;
}

message UpdateOrganizationRequest {
  string name = 1;
  string description = 2;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message ListProjectsRequest {
  string organization_name = 1;
  uint32 page_size = 2;
  string page_token = 3;
}

message ListProjectsResponse {
  repeated Project projects = 1;
  string next_page_token = 2;
}

message GetProjectRequest {
  string organization_name = 1;
  string name = 2;
}

message GetProjectResponse {
  Project project = 1;
}

message CreateProjectRequest {
  string organization_name = 1;
  string name = 2;
  string description = 3;
  bool public = 4;
  string production_branch = 5;
  string github_url = 6;
}

message CreateProjectResponse {
  Project project = 1;
}

message DeleteProjectRequest {
  string organization_name = 1;
  string name = 2;
}

message DeleteProjectResponse {
  string name = 1;
}

message UpdateProjectRequest {
  string organization_name = 1;
  string name = 2;
  string description = 3;
  bool public = 4;
  string production_branch = 5;
  string github_url = 6;
}

message UpdateProjectResponse {
  Project project = 1;
}

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  User user = 1;
}

message RevokeCurrentAuthTokenRequest {}

message RevokeCurrentAuthTokenResponse {
  string token_id = 1;
}

message GetGithubRepoStatusRequest {
  string github_url = 1;
}

message GetGithubRepoStatusResponse {
  bool has_access = 1;
  string grant_access_url = 2;
  string default_branch = 3;
}

message Organization {
  string id = 1;
  string name = 2; // Globally unique
  string description = 3;
  google.protobuf.Timestamp created_on = 4;
  google.protobuf.Timestamp updated_on = 5;
}

message Project {
  string id = 1;
  string name = 2; // Unique in organization
  string description = 3;
  bool public = 4;
  string production_branch = 5;
  string github_url = 6;
  google.protobuf.Timestamp created_on = 7;
  google.protobuf.Timestamp updated_on = 8;
}

message User {
  string id = 1;
  string email = 2;
  string display_name = 3;
  string photo_url = 4;
  google.protobuf.Timestamp created_on = 5;
  google.protobuf.Timestamp updated_on = 6;
}
