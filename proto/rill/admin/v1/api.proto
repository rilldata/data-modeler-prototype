syntax = "proto3";
package rill.admin.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto";
import "rill/runtime/v1/export_format.proto";
import "validate/validate.proto";

service AdminService {
  // Ping returns information about the server
  rpc Ping(PingRequest) returns (PingResponse) {
    option (google.api.http) = {get: "/v1/ping"};
  }

  // ListOrganizations lists all the organizations currently managed by the admin
  rpc ListOrganizations(ListOrganizationsRequest) returns (ListOrganizationsResponse) {
    option (google.api.http) = {get: "/v1/organizations"};
  }

  // GetOrganization returns information about a specific organization
  rpc GetOrganization(GetOrganizationRequest) returns (GetOrganizationResponse) {
    option (google.api.http) = {get: "/v1/organizations/{name}"};
  }

  // CreateOrganization creates a new organization
  rpc CreateOrganization(CreateOrganizationRequest) returns (CreateOrganizationResponse) {
    option (google.api.http) = {
      post: "/v1/organizations",
      body: "*"
    };
  }

  // DeleteOrganization deletes an organizations
  rpc DeleteOrganization(DeleteOrganizationRequest) returns (DeleteOrganizationResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{name}"};
  }

  // UpdateOrganization deletes an organizations
  rpc UpdateOrganization(UpdateOrganizationRequest) returns (UpdateOrganizationResponse) {
    option (google.api.http) = {
      patch: "/v1/organizations/{name}",
      body: "*"
    };
  }

  // ListProjectsForOrganization lists all the projects currently available for given organizations
  rpc ListProjectsForOrganization(ListProjectsForOrganizationRequest) returns (ListProjectsForOrganizationResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/projects"};
  }

  // GetProject returns information about a specific project
  rpc GetProject(GetProjectRequest) returns (GetProjectResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/projects/{name}"};
  }

  // SearchProjectNames returns project names matching the pattern
  rpc SearchProjectNames(SearchProjectNamesRequest) returns (SearchProjectNamesResponse) {
    option (google.api.http) = {get: "/v1/superuser/projects/search"};
  }

  // GetProjectVariables returns project variables. NOTE: Get project API doesn't return variables.
  rpc GetProjectVariables(GetProjectVariablesRequest) returns (GetProjectVariablesResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/projects/{name}/variables"};
  }

  // CreateProject creates a new project
  rpc CreateProject(CreateProjectRequest) returns (CreateProjectResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/projects",
      body: "*"
    };
  }

  // DeleteProject deletes an project
  rpc DeleteProject(DeleteProjectRequest) returns (DeleteProjectResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization_name}/projects/{name}"};
  }

  // UpdateProject updates a project
  rpc UpdateProject(UpdateProjectRequest) returns (UpdateProjectResponse) {
    option (google.api.http) = {
      patch: "/v1/organizations/{organization_name}/projects/{name}",
      body: "*"
    };
  }

  // UpdateProjectVariables updates variables for a project. NOTE: Update project API doesn't update variables.
  rpc UpdateProjectVariables(UpdateProjectVariablesRequest) returns (UpdateProjectVariablesResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization_name}/projects/{name}/variables",
      body: "*"
    };
  }

  // TriggerReconcile triggers reconcile for the project's prod deployment
  rpc TriggerReconcile(TriggerReconcileRequest) returns (TriggerReconcileResponse) {
    option (google.api.http) = {
      post: "/v1/deployments/{deployment_id}/reconcile",
      body: "*"
    };
  }

  // TriggerRefreshSources refresh the source for production deployment
  rpc TriggerRefreshSources(TriggerRefreshSourcesRequest) returns (TriggerRefreshSourcesResponse) {
    option (google.api.http) = {
      post: "/v1/deployments/{deployment_id}/refresh",
      body: "*"
    };
  }

  // TriggerRedeploy creates a new deployment and teardown the old deployment for production deployment
  rpc TriggerRedeploy(TriggerRedeployRequest) returns (TriggerRedeployResponse) {
    option (google.api.http) = {
      post: "/v1/projects/-/redeploy",
      body: "*"
    };
  }

  // ListOrganizationMembers lists all the org members
  rpc ListOrganizationMembers(ListOrganizationMembersRequest) returns (ListOrganizationMembersResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/members"};
  }

  // ListOrganizationInvites lists all the org invites
  rpc ListOrganizationInvites(ListOrganizationInvitesRequest) returns (ListOrganizationInvitesResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/invites"};
  }

  // AddOrganizationMember lists all the org members
  rpc AddOrganizationMember(AddOrganizationMemberRequest) returns (AddOrganizationMemberResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/members",
      body: "*"
    };
  }

  // RemoveOrganizationMember removes member from the organization
  rpc RemoveOrganizationMember(RemoveOrganizationMemberRequest) returns (RemoveOrganizationMemberResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/members/{email}"};
  }

  // LeaveOrganization removes the current user from the organization
  rpc LeaveOrganization(LeaveOrganizationRequest) returns (LeaveOrganizationResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/members/current"};
  }

  // SetOrganizationMemberRole sets the role for the member
  rpc SetOrganizationMemberRole(SetOrganizationMemberRoleRequest) returns (SetOrganizationMemberRoleResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization}/members/{email}",
      body: "*"
    };
  }

  // ListProjectMembers lists all the project members
  rpc ListProjectMembers(ListProjectMembersRequest) returns (ListProjectMembersResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/projects/{project}/members"};
  }

  // ListProjectInvites lists all the project invites
  rpc ListProjectInvites(ListProjectInvitesRequest) returns (ListProjectInvitesResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/projects/{project}/invites"};
  }

  // AddProjectMember adds a member to the project
  rpc AddProjectMember(AddProjectMemberRequest) returns (AddProjectMemberResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/members",
      body: "*"
    };
  }

  // RemoveProjectMember removes member from the project
  rpc RemoveProjectMember(RemoveProjectMemberRequest) returns (RemoveProjectMemberResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/projects/{project}/members/{email}"};
  }

  // SetProjectMemberRole sets the role for the member
  rpc SetProjectMemberRole(SetProjectMemberRoleRequest) returns (SetProjectMemberRoleResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization}/projects/{project}/members/{email}",
      body: "*"
    };
  }

  // GetCurrentUser returns the currently authenticated user (if any)
  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/current"
    };
  }

  // IssueRepresentativeAuthToken returns the temporary token for given email
  rpc IssueRepresentativeAuthToken(IssueRepresentativeAuthTokenRequest) returns (IssueRepresentativeAuthTokenResponse) {
    option (google.api.http) = {
      post: "/v1/tokens/represent",
      body: "*"
    };
  }

  // RevokeCurrentAuthToken revoke the current auth token
  rpc RevokeCurrentAuthToken(RevokeCurrentAuthTokenRequest) returns (RevokeCurrentAuthTokenResponse) {
    option (google.api.http) = {delete: "/v1/tokens/current"};
  }

  // GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
  // If the caller has not granted access to the repository, instructions for granting access are returned.
  rpc GetGithubRepoStatus(GetGithubRepoStatusRequest) returns (GetGithubRepoStatusResponse) {
    option (google.api.http) = {get: "/v1/github/repositories"};
  }

  // GetGitCredentials returns credentials and other details for a project's Git repository.
  rpc GetGitCredentials(GetGitCredentialsRequest) returns (GetGitCredentialsResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/projects/{project}/git-credentials"};
  }

  // CreateWhitelistedDomain adds a domain to the whitelist
  rpc CreateWhitelistedDomain(CreateWhitelistedDomainRequest) returns (CreateWhitelistedDomainResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/whitelisted",
      body: "*"
    };
  }

  // RemoveWhitelistedDomain removes a domain from the whitelist list
  rpc RemoveWhitelistedDomain(RemoveWhitelistedDomainRequest) returns (RemoveWhitelistedDomainResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/whitelisted/{domain}"};
  }

  // ListWhitelistedDomains lists all the whitelisted domains for the organization
  rpc ListWhitelistedDomains(ListWhitelistedDomainsRequest) returns (ListWhitelistedDomainsResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/whitelisted"};
  }

  // GetUser returns user by email
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {get: "/v1/users"};
  }

  // GetUsersByEmail returns users by email
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {get: "/v1/users/search"};
  }

  // SearchProjectUsers returns users who has access to to a project (including org members that have access through a usergroup)
  rpc SearchProjectUsers(SearchProjectUsersRequest) returns (SearchProjectUsersResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization}/projects/{project}/users/search"};
  }

  // ListSuperusers lists all the superusers
  rpc ListSuperusers(ListSuperusersRequest) returns (ListSuperusersResponse) {
    option (google.api.http) = {get: "/v1/superuser/members"};
  }

  // GetDeploymentCredentials returns runtime info and access token on behalf of a specific user, or alternatively for a raw set of JWT attributes
  rpc GetDeploymentCredentials(GetDeploymentCredentialsRequest) returns (GetDeploymentCredentialsResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/credentials",
      body: "*"
    };
  }

  // GetIFrame returns the iframe URL for the given project
  rpc GetIFrame(GetIFrameRequest) returns (GetIFrameResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/iframe",
      body: "*"
    };
  }

  // SetSuperuser adds/remove a superuser
  rpc SetSuperuser(SetSuperuserRequest) returns (SetSuperuserResponse) {
    option (google.api.http) = {
      post: "/v1/superuser/members",
      body: "*"
    };
  }

  // SudoGetResource returns details about a resource by ID lookup
  rpc SudoGetResource(SudoGetResourceRequest) returns (SudoGetResourceResponse) {
    option (google.api.http) = {get: "/v1/superuser/resource"};
  }

  // SudoUpdateUserQuotas update the quotas for users
  rpc SudoUpdateUserQuotas(SudoUpdateUserQuotasRequest) returns (SudoUpdateUserQuotasResponse) {
    option (google.api.http) = {
      patch: "/v1/superuser/quotas/user",
      body: "*"
    };
  }

  // SudoUpdateOrganizationQuotas update the quotas available for orgs
  rpc SudoUpdateOrganizationQuotas(SudoUpdateOrganizationQuotasRequest) returns (SudoUpdateOrganizationQuotasResponse) {
    option (google.api.http) = {
      patch: "/v1/superuser/quotas/organization",
      body: "*"
    };
  }

  // SudoUpdateAnnotations endpoint for superusers to update project annotations
  rpc SudoUpdateAnnotations(SudoUpdateAnnotationsRequest) returns (SudoUpdateAnnotationsResponse) {
    option (google.api.http) = {
      patch: "/v1/superuser/projects/annotations",
      body: "*"
    };
  }

  // ListService returns all the services per organization
  rpc ListServices(ListServicesRequest) returns (ListServicesResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/services"};
  }

  // CreateService creates a new service per organization
  rpc CreateService(CreateServiceRequest) returns (CreateServiceResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/services",
    };
  }

  // UpdateService updates a service per organization
  rpc UpdateService(UpdateServiceRequest) returns (UpdateServiceResponse) {
    option (google.api.http) = {
      patch: "/v1/organizations/{organization_name}/services/{name}",
      body: "*"
    };
  }

  // DeleteService deletes a service per organization
  rpc DeleteService(DeleteServiceRequest) returns (DeleteServiceResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization_name}/services/{name}"};
  }

   // ListServiceAuthTokens lists all the service auth tokens
  rpc ListServiceAuthTokens(ListServiceAuthTokensRequest) returns (ListServiceAuthTokensResponse) {
    option (google.api.http) = {get: "/v1/organizations/{organization_name}/services/{service_name}/tokens"};
  }

  // IssueServiceAuthToken returns the temporary token for given service account
  rpc IssueServiceAuthToken(IssueServiceAuthTokenRequest) returns (IssueServiceAuthTokenResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization_name}/services/{service_name}/tokens",
      body: "*"
    };
  }

  // RevokeServiceAuthToken revoke the service auth token
  rpc RevokeServiceAuthToken(RevokeServiceAuthTokenRequest) returns (RevokeServiceAuthTokenResponse) {
    option (google.api.http) = {delete: "/v1/services/tokens/{token_id}"};
  }

  // UpdateUserPreferences updates the preferences for the user
  rpc UpdateUserPreferences(UpdateUserPreferencesRequest) returns (UpdateUserPreferencesResponse) {
    option (google.api.http) = {
      put: "/v1/users/preferences",
      body: "*"
    };
  }

  // ListBookmarks lists all the bookmarks for the user
  rpc ListBookmarks(ListBookmarksRequest) returns (ListBookmarksResponse) {
    option (google.api.http) = {get: "/v1/users/bookmarks"};
  }

  // GetBookmark returns the bookmark for the given user for the given project
  rpc GetBookmark(GetBookmarkRequest) returns (GetBookmarkResponse) {
    option (google.api.http) = {get: "/v1/users/bookmarks/{bookmark_id}"};
  }

  // CreateBookmark creates a bookmark for the given user for the given project
  rpc CreateBookmark(CreateBookmarkRequest) returns (CreateBookmarkResponse) {
    option (google.api.http) = {
      post: "/v1/users/bookmarks",
      body: "*"
    };
  }
  
  // RemoveBookmark removes the bookmark for the given user for the given project
  rpc RemoveBookmark(RemoveBookmarkRequest) returns (RemoveBookmarkResponse) {
    option (google.api.http) = {delete: "/v1/users/bookmarks/{bookmark_id}"};
  }

  // GetRepoMeta returns credentials and other metadata for accessing a project's repo
  rpc GetRepoMeta(GetRepoMetaRequest) returns (GetRepoMetaResponse) {
    option (google.api.http) = {get: "/v1/projects/{project_id}/repo/meta"};
  }

  // PullVirtualRepo fetches files from a project's virtual repo
  rpc PullVirtualRepo(PullVirtualRepoRequest) returns (PullVirtualRepoResponse) {
    option (google.api.http) = {get: "/v1/projects/{project_id}/repo/virtual"};
  }

  // GetReportMeta returns metadata for generating a report. It's currently only called by the report reconciler in the runtime.
  rpc GetReportMeta(GetReportMetaRequest) returns (GetReportMetaResponse) {
    option (google.api.http) = {
      post: "/v1/projects/{project_id}/reports/meta",
      body: "*"
    };
  }

  // GetAlertMeta returns metadata for checking an alert. It's currently only called by the alert reconciler in the runtime.
  rpc GetAlertMeta(GetAlertMetaRequest) returns (GetAlertMetaResponse) {
    option (google.api.http) = {
      post: "/v1/projects/{project_id}/alerts/meta",
      body: "*"
    };
  }

  // CreateReport adds a virtual file for a report, triggers a reconcile, and waits for the report to be added to the runtime catalog
  rpc CreateReport(CreateReportRequest) returns (CreateReportResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/reports",
      body: "*"
    };
  }

  // EditReport edits a virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be updated in the runtime
  rpc EditReport(EditReportRequest) returns (EditReportResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization}/projects/{project}/reports/{name}",
      body: "*"
    };
  }

  // UnsubscribeReport removes the calling user from a reports recipients list
  rpc UnsubscribeReport(UnsubscribeReportRequest) returns (UnsubscribeReportResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/reports/{name}/unsubscribe",
      body: "*"
    };
  }

  // DeleteReport deletes the virtual file for a UI-managed report, triggers a reconcile, and waits for the report to be deleted in the runtime
  rpc DeleteReport(DeleteReportRequest) returns (DeleteReportResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/projects/{project}/reports/{name}"};
  }

  // TriggerReport triggers an ad-hoc report run
  rpc TriggerReport(TriggerReportRequest) returns (TriggerReportResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/reports/{name}/trigger",
      body: "*"
    };
  }

  // GenerateReportYAML generates YAML for a scheduled report to be copied into a project's Git repository
  rpc GenerateReportYAML(GenerateReportYAMLRequest) returns (GenerateReportYAMLResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/reports/-/yaml",
      body: "*"
    };
  }

  // CreateAlert adds a virtual file for an alert, triggers a reconcile, and waits for the alert to be added to the runtime catalog
  rpc CreateAlert(CreateAlertRequest) returns (CreateAlertResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/alerts",
      body: "*"
    };
  }

  // EditAlert edits a virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be updated in the runtime
  rpc EditAlert(EditAlertRequest) returns (EditAlertResponse) {
    option (google.api.http) = {
      put: "/v1/organizations/{organization}/projects/{project}/alerts/{name}",
      body: "*"
    };
  }

  // UnsubscribeAlert removes the calling user from a alert's recipients list
  rpc UnsubscribeAlert(UnsubscribeAlertRequest) returns (UnsubscribeAlertResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/alerts/{name}/unsubscribe",
      body: "*"
    };
  }

  // DeleteAlert deletes the virtual file for a UI-managed alert, triggers a reconcile, and waits for the alert to be deleted in the runtime
  rpc DeleteAlert(DeleteAlertRequest) returns (DeleteAlertResponse) {
    option (google.api.http) = {delete: "/v1/organizations/{organization}/projects/{project}/alerts/{name}"};
  }

  // GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
  rpc GenerateAlertYAML(GenerateAlertYAMLRequest) returns (GenerateAlertYAMLResponse) {
    option (google.api.http) = {
      post: "/v1/organizations/{organization}/projects/{project}/alerts/-/yaml",
      body: "*"
    };
  }

  // GenerateAlertYAML generates YAML for an alert to be copied into a project's Git repository
  rpc GetAlertYAML(GetAlertYAMLRequest) returns (GetAlertYAMLResponse) {
    option (google.api.http) = {
      get: "/v1/organizations/{organization}/projects/{project}/alerts/{name}/yaml",
    };
  }

  // Telemetry sends telemetry data to the server
  rpc Telemetry(TelemetryRequest) returns (TelemetryResponse) {
    option (google.api.http) = {
      post: "/v1/telemetry",
      body: "*"
    };
  }
}

message PingRequest {}

message PingResponse {
  string version = 1;
  google.protobuf.Timestamp time = 2;
}

message ListOrganizationsRequest {
  uint32 page_size = 1 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 2;
}

message ListOrganizationsResponse {
  repeated Organization organizations = 1;
  string next_page_token = 2;
}

message GetOrganizationRequest {
  string name = 1;
}

message GetOrganizationResponse {
  Organization organization = 1;
  OrganizationPermissions permissions = 2;
}

message CreateOrganizationRequest {
  string name = 2 [(validate.rules).string.min_len = 1];
  string description = 3;
}

message CreateOrganizationResponse {
  Organization organization = 1;
}

message DeleteOrganizationRequest {
  string name = 1;
}

message DeleteOrganizationResponse {}

message UpdateOrganizationRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  optional string description = 2;
  optional string new_name = 3;
}

message UpdateOrganizationResponse {
  Organization organization = 1;
}

message ListProjectsForOrganizationRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  uint32 page_size = 2 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 3;
}

message ListProjectsForOrganizationResponse {
  repeated Project projects = 1;
  string next_page_token = 2;
}

message GetProjectRequest {
  string organization_name = 1;
  string name = 2;
}

message GetProjectResponse {
  Project project = 1;
  Deployment prod_deployment = 2;
  string jwt = 3;
  ProjectPermissions project_permissions = 4;
}

message SearchProjectNamesRequest {
  string name_pattern = 1;
  map<string, string> annotations = 5;
  uint32 page_size = 2 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 3;
}

message SearchProjectNamesResponse {
  repeated string names = 1;
  string next_page_token = 2;
}

message GetProjectVariablesRequest {
  string organization_name = 1;
  string name = 2;
}

message GetProjectVariablesResponse {
  map<string, string> variables = 1;
}

message SearchProjectUsersRequest {
  string organization = 1;
  string project = 2;
  string email_query = 3;
  uint32 page_size = 4 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 5;
}

message SearchProjectUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

message GetDeploymentCredentialsRequest {
  string organization = 1;
  string project = 2;
  string branch = 3;
  uint32 ttl_seconds = 7;
  oneof for {
    string user_id = 4;
    string user_email = 6 [(validate.rules).string.email = true];
    google.protobuf.Struct attributes = 5;
  }
}

message GetDeploymentCredentialsResponse {
  string runtime_host = 1;
  string instance_id = 2;
  string access_token = 3;
  uint32 ttl_seconds = 4;
}

message GetIFrameRequest {
  string organization = 1;
  string project = 2;
  string branch = 3;
  string kind = 4;
  string resource = 5;
  uint32 ttl_seconds = 6;
  string state = 7;
  map<string, string> query = 8;
  oneof for {
    string user_id = 9;
    string user_email = 10 [(validate.rules).string.email = true];
    google.protobuf.Struct attributes = 11;
  }
}

message GetIFrameResponse {
  string iframe_src = 1;
  string runtime_host = 2;
  string instance_id = 3;
  string access_token = 4;
  uint32 ttl_seconds = 5;
}

message ListServicesRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
}

message ListServicesResponse {
  repeated Service services = 1;
}

message CreateServiceRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string organization_name = 2 [(validate.rules).string.min_len = 1];
}

message CreateServiceResponse {
  Service service = 1;
}

message UpdateServiceRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string organization_name = 2 [(validate.rules).string.min_len = 1];
  optional string new_name = 3;
}

message UpdateServiceResponse {
  Service service = 1;
}

message DeleteServiceRequest {
  string name = 1 [(validate.rules).string.min_len = 1];
  string organization_name = 2 [(validate.rules).string.min_len = 1];
}

message DeleteServiceResponse {
  Service service = 1;
}

message CreateProjectRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  string name = 2 [(validate.rules).string.min_len = 1];
  string description = 3;
  bool public = 4;
  string region = 5;
  string prod_olap_driver = 6;
  string prod_olap_dsn = 7;
  int64 prod_slots = 8;
  string subpath = 12;
  string prod_branch = 9;
  string github_url = 10;
  map<string, string> variables = 11;
}

message CreateProjectResponse {
  Project project = 1;
}

message DeleteProjectRequest {
  string organization_name = 1;
  string name = 2;
}

message DeleteProjectResponse {}

message UpdateProjectRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  string name = 2 [(validate.rules).string.min_len = 1];
  optional string description = 3;
  optional bool public = 4;
  optional string prod_branch = 5;
  optional string github_url = 6;
  optional int64 prod_slots = 7;
  optional string region = 8;
  optional string new_name = 9;
  optional int64 prod_ttl_seconds = 10;
}

message UpdateProjectResponse {
  Project project = 1;
}

message UpdateProjectVariablesRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  string name = 2 [(validate.rules).string.min_len = 1];
  map<string, string> variables = 3;
}

message UpdateProjectVariablesResponse {
  map<string, string> variables = 1;
}

message TriggerReconcileRequest {
  string deployment_id = 1;
}

message TriggerReconcileResponse {}

message TriggerRefreshSourcesRequest {
  string deployment_id = 1;
  repeated string sources = 2;
}

message TriggerRefreshSourcesResponse {}

message TriggerRedeployRequest {
  // It's sufficient to pass org/project name OR deployment_id.
  // (To enable rehydrating hibernated projects.)
  string organization = 2;
  string project = 3;
  string deployment_id = 1;
}

message TriggerRedeployResponse {}

message ListOrganizationMembersRequest {
  string organization = 1;
  uint32 page_size = 2 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 3;
}

message ListOrganizationMembersResponse {
  repeated Member members = 1;
  string next_page_token = 2;
}

message ListOrganizationInvitesRequest {
  string organization = 1;
  uint32 page_size = 2 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 3;
}

message ListOrganizationInvitesResponse {
  repeated UserInvite invites = 1;
  string next_page_token = 2;
}

message AddOrganizationMemberRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string email = 2 [(validate.rules).string.email = true];
  string role = 3;
}

message AddOrganizationMemberResponse {
  bool pending_signup = 1;
}

message RemoveOrganizationMemberRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string email = 2 [(validate.rules).string.email = true];
  bool keep_project_roles = 3;
}

message RemoveOrganizationMemberResponse {}

message LeaveOrganizationRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
}

message LeaveOrganizationResponse {}

message SetOrganizationMemberRoleRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string email = 2 [(validate.rules).string.email = true];
  string role = 3 [(validate.rules).string.min_len = 1];
}

message SetOrganizationMemberRoleResponse {}

message ListSuperusersRequest {}

message ListSuperusersResponse {
  repeated User users = 1;
}

message SetSuperuserRequest {
  string email = 1 [(validate.rules).string.email = true];
  bool superuser = 2;
}

message SetSuperuserResponse {}

message SudoGetResourceRequest {
  oneof id {
    string user_id = 1;
    string org_id = 2;
    string project_id = 3;
    string deployment_id = 4;
    string instance_id = 5;
  }
}

message SudoGetResourceResponse {
  oneof resource {
    User user = 1;
    Organization org = 2;
    Project project = 3;
    Deployment deployment = 4;
    Deployment instance = 5;
  }
}

message SudoUpdateOrganizationQuotasRequest {
  string org_name = 1;
  optional uint32 projects = 2;
  optional uint32 deployments = 3;
  optional uint32 slots_total = 4;
  optional uint32 slots_per_deployment = 5;
  optional uint32 outstanding_invites = 6;
}

message SudoUpdateOrganizationQuotasResponse {
  Organization organization = 1;
}

message SudoUpdateUserQuotasRequest {
  string email = 1;
  optional uint32 singleuser_orgs = 2;
}

message SudoUpdateUserQuotasResponse {
  User user = 1;
}

message SudoUpdateAnnotationsRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  map<string, string> annotations = 3;
}

message SudoUpdateAnnotationsResponse {
  Project project = 1;
}

message ListProjectMembersRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 4 ;
}

message ListProjectMembersResponse {
  repeated Member members = 1;
  string next_page_token = 2;
}

message ListProjectInvitesRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 4;
}

message ListProjectInvitesResponse {
  repeated UserInvite invites = 1;
  string next_page_token = 2;
}

message AddProjectMemberRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  string email = 3 [(validate.rules).string.email = true];
  string role = 4 [(validate.rules).string.min_len = 1];
}

message AddProjectMemberResponse {
  bool pending_signup = 1;
}

message RemoveProjectMemberRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  string email = 3 [(validate.rules).string.email = true];
}

message RemoveProjectMemberResponse {}

message SetProjectMemberRoleRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
  string email = 3 [(validate.rules).string.email = true];
  string role = 4 [(validate.rules).string.min_len = 1];
}

message SetProjectMemberRoleResponse {}

message GetCurrentUserRequest {}

message GetCurrentUserResponse {
  User user = 1;
  UserPreferences preferences = 2;
}

message GetUserRequest {
  string email = 1 [(validate.rules).string.email = true];
}

message GetUserResponse {
  User user = 1;
}

message UserPreferences {
  optional string time_zone = 1;
}

message UpdateUserPreferencesRequest {
    UserPreferences preferences = 1;
}

message UpdateUserPreferencesResponse {
    UserPreferences preferences = 1;
}

message ListBookmarksRequest {
    string project_id = 1;
}

message ListBookmarksResponse {
    repeated Bookmark bookmarks = 1;
}

message GetBookmarkRequest {
    string bookmark_id = 1;
}

message GetBookmarkResponse {
    Bookmark bookmark = 1;
}

message CreateBookmarkRequest {
  string display_name = 1;
  bytes data = 2;
  string dashboard_name = 3;
  string project_id = 4;
}

message CreateBookmarkResponse {
  Bookmark bookmark = 1;
}

message RemoveBookmarkRequest {
    string bookmark_id = 1;
}

message RemoveBookmarkResponse {}

message SearchUsersRequest {
  string email_pattern = 1 [(validate.rules).string.min_len = 1];
  uint32 page_size = 2 [(validate.rules).uint32 = {ignore_empty: true, lte: 1000}];
  string page_token = 3;
}

message SearchUsersResponse {
  repeated User users = 1;
  string next_page_token = 2;
}

message RevokeCurrentAuthTokenRequest {}

message RevokeCurrentAuthTokenResponse {
  string token_id = 1;
}

message IssueRepresentativeAuthTokenRequest {
  string email = 1 [(validate.rules).string.email = true];
  int64 ttl_minutes = 2;
}

message IssueRepresentativeAuthTokenResponse {
  string token = 1;
}

message RevokeServiceAuthTokenRequest {
  string token_id = 1;
}

message RevokeServiceAuthTokenResponse {}

message IssueServiceAuthTokenRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  string service_name = 2;
}

message IssueServiceAuthTokenResponse {
  string token = 1;
}

message ListServiceAuthTokensRequest {
  string organization_name = 1 [(validate.rules).string.min_len = 1];
  string service_name = 2;
}

message ListServiceAuthTokensResponse {
  repeated ServiceToken tokens = 1;
}

message GetGithubRepoStatusRequest {
  string github_url = 1;
}

message GetGithubRepoStatusResponse {
  bool has_access = 1;
  string grant_access_url = 2;
  string default_branch = 3;
}

message GetGitCredentialsRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string project = 2 [(validate.rules).string.min_len = 1];
}

message GetGitCredentialsResponse {
  string repo_url = 1;
  string username = 2;
  string password = 3;
  string subpath = 4;
  string prod_branch = 5;
}

message CreateWhitelistedDomainRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string domain = 2 [(validate.rules).string.min_len = 1];
  string role = 3 [(validate.rules).string.min_len = 1];
}

message CreateWhitelistedDomainResponse {}

message RemoveWhitelistedDomainRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
  string domain = 2 [(validate.rules).string.min_len = 1];
}

message RemoveWhitelistedDomainResponse {}

message ListWhitelistedDomainsRequest {
  string organization = 1 [(validate.rules).string.min_len = 1];
}

message ListWhitelistedDomainsResponse {
  repeated WhitelistedDomain domains = 1;
}

message GetRepoMetaRequest {
  string project_id = 1;
  string branch = 2;
}

message GetRepoMetaResponse {
  string git_url = 1;
  google.protobuf.Timestamp git_url_expires_on = 2;
  string git_subpath = 3;
}

message PullVirtualRepoRequest {
  string project_id = 1;
  string branch = 2;
  uint32 page_size = 3 [(validate.rules).uint32 = {ignore_empty: true, lte: 100}];
  string page_token = 4;
}

message PullVirtualRepoResponse {
  repeated VirtualFile files = 1;
  string next_page_token = 2;
}

message GetReportMetaRequest {
  string project_id = 1;
  string branch = 2;
  string report = 3;
  map<string, string> annotations = 4;
  google.protobuf.Timestamp execution_time = 5;
}

message GetReportMetaResponse {
  string open_url = 1;
  string export_url = 2;
  string edit_url = 3;
}

message GetAlertMetaRequest {
  string project_id = 1;
  string branch = 2;
  string alert = 3;
  map<string, string> annotations = 4;
  oneof query_for {
    string query_for_user_id = 5;
    string query_for_user_email = 6;
  }
}

message GetAlertMetaResponse {
  string open_url = 1;
  string edit_url = 2;
  google.protobuf.Struct query_for_attributes = 3;
}

message CreateReportRequest {
  string organization = 1;
  string project = 2;
  ReportOptions options = 3 [(validate.rules).message.required = true];
}

message CreateReportResponse {
  string name = 1;
}

message EditReportRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
  ReportOptions options = 4 [(validate.rules).message.required = true];
}

message EditReportResponse {
}

message UnsubscribeReportRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
}

message UnsubscribeReportResponse {}

message DeleteReportRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
}

message DeleteReportResponse {
}

message TriggerReportRequest { 
  string organization = 1;
  string project = 2;
  string name = 3;
}

message TriggerReportResponse {}

message GenerateReportYAMLRequest {
  string organization = 1;
  string project = 2;
  ReportOptions options = 3 [(validate.rules).message.required = true];
}

message GenerateReportYAMLResponse {
  string yaml = 1;
}

message CreateAlertRequest {
  string organization = 1;
  string project = 2;
  AlertOptions options = 3 [(validate.rules).message.required = true];
}

message CreateAlertResponse {
  string name = 1;
}

message EditAlertRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
  AlertOptions options = 4 [(validate.rules).message.required = true];
}

message EditAlertResponse {
}

message UnsubscribeAlertRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
}

message UnsubscribeAlertResponse {}

message DeleteAlertRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
}

message DeleteAlertResponse {
}

message GenerateAlertYAMLRequest {
  string organization = 1;
  string project = 2;
  AlertOptions options = 3 [(validate.rules).message.required = true];
}

message GenerateAlertYAMLResponse {
  string yaml = 1;
}

message GetAlertYAMLRequest {
  string organization = 1;
  string project = 2;
  string name = 3;
}

message GetAlertYAMLResponse {
  string yaml = 1;
}

message TelemetryRequest {
  // Name passed to activity module's name arg
  string name = 1;
  // Value passed to activity module's value arg
  float value = 2;
  // Free form struct of the actual event
  google.protobuf.Struct event = 3;
}

message TelemetryResponse {}

message User {
  string id = 1;
  string email = 2;
  string display_name = 3;
  string photo_url = 4;
  UserQuotas quotas = 5;
  google.protobuf.Timestamp created_on = 6;
  google.protobuf.Timestamp updated_on = 7;
}

message Service {
  string id = 1;
  string name = 2;
  string org_id = 3;
  string org_name = 4;
  google.protobuf.Timestamp created_on = 5;
  google.protobuf.Timestamp updated_on = 6;
}

message Organization {
  string id = 1;
  string name = 2; // Globally unique
  string description = 3;
  OrganizationQuotas quotas = 4;
  google.protobuf.Timestamp created_on = 5;
  google.protobuf.Timestamp updated_on = 6;
}

message UserQuotas {
  uint32 singleuser_orgs = 1;
}

message OrganizationQuotas {
  uint32 projects = 1;
  uint32 deployments = 2;
  uint32 slots_total = 3;
  uint32 slots_per_deployment = 4;
  uint32 outstanding_invites = 5;
}

message Project {
  string id = 1;
  string name = 2; // Unique in organization
  string org_id = 3;
  string org_name = 4;
  string description = 5;
  bool public = 6;
  string region = 7;
  string github_url = 8;
  string subpath = 17;
  string prod_branch = 9;
  string prod_olap_driver = 10;
  string prod_olap_dsn = 11;
  int64 prod_slots = 12;
  string prod_deployment_id = 13;
  string frontend_url = 16;
  int64 prod_ttl_seconds = 18;
  map<string, string> annotations = 20;
  google.protobuf.Timestamp created_on = 14;
  google.protobuf.Timestamp updated_on = 15;
}

enum DeploymentStatus {
  DEPLOYMENT_STATUS_UNSPECIFIED = 0;
  DEPLOYMENT_STATUS_PENDING = 1;
  DEPLOYMENT_STATUS_OK = 2;
  DEPLOYMENT_STATUS_ERROR = 4;
}

message Deployment {
  string id = 1;
  string project_id = 2;
  int64 slots = 3;
  string branch = 4;
  string runtime_host = 5;
  string runtime_instance_id = 6;
  DeploymentStatus status = 7;
  string status_message = 8;
  google.protobuf.Timestamp created_on = 9;
  google.protobuf.Timestamp updated_on = 10;
}

message OrganizationPermissions {
  bool read_org = 1;
  bool manage_org = 2;
  bool read_projects = 3;
  bool create_projects = 4;
  bool manage_projects = 5;
  bool read_org_members = 6;
  bool manage_org_members = 7;
}

message ProjectPermissions {
  bool read_project = 1;
  bool manage_project = 2;
  bool read_prod = 3;
  bool read_prod_status = 4;
  bool manage_prod = 5;
  bool read_dev = 6;
  bool read_dev_status = 7;
  bool manage_dev = 8;
  bool read_project_members = 9;
  bool manage_project_members = 10;
  bool create_reports = 11;
  bool manage_reports = 12;
  bool create_alerts = 13;
  bool manage_alerts = 14;
}

message Member {
  string user_id = 1;
  string user_email = 3;
  string user_name = 2;
  string role_name = 4;
  google.protobuf.Timestamp created_on = 5;
  google.protobuf.Timestamp updated_on = 6;
}

message UserInvite {
  string email = 1;
  string role = 2;
  string invited_by = 3;
}

message WhitelistedDomain {
  string domain = 1;
  string role = 2;
}

message Bookmark {
  string id = 1;
  string display_name = 2;
  bytes data = 3;
  string dashboard_name = 4;
  string project_id = 5;
  string user_id = 6;
  google.protobuf.Timestamp created_on = 7;
  google.protobuf.Timestamp updated_on = 8;
}

message ServiceToken {
  string id = 1;
  google.protobuf.Timestamp created_on = 2;
  google.protobuf.Timestamp expires_on = 3;
}

message VirtualFile {
  string path = 1;
  bytes data = 2;
  bool deleted = 3;
  google.protobuf.Timestamp updated_on = 4;
}

message ReportOptions {
  string title = 1;
  string refresh_cron = 2;
  string refresh_time_zone = 9;
  string query_name = 3;
  string query_args_json = 4;
  uint64 export_limit = 5;
  rill.runtime.v1.ExportFormat export_format = 6;
  string open_project_subpath = 7;
  repeated string recipients = 8;
}

message AlertOptions {
  string title = 1;
  string interval_duration = 2;
  string query_name = 3;
  string query_args_json = 4;
  string metrics_view_name = 5;
  repeated string recipients = 6;
  bool email_renotify = 7;
  uint32 email_renotify_after_seconds = 8;
}
