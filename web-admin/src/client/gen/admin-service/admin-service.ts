/**
 * Generated by orval v6.10.1 🍺
 * Do not edit manually.
 * rill/admin/v1/api.proto
 * OpenAPI spec version: version not set
 */
import { useQuery, useMutation } from "@sveltestack/svelte-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryStoreResult,
  QueryKey,
} from "@sveltestack/svelte-query";
import type {
  V1FindOrganizationsResponse,
  RpcStatus,
  AdminServiceFindOrganizationsParams,
  V1CreateOrganizationResponse,
  V1CreateOrganizationRequest,
  V1FindOrganizationResponse,
  V1DeleteOrganizationResponse,
  V1UpdateOrganizationResponse,
  AdminServiceUpdateOrganizationBodyBody,
  V1FindProjectsResponse,
  AdminServiceFindProjectsParams,
  V1CreateProjectResponse,
  AdminServiceCreateProjectBody,
  V1FindProjectResponse,
  V1DeleteProjectResponse,
  V1UpdateProjectResponse,
  V1PingResponse,
} from "../index.schemas";
import { httpClient } from "../../http-client";

/**
 * @summary findOrganizations lists all the organizations currently managed by the admin
 */
export const adminServiceFindOrganizations = (
  params?: AdminServiceFindOrganizationsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1FindOrganizationsResponse>({
    url: `/v1/organizations`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceFindOrganizationsQueryKey = (
  params?: AdminServiceFindOrganizationsParams
) => [`/v1/organizations`, ...(params ? [params] : [])];

export type AdminServiceFindOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceFindOrganizations>>
>;
export type AdminServiceFindOrganizationsQueryError = RpcStatus;

export const useAdminServiceFindOrganizations = <
  TData = Awaited<ReturnType<typeof adminServiceFindOrganizations>>,
  TError = RpcStatus
>(
  params?: AdminServiceFindOrganizationsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminServiceFindOrganizations>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof adminServiceFindOrganizations>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceFindOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceFindOrganizations>>
  > = ({ signal }) => adminServiceFindOrganizations(params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof adminServiceFindOrganizations>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryStoreResult<
    Awaited<ReturnType<typeof adminServiceFindOrganizations>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary CreateOrganization creates a new organization
 */
export const adminServiceCreateOrganization = (
  v1CreateOrganizationRequest: V1CreateOrganizationRequest
) => {
  return httpClient<V1CreateOrganizationResponse>({
    url: `/v1/organizations`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1CreateOrganizationRequest,
  });
};

export type AdminServiceCreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>
>;
export type AdminServiceCreateOrganizationMutationBody =
  V1CreateOrganizationRequest;
export type AdminServiceCreateOrganizationMutationError = RpcStatus;

export const useAdminServiceCreateOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    TError,
    { data: V1CreateOrganizationRequest },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    { data: V1CreateOrganizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceCreateOrganization(data);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    TError,
    { data: V1CreateOrganizationRequest },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary FindOrganization returns information about a specific organization
 */
export const adminServiceFindOrganization = (
  name: string,
  signal?: AbortSignal
) => {
  return httpClient<V1FindOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "get",
    signal,
  });
};

export const getAdminServiceFindOrganizationQueryKey = (name: string) => [
  `/v1/organizations/${name}`,
];

export type AdminServiceFindOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceFindOrganization>>
>;
export type AdminServiceFindOrganizationQueryError = RpcStatus;

export const useAdminServiceFindOrganization = <
  TData = Awaited<ReturnType<typeof adminServiceFindOrganization>>,
  TError = RpcStatus
>(
  name: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminServiceFindOrganization>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof adminServiceFindOrganization>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceFindOrganizationQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceFindOrganization>>
  > = ({ signal }) => adminServiceFindOrganization(name, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof adminServiceFindOrganization>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!name,
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof adminServiceFindOrganization>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary DeleteOrganization deletes an organizations
 */
export const adminServiceDeleteOrganization = (name: string) => {
  return httpClient<V1DeleteOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "delete",
  });
};

export type AdminServiceDeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>
>;

export type AdminServiceDeleteOrganizationMutationError = RpcStatus;

export const useAdminServiceDeleteOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    TError,
    { name: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return adminServiceDeleteOrganization(name);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    TError,
    { name: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary UpdateOrganization deletes an organizations
 */
export const adminServiceUpdateOrganization = (
  name: string,
  adminServiceUpdateOrganizationBodyBody: AdminServiceUpdateOrganizationBodyBody
) => {
  return httpClient<V1UpdateOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateOrganizationBodyBody,
  });
};

export type AdminServiceUpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>
>;
export type AdminServiceUpdateOrganizationMutationBody =
  AdminServiceUpdateOrganizationBodyBody;
export type AdminServiceUpdateOrganizationMutationError = RpcStatus;

export const useAdminServiceUpdateOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    TError,
    { name: string; data: AdminServiceUpdateOrganizationBodyBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    { name: string; data: AdminServiceUpdateOrganizationBodyBody }
  > = (props) => {
    const { name, data } = props ?? {};

    return adminServiceUpdateOrganization(name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    TError,
    { name: string; data: AdminServiceUpdateOrganizationBodyBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary FindProjects lists all the projects currently available for given organizations
 */
export const adminServiceFindProjects = (
  organization: string,
  params?: AdminServiceFindProjectsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1FindProjectsResponse>({
    url: `/v1/organizations/${organization}/projects`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceFindProjectsQueryKey = (
  organization: string,
  params?: AdminServiceFindProjectsParams
) => [
  `/v1/organizations/${organization}/projects`,
  ...(params ? [params] : []),
];

export type AdminServiceFindProjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceFindProjects>>
>;
export type AdminServiceFindProjectsQueryError = RpcStatus;

export const useAdminServiceFindProjects = <
  TData = Awaited<ReturnType<typeof adminServiceFindProjects>>,
  TError = RpcStatus
>(
  organization: string,
  params?: AdminServiceFindProjectsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminServiceFindProjects>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof adminServiceFindProjects>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceFindProjectsQueryKey(organization, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceFindProjects>>
  > = ({ signal }) => adminServiceFindProjects(organization, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof adminServiceFindProjects>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!organization,
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof adminServiceFindProjects>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary CreateProject creates a new project
 */
export const adminServiceCreateProject = (
  organization: string,
  adminServiceCreateProjectBody: AdminServiceCreateProjectBody
) => {
  return httpClient<V1CreateProjectResponse>({
    url: `/v1/organizations/${organization}/projects`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceCreateProjectBody,
  });
};

export type AdminServiceCreateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateProject>>
>;
export type AdminServiceCreateProjectMutationBody =
  AdminServiceCreateProjectBody;
export type AdminServiceCreateProjectMutationError = RpcStatus;

export const useAdminServiceCreateProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    TError,
    { organization: string; data: AdminServiceCreateProjectBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    { organization: string; data: AdminServiceCreateProjectBody }
  > = (props) => {
    const { organization, data } = props ?? {};

    return adminServiceCreateProject(organization, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    TError,
    { organization: string; data: AdminServiceCreateProjectBody },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary FindProject returns information about a specific project
 */
export const adminServiceFindProject = (
  organization: string,
  name: string,
  signal?: AbortSignal
) => {
  return httpClient<V1FindProjectResponse>({
    url: `/v1/organizations/${organization}/projects/${name}`,
    method: "get",
    signal,
  });
};

export const getAdminServiceFindProjectQueryKey = (
  organization: string,
  name: string
) => [`/v1/organizations/${organization}/projects/${name}`];

export type AdminServiceFindProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceFindProject>>
>;
export type AdminServiceFindProjectQueryError = RpcStatus;

export const useAdminServiceFindProject = <
  TData = Awaited<ReturnType<typeof adminServiceFindProject>>,
  TError = RpcStatus
>(
  organization: string,
  name: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof adminServiceFindProject>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof adminServiceFindProject>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceFindProjectQueryKey(organization, name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceFindProject>>
  > = ({ signal }) => adminServiceFindProject(organization, name, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof adminServiceFindProject>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(organization && name),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof adminServiceFindProject>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary DeleteProject deletes an project
 */
export const adminServiceDeleteProject = (
  organization: string,
  name: string
) => {
  return httpClient<V1DeleteProjectResponse>({
    url: `/v1/organizations/${organization}/projects/${name}`,
    method: "delete",
  });
};

export type AdminServiceDeleteProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>
>;

export type AdminServiceDeleteProjectMutationError = RpcStatus;

export const useAdminServiceDeleteProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    TError,
    { organization: string; name: string },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    { organization: string; name: string }
  > = (props) => {
    const { organization, name } = props ?? {};

    return adminServiceDeleteProject(organization, name);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    TError,
    { organization: string; name: string },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary UpdateProject update a project
 */
export const adminServiceUpdateProject = (
  organization: string,
  name: string,
  adminServiceUpdateOrganizationBodyBody: AdminServiceUpdateOrganizationBodyBody
) => {
  return httpClient<V1UpdateProjectResponse>({
    url: `/v1/organizations/${organization}/projects/${name}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateOrganizationBodyBody,
  });
};

export type AdminServiceUpdateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>
>;
export type AdminServiceUpdateProjectMutationBody =
  AdminServiceUpdateOrganizationBodyBody;
export type AdminServiceUpdateProjectMutationError = RpcStatus;

export const useAdminServiceUpdateProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    TError,
    {
      organization: string;
      name: string;
      data: AdminServiceUpdateOrganizationBodyBody;
    },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    {
      organization: string;
      name: string;
      data: AdminServiceUpdateOrganizationBodyBody;
    }
  > = (props) => {
    const { organization, name, data } = props ?? {};

    return adminServiceUpdateProject(organization, name, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    TError,
    {
      organization: string;
      name: string;
      data: AdminServiceUpdateOrganizationBodyBody;
    },
    TContext
  >(mutationFn, mutationOptions);
};
/**
 * @summary Ping returns information about the admin
 */
export const adminServicePing = (signal?: AbortSignal) => {
  return httpClient<V1PingResponse>({ url: `/v1/ping`, method: "get", signal });
};

export const getAdminServicePingQueryKey = () => [`/v1/ping`];

export type AdminServicePingQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServicePing>>
>;
export type AdminServicePingQueryError = RpcStatus;

export const useAdminServicePing = <
  TData = Awaited<ReturnType<typeof adminServicePing>>,
  TError = RpcStatus
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof adminServicePing>>,
    TError,
    TData
  >;
}): UseQueryStoreResult<
  Awaited<ReturnType<typeof adminServicePing>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminServicePingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServicePing>>
  > = ({ signal }) => adminServicePing(signal);

  const query = useQuery<
    Awaited<ReturnType<typeof adminServicePing>>,
    TError,
    TData
  >(queryKey, queryFn, queryOptions) as UseQueryStoreResult<
    Awaited<ReturnType<typeof adminServicePing>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
