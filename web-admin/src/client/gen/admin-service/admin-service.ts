/**
 * Generated by orval v6.16.0 🍺
 * Do not edit manually.
 * rill/admin/v1/api.proto
 * OpenAPI spec version: version not set
 */
import { createQuery, createMutation } from "@tanstack/svelte-query";
import type {
  CreateQueryOptions,
  CreateMutationOptions,
  QueryFunction,
  MutationFunction,
  CreateQueryResult,
  QueryKey,
} from "@tanstack/svelte-query";
import type {
  V1TriggerReconcileResponse,
  RpcStatus,
  AdminServiceTriggerReconcileBodyBody,
  V1TriggerRefreshSourcesResponse,
  AdminServiceTriggerRefreshSourcesBody,
  V1GetGithubRepoStatusResponse,
  AdminServiceGetGithubRepoStatusParams,
  V1ListOrganizationsResponse,
  AdminServiceListOrganizationsParams,
  V1CreateOrganizationResponse,
  V1CreateOrganizationRequest,
  V1GetOrganizationResponse,
  V1DeleteOrganizationResponse,
  V1UpdateOrganizationResponse,
  AdminServiceUpdateOrganizationBody,
  V1ListOrganizationInvitesResponse,
  AdminServiceListOrganizationInvitesParams,
  V1ListOrganizationMembersResponse,
  AdminServiceListOrganizationMembersParams,
  V1AddOrganizationMemberResponse,
  AdminServiceAddOrganizationMemberBodyBody,
  V1RemoveOrganizationMemberResponse,
  AdminServiceRemoveOrganizationMemberParams,
  V1SetOrganizationMemberRoleResponse,
  AdminServiceSetOrganizationMemberRoleBodyBody,
  V1LeaveOrganizationResponse,
  V1GetGitCredentialsResponse,
  V1ListProjectInvitesResponse,
  AdminServiceListProjectInvitesParams,
  V1ListProjectMembersResponse,
  AdminServiceListProjectMembersParams,
  V1AddProjectMemberResponse,
  V1RemoveProjectMemberResponse,
  V1SetProjectMemberRoleResponse,
  V1ListWhitelistedDomainsResponse,
  V1CreateWhitelistedDomainResponse,
  AdminServiceCreateWhitelistedDomainBody,
  V1RemoveWhitelistedDomainResponse,
  V1ListProjectsForOrganizationResponse,
  AdminServiceListProjectsForOrganizationParams,
  V1CreateProjectResponse,
  AdminServiceCreateProjectBody,
  V1GetProjectResponse,
  V1DeleteProjectResponse,
  V1UpdateProjectResponse,
  AdminServiceUpdateProjectBody,
  V1GetProjectVariablesResponse,
  V1UpdateProjectVariablesResponse,
  AdminServiceUpdateProjectVariablesBody,
  V1ListServicesResponse,
  V1CreateServiceResponse,
  AdminServiceCreateServiceParams,
  V1DeleteServiceResponse,
  V1UpdateServiceResponse,
  AdminServiceUpdateServiceBody,
  V1ListServiceAuthTokensResponse,
  V1IssueServiceAuthTokenResponse,
  V1PingResponse,
  V1TriggerRedeployResponse,
  V1TriggerRedeployRequest,
  V1RevokeServiceAuthTokenResponse,
  V1ListSuperusersResponse,
  V1SetSuperuserResponse,
  V1SetSuperuserRequest,
  V1SearchProjectNamesResponse,
  AdminServiceSearchProjectNamesParams,
  V1SudoUpdateOrganizationQuotasResponse,
  V1SudoUpdateOrganizationQuotasRequest,
  V1SudoUpdateUserQuotasResponse,
  V1SudoUpdateUserQuotasRequest,
  V1SudoGetResourceResponse,
  AdminServiceSudoGetResourceParams,
  V1RevokeCurrentAuthTokenResponse,
  V1IssueRepresentativeAuthTokenResponse,
  V1IssueRepresentativeAuthTokenRequest,
  V1GetUserResponse,
  AdminServiceGetUserParams,
  V1ListBookmarksResponse,
  AdminServiceListBookmarksParams,
  V1CreateBookmarkResponse,
  V1CreateBookmarkRequest,
  V1GetBookmarkResponse,
  V1RemoveBookmarkResponse,
  V1GetCurrentUserResponse,
  V1UpdateUserPreferencesResponse,
  V1UpdateUserPreferencesRequest,
  V1SearchUsersResponse,
  AdminServiceSearchUsersParams,
} from "../index.schemas";
import { httpClient } from "../../http-client";

/**
 * @summary TriggerReconcile triggers reconcile for the project's prod deployment
 */
export const adminServiceTriggerReconcile = (
  deploymentId: string,
  adminServiceTriggerReconcileBodyBody: AdminServiceTriggerReconcileBodyBody
) => {
  return httpClient<V1TriggerReconcileResponse>({
    url: `/v1/deployments/${deploymentId}/reconcile`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceTriggerReconcileBodyBody,
  });
};

export const getAdminServiceTriggerReconcileMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerReconcile>>,
    TError,
    { deploymentId: string; data: AdminServiceTriggerReconcileBodyBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceTriggerReconcile>>,
  TError,
  { deploymentId: string; data: AdminServiceTriggerReconcileBodyBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceTriggerReconcile>>,
    { deploymentId: string; data: AdminServiceTriggerReconcileBodyBody }
  > = (props) => {
    const { deploymentId, data } = props ?? {};

    return adminServiceTriggerReconcile(deploymentId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceTriggerReconcileMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceTriggerReconcile>>
>;
export type AdminServiceTriggerReconcileMutationBody =
  AdminServiceTriggerReconcileBodyBody;
export type AdminServiceTriggerReconcileMutationError = RpcStatus;

/**
 * @summary TriggerReconcile triggers reconcile for the project's prod deployment
 */
export const createAdminServiceTriggerReconcile = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerReconcile>>,
    TError,
    { deploymentId: string; data: AdminServiceTriggerReconcileBodyBody },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceTriggerReconcileMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary TriggerRefreshSources refresh the source for production deployment
 */
export const adminServiceTriggerRefreshSources = (
  deploymentId: string,
  adminServiceTriggerRefreshSourcesBody: AdminServiceTriggerRefreshSourcesBody
) => {
  return httpClient<V1TriggerRefreshSourcesResponse>({
    url: `/v1/deployments/${deploymentId}/refresh`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceTriggerRefreshSourcesBody,
  });
};

export const getAdminServiceTriggerRefreshSourcesMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerRefreshSources>>,
    TError,
    { deploymentId: string; data: AdminServiceTriggerRefreshSourcesBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceTriggerRefreshSources>>,
  TError,
  { deploymentId: string; data: AdminServiceTriggerRefreshSourcesBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceTriggerRefreshSources>>,
    { deploymentId: string; data: AdminServiceTriggerRefreshSourcesBody }
  > = (props) => {
    const { deploymentId, data } = props ?? {};

    return adminServiceTriggerRefreshSources(deploymentId, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceTriggerRefreshSourcesMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceTriggerRefreshSources>>
>;
export type AdminServiceTriggerRefreshSourcesMutationBody =
  AdminServiceTriggerRefreshSourcesBody;
export type AdminServiceTriggerRefreshSourcesMutationError = RpcStatus;

/**
 * @summary TriggerRefreshSources refresh the source for production deployment
 */
export const createAdminServiceTriggerRefreshSources = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerRefreshSources>>,
    TError,
    { deploymentId: string; data: AdminServiceTriggerRefreshSourcesBody },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceTriggerRefreshSourcesMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
If the caller has not granted access to the repository, instructions for granting access are returned.
 */
export const adminServiceGetGithubRepoStatus = (
  params?: AdminServiceGetGithubRepoStatusParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetGithubRepoStatusResponse>({
    url: `/v1/github/repositories`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceGetGithubRepoStatusQueryKey = (
  params?: AdminServiceGetGithubRepoStatusParams
) => [`/v1/github/repositories`, ...(params ? [params] : [])] as const;

export const getAdminServiceGetGithubRepoStatusQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>,
  TError = RpcStatus
>(
  params?: AdminServiceGetGithubRepoStatusParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetGithubRepoStatusQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>
  > = ({ signal }) => adminServiceGetGithubRepoStatus(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceGetGithubRepoStatusQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>
>;
export type AdminServiceGetGithubRepoStatusQueryError = RpcStatus;

/**
 * @summary GetGithubRepoRequest returns info about a Github repo based on the caller's installations.
If the caller has not granted access to the repository, instructions for granting access are returned.
 */
export const createAdminServiceGetGithubRepoStatus = <
  TData = Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>,
  TError = RpcStatus
>(
  params?: AdminServiceGetGithubRepoStatusParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetGithubRepoStatus>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetGithubRepoStatusQueryOptions(
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ListOrganizations lists all the organizations currently managed by the admin
 */
export const adminServiceListOrganizations = (
  params?: AdminServiceListOrganizationsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListOrganizationsResponse>({
    url: `/v1/organizations`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationsQueryKey = (
  params?: AdminServiceListOrganizationsParams
) => [`/v1/organizations`, ...(params ? [params] : [])] as const;

export const getAdminServiceListOrganizationsQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizations>>,
  TError = RpcStatus
>(
  params?: AdminServiceListOrganizationsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizations>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListOrganizations>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceListOrganizationsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizations>>
  > = ({ signal }) => adminServiceListOrganizations(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceListOrganizationsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizations>>
>;
export type AdminServiceListOrganizationsQueryError = RpcStatus;

/**
 * @summary ListOrganizations lists all the organizations currently managed by the admin
 */
export const createAdminServiceListOrganizations = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizations>>,
  TError = RpcStatus
>(
  params?: AdminServiceListOrganizationsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizations>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListOrganizationsQueryOptions(
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary CreateOrganization creates a new organization
 */
export const adminServiceCreateOrganization = (
  v1CreateOrganizationRequest: V1CreateOrganizationRequest
) => {
  return httpClient<V1CreateOrganizationResponse>({
    url: `/v1/organizations`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1CreateOrganizationRequest,
  });
};

export const getAdminServiceCreateOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    TError,
    { data: V1CreateOrganizationRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
  TError,
  { data: V1CreateOrganizationRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    { data: V1CreateOrganizationRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceCreateOrganization(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateOrganization>>
>;
export type AdminServiceCreateOrganizationMutationBody =
  V1CreateOrganizationRequest;
export type AdminServiceCreateOrganizationMutationError = RpcStatus;

/**
 * @summary CreateOrganization creates a new organization
 */
export const createAdminServiceCreateOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateOrganization>>,
    TError,
    { data: V1CreateOrganizationRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceCreateOrganizationMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetOrganization returns information about a specific organization
 */
export const adminServiceGetOrganization = (
  name: string,
  signal?: AbortSignal
) => {
  return httpClient<V1GetOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetOrganizationQueryKey = (name: string) =>
  [`/v1/organizations/${name}`] as const;

export const getAdminServiceGetOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetOrganization>>,
  TError = RpcStatus
>(
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetOrganization>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetOrganization>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceGetOrganizationQueryKey(name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetOrganization>>
  > = ({ signal }) => adminServiceGetOrganization(name, signal);

  return { queryKey, queryFn, enabled: !!name, ...queryOptions };
};

export type AdminServiceGetOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetOrganization>>
>;
export type AdminServiceGetOrganizationQueryError = RpcStatus;

/**
 * @summary GetOrganization returns information about a specific organization
 */
export const createAdminServiceGetOrganization = <
  TData = Awaited<ReturnType<typeof adminServiceGetOrganization>>,
  TError = RpcStatus
>(
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetOrganization>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetOrganizationQueryOptions(
    name,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary DeleteOrganization deletes an organizations
 */
export const adminServiceDeleteOrganization = (name: string) => {
  return httpClient<V1DeleteOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "delete",
  });
};

export const getAdminServiceDeleteOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    TError,
    { name: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
  TError,
  { name: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    { name: string }
  > = (props) => {
    const { name } = props ?? {};

    return adminServiceDeleteOrganization(name);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceDeleteOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteOrganization>>
>;

export type AdminServiceDeleteOrganizationMutationError = RpcStatus;

/**
 * @summary DeleteOrganization deletes an organizations
 */
export const createAdminServiceDeleteOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteOrganization>>,
    TError,
    { name: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceDeleteOrganizationMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary UpdateOrganization deletes an organizations
 */
export const adminServiceUpdateOrganization = (
  name: string,
  adminServiceUpdateOrganizationBody: AdminServiceUpdateOrganizationBody
) => {
  return httpClient<V1UpdateOrganizationResponse>({
    url: `/v1/organizations/${name}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateOrganizationBody,
  });
};

export const getAdminServiceUpdateOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    TError,
    { name: string; data: AdminServiceUpdateOrganizationBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
  TError,
  { name: string; data: AdminServiceUpdateOrganizationBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    { name: string; data: AdminServiceUpdateOrganizationBody }
  > = (props) => {
    const { name, data } = props ?? {};

    return adminServiceUpdateOrganization(name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateOrganization>>
>;
export type AdminServiceUpdateOrganizationMutationBody =
  AdminServiceUpdateOrganizationBody;
export type AdminServiceUpdateOrganizationMutationError = RpcStatus;

/**
 * @summary UpdateOrganization deletes an organizations
 */
export const createAdminServiceUpdateOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateOrganization>>,
    TError,
    { name: string; data: AdminServiceUpdateOrganizationBody },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceUpdateOrganizationMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListOrganizationInvites lists all the org invites
 */
export const adminServiceListOrganizationInvites = (
  organization: string,
  params?: AdminServiceListOrganizationInvitesParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListOrganizationInvitesResponse>({
    url: `/v1/organizations/${organization}/invites`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationInvitesQueryKey = (
  organization: string,
  params?: AdminServiceListOrganizationInvitesParams
) =>
  [
    `/v1/organizations/${organization}/invites`,
    ...(params ? [params] : []),
  ] as const;

export const getAdminServiceListOrganizationInvitesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
  TError = RpcStatus
>(
  organization: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationInvitesQueryKey(organization, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>
  > = ({ signal }) =>
    adminServiceListOrganizationInvites(organization, params, signal);

  return { queryKey, queryFn, enabled: !!organization, ...queryOptions };
};

export type AdminServiceListOrganizationInvitesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>
>;
export type AdminServiceListOrganizationInvitesQueryError = RpcStatus;

/**
 * @summary ListOrganizationInvites lists all the org invites
 */
export const createAdminServiceListOrganizationInvites = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
  TError = RpcStatus
>(
  organization: string,
  params?: AdminServiceListOrganizationInvitesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizationInvites>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListOrganizationInvitesQueryOptions(
    organization,
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ListOrganizationMembers lists all the org members
 */
export const adminServiceListOrganizationMembers = (
  organization: string,
  params?: AdminServiceListOrganizationMembersParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListOrganizationMembersResponse>({
    url: `/v1/organizations/${organization}/members`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListOrganizationMembersQueryKey = (
  organization: string,
  params?: AdminServiceListOrganizationMembersParams
) =>
  [
    `/v1/organizations/${organization}/members`,
    ...(params ? [params] : []),
  ] as const;

export const getAdminServiceListOrganizationMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>,
  TError = RpcStatus
>(
  organization: string,
  params?: AdminServiceListOrganizationMembersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListOrganizationMembersQueryKey(organization, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>
  > = ({ signal }) =>
    adminServiceListOrganizationMembers(organization, params, signal);

  return { queryKey, queryFn, enabled: !!organization, ...queryOptions };
};

export type AdminServiceListOrganizationMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>
>;
export type AdminServiceListOrganizationMembersQueryError = RpcStatus;

/**
 * @summary ListOrganizationMembers lists all the org members
 */
export const createAdminServiceListOrganizationMembers = <
  TData = Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>,
  TError = RpcStatus
>(
  organization: string,
  params?: AdminServiceListOrganizationMembersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListOrganizationMembers>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListOrganizationMembersQueryOptions(
    organization,
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary AddOrganizationMember lists all the org members
 */
export const adminServiceAddOrganizationMember = (
  organization: string,
  adminServiceAddOrganizationMemberBodyBody: AdminServiceAddOrganizationMemberBodyBody
) => {
  return httpClient<V1AddOrganizationMemberResponse>({
    url: `/v1/organizations/${organization}/members`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceAddOrganizationMemberBodyBody,
  });
};

export const getAdminServiceAddOrganizationMemberMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceAddOrganizationMember>>,
    TError,
    { organization: string; data: AdminServiceAddOrganizationMemberBodyBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceAddOrganizationMember>>,
  TError,
  { organization: string; data: AdminServiceAddOrganizationMemberBodyBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceAddOrganizationMember>>,
    { organization: string; data: AdminServiceAddOrganizationMemberBodyBody }
  > = (props) => {
    const { organization, data } = props ?? {};

    return adminServiceAddOrganizationMember(organization, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceAddOrganizationMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceAddOrganizationMember>>
>;
export type AdminServiceAddOrganizationMemberMutationBody =
  AdminServiceAddOrganizationMemberBodyBody;
export type AdminServiceAddOrganizationMemberMutationError = RpcStatus;

/**
 * @summary AddOrganizationMember lists all the org members
 */
export const createAdminServiceAddOrganizationMember = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceAddOrganizationMember>>,
    TError,
    { organization: string; data: AdminServiceAddOrganizationMemberBodyBody },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceAddOrganizationMemberMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary RemoveOrganizationMember removes member from the organization
 */
export const adminServiceRemoveOrganizationMember = (
  organization: string,
  email: string,
  params?: AdminServiceRemoveOrganizationMemberParams
) => {
  return httpClient<V1RemoveOrganizationMemberResponse>({
    url: `/v1/organizations/${organization}/members/${email}`,
    method: "delete",
    params,
  });
};

export const getAdminServiceRemoveOrganizationMemberMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMember>>,
    TError,
    {
      organization: string;
      email: string;
      params?: AdminServiceRemoveOrganizationMemberParams;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRemoveOrganizationMember>>,
  TError,
  {
    organization: string;
    email: string;
    params?: AdminServiceRemoveOrganizationMemberParams;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMember>>,
    {
      organization: string;
      email: string;
      params?: AdminServiceRemoveOrganizationMemberParams;
    }
  > = (props) => {
    const { organization, email, params } = props ?? {};

    return adminServiceRemoveOrganizationMember(organization, email, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRemoveOrganizationMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRemoveOrganizationMember>>
>;

export type AdminServiceRemoveOrganizationMemberMutationError = RpcStatus;

/**
 * @summary RemoveOrganizationMember removes member from the organization
 */
export const createAdminServiceRemoveOrganizationMember = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveOrganizationMember>>,
    TError,
    {
      organization: string;
      email: string;
      params?: AdminServiceRemoveOrganizationMemberParams;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceRemoveOrganizationMemberMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary SetOrganizationMemberRole sets the role for the member
 */
export const adminServiceSetOrganizationMemberRole = (
  organization: string,
  email: string,
  adminServiceSetOrganizationMemberRoleBodyBody: AdminServiceSetOrganizationMemberRoleBodyBody
) => {
  return httpClient<V1SetOrganizationMemberRoleResponse>({
    url: `/v1/organizations/${organization}/members/${email}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminServiceSetOrganizationMemberRoleBodyBody,
  });
};

export const getAdminServiceSetOrganizationMemberRoleMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetOrganizationMemberRole>>,
    TError,
    {
      organization: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceSetOrganizationMemberRole>>,
  TError,
  {
    organization: string;
    email: string;
    data: AdminServiceSetOrganizationMemberRoleBodyBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceSetOrganizationMemberRole>>,
    {
      organization: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    }
  > = (props) => {
    const { organization, email, data } = props ?? {};

    return adminServiceSetOrganizationMemberRole(organization, email, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceSetOrganizationMemberRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSetOrganizationMemberRole>>
>;
export type AdminServiceSetOrganizationMemberRoleMutationBody =
  AdminServiceSetOrganizationMemberRoleBodyBody;
export type AdminServiceSetOrganizationMemberRoleMutationError = RpcStatus;

/**
 * @summary SetOrganizationMemberRole sets the role for the member
 */
export const createAdminServiceSetOrganizationMemberRole = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetOrganizationMemberRole>>,
    TError,
    {
      organization: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceSetOrganizationMemberRoleMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary LeaveOrganization removes the current user from the organization
 */
export const adminServiceLeaveOrganization = (organization: string) => {
  return httpClient<V1LeaveOrganizationResponse>({
    url: `/v1/organizations/${organization}/members/current`,
    method: "delete",
  });
};

export const getAdminServiceLeaveOrganizationMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceLeaveOrganization>>,
    TError,
    { organization: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceLeaveOrganization>>,
  TError,
  { organization: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceLeaveOrganization>>,
    { organization: string }
  > = (props) => {
    const { organization } = props ?? {};

    return adminServiceLeaveOrganization(organization);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceLeaveOrganizationMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceLeaveOrganization>>
>;

export type AdminServiceLeaveOrganizationMutationError = RpcStatus;

/**
 * @summary LeaveOrganization removes the current user from the organization
 */
export const createAdminServiceLeaveOrganization = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceLeaveOrganization>>,
    TError,
    { organization: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceLeaveOrganizationMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetGitCredentials returns credentials and other details for a project's Git repository.
 */
export const adminServiceGetGitCredentials = (
  organization: string,
  project: string,
  signal?: AbortSignal
) => {
  return httpClient<V1GetGitCredentialsResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/git-credentials`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetGitCredentialsQueryKey = (
  organization: string,
  project: string
) =>
  [
    `/v1/organizations/${organization}/projects/${project}/git-credentials`,
  ] as const;

export const getAdminServiceGetGitCredentialsQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetGitCredentials>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetGitCredentials>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetGitCredentials>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetGitCredentialsQueryKey(organization, project);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetGitCredentials>>
  > = ({ signal }) =>
    adminServiceGetGitCredentials(organization, project, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organization && project),
    ...queryOptions,
  };
};

export type AdminServiceGetGitCredentialsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetGitCredentials>>
>;
export type AdminServiceGetGitCredentialsQueryError = RpcStatus;

/**
 * @summary GetGitCredentials returns credentials and other details for a project's Git repository.
 */
export const createAdminServiceGetGitCredentials = <
  TData = Awaited<ReturnType<typeof adminServiceGetGitCredentials>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetGitCredentials>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetGitCredentialsQueryOptions(
    organization,
    project,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ListProjectInvites lists all the project invites
 */
export const adminServiceListProjectInvites = (
  organization: string,
  project: string,
  params?: AdminServiceListProjectInvitesParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListProjectInvitesResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/invites`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListProjectInvitesQueryKey = (
  organization: string,
  project: string,
  params?: AdminServiceListProjectInvitesParams
) =>
  [
    `/v1/organizations/${organization}/projects/${project}/invites`,
    ...(params ? [params] : []),
  ] as const;

export const getAdminServiceListProjectInvitesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectInvites>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  params?: AdminServiceListProjectInvitesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectInvites>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListProjectInvites>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListProjectInvitesQueryKey(organization, project, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListProjectInvites>>
  > = ({ signal }) =>
    adminServiceListProjectInvites(organization, project, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organization && project),
    ...queryOptions,
  };
};

export type AdminServiceListProjectInvitesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListProjectInvites>>
>;
export type AdminServiceListProjectInvitesQueryError = RpcStatus;

/**
 * @summary ListProjectInvites lists all the project invites
 */
export const createAdminServiceListProjectInvites = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectInvites>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  params?: AdminServiceListProjectInvitesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectInvites>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListProjectInvitesQueryOptions(
    organization,
    project,
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ListProjectMembers lists all the project members
 */
export const adminServiceListProjectMembers = (
  organization: string,
  project: string,
  params?: AdminServiceListProjectMembersParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListProjectMembersResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/members`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListProjectMembersQueryKey = (
  organization: string,
  project: string,
  params?: AdminServiceListProjectMembersParams
) =>
  [
    `/v1/organizations/${organization}/projects/${project}/members`,
    ...(params ? [params] : []),
  ] as const;

export const getAdminServiceListProjectMembersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectMembers>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  params?: AdminServiceListProjectMembersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectMembers>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListProjectMembers>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListProjectMembersQueryKey(organization, project, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListProjectMembers>>
  > = ({ signal }) =>
    adminServiceListProjectMembers(organization, project, params, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organization && project),
    ...queryOptions,
  };
};

export type AdminServiceListProjectMembersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListProjectMembers>>
>;
export type AdminServiceListProjectMembersQueryError = RpcStatus;

/**
 * @summary ListProjectMembers lists all the project members
 */
export const createAdminServiceListProjectMembers = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectMembers>>,
  TError = RpcStatus
>(
  organization: string,
  project: string,
  params?: AdminServiceListProjectMembersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectMembers>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListProjectMembersQueryOptions(
    organization,
    project,
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary AddProjectMember adds a member to the project
 */
export const adminServiceAddProjectMember = (
  organization: string,
  project: string,
  adminServiceAddOrganizationMemberBodyBody: AdminServiceAddOrganizationMemberBodyBody
) => {
  return httpClient<V1AddProjectMemberResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/members`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceAddOrganizationMemberBodyBody,
  });
};

export const getAdminServiceAddProjectMemberMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceAddProjectMember>>,
    TError,
    {
      organization: string;
      project: string;
      data: AdminServiceAddOrganizationMemberBodyBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceAddProjectMember>>,
  TError,
  {
    organization: string;
    project: string;
    data: AdminServiceAddOrganizationMemberBodyBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceAddProjectMember>>,
    {
      organization: string;
      project: string;
      data: AdminServiceAddOrganizationMemberBodyBody;
    }
  > = (props) => {
    const { organization, project, data } = props ?? {};

    return adminServiceAddProjectMember(organization, project, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceAddProjectMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceAddProjectMember>>
>;
export type AdminServiceAddProjectMemberMutationBody =
  AdminServiceAddOrganizationMemberBodyBody;
export type AdminServiceAddProjectMemberMutationError = RpcStatus;

/**
 * @summary AddProjectMember adds a member to the project
 */
export const createAdminServiceAddProjectMember = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceAddProjectMember>>,
    TError,
    {
      organization: string;
      project: string;
      data: AdminServiceAddOrganizationMemberBodyBody;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceAddProjectMemberMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary RemoveProjectMember removes member from the project
 */
export const adminServiceRemoveProjectMember = (
  organization: string,
  project: string,
  email: string
) => {
  return httpClient<V1RemoveProjectMemberResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/members/${email}`,
    method: "delete",
  });
};

export const getAdminServiceRemoveProjectMemberMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveProjectMember>>,
    TError,
    { organization: string; project: string; email: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRemoveProjectMember>>,
  TError,
  { organization: string; project: string; email: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRemoveProjectMember>>,
    { organization: string; project: string; email: string }
  > = (props) => {
    const { organization, project, email } = props ?? {};

    return adminServiceRemoveProjectMember(organization, project, email);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRemoveProjectMemberMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRemoveProjectMember>>
>;

export type AdminServiceRemoveProjectMemberMutationError = RpcStatus;

/**
 * @summary RemoveProjectMember removes member from the project
 */
export const createAdminServiceRemoveProjectMember = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveProjectMember>>,
    TError,
    { organization: string; project: string; email: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceRemoveProjectMemberMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary SetProjectMemberRole sets the role for the member
 */
export const adminServiceSetProjectMemberRole = (
  organization: string,
  project: string,
  email: string,
  adminServiceSetOrganizationMemberRoleBodyBody: AdminServiceSetOrganizationMemberRoleBodyBody
) => {
  return httpClient<V1SetProjectMemberRoleResponse>({
    url: `/v1/organizations/${organization}/projects/${project}/members/${email}`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminServiceSetOrganizationMemberRoleBodyBody,
  });
};

export const getAdminServiceSetProjectMemberRoleMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetProjectMemberRole>>,
    TError,
    {
      organization: string;
      project: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceSetProjectMemberRole>>,
  TError,
  {
    organization: string;
    project: string;
    email: string;
    data: AdminServiceSetOrganizationMemberRoleBodyBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceSetProjectMemberRole>>,
    {
      organization: string;
      project: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    }
  > = (props) => {
    const { organization, project, email, data } = props ?? {};

    return adminServiceSetProjectMemberRole(organization, project, email, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceSetProjectMemberRoleMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSetProjectMemberRole>>
>;
export type AdminServiceSetProjectMemberRoleMutationBody =
  AdminServiceSetOrganizationMemberRoleBodyBody;
export type AdminServiceSetProjectMemberRoleMutationError = RpcStatus;

/**
 * @summary SetProjectMemberRole sets the role for the member
 */
export const createAdminServiceSetProjectMemberRole = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetProjectMemberRole>>,
    TError,
    {
      organization: string;
      project: string;
      email: string;
      data: AdminServiceSetOrganizationMemberRoleBodyBody;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceSetProjectMemberRoleMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListWhitelistedDomains lists all the whitelisted domains for the organization
 */
export const adminServiceListWhitelistedDomains = (
  organization: string,
  signal?: AbortSignal
) => {
  return httpClient<V1ListWhitelistedDomainsResponse>({
    url: `/v1/organizations/${organization}/whitelisted`,
    method: "get",
    signal,
  });
};

export const getAdminServiceListWhitelistedDomainsQueryKey = (
  organization: string
) => [`/v1/organizations/${organization}/whitelisted`] as const;

export const getAdminServiceListWhitelistedDomainsQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>,
  TError = RpcStatus
>(
  organization: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListWhitelistedDomainsQueryKey(organization);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>
  > = ({ signal }) => adminServiceListWhitelistedDomains(organization, signal);

  return { queryKey, queryFn, enabled: !!organization, ...queryOptions };
};

export type AdminServiceListWhitelistedDomainsQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>
>;
export type AdminServiceListWhitelistedDomainsQueryError = RpcStatus;

/**
 * @summary ListWhitelistedDomains lists all the whitelisted domains for the organization
 */
export const createAdminServiceListWhitelistedDomains = <
  TData = Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>,
  TError = RpcStatus
>(
  organization: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListWhitelistedDomains>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListWhitelistedDomainsQueryOptions(
    organization,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary CreateWhitelistedDomain adds a domain to the whitelist
 */
export const adminServiceCreateWhitelistedDomain = (
  organization: string,
  adminServiceCreateWhitelistedDomainBody: AdminServiceCreateWhitelistedDomainBody
) => {
  return httpClient<V1CreateWhitelistedDomainResponse>({
    url: `/v1/organizations/${organization}/whitelisted`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceCreateWhitelistedDomainBody,
  });
};

export const getAdminServiceCreateWhitelistedDomainMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateWhitelistedDomain>>,
    TError,
    { organization: string; data: AdminServiceCreateWhitelistedDomainBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateWhitelistedDomain>>,
  TError,
  { organization: string; data: AdminServiceCreateWhitelistedDomainBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateWhitelistedDomain>>,
    { organization: string; data: AdminServiceCreateWhitelistedDomainBody }
  > = (props) => {
    const { organization, data } = props ?? {};

    return adminServiceCreateWhitelistedDomain(organization, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateWhitelistedDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateWhitelistedDomain>>
>;
export type AdminServiceCreateWhitelistedDomainMutationBody =
  AdminServiceCreateWhitelistedDomainBody;
export type AdminServiceCreateWhitelistedDomainMutationError = RpcStatus;

/**
 * @summary CreateWhitelistedDomain adds a domain to the whitelist
 */
export const createAdminServiceCreateWhitelistedDomain = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateWhitelistedDomain>>,
    TError,
    { organization: string; data: AdminServiceCreateWhitelistedDomainBody },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceCreateWhitelistedDomainMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary RemoveWhitelistedDomain removes a domain from the whitelist list
 */
export const adminServiceRemoveWhitelistedDomain = (
  organization: string,
  domain: string
) => {
  return httpClient<V1RemoveWhitelistedDomainResponse>({
    url: `/v1/organizations/${organization}/whitelisted/${domain}`,
    method: "delete",
  });
};

export const getAdminServiceRemoveWhitelistedDomainMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveWhitelistedDomain>>,
    TError,
    { organization: string; domain: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRemoveWhitelistedDomain>>,
  TError,
  { organization: string; domain: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRemoveWhitelistedDomain>>,
    { organization: string; domain: string }
  > = (props) => {
    const { organization, domain } = props ?? {};

    return adminServiceRemoveWhitelistedDomain(organization, domain);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRemoveWhitelistedDomainMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRemoveWhitelistedDomain>>
>;

export type AdminServiceRemoveWhitelistedDomainMutationError = RpcStatus;

/**
 * @summary RemoveWhitelistedDomain removes a domain from the whitelist list
 */
export const createAdminServiceRemoveWhitelistedDomain = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveWhitelistedDomain>>,
    TError,
    { organization: string; domain: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceRemoveWhitelistedDomainMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListProjectsForOrganization lists all the projects currently available for given organizations
 */
export const adminServiceListProjectsForOrganization = (
  organizationName: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListProjectsForOrganizationResponse>({
    url: `/v1/organizations/${organizationName}/projects`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListProjectsForOrganizationQueryKey = (
  organizationName: string,
  params?: AdminServiceListProjectsForOrganizationParams
) =>
  [
    `/v1/organizations/${organizationName}/projects`,
    ...(params ? [params] : []),
  ] as const;

export const getAdminServiceListProjectsForOrganizationQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
  TError = RpcStatus
>(
  organizationName: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListProjectsForOrganizationQueryKey(
      organizationName,
      params
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>
  > = ({ signal }) =>
    adminServiceListProjectsForOrganization(organizationName, params, signal);

  return { queryKey, queryFn, enabled: !!organizationName, ...queryOptions };
};

export type AdminServiceListProjectsForOrganizationQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>
>;
export type AdminServiceListProjectsForOrganizationQueryError = RpcStatus;

/**
 * @summary ListProjectsForOrganization lists all the projects currently available for given organizations
 */
export const createAdminServiceListProjectsForOrganization = <
  TData = Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
  TError = RpcStatus
>(
  organizationName: string,
  params?: AdminServiceListProjectsForOrganizationParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListProjectsForOrganization>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListProjectsForOrganizationQueryOptions(
    organizationName,
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary CreateProject creates a new project
 */
export const adminServiceCreateProject = (
  organizationName: string,
  adminServiceCreateProjectBody: AdminServiceCreateProjectBody
) => {
  return httpClient<V1CreateProjectResponse>({
    url: `/v1/organizations/${organizationName}/projects`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceCreateProjectBody,
  });
};

export const getAdminServiceCreateProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    TError,
    { organizationName: string; data: AdminServiceCreateProjectBody },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateProject>>,
  TError,
  { organizationName: string; data: AdminServiceCreateProjectBody },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    { organizationName: string; data: AdminServiceCreateProjectBody }
  > = (props) => {
    const { organizationName, data } = props ?? {};

    return adminServiceCreateProject(organizationName, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateProject>>
>;
export type AdminServiceCreateProjectMutationBody =
  AdminServiceCreateProjectBody;
export type AdminServiceCreateProjectMutationError = RpcStatus;

/**
 * @summary CreateProject creates a new project
 */
export const createAdminServiceCreateProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateProject>>,
    TError,
    { organizationName: string; data: AdminServiceCreateProjectBody },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceCreateProjectMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetProject returns information about a specific project
 */
export const adminServiceGetProject = (
  organizationName: string,
  name: string,
  signal?: AbortSignal
) => {
  return httpClient<V1GetProjectResponse>({
    url: `/v1/organizations/${organizationName}/projects/${name}`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetProjectQueryKey = (
  organizationName: string,
  name: string
) => [`/v1/organizations/${organizationName}/projects/${name}`] as const;

export const getAdminServiceGetProjectQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetProject>>,
  TError = RpcStatus
>(
  organizationName: string,
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetProject>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetProject>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetProjectQueryKey(organizationName, name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetProject>>
  > = ({ signal }) => adminServiceGetProject(organizationName, name, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationName && name),
    ...queryOptions,
  };
};

export type AdminServiceGetProjectQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetProject>>
>;
export type AdminServiceGetProjectQueryError = RpcStatus;

/**
 * @summary GetProject returns information about a specific project
 */
export const createAdminServiceGetProject = <
  TData = Awaited<ReturnType<typeof adminServiceGetProject>>,
  TError = RpcStatus
>(
  organizationName: string,
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetProject>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetProjectQueryOptions(
    organizationName,
    name,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary DeleteProject deletes an project
 */
export const adminServiceDeleteProject = (
  organizationName: string,
  name: string
) => {
  return httpClient<V1DeleteProjectResponse>({
    url: `/v1/organizations/${organizationName}/projects/${name}`,
    method: "delete",
  });
};

export const getAdminServiceDeleteProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    TError,
    { organizationName: string; name: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>,
  TError,
  { organizationName: string; name: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    { organizationName: string; name: string }
  > = (props) => {
    const { organizationName, name } = props ?? {};

    return adminServiceDeleteProject(organizationName, name);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceDeleteProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteProject>>
>;

export type AdminServiceDeleteProjectMutationError = RpcStatus;

/**
 * @summary DeleteProject deletes an project
 */
export const createAdminServiceDeleteProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteProject>>,
    TError,
    { organizationName: string; name: string },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceDeleteProjectMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary UpdateProject updates a project
 */
export const adminServiceUpdateProject = (
  organizationName: string,
  name: string,
  adminServiceUpdateProjectBody: AdminServiceUpdateProjectBody
) => {
  return httpClient<V1UpdateProjectResponse>({
    url: `/v1/organizations/${organizationName}/projects/${name}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateProjectBody,
  });
};

export const getAdminServiceUpdateProjectMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>,
  TError,
  {
    organizationName: string;
    name: string;
    data: AdminServiceUpdateProjectBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectBody;
    }
  > = (props) => {
    const { organizationName, name, data } = props ?? {};

    return adminServiceUpdateProject(organizationName, name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateProjectMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateProject>>
>;
export type AdminServiceUpdateProjectMutationBody =
  AdminServiceUpdateProjectBody;
export type AdminServiceUpdateProjectMutationError = RpcStatus;

/**
 * @summary UpdateProject updates a project
 */
export const createAdminServiceUpdateProject = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProject>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectBody;
    },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceUpdateProjectMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetProjectVariables returns project variables. NOTE: Get project API doesn't return variables.
 */
export const adminServiceGetProjectVariables = (
  organizationName: string,
  name: string,
  signal?: AbortSignal
) => {
  return httpClient<V1GetProjectVariablesResponse>({
    url: `/v1/organizations/${organizationName}/projects/${name}/variables`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetProjectVariablesQueryKey = (
  organizationName: string,
  name: string
) =>
  [`/v1/organizations/${organizationName}/projects/${name}/variables`] as const;

export const getAdminServiceGetProjectVariablesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
  TError = RpcStatus
>(
  organizationName: string,
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceGetProjectVariablesQueryKey(organizationName, name);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetProjectVariables>>
  > = ({ signal }) =>
    adminServiceGetProjectVariables(organizationName, name, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationName && name),
    ...queryOptions,
  };
};

export type AdminServiceGetProjectVariablesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetProjectVariables>>
>;
export type AdminServiceGetProjectVariablesQueryError = RpcStatus;

/**
 * @summary GetProjectVariables returns project variables. NOTE: Get project API doesn't return variables.
 */
export const createAdminServiceGetProjectVariables = <
  TData = Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
  TError = RpcStatus
>(
  organizationName: string,
  name: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetProjectVariables>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetProjectVariablesQueryOptions(
    organizationName,
    name,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary UpdateProjectVariables updates variables for a project. NOTE: Update project API doesn't update variables.
 */
export const adminServiceUpdateProjectVariables = (
  organizationName: string,
  name: string,
  adminServiceUpdateProjectVariablesBody: AdminServiceUpdateProjectVariablesBody
) => {
  return httpClient<V1UpdateProjectVariablesResponse>({
    url: `/v1/organizations/${organizationName}/projects/${name}/variables`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateProjectVariablesBody,
  });
};

export const getAdminServiceUpdateProjectVariablesMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectVariablesBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
  TError,
  {
    organizationName: string;
    name: string;
    data: AdminServiceUpdateProjectVariablesBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectVariablesBody;
    }
  > = (props) => {
    const { organizationName, name, data } = props ?? {};

    return adminServiceUpdateProjectVariables(organizationName, name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateProjectVariablesMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>
>;
export type AdminServiceUpdateProjectVariablesMutationBody =
  AdminServiceUpdateProjectVariablesBody;
export type AdminServiceUpdateProjectVariablesMutationError = RpcStatus;

/**
 * @summary UpdateProjectVariables updates variables for a project. NOTE: Update project API doesn't update variables.
 */
export const createAdminServiceUpdateProjectVariables = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateProjectVariables>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateProjectVariablesBody;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceUpdateProjectVariablesMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListService returns all the services per organization
 */
export const adminServiceListServices = (
  organizationName: string,
  signal?: AbortSignal
) => {
  return httpClient<V1ListServicesResponse>({
    url: `/v1/organizations/${organizationName}/services`,
    method: "get",
    signal,
  });
};

export const getAdminServiceListServicesQueryKey = (organizationName: string) =>
  [`/v1/organizations/${organizationName}/services`] as const;

export const getAdminServiceListServicesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListServices>>,
  TError = RpcStatus
>(
  organizationName: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListServices>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListServices>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListServicesQueryKey(organizationName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListServices>>
  > = ({ signal }) => adminServiceListServices(organizationName, signal);

  return { queryKey, queryFn, enabled: !!organizationName, ...queryOptions };
};

export type AdminServiceListServicesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListServices>>
>;
export type AdminServiceListServicesQueryError = RpcStatus;

/**
 * @summary ListService returns all the services per organization
 */
export const createAdminServiceListServices = <
  TData = Awaited<ReturnType<typeof adminServiceListServices>>,
  TError = RpcStatus
>(
  organizationName: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListServices>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListServicesQueryOptions(
    organizationName,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary CreateService creates a new service per organization
 */
export const adminServiceCreateService = (
  organizationName: string,
  params?: AdminServiceCreateServiceParams
) => {
  return httpClient<V1CreateServiceResponse>({
    url: `/v1/organizations/${organizationName}/services`,
    method: "post",
    params,
  });
};

export const getAdminServiceCreateServiceMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateService>>,
    TError,
    { organizationName: string; params?: AdminServiceCreateServiceParams },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateService>>,
  TError,
  { organizationName: string; params?: AdminServiceCreateServiceParams },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateService>>,
    { organizationName: string; params?: AdminServiceCreateServiceParams }
  > = (props) => {
    const { organizationName, params } = props ?? {};

    return adminServiceCreateService(organizationName, params);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateService>>
>;

export type AdminServiceCreateServiceMutationError = RpcStatus;

/**
 * @summary CreateService creates a new service per organization
 */
export const createAdminServiceCreateService = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateService>>,
    TError,
    { organizationName: string; params?: AdminServiceCreateServiceParams },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceCreateServiceMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary DeleteService deletes a service per organization
 */
export const adminServiceDeleteService = (
  organizationName: string,
  name: string
) => {
  return httpClient<V1DeleteServiceResponse>({
    url: `/v1/organizations/${organizationName}/services/${name}`,
    method: "delete",
  });
};

export const getAdminServiceDeleteServiceMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteService>>,
    TError,
    { organizationName: string; name: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceDeleteService>>,
  TError,
  { organizationName: string; name: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceDeleteService>>,
    { organizationName: string; name: string }
  > = (props) => {
    const { organizationName, name } = props ?? {};

    return adminServiceDeleteService(organizationName, name);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceDeleteServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceDeleteService>>
>;

export type AdminServiceDeleteServiceMutationError = RpcStatus;

/**
 * @summary DeleteService deletes a service per organization
 */
export const createAdminServiceDeleteService = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceDeleteService>>,
    TError,
    { organizationName: string; name: string },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceDeleteServiceMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary UpdateService updates a service per organization
 */
export const adminServiceUpdateService = (
  organizationName: string,
  name: string,
  adminServiceUpdateServiceBody: AdminServiceUpdateServiceBody
) => {
  return httpClient<V1UpdateServiceResponse>({
    url: `/v1/organizations/${organizationName}/services/${name}`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: adminServiceUpdateServiceBody,
  });
};

export const getAdminServiceUpdateServiceMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateService>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateServiceBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateService>>,
  TError,
  {
    organizationName: string;
    name: string;
    data: AdminServiceUpdateServiceBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateService>>,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateServiceBody;
    }
  > = (props) => {
    const { organizationName, name, data } = props ?? {};

    return adminServiceUpdateService(organizationName, name, data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateServiceMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateService>>
>;
export type AdminServiceUpdateServiceMutationBody =
  AdminServiceUpdateServiceBody;
export type AdminServiceUpdateServiceMutationError = RpcStatus;

/**
 * @summary UpdateService updates a service per organization
 */
export const createAdminServiceUpdateService = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateService>>,
    TError,
    {
      organizationName: string;
      name: string;
      data: AdminServiceUpdateServiceBody;
    },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceUpdateServiceMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListServiceAuthTokens lists all the service auth tokens
 */
export const adminServiceListServiceAuthTokens = (
  organizationName: string,
  serviceName: string,
  signal?: AbortSignal
) => {
  return httpClient<V1ListServiceAuthTokensResponse>({
    url: `/v1/organizations/${organizationName}/services/${serviceName}/tokens`,
    method: "get",
    signal,
  });
};

export const getAdminServiceListServiceAuthTokensQueryKey = (
  organizationName: string,
  serviceName: string
) =>
  [
    `/v1/organizations/${organizationName}/services/${serviceName}/tokens`,
  ] as const;

export const getAdminServiceListServiceAuthTokensQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>,
  TError = RpcStatus
>(
  organizationName: string,
  serviceName: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getAdminServiceListServiceAuthTokensQueryKey(organizationName, serviceName);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>
  > = ({ signal }) =>
    adminServiceListServiceAuthTokens(organizationName, serviceName, signal);

  return {
    queryKey,
    queryFn,
    enabled: !!(organizationName && serviceName),
    ...queryOptions,
  };
};

export type AdminServiceListServiceAuthTokensQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>
>;
export type AdminServiceListServiceAuthTokensQueryError = RpcStatus;

/**
 * @summary ListServiceAuthTokens lists all the service auth tokens
 */
export const createAdminServiceListServiceAuthTokens = <
  TData = Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>,
  TError = RpcStatus
>(
  organizationName: string,
  serviceName: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListServiceAuthTokens>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListServiceAuthTokensQueryOptions(
    organizationName,
    serviceName,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary IssueServiceAuthToken returns the temporary token for given service account
 */
export const adminServiceIssueServiceAuthToken = (
  organizationName: string,
  serviceName: string,
  adminServiceTriggerReconcileBodyBody: AdminServiceTriggerReconcileBodyBody
) => {
  return httpClient<V1IssueServiceAuthTokenResponse>({
    url: `/v1/organizations/${organizationName}/services/${serviceName}/tokens`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: adminServiceTriggerReconcileBodyBody,
  });
};

export const getAdminServiceIssueServiceAuthTokenMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceIssueServiceAuthToken>>,
    TError,
    {
      organizationName: string;
      serviceName: string;
      data: AdminServiceTriggerReconcileBodyBody;
    },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceIssueServiceAuthToken>>,
  TError,
  {
    organizationName: string;
    serviceName: string;
    data: AdminServiceTriggerReconcileBodyBody;
  },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceIssueServiceAuthToken>>,
    {
      organizationName: string;
      serviceName: string;
      data: AdminServiceTriggerReconcileBodyBody;
    }
  > = (props) => {
    const { organizationName, serviceName, data } = props ?? {};

    return adminServiceIssueServiceAuthToken(
      organizationName,
      serviceName,
      data
    );
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceIssueServiceAuthTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceIssueServiceAuthToken>>
>;
export type AdminServiceIssueServiceAuthTokenMutationBody =
  AdminServiceTriggerReconcileBodyBody;
export type AdminServiceIssueServiceAuthTokenMutationError = RpcStatus;

/**
 * @summary IssueServiceAuthToken returns the temporary token for given service account
 */
export const createAdminServiceIssueServiceAuthToken = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceIssueServiceAuthToken>>,
    TError,
    {
      organizationName: string;
      serviceName: string;
      data: AdminServiceTriggerReconcileBodyBody;
    },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceIssueServiceAuthTokenMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary Ping returns information about the server
 */
export const adminServicePing = (signal?: AbortSignal) => {
  return httpClient<V1PingResponse>({ url: `/v1/ping`, method: "get", signal });
};

export const getAdminServicePingQueryKey = () => [`/v1/ping`] as const;

export const getAdminServicePingQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServicePing>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServicePing>>,
    TError,
    TData
  >;
}): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServicePing>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getAdminServicePingQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServicePing>>
  > = ({ signal }) => adminServicePing(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServicePingQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServicePing>>
>;
export type AdminServicePingQueryError = RpcStatus;

/**
 * @summary Ping returns information about the server
 */
export const createAdminServicePing = <
  TData = Awaited<ReturnType<typeof adminServicePing>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServicePing>>,
    TError,
    TData
  >;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServicePingQueryOptions(options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary TriggerRedeploy creates a new deployment and teardown the old deployment for production deployment
 */
export const adminServiceTriggerRedeploy = (
  v1TriggerRedeployRequest: V1TriggerRedeployRequest
) => {
  return httpClient<V1TriggerRedeployResponse>({
    url: `/v1/projects/-/redeploy`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1TriggerRedeployRequest,
  });
};

export const getAdminServiceTriggerRedeployMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerRedeploy>>,
    TError,
    { data: V1TriggerRedeployRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceTriggerRedeploy>>,
  TError,
  { data: V1TriggerRedeployRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceTriggerRedeploy>>,
    { data: V1TriggerRedeployRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceTriggerRedeploy(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceTriggerRedeployMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceTriggerRedeploy>>
>;
export type AdminServiceTriggerRedeployMutationBody = V1TriggerRedeployRequest;
export type AdminServiceTriggerRedeployMutationError = RpcStatus;

/**
 * @summary TriggerRedeploy creates a new deployment and teardown the old deployment for production deployment
 */
export const createAdminServiceTriggerRedeploy = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceTriggerRedeploy>>,
    TError,
    { data: V1TriggerRedeployRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceTriggerRedeployMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary RevokeServiceAuthToken revoke the service auth token
 */
export const adminServiceRevokeServiceAuthToken = (tokenId: string) => {
  return httpClient<V1RevokeServiceAuthTokenResponse>({
    url: `/v1/services/tokens/${tokenId}`,
    method: "delete",
  });
};

export const getAdminServiceRevokeServiceAuthTokenMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRevokeServiceAuthToken>>,
    TError,
    { tokenId: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRevokeServiceAuthToken>>,
  TError,
  { tokenId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRevokeServiceAuthToken>>,
    { tokenId: string }
  > = (props) => {
    const { tokenId } = props ?? {};

    return adminServiceRevokeServiceAuthToken(tokenId);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRevokeServiceAuthTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRevokeServiceAuthToken>>
>;

export type AdminServiceRevokeServiceAuthTokenMutationError = RpcStatus;

/**
 * @summary RevokeServiceAuthToken revoke the service auth token
 */
export const createAdminServiceRevokeServiceAuthToken = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRevokeServiceAuthToken>>,
    TError,
    { tokenId: string },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceRevokeServiceAuthTokenMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary ListSuperusers lists all the superusers
 */
export const adminServiceListSuperusers = (signal?: AbortSignal) => {
  return httpClient<V1ListSuperusersResponse>({
    url: `/v1/superuser/members`,
    method: "get",
    signal,
  });
};

export const getAdminServiceListSuperusersQueryKey = () =>
  [`/v1/superuser/members`] as const;

export const getAdminServiceListSuperusersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListSuperusers>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListSuperusers>>,
    TError,
    TData
  >;
}): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListSuperusers>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceListSuperusersQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListSuperusers>>
  > = ({ signal }) => adminServiceListSuperusers(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceListSuperusersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListSuperusers>>
>;
export type AdminServiceListSuperusersQueryError = RpcStatus;

/**
 * @summary ListSuperusers lists all the superusers
 */
export const createAdminServiceListSuperusers = <
  TData = Awaited<ReturnType<typeof adminServiceListSuperusers>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceListSuperusers>>,
    TError,
    TData
  >;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListSuperusersQueryOptions(options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary SetSuperuser adds/remove a superuser
 */
export const adminServiceSetSuperuser = (
  v1SetSuperuserRequest: V1SetSuperuserRequest
) => {
  return httpClient<V1SetSuperuserResponse>({
    url: `/v1/superuser/members`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1SetSuperuserRequest,
  });
};

export const getAdminServiceSetSuperuserMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetSuperuser>>,
    TError,
    { data: V1SetSuperuserRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceSetSuperuser>>,
  TError,
  { data: V1SetSuperuserRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceSetSuperuser>>,
    { data: V1SetSuperuserRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceSetSuperuser(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceSetSuperuserMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSetSuperuser>>
>;
export type AdminServiceSetSuperuserMutationBody = V1SetSuperuserRequest;
export type AdminServiceSetSuperuserMutationError = RpcStatus;

/**
 * @summary SetSuperuser adds/remove a superuser
 */
export const createAdminServiceSetSuperuser = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSetSuperuser>>,
    TError,
    { data: V1SetSuperuserRequest },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceSetSuperuserMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary SearchProjectNames returns project names matching the pattern
 */
export const adminServiceSearchProjectNames = (
  params?: AdminServiceSearchProjectNamesParams,
  signal?: AbortSignal
) => {
  return httpClient<V1SearchProjectNamesResponse>({
    url: `/v1/superuser/projects/search`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceSearchProjectNamesQueryKey = (
  params?: AdminServiceSearchProjectNamesParams
) => [`/v1/superuser/projects/search`, ...(params ? [params] : [])] as const;

export const getAdminServiceSearchProjectNamesQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceSearchProjectNames>>,
  TError = RpcStatus
>(
  params?: AdminServiceSearchProjectNamesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSearchProjectNames>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceSearchProjectNames>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceSearchProjectNamesQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceSearchProjectNames>>
  > = ({ signal }) => adminServiceSearchProjectNames(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceSearchProjectNamesQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSearchProjectNames>>
>;
export type AdminServiceSearchProjectNamesQueryError = RpcStatus;

/**
 * @summary SearchProjectNames returns project names matching the pattern
 */
export const createAdminServiceSearchProjectNames = <
  TData = Awaited<ReturnType<typeof adminServiceSearchProjectNames>>,
  TError = RpcStatus
>(
  params?: AdminServiceSearchProjectNamesParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSearchProjectNames>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceSearchProjectNamesQueryOptions(
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary SudoUpdateOrganizationQuotas update the quotas available for orgs
 */
export const adminServiceSudoUpdateOrganizationQuotas = (
  v1SudoUpdateOrganizationQuotasRequest: V1SudoUpdateOrganizationQuotasRequest
) => {
  return httpClient<V1SudoUpdateOrganizationQuotasResponse>({
    url: `/v1/superuser/quotas/organization`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: v1SudoUpdateOrganizationQuotasRequest,
  });
};

export const getAdminServiceSudoUpdateOrganizationQuotasMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSudoUpdateOrganizationQuotas>>,
    TError,
    { data: V1SudoUpdateOrganizationQuotasRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceSudoUpdateOrganizationQuotas>>,
  TError,
  { data: V1SudoUpdateOrganizationQuotasRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceSudoUpdateOrganizationQuotas>>,
    { data: V1SudoUpdateOrganizationQuotasRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceSudoUpdateOrganizationQuotas(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceSudoUpdateOrganizationQuotasMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof adminServiceSudoUpdateOrganizationQuotas>>
  >;
export type AdminServiceSudoUpdateOrganizationQuotasMutationBody =
  V1SudoUpdateOrganizationQuotasRequest;
export type AdminServiceSudoUpdateOrganizationQuotasMutationError = RpcStatus;

/**
 * @summary SudoUpdateOrganizationQuotas update the quotas available for orgs
 */
export const createAdminServiceSudoUpdateOrganizationQuotas = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSudoUpdateOrganizationQuotas>>,
    TError,
    { data: V1SudoUpdateOrganizationQuotasRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceSudoUpdateOrganizationQuotasMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary SudoUpdateUserQuotas update the quotas for users
 */
export const adminServiceSudoUpdateUserQuotas = (
  v1SudoUpdateUserQuotasRequest: V1SudoUpdateUserQuotasRequest
) => {
  return httpClient<V1SudoUpdateUserQuotasResponse>({
    url: `/v1/superuser/quotas/user`,
    method: "patch",
    headers: { "Content-Type": "application/json" },
    data: v1SudoUpdateUserQuotasRequest,
  });
};

export const getAdminServiceSudoUpdateUserQuotasMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSudoUpdateUserQuotas>>,
    TError,
    { data: V1SudoUpdateUserQuotasRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceSudoUpdateUserQuotas>>,
  TError,
  { data: V1SudoUpdateUserQuotasRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceSudoUpdateUserQuotas>>,
    { data: V1SudoUpdateUserQuotasRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceSudoUpdateUserQuotas(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceSudoUpdateUserQuotasMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSudoUpdateUserQuotas>>
>;
export type AdminServiceSudoUpdateUserQuotasMutationBody =
  V1SudoUpdateUserQuotasRequest;
export type AdminServiceSudoUpdateUserQuotasMutationError = RpcStatus;

/**
 * @summary SudoUpdateUserQuotas update the quotas for users
 */
export const createAdminServiceSudoUpdateUserQuotas = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceSudoUpdateUserQuotas>>,
    TError,
    { data: V1SudoUpdateUserQuotasRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceSudoUpdateUserQuotasMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary SudoGetResource returns details about a resource by ID lookup
 */
export const adminServiceSudoGetResource = (
  params?: AdminServiceSudoGetResourceParams,
  signal?: AbortSignal
) => {
  return httpClient<V1SudoGetResourceResponse>({
    url: `/v1/superuser/resource`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceSudoGetResourceQueryKey = (
  params?: AdminServiceSudoGetResourceParams
) => [`/v1/superuser/resource`, ...(params ? [params] : [])] as const;

export const getAdminServiceSudoGetResourceQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceSudoGetResource>>,
  TError = RpcStatus
>(
  params?: AdminServiceSudoGetResourceParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSudoGetResource>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceSudoGetResource>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceSudoGetResourceQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceSudoGetResource>>
  > = ({ signal }) => adminServiceSudoGetResource(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceSudoGetResourceQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSudoGetResource>>
>;
export type AdminServiceSudoGetResourceQueryError = RpcStatus;

/**
 * @summary SudoGetResource returns details about a resource by ID lookup
 */
export const createAdminServiceSudoGetResource = <
  TData = Awaited<ReturnType<typeof adminServiceSudoGetResource>>,
  TError = RpcStatus
>(
  params?: AdminServiceSudoGetResourceParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSudoGetResource>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceSudoGetResourceQueryOptions(
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary RevokeCurrentAuthToken revoke the current auth token
 */
export const adminServiceRevokeCurrentAuthToken = () => {
  return httpClient<V1RevokeCurrentAuthTokenResponse>({
    url: `/v1/tokens/current`,
    method: "delete",
  });
};

export const getAdminServiceRevokeCurrentAuthTokenMutationOptions = <
  TError = RpcStatus,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRevokeCurrentAuthToken>>,
    TError,
    TVariables,
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRevokeCurrentAuthToken>>,
  TError,
  TVariables,
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRevokeCurrentAuthToken>>,
    TVariables
  > = () => {
    return adminServiceRevokeCurrentAuthToken();
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRevokeCurrentAuthTokenMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRevokeCurrentAuthToken>>
>;

export type AdminServiceRevokeCurrentAuthTokenMutationError = RpcStatus;

/**
 * @summary RevokeCurrentAuthToken revoke the current auth token
 */
export const createAdminServiceRevokeCurrentAuthToken = <
  TError = RpcStatus,
  TVariables = void,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRevokeCurrentAuthToken>>,
    TError,
    TVariables,
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceRevokeCurrentAuthTokenMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary IssueRepresentativeAuthToken returns the temporary token for given email
 */
export const adminServiceIssueRepresentativeAuthToken = (
  v1IssueRepresentativeAuthTokenRequest: V1IssueRepresentativeAuthTokenRequest
) => {
  return httpClient<V1IssueRepresentativeAuthTokenResponse>({
    url: `/v1/tokens/represent`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1IssueRepresentativeAuthTokenRequest,
  });
};

export const getAdminServiceIssueRepresentativeAuthTokenMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceIssueRepresentativeAuthToken>>,
    TError,
    { data: V1IssueRepresentativeAuthTokenRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceIssueRepresentativeAuthToken>>,
  TError,
  { data: V1IssueRepresentativeAuthTokenRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceIssueRepresentativeAuthToken>>,
    { data: V1IssueRepresentativeAuthTokenRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceIssueRepresentativeAuthToken(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceIssueRepresentativeAuthTokenMutationResult =
  NonNullable<
    Awaited<ReturnType<typeof adminServiceIssueRepresentativeAuthToken>>
  >;
export type AdminServiceIssueRepresentativeAuthTokenMutationBody =
  V1IssueRepresentativeAuthTokenRequest;
export type AdminServiceIssueRepresentativeAuthTokenMutationError = RpcStatus;

/**
 * @summary IssueRepresentativeAuthToken returns the temporary token for given email
 */
export const createAdminServiceIssueRepresentativeAuthToken = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceIssueRepresentativeAuthToken>>,
    TError,
    { data: V1IssueRepresentativeAuthTokenRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceIssueRepresentativeAuthTokenMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetUser returns user by email
 */
export const adminServiceGetUser = (
  params?: AdminServiceGetUserParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetUserResponse>({
    url: `/v1/users`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceGetUserQueryKey = (
  params?: AdminServiceGetUserParams
) => [`/v1/users`, ...(params ? [params] : [])] as const;

export const getAdminServiceGetUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetUser>>,
  TError = RpcStatus
>(
  params?: AdminServiceGetUserParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetUser>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetUser>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceGetUserQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetUser>>
  > = ({ signal }) => adminServiceGetUser(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceGetUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetUser>>
>;
export type AdminServiceGetUserQueryError = RpcStatus;

/**
 * @summary GetUser returns user by email
 */
export const createAdminServiceGetUser = <
  TData = Awaited<ReturnType<typeof adminServiceGetUser>>,
  TError = RpcStatus
>(
  params?: AdminServiceGetUserParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetUser>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetUserQueryOptions(params, options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary ListBookmarks lists all the bookmarks for the user
 */
export const adminServiceListBookmarks = (
  params?: AdminServiceListBookmarksParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListBookmarksResponse>({
    url: `/v1/users/bookmarks`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceListBookmarksQueryKey = (
  params?: AdminServiceListBookmarksParams
) => [`/v1/users/bookmarks`, ...(params ? [params] : [])] as const;

export const getAdminServiceListBookmarksQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceListBookmarks>>,
  TError = RpcStatus
>(
  params?: AdminServiceListBookmarksParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListBookmarks>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceListBookmarks>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceListBookmarksQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceListBookmarks>>
  > = ({ signal }) => adminServiceListBookmarks(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceListBookmarksQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceListBookmarks>>
>;
export type AdminServiceListBookmarksQueryError = RpcStatus;

/**
 * @summary ListBookmarks lists all the bookmarks for the user
 */
export const createAdminServiceListBookmarks = <
  TData = Awaited<ReturnType<typeof adminServiceListBookmarks>>,
  TError = RpcStatus
>(
  params?: AdminServiceListBookmarksParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceListBookmarks>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceListBookmarksQueryOptions(
    params,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary CreateBookmark creates a bookmark for the given user for the given project
 */
export const adminServiceCreateBookmark = (
  v1CreateBookmarkRequest: V1CreateBookmarkRequest
) => {
  return httpClient<V1CreateBookmarkResponse>({
    url: `/v1/users/bookmarks`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: v1CreateBookmarkRequest,
  });
};

export const getAdminServiceCreateBookmarkMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateBookmark>>,
    TError,
    { data: V1CreateBookmarkRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceCreateBookmark>>,
  TError,
  { data: V1CreateBookmarkRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceCreateBookmark>>,
    { data: V1CreateBookmarkRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceCreateBookmark(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceCreateBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceCreateBookmark>>
>;
export type AdminServiceCreateBookmarkMutationBody = V1CreateBookmarkRequest;
export type AdminServiceCreateBookmarkMutationError = RpcStatus;

/**
 * @summary CreateBookmark creates a bookmark for the given user for the given project
 */
export const createAdminServiceCreateBookmark = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceCreateBookmark>>,
    TError,
    { data: V1CreateBookmarkRequest },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceCreateBookmarkMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetBookmark returns the bookmark for the given user for the given project
 */
export const adminServiceGetBookmark = (
  bookmarkId: string,
  signal?: AbortSignal
) => {
  return httpClient<V1GetBookmarkResponse>({
    url: `/v1/users/bookmarks/${bookmarkId}`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetBookmarkQueryKey = (bookmarkId: string) =>
  [`/v1/users/bookmarks/${bookmarkId}`] as const;

export const getAdminServiceGetBookmarkQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetBookmark>>,
  TError = RpcStatus
>(
  bookmarkId: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetBookmark>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetBookmark>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceGetBookmarkQueryKey(bookmarkId);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetBookmark>>
  > = ({ signal }) => adminServiceGetBookmark(bookmarkId, signal);

  return { queryKey, queryFn, enabled: !!bookmarkId, ...queryOptions };
};

export type AdminServiceGetBookmarkQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetBookmark>>
>;
export type AdminServiceGetBookmarkQueryError = RpcStatus;

/**
 * @summary GetBookmark returns the bookmark for the given user for the given project
 */
export const createAdminServiceGetBookmark = <
  TData = Awaited<ReturnType<typeof adminServiceGetBookmark>>,
  TError = RpcStatus
>(
  bookmarkId: string,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceGetBookmark>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetBookmarkQueryOptions(
    bookmarkId,
    options
  );

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary RemoveBookmark removes the bookmark for the given user for the given project
 */
export const adminServiceRemoveBookmark = (bookmarkId: string) => {
  return httpClient<V1RemoveBookmarkResponse>({
    url: `/v1/users/bookmarks/${bookmarkId}`,
    method: "delete",
  });
};

export const getAdminServiceRemoveBookmarkMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveBookmark>>,
    TError,
    { bookmarkId: string },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceRemoveBookmark>>,
  TError,
  { bookmarkId: string },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceRemoveBookmark>>,
    { bookmarkId: string }
  > = (props) => {
    const { bookmarkId } = props ?? {};

    return adminServiceRemoveBookmark(bookmarkId);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceRemoveBookmarkMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceRemoveBookmark>>
>;

export type AdminServiceRemoveBookmarkMutationError = RpcStatus;

/**
 * @summary RemoveBookmark removes the bookmark for the given user for the given project
 */
export const createAdminServiceRemoveBookmark = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceRemoveBookmark>>,
    TError,
    { bookmarkId: string },
    TContext
  >;
}) => {
  const mutationOptions = getAdminServiceRemoveBookmarkMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetCurrentUser returns the currently authenticated user (if any)
 */
export const adminServiceGetCurrentUser = (signal?: AbortSignal) => {
  return httpClient<V1GetCurrentUserResponse>({
    url: `/v1/users/current`,
    method: "get",
    signal,
  });
};

export const getAdminServiceGetCurrentUserQueryKey = () =>
  [`/v1/users/current`] as const;

export const getAdminServiceGetCurrentUserQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceGetCurrentUser>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceGetCurrentUser>>,
    TError,
    TData
  >;
}): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceGetCurrentUser>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceGetCurrentUserQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceGetCurrentUser>>
  > = ({ signal }) => adminServiceGetCurrentUser(signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceGetCurrentUserQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceGetCurrentUser>>
>;
export type AdminServiceGetCurrentUserQueryError = RpcStatus;

/**
 * @summary GetCurrentUser returns the currently authenticated user (if any)
 */
export const createAdminServiceGetCurrentUser = <
  TData = Awaited<ReturnType<typeof adminServiceGetCurrentUser>>,
  TError = RpcStatus
>(options?: {
  query?: CreateQueryOptions<
    Awaited<ReturnType<typeof adminServiceGetCurrentUser>>,
    TError,
    TData
  >;
}): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceGetCurrentUserQueryOptions(options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * @summary UpdateUserPreferences updates the preferences for the user
 */
export const adminServiceUpdateUserPreferences = (
  v1UpdateUserPreferencesRequest: V1UpdateUserPreferencesRequest
) => {
  return httpClient<V1UpdateUserPreferencesResponse>({
    url: `/v1/users/preferences`,
    method: "put",
    headers: { "Content-Type": "application/json" },
    data: v1UpdateUserPreferencesRequest,
  });
};

export const getAdminServiceUpdateUserPreferencesMutationOptions = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateUserPreferences>>,
    TError,
    { data: V1UpdateUserPreferencesRequest },
    TContext
  >;
}): CreateMutationOptions<
  Awaited<ReturnType<typeof adminServiceUpdateUserPreferences>>,
  TError,
  { data: V1UpdateUserPreferencesRequest },
  TContext
> => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof adminServiceUpdateUserPreferences>>,
    { data: V1UpdateUserPreferencesRequest }
  > = (props) => {
    const { data } = props ?? {};

    return adminServiceUpdateUserPreferences(data);
  };

  return { mutationFn, ...mutationOptions };
};

export type AdminServiceUpdateUserPreferencesMutationResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceUpdateUserPreferences>>
>;
export type AdminServiceUpdateUserPreferencesMutationBody =
  V1UpdateUserPreferencesRequest;
export type AdminServiceUpdateUserPreferencesMutationError = RpcStatus;

/**
 * @summary UpdateUserPreferences updates the preferences for the user
 */
export const createAdminServiceUpdateUserPreferences = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: CreateMutationOptions<
    Awaited<ReturnType<typeof adminServiceUpdateUserPreferences>>,
    TError,
    { data: V1UpdateUserPreferencesRequest },
    TContext
  >;
}) => {
  const mutationOptions =
    getAdminServiceUpdateUserPreferencesMutationOptions(options);

  return createMutation(mutationOptions);
};
/**
 * @summary GetUsersByEmail returns users by email
 */
export const adminServiceSearchUsers = (
  params?: AdminServiceSearchUsersParams,
  signal?: AbortSignal
) => {
  return httpClient<V1SearchUsersResponse>({
    url: `/v1/users/search`,
    method: "get",
    params,
    signal,
  });
};

export const getAdminServiceSearchUsersQueryKey = (
  params?: AdminServiceSearchUsersParams
) => [`/v1/users/search`, ...(params ? [params] : [])] as const;

export const getAdminServiceSearchUsersQueryOptions = <
  TData = Awaited<ReturnType<typeof adminServiceSearchUsers>>,
  TError = RpcStatus
>(
  params?: AdminServiceSearchUsersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSearchUsers>>,
      TError,
      TData
    >;
  }
): CreateQueryOptions<
  Awaited<ReturnType<typeof adminServiceSearchUsers>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getAdminServiceSearchUsersQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof adminServiceSearchUsers>>
  > = ({ signal }) => adminServiceSearchUsers(params, signal);

  return { queryKey, queryFn, ...queryOptions };
};

export type AdminServiceSearchUsersQueryResult = NonNullable<
  Awaited<ReturnType<typeof adminServiceSearchUsers>>
>;
export type AdminServiceSearchUsersQueryError = RpcStatus;

/**
 * @summary GetUsersByEmail returns users by email
 */
export const createAdminServiceSearchUsers = <
  TData = Awaited<ReturnType<typeof adminServiceSearchUsers>>,
  TError = RpcStatus
>(
  params?: AdminServiceSearchUsersParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof adminServiceSearchUsers>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getAdminServiceSearchUsersQueryOptions(params, options);

  const query = createQuery(queryOptions) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey;

  return query;
};
