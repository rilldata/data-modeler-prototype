// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.7
// source: sql/src/main/proto/ast.proto

package ast

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type SqlTypeNameProto int32

const (
	SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_                        SqlTypeNameProto = 0
	SqlTypeNameProto_SqlTypeNameProto_TINYINT_                        SqlTypeNameProto = 1
	SqlTypeNameProto_SqlTypeNameProto_SMALLINT_                       SqlTypeNameProto = 2
	SqlTypeNameProto_SqlTypeNameProto_INTEGER_                        SqlTypeNameProto = 3
	SqlTypeNameProto_SqlTypeNameProto_BIGINT_                         SqlTypeNameProto = 4
	SqlTypeNameProto_SqlTypeNameProto_DECIMAL_                        SqlTypeNameProto = 5
	SqlTypeNameProto_SqlTypeNameProto_FLOAT_                          SqlTypeNameProto = 6
	SqlTypeNameProto_SqlTypeNameProto_REAL_                           SqlTypeNameProto = 7
	SqlTypeNameProto_SqlTypeNameProto_DOUBLE_                         SqlTypeNameProto = 8
	SqlTypeNameProto_SqlTypeNameProto_DATE_                           SqlTypeNameProto = 9
	SqlTypeNameProto_SqlTypeNameProto_TIME_                           SqlTypeNameProto = 10
	SqlTypeNameProto_SqlTypeNameProto_TIME_WITH_LOCAL_TIME_ZONE_      SqlTypeNameProto = 11
	SqlTypeNameProto_SqlTypeNameProto_TIMESTAMP_                      SqlTypeNameProto = 12
	SqlTypeNameProto_SqlTypeNameProto_TIMESTAMP_WITH_LOCAL_TIME_ZONE_ SqlTypeNameProto = 13
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_YEAR_                  SqlTypeNameProto = 14
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_YEAR_MONTH_            SqlTypeNameProto = 15
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_MONTH_                 SqlTypeNameProto = 16
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_DAY_                   SqlTypeNameProto = 17
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_DAY_HOUR_              SqlTypeNameProto = 18
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_DAY_MINUTE_            SqlTypeNameProto = 19
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_DAY_SECOND_            SqlTypeNameProto = 20
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_HOUR_                  SqlTypeNameProto = 21
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_HOUR_MINUTE_           SqlTypeNameProto = 22
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_HOUR_SECOND_           SqlTypeNameProto = 23
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_MINUTE_                SqlTypeNameProto = 24
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_MINUTE_SECOND_         SqlTypeNameProto = 25
	SqlTypeNameProto_SqlTypeNameProto_INTERVAL_SECOND_                SqlTypeNameProto = 26
	SqlTypeNameProto_SqlTypeNameProto_CHAR_                           SqlTypeNameProto = 27
	SqlTypeNameProto_SqlTypeNameProto_VARCHAR_                        SqlTypeNameProto = 28
	SqlTypeNameProto_SqlTypeNameProto_BINARY_                         SqlTypeNameProto = 29
	SqlTypeNameProto_SqlTypeNameProto_VARBINARY_                      SqlTypeNameProto = 30
	SqlTypeNameProto_SqlTypeNameProto_NULL_                           SqlTypeNameProto = 31
	SqlTypeNameProto_SqlTypeNameProto_UNKNOWN_                        SqlTypeNameProto = 32
	SqlTypeNameProto_SqlTypeNameProto_ANY_                            SqlTypeNameProto = 33
	SqlTypeNameProto_SqlTypeNameProto_SYMBOL_                         SqlTypeNameProto = 34
	SqlTypeNameProto_SqlTypeNameProto_MULTISET_                       SqlTypeNameProto = 35
	SqlTypeNameProto_SqlTypeNameProto_ARRAY_                          SqlTypeNameProto = 36
	SqlTypeNameProto_SqlTypeNameProto_MAP_                            SqlTypeNameProto = 37
	SqlTypeNameProto_SqlTypeNameProto_DISTINCT_                       SqlTypeNameProto = 38
	SqlTypeNameProto_SqlTypeNameProto_STRUCTURED_                     SqlTypeNameProto = 39
	SqlTypeNameProto_SqlTypeNameProto_ROW_                            SqlTypeNameProto = 40
	SqlTypeNameProto_SqlTypeNameProto_OTHER_                          SqlTypeNameProto = 41
	SqlTypeNameProto_SqlTypeNameProto_CURSOR_                         SqlTypeNameProto = 42
	SqlTypeNameProto_SqlTypeNameProto_COLUMN_LIST_                    SqlTypeNameProto = 43
	SqlTypeNameProto_SqlTypeNameProto_DYNAMIC_STAR_                   SqlTypeNameProto = 44
	SqlTypeNameProto_SqlTypeNameProto_GEOMETRY_                       SqlTypeNameProto = 45
	SqlTypeNameProto_SqlTypeNameProto_SARG_                           SqlTypeNameProto = 46
)

// Enum value maps for SqlTypeNameProto.
var (
	SqlTypeNameProto_name = map[int32]string{
		0:  "SqlTypeNameProto_BOOLEAN_",
		1:  "SqlTypeNameProto_TINYINT_",
		2:  "SqlTypeNameProto_SMALLINT_",
		3:  "SqlTypeNameProto_INTEGER_",
		4:  "SqlTypeNameProto_BIGINT_",
		5:  "SqlTypeNameProto_DECIMAL_",
		6:  "SqlTypeNameProto_FLOAT_",
		7:  "SqlTypeNameProto_REAL_",
		8:  "SqlTypeNameProto_DOUBLE_",
		9:  "SqlTypeNameProto_DATE_",
		10: "SqlTypeNameProto_TIME_",
		11: "SqlTypeNameProto_TIME_WITH_LOCAL_TIME_ZONE_",
		12: "SqlTypeNameProto_TIMESTAMP_",
		13: "SqlTypeNameProto_TIMESTAMP_WITH_LOCAL_TIME_ZONE_",
		14: "SqlTypeNameProto_INTERVAL_YEAR_",
		15: "SqlTypeNameProto_INTERVAL_YEAR_MONTH_",
		16: "SqlTypeNameProto_INTERVAL_MONTH_",
		17: "SqlTypeNameProto_INTERVAL_DAY_",
		18: "SqlTypeNameProto_INTERVAL_DAY_HOUR_",
		19: "SqlTypeNameProto_INTERVAL_DAY_MINUTE_",
		20: "SqlTypeNameProto_INTERVAL_DAY_SECOND_",
		21: "SqlTypeNameProto_INTERVAL_HOUR_",
		22: "SqlTypeNameProto_INTERVAL_HOUR_MINUTE_",
		23: "SqlTypeNameProto_INTERVAL_HOUR_SECOND_",
		24: "SqlTypeNameProto_INTERVAL_MINUTE_",
		25: "SqlTypeNameProto_INTERVAL_MINUTE_SECOND_",
		26: "SqlTypeNameProto_INTERVAL_SECOND_",
		27: "SqlTypeNameProto_CHAR_",
		28: "SqlTypeNameProto_VARCHAR_",
		29: "SqlTypeNameProto_BINARY_",
		30: "SqlTypeNameProto_VARBINARY_",
		31: "SqlTypeNameProto_NULL_",
		32: "SqlTypeNameProto_UNKNOWN_",
		33: "SqlTypeNameProto_ANY_",
		34: "SqlTypeNameProto_SYMBOL_",
		35: "SqlTypeNameProto_MULTISET_",
		36: "SqlTypeNameProto_ARRAY_",
		37: "SqlTypeNameProto_MAP_",
		38: "SqlTypeNameProto_DISTINCT_",
		39: "SqlTypeNameProto_STRUCTURED_",
		40: "SqlTypeNameProto_ROW_",
		41: "SqlTypeNameProto_OTHER_",
		42: "SqlTypeNameProto_CURSOR_",
		43: "SqlTypeNameProto_COLUMN_LIST_",
		44: "SqlTypeNameProto_DYNAMIC_STAR_",
		45: "SqlTypeNameProto_GEOMETRY_",
		46: "SqlTypeNameProto_SARG_",
	}
	SqlTypeNameProto_value = map[string]int32{
		"SqlTypeNameProto_BOOLEAN_":                        0,
		"SqlTypeNameProto_TINYINT_":                        1,
		"SqlTypeNameProto_SMALLINT_":                       2,
		"SqlTypeNameProto_INTEGER_":                        3,
		"SqlTypeNameProto_BIGINT_":                         4,
		"SqlTypeNameProto_DECIMAL_":                        5,
		"SqlTypeNameProto_FLOAT_":                          6,
		"SqlTypeNameProto_REAL_":                           7,
		"SqlTypeNameProto_DOUBLE_":                         8,
		"SqlTypeNameProto_DATE_":                           9,
		"SqlTypeNameProto_TIME_":                           10,
		"SqlTypeNameProto_TIME_WITH_LOCAL_TIME_ZONE_":      11,
		"SqlTypeNameProto_TIMESTAMP_":                      12,
		"SqlTypeNameProto_TIMESTAMP_WITH_LOCAL_TIME_ZONE_": 13,
		"SqlTypeNameProto_INTERVAL_YEAR_":                  14,
		"SqlTypeNameProto_INTERVAL_YEAR_MONTH_":            15,
		"SqlTypeNameProto_INTERVAL_MONTH_":                 16,
		"SqlTypeNameProto_INTERVAL_DAY_":                   17,
		"SqlTypeNameProto_INTERVAL_DAY_HOUR_":              18,
		"SqlTypeNameProto_INTERVAL_DAY_MINUTE_":            19,
		"SqlTypeNameProto_INTERVAL_DAY_SECOND_":            20,
		"SqlTypeNameProto_INTERVAL_HOUR_":                  21,
		"SqlTypeNameProto_INTERVAL_HOUR_MINUTE_":           22,
		"SqlTypeNameProto_INTERVAL_HOUR_SECOND_":           23,
		"SqlTypeNameProto_INTERVAL_MINUTE_":                24,
		"SqlTypeNameProto_INTERVAL_MINUTE_SECOND_":         25,
		"SqlTypeNameProto_INTERVAL_SECOND_":                26,
		"SqlTypeNameProto_CHAR_":                           27,
		"SqlTypeNameProto_VARCHAR_":                        28,
		"SqlTypeNameProto_BINARY_":                         29,
		"SqlTypeNameProto_VARBINARY_":                      30,
		"SqlTypeNameProto_NULL_":                           31,
		"SqlTypeNameProto_UNKNOWN_":                        32,
		"SqlTypeNameProto_ANY_":                            33,
		"SqlTypeNameProto_SYMBOL_":                         34,
		"SqlTypeNameProto_MULTISET_":                       35,
		"SqlTypeNameProto_ARRAY_":                          36,
		"SqlTypeNameProto_MAP_":                            37,
		"SqlTypeNameProto_DISTINCT_":                       38,
		"SqlTypeNameProto_STRUCTURED_":                     39,
		"SqlTypeNameProto_ROW_":                            40,
		"SqlTypeNameProto_OTHER_":                          41,
		"SqlTypeNameProto_CURSOR_":                         42,
		"SqlTypeNameProto_COLUMN_LIST_":                    43,
		"SqlTypeNameProto_DYNAMIC_STAR_":                   44,
		"SqlTypeNameProto_GEOMETRY_":                       45,
		"SqlTypeNameProto_SARG_":                           46,
	}
)

func (x SqlTypeNameProto) Enum() *SqlTypeNameProto {
	p := new(SqlTypeNameProto)
	*p = x
	return p
}

func (x SqlTypeNameProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlTypeNameProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[0].Descriptor()
}

func (SqlTypeNameProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[0]
}

func (x SqlTypeNameProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlTypeNameProto.Descriptor instead.
func (SqlTypeNameProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{0}
}

type CoercibilityProto int32

const (
	CoercibilityProto_CoercibilityProto_EXPLICIT_  CoercibilityProto = 0
	CoercibilityProto_CoercibilityProto_IMPLICIT_  CoercibilityProto = 1
	CoercibilityProto_CoercibilityProto_COERCIBLE_ CoercibilityProto = 2
	CoercibilityProto_CoercibilityProto_NONE_      CoercibilityProto = 3
)

// Enum value maps for CoercibilityProto.
var (
	CoercibilityProto_name = map[int32]string{
		0: "CoercibilityProto_EXPLICIT_",
		1: "CoercibilityProto_IMPLICIT_",
		2: "CoercibilityProto_COERCIBLE_",
		3: "CoercibilityProto_NONE_",
	}
	CoercibilityProto_value = map[string]int32{
		"CoercibilityProto_EXPLICIT_":  0,
		"CoercibilityProto_IMPLICIT_":  1,
		"CoercibilityProto_COERCIBLE_": 2,
		"CoercibilityProto_NONE_":      3,
	}
)

func (x CoercibilityProto) Enum() *CoercibilityProto {
	p := new(CoercibilityProto)
	*p = x
	return p
}

func (x CoercibilityProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CoercibilityProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[1].Descriptor()
}

func (CoercibilityProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[1]
}

func (x CoercibilityProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CoercibilityProto.Descriptor instead.
func (CoercibilityProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{1}
}

type TimeUnitRangeProto int32

const (
	TimeUnitRangeProto_TimeUnitRangeProto_YEAR_             TimeUnitRangeProto = 0
	TimeUnitRangeProto_TimeUnitRangeProto_YEAR_TO_MONTH_    TimeUnitRangeProto = 1
	TimeUnitRangeProto_TimeUnitRangeProto_MONTH_            TimeUnitRangeProto = 2
	TimeUnitRangeProto_TimeUnitRangeProto_DAY_              TimeUnitRangeProto = 3
	TimeUnitRangeProto_TimeUnitRangeProto_DAY_TO_HOUR_      TimeUnitRangeProto = 4
	TimeUnitRangeProto_TimeUnitRangeProto_DAY_TO_MINUTE_    TimeUnitRangeProto = 5
	TimeUnitRangeProto_TimeUnitRangeProto_DAY_TO_SECOND_    TimeUnitRangeProto = 6
	TimeUnitRangeProto_TimeUnitRangeProto_HOUR_             TimeUnitRangeProto = 7
	TimeUnitRangeProto_TimeUnitRangeProto_HOUR_TO_MINUTE_   TimeUnitRangeProto = 8
	TimeUnitRangeProto_TimeUnitRangeProto_HOUR_TO_SECOND_   TimeUnitRangeProto = 9
	TimeUnitRangeProto_TimeUnitRangeProto_MINUTE_           TimeUnitRangeProto = 10
	TimeUnitRangeProto_TimeUnitRangeProto_MINUTE_TO_SECOND_ TimeUnitRangeProto = 11
	TimeUnitRangeProto_TimeUnitRangeProto_SECOND_           TimeUnitRangeProto = 12
	TimeUnitRangeProto_TimeUnitRangeProto_ISOYEAR_          TimeUnitRangeProto = 13
	TimeUnitRangeProto_TimeUnitRangeProto_QUARTER_          TimeUnitRangeProto = 14
	TimeUnitRangeProto_TimeUnitRangeProto_WEEK_             TimeUnitRangeProto = 15
	TimeUnitRangeProto_TimeUnitRangeProto_MILLISECOND_      TimeUnitRangeProto = 16
	TimeUnitRangeProto_TimeUnitRangeProto_MICROSECOND_      TimeUnitRangeProto = 17
	TimeUnitRangeProto_TimeUnitRangeProto_NANOSECOND_       TimeUnitRangeProto = 18
	TimeUnitRangeProto_TimeUnitRangeProto_DOW_              TimeUnitRangeProto = 19
	TimeUnitRangeProto_TimeUnitRangeProto_ISODOW_           TimeUnitRangeProto = 20
	TimeUnitRangeProto_TimeUnitRangeProto_DOY_              TimeUnitRangeProto = 21
	TimeUnitRangeProto_TimeUnitRangeProto_EPOCH_            TimeUnitRangeProto = 22
	TimeUnitRangeProto_TimeUnitRangeProto_DECADE_           TimeUnitRangeProto = 23
	TimeUnitRangeProto_TimeUnitRangeProto_CENTURY_          TimeUnitRangeProto = 24
	TimeUnitRangeProto_TimeUnitRangeProto_MILLENNIUM_       TimeUnitRangeProto = 25
)

// Enum value maps for TimeUnitRangeProto.
var (
	TimeUnitRangeProto_name = map[int32]string{
		0:  "TimeUnitRangeProto_YEAR_",
		1:  "TimeUnitRangeProto_YEAR_TO_MONTH_",
		2:  "TimeUnitRangeProto_MONTH_",
		3:  "TimeUnitRangeProto_DAY_",
		4:  "TimeUnitRangeProto_DAY_TO_HOUR_",
		5:  "TimeUnitRangeProto_DAY_TO_MINUTE_",
		6:  "TimeUnitRangeProto_DAY_TO_SECOND_",
		7:  "TimeUnitRangeProto_HOUR_",
		8:  "TimeUnitRangeProto_HOUR_TO_MINUTE_",
		9:  "TimeUnitRangeProto_HOUR_TO_SECOND_",
		10: "TimeUnitRangeProto_MINUTE_",
		11: "TimeUnitRangeProto_MINUTE_TO_SECOND_",
		12: "TimeUnitRangeProto_SECOND_",
		13: "TimeUnitRangeProto_ISOYEAR_",
		14: "TimeUnitRangeProto_QUARTER_",
		15: "TimeUnitRangeProto_WEEK_",
		16: "TimeUnitRangeProto_MILLISECOND_",
		17: "TimeUnitRangeProto_MICROSECOND_",
		18: "TimeUnitRangeProto_NANOSECOND_",
		19: "TimeUnitRangeProto_DOW_",
		20: "TimeUnitRangeProto_ISODOW_",
		21: "TimeUnitRangeProto_DOY_",
		22: "TimeUnitRangeProto_EPOCH_",
		23: "TimeUnitRangeProto_DECADE_",
		24: "TimeUnitRangeProto_CENTURY_",
		25: "TimeUnitRangeProto_MILLENNIUM_",
	}
	TimeUnitRangeProto_value = map[string]int32{
		"TimeUnitRangeProto_YEAR_":             0,
		"TimeUnitRangeProto_YEAR_TO_MONTH_":    1,
		"TimeUnitRangeProto_MONTH_":            2,
		"TimeUnitRangeProto_DAY_":              3,
		"TimeUnitRangeProto_DAY_TO_HOUR_":      4,
		"TimeUnitRangeProto_DAY_TO_MINUTE_":    5,
		"TimeUnitRangeProto_DAY_TO_SECOND_":    6,
		"TimeUnitRangeProto_HOUR_":             7,
		"TimeUnitRangeProto_HOUR_TO_MINUTE_":   8,
		"TimeUnitRangeProto_HOUR_TO_SECOND_":   9,
		"TimeUnitRangeProto_MINUTE_":           10,
		"TimeUnitRangeProto_MINUTE_TO_SECOND_": 11,
		"TimeUnitRangeProto_SECOND_":           12,
		"TimeUnitRangeProto_ISOYEAR_":          13,
		"TimeUnitRangeProto_QUARTER_":          14,
		"TimeUnitRangeProto_WEEK_":             15,
		"TimeUnitRangeProto_MILLISECOND_":      16,
		"TimeUnitRangeProto_MICROSECOND_":      17,
		"TimeUnitRangeProto_NANOSECOND_":       18,
		"TimeUnitRangeProto_DOW_":              19,
		"TimeUnitRangeProto_ISODOW_":           20,
		"TimeUnitRangeProto_DOY_":              21,
		"TimeUnitRangeProto_EPOCH_":            22,
		"TimeUnitRangeProto_DECADE_":           23,
		"TimeUnitRangeProto_CENTURY_":          24,
		"TimeUnitRangeProto_MILLENNIUM_":       25,
	}
)

func (x TimeUnitRangeProto) Enum() *TimeUnitRangeProto {
	p := new(TimeUnitRangeProto)
	*p = x
	return p
}

func (x TimeUnitRangeProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnitRangeProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[2].Descriptor()
}

func (TimeUnitRangeProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[2]
}

func (x TimeUnitRangeProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnitRangeProto.Descriptor instead.
func (TimeUnitRangeProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{2}
}

type RelDataTypeComparabilityProto int32

const (
	RelDataTypeComparabilityProto_RelDataTypeComparabilityProto_NONE_      RelDataTypeComparabilityProto = 0
	RelDataTypeComparabilityProto_RelDataTypeComparabilityProto_UNORDERED_ RelDataTypeComparabilityProto = 1
	RelDataTypeComparabilityProto_RelDataTypeComparabilityProto_ALL_       RelDataTypeComparabilityProto = 2
)

// Enum value maps for RelDataTypeComparabilityProto.
var (
	RelDataTypeComparabilityProto_name = map[int32]string{
		0: "RelDataTypeComparabilityProto_NONE_",
		1: "RelDataTypeComparabilityProto_UNORDERED_",
		2: "RelDataTypeComparabilityProto_ALL_",
	}
	RelDataTypeComparabilityProto_value = map[string]int32{
		"RelDataTypeComparabilityProto_NONE_":      0,
		"RelDataTypeComparabilityProto_UNORDERED_": 1,
		"RelDataTypeComparabilityProto_ALL_":       2,
	}
)

func (x RelDataTypeComparabilityProto) Enum() *RelDataTypeComparabilityProto {
	p := new(RelDataTypeComparabilityProto)
	*p = x
	return p
}

func (x RelDataTypeComparabilityProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RelDataTypeComparabilityProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[3].Descriptor()
}

func (RelDataTypeComparabilityProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[3]
}

func (x RelDataTypeComparabilityProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RelDataTypeComparabilityProto.Descriptor instead.
func (RelDataTypeComparabilityProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{3}
}

type SqlTypeFamilyProto int32

const (
	SqlTypeFamilyProto_SqlTypeFamilyProto_CHARACTER_           SqlTypeFamilyProto = 0
	SqlTypeFamilyProto_SqlTypeFamilyProto_BINARY_              SqlTypeFamilyProto = 1
	SqlTypeFamilyProto_SqlTypeFamilyProto_NUMERIC_             SqlTypeFamilyProto = 2
	SqlTypeFamilyProto_SqlTypeFamilyProto_DATE_                SqlTypeFamilyProto = 3
	SqlTypeFamilyProto_SqlTypeFamilyProto_TIME_                SqlTypeFamilyProto = 4
	SqlTypeFamilyProto_SqlTypeFamilyProto_TIMESTAMP_           SqlTypeFamilyProto = 5
	SqlTypeFamilyProto_SqlTypeFamilyProto_BOOLEAN_             SqlTypeFamilyProto = 6
	SqlTypeFamilyProto_SqlTypeFamilyProto_INTERVAL_YEAR_MONTH_ SqlTypeFamilyProto = 7
	SqlTypeFamilyProto_SqlTypeFamilyProto_INTERVAL_DAY_TIME_   SqlTypeFamilyProto = 8
	SqlTypeFamilyProto_SqlTypeFamilyProto_STRING_              SqlTypeFamilyProto = 9
	SqlTypeFamilyProto_SqlTypeFamilyProto_APPROXIMATE_NUMERIC_ SqlTypeFamilyProto = 10
	SqlTypeFamilyProto_SqlTypeFamilyProto_EXACT_NUMERIC_       SqlTypeFamilyProto = 11
	SqlTypeFamilyProto_SqlTypeFamilyProto_DECIMAL_             SqlTypeFamilyProto = 12
	SqlTypeFamilyProto_SqlTypeFamilyProto_INTEGER_             SqlTypeFamilyProto = 13
	SqlTypeFamilyProto_SqlTypeFamilyProto_DATETIME_            SqlTypeFamilyProto = 14
	SqlTypeFamilyProto_SqlTypeFamilyProto_DATETIME_INTERVAL_   SqlTypeFamilyProto = 15
	SqlTypeFamilyProto_SqlTypeFamilyProto_MULTISET_            SqlTypeFamilyProto = 16
	SqlTypeFamilyProto_SqlTypeFamilyProto_ARRAY_               SqlTypeFamilyProto = 17
	SqlTypeFamilyProto_SqlTypeFamilyProto_MAP_                 SqlTypeFamilyProto = 18
	SqlTypeFamilyProto_SqlTypeFamilyProto_NULL_                SqlTypeFamilyProto = 19
	SqlTypeFamilyProto_SqlTypeFamilyProto_ANY_                 SqlTypeFamilyProto = 20
	SqlTypeFamilyProto_SqlTypeFamilyProto_CURSOR_              SqlTypeFamilyProto = 21
	SqlTypeFamilyProto_SqlTypeFamilyProto_COLUMN_LIST_         SqlTypeFamilyProto = 22
	SqlTypeFamilyProto_SqlTypeFamilyProto_GEO_                 SqlTypeFamilyProto = 23
	SqlTypeFamilyProto_SqlTypeFamilyProto_IGNORE_              SqlTypeFamilyProto = 24
)

// Enum value maps for SqlTypeFamilyProto.
var (
	SqlTypeFamilyProto_name = map[int32]string{
		0:  "SqlTypeFamilyProto_CHARACTER_",
		1:  "SqlTypeFamilyProto_BINARY_",
		2:  "SqlTypeFamilyProto_NUMERIC_",
		3:  "SqlTypeFamilyProto_DATE_",
		4:  "SqlTypeFamilyProto_TIME_",
		5:  "SqlTypeFamilyProto_TIMESTAMP_",
		6:  "SqlTypeFamilyProto_BOOLEAN_",
		7:  "SqlTypeFamilyProto_INTERVAL_YEAR_MONTH_",
		8:  "SqlTypeFamilyProto_INTERVAL_DAY_TIME_",
		9:  "SqlTypeFamilyProto_STRING_",
		10: "SqlTypeFamilyProto_APPROXIMATE_NUMERIC_",
		11: "SqlTypeFamilyProto_EXACT_NUMERIC_",
		12: "SqlTypeFamilyProto_DECIMAL_",
		13: "SqlTypeFamilyProto_INTEGER_",
		14: "SqlTypeFamilyProto_DATETIME_",
		15: "SqlTypeFamilyProto_DATETIME_INTERVAL_",
		16: "SqlTypeFamilyProto_MULTISET_",
		17: "SqlTypeFamilyProto_ARRAY_",
		18: "SqlTypeFamilyProto_MAP_",
		19: "SqlTypeFamilyProto_NULL_",
		20: "SqlTypeFamilyProto_ANY_",
		21: "SqlTypeFamilyProto_CURSOR_",
		22: "SqlTypeFamilyProto_COLUMN_LIST_",
		23: "SqlTypeFamilyProto_GEO_",
		24: "SqlTypeFamilyProto_IGNORE_",
	}
	SqlTypeFamilyProto_value = map[string]int32{
		"SqlTypeFamilyProto_CHARACTER_":           0,
		"SqlTypeFamilyProto_BINARY_":              1,
		"SqlTypeFamilyProto_NUMERIC_":             2,
		"SqlTypeFamilyProto_DATE_":                3,
		"SqlTypeFamilyProto_TIME_":                4,
		"SqlTypeFamilyProto_TIMESTAMP_":           5,
		"SqlTypeFamilyProto_BOOLEAN_":             6,
		"SqlTypeFamilyProto_INTERVAL_YEAR_MONTH_": 7,
		"SqlTypeFamilyProto_INTERVAL_DAY_TIME_":   8,
		"SqlTypeFamilyProto_STRING_":              9,
		"SqlTypeFamilyProto_APPROXIMATE_NUMERIC_": 10,
		"SqlTypeFamilyProto_EXACT_NUMERIC_":       11,
		"SqlTypeFamilyProto_DECIMAL_":             12,
		"SqlTypeFamilyProto_INTEGER_":             13,
		"SqlTypeFamilyProto_DATETIME_":            14,
		"SqlTypeFamilyProto_DATETIME_INTERVAL_":   15,
		"SqlTypeFamilyProto_MULTISET_":            16,
		"SqlTypeFamilyProto_ARRAY_":               17,
		"SqlTypeFamilyProto_MAP_":                 18,
		"SqlTypeFamilyProto_NULL_":                19,
		"SqlTypeFamilyProto_ANY_":                 20,
		"SqlTypeFamilyProto_CURSOR_":              21,
		"SqlTypeFamilyProto_COLUMN_LIST_":         22,
		"SqlTypeFamilyProto_GEO_":                 23,
		"SqlTypeFamilyProto_IGNORE_":              24,
	}
)

func (x SqlTypeFamilyProto) Enum() *SqlTypeFamilyProto {
	p := new(SqlTypeFamilyProto)
	*p = x
	return p
}

func (x SqlTypeFamilyProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlTypeFamilyProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[4].Descriptor()
}

func (SqlTypeFamilyProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[4]
}

func (x SqlTypeFamilyProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlTypeFamilyProto.Descriptor instead.
func (SqlTypeFamilyProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{4}
}

type StructKindProto int32

const (
	StructKindProto_StructKindProto_NONE_                  StructKindProto = 0
	StructKindProto_StructKindProto_FULLY_QUALIFIED_       StructKindProto = 1
	StructKindProto_StructKindProto_PEEK_FIELDS_DEFAULT_   StructKindProto = 2
	StructKindProto_StructKindProto_PEEK_FIELDS_           StructKindProto = 3
	StructKindProto_StructKindProto_PEEK_FIELDS_NO_EXPAND_ StructKindProto = 4
)

// Enum value maps for StructKindProto.
var (
	StructKindProto_name = map[int32]string{
		0: "StructKindProto_NONE_",
		1: "StructKindProto_FULLY_QUALIFIED_",
		2: "StructKindProto_PEEK_FIELDS_DEFAULT_",
		3: "StructKindProto_PEEK_FIELDS_",
		4: "StructKindProto_PEEK_FIELDS_NO_EXPAND_",
	}
	StructKindProto_value = map[string]int32{
		"StructKindProto_NONE_":                  0,
		"StructKindProto_FULLY_QUALIFIED_":       1,
		"StructKindProto_PEEK_FIELDS_DEFAULT_":   2,
		"StructKindProto_PEEK_FIELDS_":           3,
		"StructKindProto_PEEK_FIELDS_NO_EXPAND_": 4,
	}
)

func (x StructKindProto) Enum() *StructKindProto {
	p := new(StructKindProto)
	*p = x
	return p
}

func (x StructKindProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StructKindProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[5].Descriptor()
}

func (StructKindProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[5]
}

func (x StructKindProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StructKindProto.Descriptor instead.
func (StructKindProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{5}
}

type HintOptionFormatProto int32

const (
	HintOptionFormatProto_HintOptionFormatProto_EMPTY_        HintOptionFormatProto = 0
	HintOptionFormatProto_HintOptionFormatProto_LITERAL_LIST_ HintOptionFormatProto = 1
	HintOptionFormatProto_HintOptionFormatProto_ID_LIST_      HintOptionFormatProto = 2
	HintOptionFormatProto_HintOptionFormatProto_KV_LIST_      HintOptionFormatProto = 3
)

// Enum value maps for HintOptionFormatProto.
var (
	HintOptionFormatProto_name = map[int32]string{
		0: "HintOptionFormatProto_EMPTY_",
		1: "HintOptionFormatProto_LITERAL_LIST_",
		2: "HintOptionFormatProto_ID_LIST_",
		3: "HintOptionFormatProto_KV_LIST_",
	}
	HintOptionFormatProto_value = map[string]int32{
		"HintOptionFormatProto_EMPTY_":        0,
		"HintOptionFormatProto_LITERAL_LIST_": 1,
		"HintOptionFormatProto_ID_LIST_":      2,
		"HintOptionFormatProto_KV_LIST_":      3,
	}
)

func (x HintOptionFormatProto) Enum() *HintOptionFormatProto {
	p := new(HintOptionFormatProto)
	*p = x
	return p
}

func (x HintOptionFormatProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HintOptionFormatProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[6].Descriptor()
}

func (HintOptionFormatProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[6]
}

func (x HintOptionFormatProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HintOptionFormatProto.Descriptor instead.
func (HintOptionFormatProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{6}
}

type SqlKindProto int32

const (
	SqlKindProto_SqlKindProto_OTHER_                        SqlKindProto = 0
	SqlKindProto_SqlKindProto_SELECT_                       SqlKindProto = 1
	SqlKindProto_SqlKindProto_HINT_                         SqlKindProto = 2
	SqlKindProto_SqlKindProto_TABLE_REF_                    SqlKindProto = 3
	SqlKindProto_SqlKindProto_JOIN_                         SqlKindProto = 4
	SqlKindProto_SqlKindProto_IDENTIFIER_                   SqlKindProto = 5
	SqlKindProto_SqlKindProto_LITERAL_                      SqlKindProto = 6
	SqlKindProto_SqlKindProto_INTERVAL_QUALIFIER_           SqlKindProto = 7
	SqlKindProto_SqlKindProto_OTHER_FUNCTION_               SqlKindProto = 8
	SqlKindProto_SqlKindProto_POSITION_                     SqlKindProto = 9
	SqlKindProto_SqlKindProto_EXPLAIN_                      SqlKindProto = 10
	SqlKindProto_SqlKindProto_DESCRIBE_SCHEMA_              SqlKindProto = 11
	SqlKindProto_SqlKindProto_DESCRIBE_TABLE_               SqlKindProto = 12
	SqlKindProto_SqlKindProto_INSERT_                       SqlKindProto = 13
	SqlKindProto_SqlKindProto_DELETE_                       SqlKindProto = 14
	SqlKindProto_SqlKindProto_UPDATE_                       SqlKindProto = 15
	SqlKindProto_SqlKindProto_SET_OPTION_                   SqlKindProto = 16
	SqlKindProto_SqlKindProto_DYNAMIC_PARAM_                SqlKindProto = 17
	SqlKindProto_SqlKindProto_ORDER_BY_                     SqlKindProto = 18
	SqlKindProto_SqlKindProto_WITH_                         SqlKindProto = 19
	SqlKindProto_SqlKindProto_WITH_ITEM_                    SqlKindProto = 20
	SqlKindProto_SqlKindProto_ITEM_                         SqlKindProto = 21
	SqlKindProto_SqlKindProto_UNION_                        SqlKindProto = 22
	SqlKindProto_SqlKindProto_EXCEPT_                       SqlKindProto = 23
	SqlKindProto_SqlKindProto_INTERSECT_                    SqlKindProto = 24
	SqlKindProto_SqlKindProto_AS_                           SqlKindProto = 25
	SqlKindProto_SqlKindProto_ARGUMENT_ASSIGNMENT_          SqlKindProto = 26
	SqlKindProto_SqlKindProto_DEFAULT_                      SqlKindProto = 27
	SqlKindProto_SqlKindProto_OVER_                         SqlKindProto = 28
	SqlKindProto_SqlKindProto_RESPECT_NULLS_                SqlKindProto = 29
	SqlKindProto_SqlKindProto_IGNORE_NULLS_                 SqlKindProto = 30
	SqlKindProto_SqlKindProto_FILTER_                       SqlKindProto = 31
	SqlKindProto_SqlKindProto_WITHIN_GROUP_                 SqlKindProto = 32
	SqlKindProto_SqlKindProto_WITHIN_DISTINCT_              SqlKindProto = 33
	SqlKindProto_SqlKindProto_WINDOW_                       SqlKindProto = 34
	SqlKindProto_SqlKindProto_MERGE_                        SqlKindProto = 35
	SqlKindProto_SqlKindProto_TABLESAMPLE_                  SqlKindProto = 36
	SqlKindProto_SqlKindProto_PIVOT_                        SqlKindProto = 37
	SqlKindProto_SqlKindProto_UNPIVOT_                      SqlKindProto = 38
	SqlKindProto_SqlKindProto_MATCH_RECOGNIZE_              SqlKindProto = 39
	SqlKindProto_SqlKindProto_SNAPSHOT_                     SqlKindProto = 40
	SqlKindProto_SqlKindProto_TIMES_                        SqlKindProto = 41
	SqlKindProto_SqlKindProto_DIVIDE_                       SqlKindProto = 42
	SqlKindProto_SqlKindProto_MOD_                          SqlKindProto = 43
	SqlKindProto_SqlKindProto_PLUS_                         SqlKindProto = 44
	SqlKindProto_SqlKindProto_MINUS_                        SqlKindProto = 45
	SqlKindProto_SqlKindProto_PATTERN_ALTER_                SqlKindProto = 46
	SqlKindProto_SqlKindProto_PATTERN_CONCAT_               SqlKindProto = 47
	SqlKindProto_SqlKindProto_IN_                           SqlKindProto = 48
	SqlKindProto_SqlKindProto_NOT_IN_                       SqlKindProto = 49
	SqlKindProto_SqlKindProto_DRUID_IN_                     SqlKindProto = 50
	SqlKindProto_SqlKindProto_DRUID_NOT_IN_                 SqlKindProto = 51
	SqlKindProto_SqlKindProto_LESS_THAN_                    SqlKindProto = 52
	SqlKindProto_SqlKindProto_GREATER_THAN_                 SqlKindProto = 53
	SqlKindProto_SqlKindProto_LESS_THAN_OR_EQUAL_           SqlKindProto = 54
	SqlKindProto_SqlKindProto_GREATER_THAN_OR_EQUAL_        SqlKindProto = 55
	SqlKindProto_SqlKindProto_EQUALS_                       SqlKindProto = 56
	SqlKindProto_SqlKindProto_NOT_EQUALS_                   SqlKindProto = 57
	SqlKindProto_SqlKindProto_IS_DISTINCT_FROM_             SqlKindProto = 58
	SqlKindProto_SqlKindProto_IS_NOT_DISTINCT_FROM_         SqlKindProto = 59
	SqlKindProto_SqlKindProto_SEARCH_                       SqlKindProto = 60
	SqlKindProto_SqlKindProto_OR_                           SqlKindProto = 61
	SqlKindProto_SqlKindProto_AND_                          SqlKindProto = 62
	SqlKindProto_SqlKindProto_DOT_                          SqlKindProto = 63
	SqlKindProto_SqlKindProto_OVERLAPS_                     SqlKindProto = 64
	SqlKindProto_SqlKindProto_CONTAINS_                     SqlKindProto = 65
	SqlKindProto_SqlKindProto_PRECEDES_                     SqlKindProto = 66
	SqlKindProto_SqlKindProto_IMMEDIATELY_PRECEDES_         SqlKindProto = 67
	SqlKindProto_SqlKindProto_SUCCEEDS_                     SqlKindProto = 68
	SqlKindProto_SqlKindProto_IMMEDIATELY_SUCCEEDS_         SqlKindProto = 69
	SqlKindProto_SqlKindProto_PERIOD_EQUALS_                SqlKindProto = 70
	SqlKindProto_SqlKindProto_LIKE_                         SqlKindProto = 71
	SqlKindProto_SqlKindProto_RLIKE_                        SqlKindProto = 72
	SqlKindProto_SqlKindProto_SIMILAR_                      SqlKindProto = 73
	SqlKindProto_SqlKindProto_POSIX_REGEX_CASE_SENSITIVE_   SqlKindProto = 74
	SqlKindProto_SqlKindProto_POSIX_REGEX_CASE_INSENSITIVE_ SqlKindProto = 75
	SqlKindProto_SqlKindProto_BETWEEN_                      SqlKindProto = 76
	SqlKindProto_SqlKindProto_DRUID_BETWEEN_                SqlKindProto = 77
	SqlKindProto_SqlKindProto_CASE_                         SqlKindProto = 78
	SqlKindProto_SqlKindProto_INTERVAL_                     SqlKindProto = 79
	SqlKindProto_SqlKindProto_SEPARATOR_                    SqlKindProto = 80
	SqlKindProto_SqlKindProto_NULLIF_                       SqlKindProto = 81
	SqlKindProto_SqlKindProto_COALESCE_                     SqlKindProto = 82
	SqlKindProto_SqlKindProto_DECODE_                       SqlKindProto = 83
	SqlKindProto_SqlKindProto_NVL_                          SqlKindProto = 84
	SqlKindProto_SqlKindProto_GREATEST_                     SqlKindProto = 85
	SqlKindProto_SqlKindProto_CONCAT2_                      SqlKindProto = 86
	SqlKindProto_SqlKindProto_IF_                           SqlKindProto = 87
	SqlKindProto_SqlKindProto_LEAST_                        SqlKindProto = 88
	SqlKindProto_SqlKindProto_TIMESTAMP_ADD_                SqlKindProto = 89
	SqlKindProto_SqlKindProto_TIMESTAMP_DIFF_               SqlKindProto = 90
	SqlKindProto_SqlKindProto_NOT_                          SqlKindProto = 91
	SqlKindProto_SqlKindProto_PLUS_PREFIX_                  SqlKindProto = 92
	SqlKindProto_SqlKindProto_MINUS_PREFIX_                 SqlKindProto = 93
	SqlKindProto_SqlKindProto_EXISTS_                       SqlKindProto = 94
	SqlKindProto_SqlKindProto_SOME_                         SqlKindProto = 95
	SqlKindProto_SqlKindProto_ALL_                          SqlKindProto = 96
	SqlKindProto_SqlKindProto_VALUES_                       SqlKindProto = 97
	SqlKindProto_SqlKindProto_EXPLICIT_TABLE_               SqlKindProto = 98
	SqlKindProto_SqlKindProto_SCALAR_QUERY_                 SqlKindProto = 99
	SqlKindProto_SqlKindProto_PROCEDURE_CALL_               SqlKindProto = 100
	SqlKindProto_SqlKindProto_NEW_SPECIFICATION_            SqlKindProto = 101
	SqlKindProto_SqlKindProto_FINAL_                        SqlKindProto = 102
	SqlKindProto_SqlKindProto_RUNNING_                      SqlKindProto = 103
	SqlKindProto_SqlKindProto_PREV_                         SqlKindProto = 104
	SqlKindProto_SqlKindProto_NEXT_                         SqlKindProto = 105
	SqlKindProto_SqlKindProto_FIRST_                        SqlKindProto = 106
	SqlKindProto_SqlKindProto_LAST_                         SqlKindProto = 107
	SqlKindProto_SqlKindProto_CLASSIFIER_                   SqlKindProto = 108
	SqlKindProto_SqlKindProto_MATCH_NUMBER_                 SqlKindProto = 109
	SqlKindProto_SqlKindProto_SKIP_TO_FIRST_                SqlKindProto = 110
	SqlKindProto_SqlKindProto_SKIP_TO_LAST_                 SqlKindProto = 111
	SqlKindProto_SqlKindProto_DESCENDING_                   SqlKindProto = 112
	SqlKindProto_SqlKindProto_NULLS_FIRST_                  SqlKindProto = 113
	SqlKindProto_SqlKindProto_NULLS_LAST_                   SqlKindProto = 114
	SqlKindProto_SqlKindProto_IS_TRUE_                      SqlKindProto = 115
	SqlKindProto_SqlKindProto_IS_FALSE_                     SqlKindProto = 116
	SqlKindProto_SqlKindProto_IS_NOT_TRUE_                  SqlKindProto = 117
	SqlKindProto_SqlKindProto_IS_NOT_FALSE_                 SqlKindProto = 118
	SqlKindProto_SqlKindProto_IS_UNKNOWN_                   SqlKindProto = 119
	SqlKindProto_SqlKindProto_IS_NULL_                      SqlKindProto = 120
	SqlKindProto_SqlKindProto_IS_NOT_NULL_                  SqlKindProto = 121
	SqlKindProto_SqlKindProto_PRECEDING_                    SqlKindProto = 122
	SqlKindProto_SqlKindProto_FOLLOWING_                    SqlKindProto = 123
	SqlKindProto_SqlKindProto_FIELD_ACCESS_                 SqlKindProto = 124
	SqlKindProto_SqlKindProto_INPUT_REF_                    SqlKindProto = 125
	SqlKindProto_SqlKindProto_TABLE_INPUT_REF_              SqlKindProto = 126
	SqlKindProto_SqlKindProto_PATTERN_INPUT_REF_            SqlKindProto = 127
	SqlKindProto_SqlKindProto_LOCAL_REF_                    SqlKindProto = 128
	SqlKindProto_SqlKindProto_CORREL_VARIABLE_              SqlKindProto = 129
	SqlKindProto_SqlKindProto_PATTERN_QUANTIFIER_           SqlKindProto = 130
	SqlKindProto_SqlKindProto_ROW_                          SqlKindProto = 131
	SqlKindProto_SqlKindProto_COLUMN_LIST_                  SqlKindProto = 132
	SqlKindProto_SqlKindProto_CAST_                         SqlKindProto = 133
	SqlKindProto_SqlKindProto_NEXT_VALUE_                   SqlKindProto = 134
	SqlKindProto_SqlKindProto_CURRENT_VALUE_                SqlKindProto = 135
	SqlKindProto_SqlKindProto_FLOOR_                        SqlKindProto = 136
	SqlKindProto_SqlKindProto_CEIL_                         SqlKindProto = 137
	SqlKindProto_SqlKindProto_TRIM_                         SqlKindProto = 138
	SqlKindProto_SqlKindProto_LTRIM_                        SqlKindProto = 139
	SqlKindProto_SqlKindProto_RTRIM_                        SqlKindProto = 140
	SqlKindProto_SqlKindProto_EXTRACT_                      SqlKindProto = 141
	SqlKindProto_SqlKindProto_ARRAY_CONCAT_                 SqlKindProto = 142
	SqlKindProto_SqlKindProto_ARRAY_REVERSE_                SqlKindProto = 143
	SqlKindProto_SqlKindProto_REVERSE_                      SqlKindProto = 144
	SqlKindProto_SqlKindProto_SUBSTR_BIG_QUERY_             SqlKindProto = 145
	SqlKindProto_SqlKindProto_SUBSTR_MYSQL_                 SqlKindProto = 146
	SqlKindProto_SqlKindProto_SUBSTR_ORACLE_                SqlKindProto = 147
	SqlKindProto_SqlKindProto_SUBSTR_POSTGRESQL_            SqlKindProto = 148
	SqlKindProto_SqlKindProto_JDBC_FN_                      SqlKindProto = 149
	SqlKindProto_SqlKindProto_MULTISET_VALUE_CONSTRUCTOR_   SqlKindProto = 150
	SqlKindProto_SqlKindProto_MULTISET_QUERY_CONSTRUCTOR_   SqlKindProto = 151
	SqlKindProto_SqlKindProto_JSON_VALUE_EXPRESSION_        SqlKindProto = 152
	SqlKindProto_SqlKindProto_JSON_ARRAYAGG_                SqlKindProto = 153
	SqlKindProto_SqlKindProto_JSON_OBJECTAGG_               SqlKindProto = 154
	SqlKindProto_SqlKindProto_UNNEST_                       SqlKindProto = 155
	SqlKindProto_SqlKindProto_LATERAL_                      SqlKindProto = 156
	SqlKindProto_SqlKindProto_COLLECTION_TABLE_             SqlKindProto = 157
	SqlKindProto_SqlKindProto_ARRAY_VALUE_CONSTRUCTOR_      SqlKindProto = 158
	SqlKindProto_SqlKindProto_ARRAY_QUERY_CONSTRUCTOR_      SqlKindProto = 159
	SqlKindProto_SqlKindProto_MAP_VALUE_CONSTRUCTOR_        SqlKindProto = 160
	SqlKindProto_SqlKindProto_MAP_QUERY_CONSTRUCTOR_        SqlKindProto = 161
	SqlKindProto_SqlKindProto_CURSOR_                       SqlKindProto = 162
	SqlKindProto_SqlKindProto_LITERAL_CHAIN_                SqlKindProto = 163
	SqlKindProto_SqlKindProto_ESCAPE_                       SqlKindProto = 164
	SqlKindProto_SqlKindProto_REINTERPRET_                  SqlKindProto = 165
	SqlKindProto_SqlKindProto_EXTEND_                       SqlKindProto = 166
	SqlKindProto_SqlKindProto_CUBE_                         SqlKindProto = 167
	SqlKindProto_SqlKindProto_ROLLUP_                       SqlKindProto = 168
	SqlKindProto_SqlKindProto_GROUPING_SETS_                SqlKindProto = 169
	SqlKindProto_SqlKindProto_GROUPING_                     SqlKindProto = 170
	SqlKindProto_SqlKindProto_GROUPING_ID_                  SqlKindProto = 171
	SqlKindProto_SqlKindProto_GROUP_ID_                     SqlKindProto = 172
	SqlKindProto_SqlKindProto_PATTERN_PERMUTE_              SqlKindProto = 173
	SqlKindProto_SqlKindProto_PATTERN_EXCLUDED_             SqlKindProto = 174
	SqlKindProto_SqlKindProto_COUNT_                        SqlKindProto = 175
	SqlKindProto_SqlKindProto_SUM_                          SqlKindProto = 176
	SqlKindProto_SqlKindProto_SUM0_                         SqlKindProto = 177
	SqlKindProto_SqlKindProto_MIN_                          SqlKindProto = 178
	SqlKindProto_SqlKindProto_MAX_                          SqlKindProto = 179
	SqlKindProto_SqlKindProto_LEAD_                         SqlKindProto = 180
	SqlKindProto_SqlKindProto_LAG_                          SqlKindProto = 181
	SqlKindProto_SqlKindProto_FIRST_VALUE_                  SqlKindProto = 182
	SqlKindProto_SqlKindProto_LAST_VALUE_                   SqlKindProto = 183
	SqlKindProto_SqlKindProto_ANY_VALUE_                    SqlKindProto = 184
	SqlKindProto_SqlKindProto_COVAR_POP_                    SqlKindProto = 185
	SqlKindProto_SqlKindProto_COVAR_SAMP_                   SqlKindProto = 186
	SqlKindProto_SqlKindProto_REGR_COUNT_                   SqlKindProto = 187
	SqlKindProto_SqlKindProto_REGR_SXX_                     SqlKindProto = 188
	SqlKindProto_SqlKindProto_REGR_SYY_                     SqlKindProto = 189
	SqlKindProto_SqlKindProto_AVG_                          SqlKindProto = 190
	SqlKindProto_SqlKindProto_STDDEV_POP_                   SqlKindProto = 191
	SqlKindProto_SqlKindProto_STDDEV_SAMP_                  SqlKindProto = 192
	SqlKindProto_SqlKindProto_VAR_POP_                      SqlKindProto = 193
	SqlKindProto_SqlKindProto_VAR_SAMP_                     SqlKindProto = 194
	SqlKindProto_SqlKindProto_NTILE_                        SqlKindProto = 195
	SqlKindProto_SqlKindProto_NTH_VALUE_                    SqlKindProto = 196
	SqlKindProto_SqlKindProto_LISTAGG_                      SqlKindProto = 197
	SqlKindProto_SqlKindProto_STRING_AGG_                   SqlKindProto = 198
	SqlKindProto_SqlKindProto_COUNTIF_                      SqlKindProto = 199
	SqlKindProto_SqlKindProto_ARRAY_AGG_                    SqlKindProto = 200
	SqlKindProto_SqlKindProto_ARRAY_CONCAT_AGG_             SqlKindProto = 201
	SqlKindProto_SqlKindProto_GROUP_CONCAT_                 SqlKindProto = 202
	SqlKindProto_SqlKindProto_COLLECT_                      SqlKindProto = 203
	SqlKindProto_SqlKindProto_MODE_                         SqlKindProto = 204
	SqlKindProto_SqlKindProto_PERCENTILE_CONT_              SqlKindProto = 205
	SqlKindProto_SqlKindProto_PERCENTILE_DISC_              SqlKindProto = 206
	SqlKindProto_SqlKindProto_FUSION_                       SqlKindProto = 207
	SqlKindProto_SqlKindProto_INTERSECTION_                 SqlKindProto = 208
	SqlKindProto_SqlKindProto_SINGLE_VALUE_                 SqlKindProto = 209
	SqlKindProto_SqlKindProto_BIT_AND_                      SqlKindProto = 210
	SqlKindProto_SqlKindProto_BIT_OR_                       SqlKindProto = 211
	SqlKindProto_SqlKindProto_BIT_XOR_                      SqlKindProto = 212
	SqlKindProto_SqlKindProto_ROW_NUMBER_                   SqlKindProto = 213
	SqlKindProto_SqlKindProto_RANK_                         SqlKindProto = 214
	SqlKindProto_SqlKindProto_PERCENT_RANK_                 SqlKindProto = 215
	SqlKindProto_SqlKindProto_DENSE_RANK_                   SqlKindProto = 216
	SqlKindProto_SqlKindProto_CUME_DIST_                    SqlKindProto = 217
	SqlKindProto_SqlKindProto_DESCRIPTOR_                   SqlKindProto = 218
	SqlKindProto_SqlKindProto_TUMBLE_                       SqlKindProto = 219
	SqlKindProto_SqlKindProto_TUMBLE_START_                 SqlKindProto = 220
	SqlKindProto_SqlKindProto_TUMBLE_END_                   SqlKindProto = 221
	SqlKindProto_SqlKindProto_HOP_                          SqlKindProto = 222
	SqlKindProto_SqlKindProto_HOP_START_                    SqlKindProto = 223
	SqlKindProto_SqlKindProto_HOP_END_                      SqlKindProto = 224
	SqlKindProto_SqlKindProto_SESSION_                      SqlKindProto = 225
	SqlKindProto_SqlKindProto_SESSION_START_                SqlKindProto = 226
	SqlKindProto_SqlKindProto_SESSION_END_                  SqlKindProto = 227
	SqlKindProto_SqlKindProto_COLUMN_DECL_                  SqlKindProto = 228
	SqlKindProto_SqlKindProto_ATTRIBUTE_DEF_                SqlKindProto = 229
	SqlKindProto_SqlKindProto_CHECK_                        SqlKindProto = 230
	SqlKindProto_SqlKindProto_UNIQUE_                       SqlKindProto = 231
	SqlKindProto_SqlKindProto_PRIMARY_KEY_                  SqlKindProto = 232
	SqlKindProto_SqlKindProto_FOREIGN_KEY_                  SqlKindProto = 233
	SqlKindProto_SqlKindProto_ST_DWITHIN_                   SqlKindProto = 234
	SqlKindProto_SqlKindProto_ST_POINT_                     SqlKindProto = 235
	SqlKindProto_SqlKindProto_ST_POINT3_                    SqlKindProto = 236
	SqlKindProto_SqlKindProto_ST_MAKE_LINE_                 SqlKindProto = 237
	SqlKindProto_SqlKindProto_ST_CONTAINS_                  SqlKindProto = 238
	SqlKindProto_SqlKindProto_HILBERT_                      SqlKindProto = 239
	SqlKindProto_SqlKindProto_COMMIT_                       SqlKindProto = 240
	SqlKindProto_SqlKindProto_ROLLBACK_                     SqlKindProto = 241
	SqlKindProto_SqlKindProto_ALTER_SESSION_                SqlKindProto = 242
	SqlKindProto_SqlKindProto_CREATE_SCHEMA_                SqlKindProto = 243
	SqlKindProto_SqlKindProto_CREATE_FOREIGN_SCHEMA_        SqlKindProto = 244
	SqlKindProto_SqlKindProto_DROP_SCHEMA_                  SqlKindProto = 245
	SqlKindProto_SqlKindProto_CREATE_TABLE_                 SqlKindProto = 246
	SqlKindProto_SqlKindProto_ALTER_TABLE_                  SqlKindProto = 247
	SqlKindProto_SqlKindProto_DROP_TABLE_                   SqlKindProto = 248
	SqlKindProto_SqlKindProto_CREATE_VIEW_                  SqlKindProto = 249
	SqlKindProto_SqlKindProto_ALTER_VIEW_                   SqlKindProto = 250
	SqlKindProto_SqlKindProto_DROP_VIEW_                    SqlKindProto = 251
	SqlKindProto_SqlKindProto_CREATE_MATERIALIZED_VIEW_     SqlKindProto = 252
	SqlKindProto_SqlKindProto_ALTER_MATERIALIZED_VIEW_      SqlKindProto = 253
	SqlKindProto_SqlKindProto_DROP_MATERIALIZED_VIEW_       SqlKindProto = 254
	SqlKindProto_SqlKindProto_CREATE_SEQUENCE_              SqlKindProto = 255
	SqlKindProto_SqlKindProto_ALTER_SEQUENCE_               SqlKindProto = 256
	SqlKindProto_SqlKindProto_DROP_SEQUENCE_                SqlKindProto = 257
	SqlKindProto_SqlKindProto_CREATE_INDEX_                 SqlKindProto = 258
	SqlKindProto_SqlKindProto_ALTER_INDEX_                  SqlKindProto = 259
	SqlKindProto_SqlKindProto_DROP_INDEX_                   SqlKindProto = 260
	SqlKindProto_SqlKindProto_CREATE_TYPE_                  SqlKindProto = 261
	SqlKindProto_SqlKindProto_DROP_TYPE_                    SqlKindProto = 262
	SqlKindProto_SqlKindProto_CREATE_FUNCTION_              SqlKindProto = 263
	SqlKindProto_SqlKindProto_DROP_FUNCTION_                SqlKindProto = 264
	SqlKindProto_SqlKindProto_OTHER_DDL_                    SqlKindProto = 265
)

// Enum value maps for SqlKindProto.
var (
	SqlKindProto_name = map[int32]string{
		0:   "SqlKindProto_OTHER_",
		1:   "SqlKindProto_SELECT_",
		2:   "SqlKindProto_HINT_",
		3:   "SqlKindProto_TABLE_REF_",
		4:   "SqlKindProto_JOIN_",
		5:   "SqlKindProto_IDENTIFIER_",
		6:   "SqlKindProto_LITERAL_",
		7:   "SqlKindProto_INTERVAL_QUALIFIER_",
		8:   "SqlKindProto_OTHER_FUNCTION_",
		9:   "SqlKindProto_POSITION_",
		10:  "SqlKindProto_EXPLAIN_",
		11:  "SqlKindProto_DESCRIBE_SCHEMA_",
		12:  "SqlKindProto_DESCRIBE_TABLE_",
		13:  "SqlKindProto_INSERT_",
		14:  "SqlKindProto_DELETE_",
		15:  "SqlKindProto_UPDATE_",
		16:  "SqlKindProto_SET_OPTION_",
		17:  "SqlKindProto_DYNAMIC_PARAM_",
		18:  "SqlKindProto_ORDER_BY_",
		19:  "SqlKindProto_WITH_",
		20:  "SqlKindProto_WITH_ITEM_",
		21:  "SqlKindProto_ITEM_",
		22:  "SqlKindProto_UNION_",
		23:  "SqlKindProto_EXCEPT_",
		24:  "SqlKindProto_INTERSECT_",
		25:  "SqlKindProto_AS_",
		26:  "SqlKindProto_ARGUMENT_ASSIGNMENT_",
		27:  "SqlKindProto_DEFAULT_",
		28:  "SqlKindProto_OVER_",
		29:  "SqlKindProto_RESPECT_NULLS_",
		30:  "SqlKindProto_IGNORE_NULLS_",
		31:  "SqlKindProto_FILTER_",
		32:  "SqlKindProto_WITHIN_GROUP_",
		33:  "SqlKindProto_WITHIN_DISTINCT_",
		34:  "SqlKindProto_WINDOW_",
		35:  "SqlKindProto_MERGE_",
		36:  "SqlKindProto_TABLESAMPLE_",
		37:  "SqlKindProto_PIVOT_",
		38:  "SqlKindProto_UNPIVOT_",
		39:  "SqlKindProto_MATCH_RECOGNIZE_",
		40:  "SqlKindProto_SNAPSHOT_",
		41:  "SqlKindProto_TIMES_",
		42:  "SqlKindProto_DIVIDE_",
		43:  "SqlKindProto_MOD_",
		44:  "SqlKindProto_PLUS_",
		45:  "SqlKindProto_MINUS_",
		46:  "SqlKindProto_PATTERN_ALTER_",
		47:  "SqlKindProto_PATTERN_CONCAT_",
		48:  "SqlKindProto_IN_",
		49:  "SqlKindProto_NOT_IN_",
		50:  "SqlKindProto_DRUID_IN_",
		51:  "SqlKindProto_DRUID_NOT_IN_",
		52:  "SqlKindProto_LESS_THAN_",
		53:  "SqlKindProto_GREATER_THAN_",
		54:  "SqlKindProto_LESS_THAN_OR_EQUAL_",
		55:  "SqlKindProto_GREATER_THAN_OR_EQUAL_",
		56:  "SqlKindProto_EQUALS_",
		57:  "SqlKindProto_NOT_EQUALS_",
		58:  "SqlKindProto_IS_DISTINCT_FROM_",
		59:  "SqlKindProto_IS_NOT_DISTINCT_FROM_",
		60:  "SqlKindProto_SEARCH_",
		61:  "SqlKindProto_OR_",
		62:  "SqlKindProto_AND_",
		63:  "SqlKindProto_DOT_",
		64:  "SqlKindProto_OVERLAPS_",
		65:  "SqlKindProto_CONTAINS_",
		66:  "SqlKindProto_PRECEDES_",
		67:  "SqlKindProto_IMMEDIATELY_PRECEDES_",
		68:  "SqlKindProto_SUCCEEDS_",
		69:  "SqlKindProto_IMMEDIATELY_SUCCEEDS_",
		70:  "SqlKindProto_PERIOD_EQUALS_",
		71:  "SqlKindProto_LIKE_",
		72:  "SqlKindProto_RLIKE_",
		73:  "SqlKindProto_SIMILAR_",
		74:  "SqlKindProto_POSIX_REGEX_CASE_SENSITIVE_",
		75:  "SqlKindProto_POSIX_REGEX_CASE_INSENSITIVE_",
		76:  "SqlKindProto_BETWEEN_",
		77:  "SqlKindProto_DRUID_BETWEEN_",
		78:  "SqlKindProto_CASE_",
		79:  "SqlKindProto_INTERVAL_",
		80:  "SqlKindProto_SEPARATOR_",
		81:  "SqlKindProto_NULLIF_",
		82:  "SqlKindProto_COALESCE_",
		83:  "SqlKindProto_DECODE_",
		84:  "SqlKindProto_NVL_",
		85:  "SqlKindProto_GREATEST_",
		86:  "SqlKindProto_CONCAT2_",
		87:  "SqlKindProto_IF_",
		88:  "SqlKindProto_LEAST_",
		89:  "SqlKindProto_TIMESTAMP_ADD_",
		90:  "SqlKindProto_TIMESTAMP_DIFF_",
		91:  "SqlKindProto_NOT_",
		92:  "SqlKindProto_PLUS_PREFIX_",
		93:  "SqlKindProto_MINUS_PREFIX_",
		94:  "SqlKindProto_EXISTS_",
		95:  "SqlKindProto_SOME_",
		96:  "SqlKindProto_ALL_",
		97:  "SqlKindProto_VALUES_",
		98:  "SqlKindProto_EXPLICIT_TABLE_",
		99:  "SqlKindProto_SCALAR_QUERY_",
		100: "SqlKindProto_PROCEDURE_CALL_",
		101: "SqlKindProto_NEW_SPECIFICATION_",
		102: "SqlKindProto_FINAL_",
		103: "SqlKindProto_RUNNING_",
		104: "SqlKindProto_PREV_",
		105: "SqlKindProto_NEXT_",
		106: "SqlKindProto_FIRST_",
		107: "SqlKindProto_LAST_",
		108: "SqlKindProto_CLASSIFIER_",
		109: "SqlKindProto_MATCH_NUMBER_",
		110: "SqlKindProto_SKIP_TO_FIRST_",
		111: "SqlKindProto_SKIP_TO_LAST_",
		112: "SqlKindProto_DESCENDING_",
		113: "SqlKindProto_NULLS_FIRST_",
		114: "SqlKindProto_NULLS_LAST_",
		115: "SqlKindProto_IS_TRUE_",
		116: "SqlKindProto_IS_FALSE_",
		117: "SqlKindProto_IS_NOT_TRUE_",
		118: "SqlKindProto_IS_NOT_FALSE_",
		119: "SqlKindProto_IS_UNKNOWN_",
		120: "SqlKindProto_IS_NULL_",
		121: "SqlKindProto_IS_NOT_NULL_",
		122: "SqlKindProto_PRECEDING_",
		123: "SqlKindProto_FOLLOWING_",
		124: "SqlKindProto_FIELD_ACCESS_",
		125: "SqlKindProto_INPUT_REF_",
		126: "SqlKindProto_TABLE_INPUT_REF_",
		127: "SqlKindProto_PATTERN_INPUT_REF_",
		128: "SqlKindProto_LOCAL_REF_",
		129: "SqlKindProto_CORREL_VARIABLE_",
		130: "SqlKindProto_PATTERN_QUANTIFIER_",
		131: "SqlKindProto_ROW_",
		132: "SqlKindProto_COLUMN_LIST_",
		133: "SqlKindProto_CAST_",
		134: "SqlKindProto_NEXT_VALUE_",
		135: "SqlKindProto_CURRENT_VALUE_",
		136: "SqlKindProto_FLOOR_",
		137: "SqlKindProto_CEIL_",
		138: "SqlKindProto_TRIM_",
		139: "SqlKindProto_LTRIM_",
		140: "SqlKindProto_RTRIM_",
		141: "SqlKindProto_EXTRACT_",
		142: "SqlKindProto_ARRAY_CONCAT_",
		143: "SqlKindProto_ARRAY_REVERSE_",
		144: "SqlKindProto_REVERSE_",
		145: "SqlKindProto_SUBSTR_BIG_QUERY_",
		146: "SqlKindProto_SUBSTR_MYSQL_",
		147: "SqlKindProto_SUBSTR_ORACLE_",
		148: "SqlKindProto_SUBSTR_POSTGRESQL_",
		149: "SqlKindProto_JDBC_FN_",
		150: "SqlKindProto_MULTISET_VALUE_CONSTRUCTOR_",
		151: "SqlKindProto_MULTISET_QUERY_CONSTRUCTOR_",
		152: "SqlKindProto_JSON_VALUE_EXPRESSION_",
		153: "SqlKindProto_JSON_ARRAYAGG_",
		154: "SqlKindProto_JSON_OBJECTAGG_",
		155: "SqlKindProto_UNNEST_",
		156: "SqlKindProto_LATERAL_",
		157: "SqlKindProto_COLLECTION_TABLE_",
		158: "SqlKindProto_ARRAY_VALUE_CONSTRUCTOR_",
		159: "SqlKindProto_ARRAY_QUERY_CONSTRUCTOR_",
		160: "SqlKindProto_MAP_VALUE_CONSTRUCTOR_",
		161: "SqlKindProto_MAP_QUERY_CONSTRUCTOR_",
		162: "SqlKindProto_CURSOR_",
		163: "SqlKindProto_LITERAL_CHAIN_",
		164: "SqlKindProto_ESCAPE_",
		165: "SqlKindProto_REINTERPRET_",
		166: "SqlKindProto_EXTEND_",
		167: "SqlKindProto_CUBE_",
		168: "SqlKindProto_ROLLUP_",
		169: "SqlKindProto_GROUPING_SETS_",
		170: "SqlKindProto_GROUPING_",
		171: "SqlKindProto_GROUPING_ID_",
		172: "SqlKindProto_GROUP_ID_",
		173: "SqlKindProto_PATTERN_PERMUTE_",
		174: "SqlKindProto_PATTERN_EXCLUDED_",
		175: "SqlKindProto_COUNT_",
		176: "SqlKindProto_SUM_",
		177: "SqlKindProto_SUM0_",
		178: "SqlKindProto_MIN_",
		179: "SqlKindProto_MAX_",
		180: "SqlKindProto_LEAD_",
		181: "SqlKindProto_LAG_",
		182: "SqlKindProto_FIRST_VALUE_",
		183: "SqlKindProto_LAST_VALUE_",
		184: "SqlKindProto_ANY_VALUE_",
		185: "SqlKindProto_COVAR_POP_",
		186: "SqlKindProto_COVAR_SAMP_",
		187: "SqlKindProto_REGR_COUNT_",
		188: "SqlKindProto_REGR_SXX_",
		189: "SqlKindProto_REGR_SYY_",
		190: "SqlKindProto_AVG_",
		191: "SqlKindProto_STDDEV_POP_",
		192: "SqlKindProto_STDDEV_SAMP_",
		193: "SqlKindProto_VAR_POP_",
		194: "SqlKindProto_VAR_SAMP_",
		195: "SqlKindProto_NTILE_",
		196: "SqlKindProto_NTH_VALUE_",
		197: "SqlKindProto_LISTAGG_",
		198: "SqlKindProto_STRING_AGG_",
		199: "SqlKindProto_COUNTIF_",
		200: "SqlKindProto_ARRAY_AGG_",
		201: "SqlKindProto_ARRAY_CONCAT_AGG_",
		202: "SqlKindProto_GROUP_CONCAT_",
		203: "SqlKindProto_COLLECT_",
		204: "SqlKindProto_MODE_",
		205: "SqlKindProto_PERCENTILE_CONT_",
		206: "SqlKindProto_PERCENTILE_DISC_",
		207: "SqlKindProto_FUSION_",
		208: "SqlKindProto_INTERSECTION_",
		209: "SqlKindProto_SINGLE_VALUE_",
		210: "SqlKindProto_BIT_AND_",
		211: "SqlKindProto_BIT_OR_",
		212: "SqlKindProto_BIT_XOR_",
		213: "SqlKindProto_ROW_NUMBER_",
		214: "SqlKindProto_RANK_",
		215: "SqlKindProto_PERCENT_RANK_",
		216: "SqlKindProto_DENSE_RANK_",
		217: "SqlKindProto_CUME_DIST_",
		218: "SqlKindProto_DESCRIPTOR_",
		219: "SqlKindProto_TUMBLE_",
		220: "SqlKindProto_TUMBLE_START_",
		221: "SqlKindProto_TUMBLE_END_",
		222: "SqlKindProto_HOP_",
		223: "SqlKindProto_HOP_START_",
		224: "SqlKindProto_HOP_END_",
		225: "SqlKindProto_SESSION_",
		226: "SqlKindProto_SESSION_START_",
		227: "SqlKindProto_SESSION_END_",
		228: "SqlKindProto_COLUMN_DECL_",
		229: "SqlKindProto_ATTRIBUTE_DEF_",
		230: "SqlKindProto_CHECK_",
		231: "SqlKindProto_UNIQUE_",
		232: "SqlKindProto_PRIMARY_KEY_",
		233: "SqlKindProto_FOREIGN_KEY_",
		234: "SqlKindProto_ST_DWITHIN_",
		235: "SqlKindProto_ST_POINT_",
		236: "SqlKindProto_ST_POINT3_",
		237: "SqlKindProto_ST_MAKE_LINE_",
		238: "SqlKindProto_ST_CONTAINS_",
		239: "SqlKindProto_HILBERT_",
		240: "SqlKindProto_COMMIT_",
		241: "SqlKindProto_ROLLBACK_",
		242: "SqlKindProto_ALTER_SESSION_",
		243: "SqlKindProto_CREATE_SCHEMA_",
		244: "SqlKindProto_CREATE_FOREIGN_SCHEMA_",
		245: "SqlKindProto_DROP_SCHEMA_",
		246: "SqlKindProto_CREATE_TABLE_",
		247: "SqlKindProto_ALTER_TABLE_",
		248: "SqlKindProto_DROP_TABLE_",
		249: "SqlKindProto_CREATE_VIEW_",
		250: "SqlKindProto_ALTER_VIEW_",
		251: "SqlKindProto_DROP_VIEW_",
		252: "SqlKindProto_CREATE_MATERIALIZED_VIEW_",
		253: "SqlKindProto_ALTER_MATERIALIZED_VIEW_",
		254: "SqlKindProto_DROP_MATERIALIZED_VIEW_",
		255: "SqlKindProto_CREATE_SEQUENCE_",
		256: "SqlKindProto_ALTER_SEQUENCE_",
		257: "SqlKindProto_DROP_SEQUENCE_",
		258: "SqlKindProto_CREATE_INDEX_",
		259: "SqlKindProto_ALTER_INDEX_",
		260: "SqlKindProto_DROP_INDEX_",
		261: "SqlKindProto_CREATE_TYPE_",
		262: "SqlKindProto_DROP_TYPE_",
		263: "SqlKindProto_CREATE_FUNCTION_",
		264: "SqlKindProto_DROP_FUNCTION_",
		265: "SqlKindProto_OTHER_DDL_",
	}
	SqlKindProto_value = map[string]int32{
		"SqlKindProto_OTHER_":                        0,
		"SqlKindProto_SELECT_":                       1,
		"SqlKindProto_HINT_":                         2,
		"SqlKindProto_TABLE_REF_":                    3,
		"SqlKindProto_JOIN_":                         4,
		"SqlKindProto_IDENTIFIER_":                   5,
		"SqlKindProto_LITERAL_":                      6,
		"SqlKindProto_INTERVAL_QUALIFIER_":           7,
		"SqlKindProto_OTHER_FUNCTION_":               8,
		"SqlKindProto_POSITION_":                     9,
		"SqlKindProto_EXPLAIN_":                      10,
		"SqlKindProto_DESCRIBE_SCHEMA_":              11,
		"SqlKindProto_DESCRIBE_TABLE_":               12,
		"SqlKindProto_INSERT_":                       13,
		"SqlKindProto_DELETE_":                       14,
		"SqlKindProto_UPDATE_":                       15,
		"SqlKindProto_SET_OPTION_":                   16,
		"SqlKindProto_DYNAMIC_PARAM_":                17,
		"SqlKindProto_ORDER_BY_":                     18,
		"SqlKindProto_WITH_":                         19,
		"SqlKindProto_WITH_ITEM_":                    20,
		"SqlKindProto_ITEM_":                         21,
		"SqlKindProto_UNION_":                        22,
		"SqlKindProto_EXCEPT_":                       23,
		"SqlKindProto_INTERSECT_":                    24,
		"SqlKindProto_AS_":                           25,
		"SqlKindProto_ARGUMENT_ASSIGNMENT_":          26,
		"SqlKindProto_DEFAULT_":                      27,
		"SqlKindProto_OVER_":                         28,
		"SqlKindProto_RESPECT_NULLS_":                29,
		"SqlKindProto_IGNORE_NULLS_":                 30,
		"SqlKindProto_FILTER_":                       31,
		"SqlKindProto_WITHIN_GROUP_":                 32,
		"SqlKindProto_WITHIN_DISTINCT_":              33,
		"SqlKindProto_WINDOW_":                       34,
		"SqlKindProto_MERGE_":                        35,
		"SqlKindProto_TABLESAMPLE_":                  36,
		"SqlKindProto_PIVOT_":                        37,
		"SqlKindProto_UNPIVOT_":                      38,
		"SqlKindProto_MATCH_RECOGNIZE_":              39,
		"SqlKindProto_SNAPSHOT_":                     40,
		"SqlKindProto_TIMES_":                        41,
		"SqlKindProto_DIVIDE_":                       42,
		"SqlKindProto_MOD_":                          43,
		"SqlKindProto_PLUS_":                         44,
		"SqlKindProto_MINUS_":                        45,
		"SqlKindProto_PATTERN_ALTER_":                46,
		"SqlKindProto_PATTERN_CONCAT_":               47,
		"SqlKindProto_IN_":                           48,
		"SqlKindProto_NOT_IN_":                       49,
		"SqlKindProto_DRUID_IN_":                     50,
		"SqlKindProto_DRUID_NOT_IN_":                 51,
		"SqlKindProto_LESS_THAN_":                    52,
		"SqlKindProto_GREATER_THAN_":                 53,
		"SqlKindProto_LESS_THAN_OR_EQUAL_":           54,
		"SqlKindProto_GREATER_THAN_OR_EQUAL_":        55,
		"SqlKindProto_EQUALS_":                       56,
		"SqlKindProto_NOT_EQUALS_":                   57,
		"SqlKindProto_IS_DISTINCT_FROM_":             58,
		"SqlKindProto_IS_NOT_DISTINCT_FROM_":         59,
		"SqlKindProto_SEARCH_":                       60,
		"SqlKindProto_OR_":                           61,
		"SqlKindProto_AND_":                          62,
		"SqlKindProto_DOT_":                          63,
		"SqlKindProto_OVERLAPS_":                     64,
		"SqlKindProto_CONTAINS_":                     65,
		"SqlKindProto_PRECEDES_":                     66,
		"SqlKindProto_IMMEDIATELY_PRECEDES_":         67,
		"SqlKindProto_SUCCEEDS_":                     68,
		"SqlKindProto_IMMEDIATELY_SUCCEEDS_":         69,
		"SqlKindProto_PERIOD_EQUALS_":                70,
		"SqlKindProto_LIKE_":                         71,
		"SqlKindProto_RLIKE_":                        72,
		"SqlKindProto_SIMILAR_":                      73,
		"SqlKindProto_POSIX_REGEX_CASE_SENSITIVE_":   74,
		"SqlKindProto_POSIX_REGEX_CASE_INSENSITIVE_": 75,
		"SqlKindProto_BETWEEN_":                      76,
		"SqlKindProto_DRUID_BETWEEN_":                77,
		"SqlKindProto_CASE_":                         78,
		"SqlKindProto_INTERVAL_":                     79,
		"SqlKindProto_SEPARATOR_":                    80,
		"SqlKindProto_NULLIF_":                       81,
		"SqlKindProto_COALESCE_":                     82,
		"SqlKindProto_DECODE_":                       83,
		"SqlKindProto_NVL_":                          84,
		"SqlKindProto_GREATEST_":                     85,
		"SqlKindProto_CONCAT2_":                      86,
		"SqlKindProto_IF_":                           87,
		"SqlKindProto_LEAST_":                        88,
		"SqlKindProto_TIMESTAMP_ADD_":                89,
		"SqlKindProto_TIMESTAMP_DIFF_":               90,
		"SqlKindProto_NOT_":                          91,
		"SqlKindProto_PLUS_PREFIX_":                  92,
		"SqlKindProto_MINUS_PREFIX_":                 93,
		"SqlKindProto_EXISTS_":                       94,
		"SqlKindProto_SOME_":                         95,
		"SqlKindProto_ALL_":                          96,
		"SqlKindProto_VALUES_":                       97,
		"SqlKindProto_EXPLICIT_TABLE_":               98,
		"SqlKindProto_SCALAR_QUERY_":                 99,
		"SqlKindProto_PROCEDURE_CALL_":               100,
		"SqlKindProto_NEW_SPECIFICATION_":            101,
		"SqlKindProto_FINAL_":                        102,
		"SqlKindProto_RUNNING_":                      103,
		"SqlKindProto_PREV_":                         104,
		"SqlKindProto_NEXT_":                         105,
		"SqlKindProto_FIRST_":                        106,
		"SqlKindProto_LAST_":                         107,
		"SqlKindProto_CLASSIFIER_":                   108,
		"SqlKindProto_MATCH_NUMBER_":                 109,
		"SqlKindProto_SKIP_TO_FIRST_":                110,
		"SqlKindProto_SKIP_TO_LAST_":                 111,
		"SqlKindProto_DESCENDING_":                   112,
		"SqlKindProto_NULLS_FIRST_":                  113,
		"SqlKindProto_NULLS_LAST_":                   114,
		"SqlKindProto_IS_TRUE_":                      115,
		"SqlKindProto_IS_FALSE_":                     116,
		"SqlKindProto_IS_NOT_TRUE_":                  117,
		"SqlKindProto_IS_NOT_FALSE_":                 118,
		"SqlKindProto_IS_UNKNOWN_":                   119,
		"SqlKindProto_IS_NULL_":                      120,
		"SqlKindProto_IS_NOT_NULL_":                  121,
		"SqlKindProto_PRECEDING_":                    122,
		"SqlKindProto_FOLLOWING_":                    123,
		"SqlKindProto_FIELD_ACCESS_":                 124,
		"SqlKindProto_INPUT_REF_":                    125,
		"SqlKindProto_TABLE_INPUT_REF_":              126,
		"SqlKindProto_PATTERN_INPUT_REF_":            127,
		"SqlKindProto_LOCAL_REF_":                    128,
		"SqlKindProto_CORREL_VARIABLE_":              129,
		"SqlKindProto_PATTERN_QUANTIFIER_":           130,
		"SqlKindProto_ROW_":                          131,
		"SqlKindProto_COLUMN_LIST_":                  132,
		"SqlKindProto_CAST_":                         133,
		"SqlKindProto_NEXT_VALUE_":                   134,
		"SqlKindProto_CURRENT_VALUE_":                135,
		"SqlKindProto_FLOOR_":                        136,
		"SqlKindProto_CEIL_":                         137,
		"SqlKindProto_TRIM_":                         138,
		"SqlKindProto_LTRIM_":                        139,
		"SqlKindProto_RTRIM_":                        140,
		"SqlKindProto_EXTRACT_":                      141,
		"SqlKindProto_ARRAY_CONCAT_":                 142,
		"SqlKindProto_ARRAY_REVERSE_":                143,
		"SqlKindProto_REVERSE_":                      144,
		"SqlKindProto_SUBSTR_BIG_QUERY_":             145,
		"SqlKindProto_SUBSTR_MYSQL_":                 146,
		"SqlKindProto_SUBSTR_ORACLE_":                147,
		"SqlKindProto_SUBSTR_POSTGRESQL_":            148,
		"SqlKindProto_JDBC_FN_":                      149,
		"SqlKindProto_MULTISET_VALUE_CONSTRUCTOR_":   150,
		"SqlKindProto_MULTISET_QUERY_CONSTRUCTOR_":   151,
		"SqlKindProto_JSON_VALUE_EXPRESSION_":        152,
		"SqlKindProto_JSON_ARRAYAGG_":                153,
		"SqlKindProto_JSON_OBJECTAGG_":               154,
		"SqlKindProto_UNNEST_":                       155,
		"SqlKindProto_LATERAL_":                      156,
		"SqlKindProto_COLLECTION_TABLE_":             157,
		"SqlKindProto_ARRAY_VALUE_CONSTRUCTOR_":      158,
		"SqlKindProto_ARRAY_QUERY_CONSTRUCTOR_":      159,
		"SqlKindProto_MAP_VALUE_CONSTRUCTOR_":        160,
		"SqlKindProto_MAP_QUERY_CONSTRUCTOR_":        161,
		"SqlKindProto_CURSOR_":                       162,
		"SqlKindProto_LITERAL_CHAIN_":                163,
		"SqlKindProto_ESCAPE_":                       164,
		"SqlKindProto_REINTERPRET_":                  165,
		"SqlKindProto_EXTEND_":                       166,
		"SqlKindProto_CUBE_":                         167,
		"SqlKindProto_ROLLUP_":                       168,
		"SqlKindProto_GROUPING_SETS_":                169,
		"SqlKindProto_GROUPING_":                     170,
		"SqlKindProto_GROUPING_ID_":                  171,
		"SqlKindProto_GROUP_ID_":                     172,
		"SqlKindProto_PATTERN_PERMUTE_":              173,
		"SqlKindProto_PATTERN_EXCLUDED_":             174,
		"SqlKindProto_COUNT_":                        175,
		"SqlKindProto_SUM_":                          176,
		"SqlKindProto_SUM0_":                         177,
		"SqlKindProto_MIN_":                          178,
		"SqlKindProto_MAX_":                          179,
		"SqlKindProto_LEAD_":                         180,
		"SqlKindProto_LAG_":                          181,
		"SqlKindProto_FIRST_VALUE_":                  182,
		"SqlKindProto_LAST_VALUE_":                   183,
		"SqlKindProto_ANY_VALUE_":                    184,
		"SqlKindProto_COVAR_POP_":                    185,
		"SqlKindProto_COVAR_SAMP_":                   186,
		"SqlKindProto_REGR_COUNT_":                   187,
		"SqlKindProto_REGR_SXX_":                     188,
		"SqlKindProto_REGR_SYY_":                     189,
		"SqlKindProto_AVG_":                          190,
		"SqlKindProto_STDDEV_POP_":                   191,
		"SqlKindProto_STDDEV_SAMP_":                  192,
		"SqlKindProto_VAR_POP_":                      193,
		"SqlKindProto_VAR_SAMP_":                     194,
		"SqlKindProto_NTILE_":                        195,
		"SqlKindProto_NTH_VALUE_":                    196,
		"SqlKindProto_LISTAGG_":                      197,
		"SqlKindProto_STRING_AGG_":                   198,
		"SqlKindProto_COUNTIF_":                      199,
		"SqlKindProto_ARRAY_AGG_":                    200,
		"SqlKindProto_ARRAY_CONCAT_AGG_":             201,
		"SqlKindProto_GROUP_CONCAT_":                 202,
		"SqlKindProto_COLLECT_":                      203,
		"SqlKindProto_MODE_":                         204,
		"SqlKindProto_PERCENTILE_CONT_":              205,
		"SqlKindProto_PERCENTILE_DISC_":              206,
		"SqlKindProto_FUSION_":                       207,
		"SqlKindProto_INTERSECTION_":                 208,
		"SqlKindProto_SINGLE_VALUE_":                 209,
		"SqlKindProto_BIT_AND_":                      210,
		"SqlKindProto_BIT_OR_":                       211,
		"SqlKindProto_BIT_XOR_":                      212,
		"SqlKindProto_ROW_NUMBER_":                   213,
		"SqlKindProto_RANK_":                         214,
		"SqlKindProto_PERCENT_RANK_":                 215,
		"SqlKindProto_DENSE_RANK_":                   216,
		"SqlKindProto_CUME_DIST_":                    217,
		"SqlKindProto_DESCRIPTOR_":                   218,
		"SqlKindProto_TUMBLE_":                       219,
		"SqlKindProto_TUMBLE_START_":                 220,
		"SqlKindProto_TUMBLE_END_":                   221,
		"SqlKindProto_HOP_":                          222,
		"SqlKindProto_HOP_START_":                    223,
		"SqlKindProto_HOP_END_":                      224,
		"SqlKindProto_SESSION_":                      225,
		"SqlKindProto_SESSION_START_":                226,
		"SqlKindProto_SESSION_END_":                  227,
		"SqlKindProto_COLUMN_DECL_":                  228,
		"SqlKindProto_ATTRIBUTE_DEF_":                229,
		"SqlKindProto_CHECK_":                        230,
		"SqlKindProto_UNIQUE_":                       231,
		"SqlKindProto_PRIMARY_KEY_":                  232,
		"SqlKindProto_FOREIGN_KEY_":                  233,
		"SqlKindProto_ST_DWITHIN_":                   234,
		"SqlKindProto_ST_POINT_":                     235,
		"SqlKindProto_ST_POINT3_":                    236,
		"SqlKindProto_ST_MAKE_LINE_":                 237,
		"SqlKindProto_ST_CONTAINS_":                  238,
		"SqlKindProto_HILBERT_":                      239,
		"SqlKindProto_COMMIT_":                       240,
		"SqlKindProto_ROLLBACK_":                     241,
		"SqlKindProto_ALTER_SESSION_":                242,
		"SqlKindProto_CREATE_SCHEMA_":                243,
		"SqlKindProto_CREATE_FOREIGN_SCHEMA_":        244,
		"SqlKindProto_DROP_SCHEMA_":                  245,
		"SqlKindProto_CREATE_TABLE_":                 246,
		"SqlKindProto_ALTER_TABLE_":                  247,
		"SqlKindProto_DROP_TABLE_":                   248,
		"SqlKindProto_CREATE_VIEW_":                  249,
		"SqlKindProto_ALTER_VIEW_":                   250,
		"SqlKindProto_DROP_VIEW_":                    251,
		"SqlKindProto_CREATE_MATERIALIZED_VIEW_":     252,
		"SqlKindProto_ALTER_MATERIALIZED_VIEW_":      253,
		"SqlKindProto_DROP_MATERIALIZED_VIEW_":       254,
		"SqlKindProto_CREATE_SEQUENCE_":              255,
		"SqlKindProto_ALTER_SEQUENCE_":               256,
		"SqlKindProto_DROP_SEQUENCE_":                257,
		"SqlKindProto_CREATE_INDEX_":                 258,
		"SqlKindProto_ALTER_INDEX_":                  259,
		"SqlKindProto_DROP_INDEX_":                   260,
		"SqlKindProto_CREATE_TYPE_":                  261,
		"SqlKindProto_DROP_TYPE_":                    262,
		"SqlKindProto_CREATE_FUNCTION_":              263,
		"SqlKindProto_DROP_FUNCTION_":                264,
		"SqlKindProto_OTHER_DDL_":                    265,
	}
)

func (x SqlKindProto) Enum() *SqlKindProto {
	p := new(SqlKindProto)
	*p = x
	return p
}

func (x SqlKindProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlKindProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[7].Descriptor()
}

func (SqlKindProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[7]
}

func (x SqlKindProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlKindProto.Descriptor instead.
func (SqlKindProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{7}
}

type ConsistencyProto int32

const (
	ConsistencyProto_ConsistencyProto_NONE_              ConsistencyProto = 0
	ConsistencyProto_ConsistencyProto_COMPARE_           ConsistencyProto = 1
	ConsistencyProto_ConsistencyProto_LEAST_RESTRICTIVE_ ConsistencyProto = 2
)

// Enum value maps for ConsistencyProto.
var (
	ConsistencyProto_name = map[int32]string{
		0: "ConsistencyProto_NONE_",
		1: "ConsistencyProto_COMPARE_",
		2: "ConsistencyProto_LEAST_RESTRICTIVE_",
	}
	ConsistencyProto_value = map[string]int32{
		"ConsistencyProto_NONE_":              0,
		"ConsistencyProto_COMPARE_":           1,
		"ConsistencyProto_LEAST_RESTRICTIVE_": 2,
	}
)

func (x ConsistencyProto) Enum() *ConsistencyProto {
	p := new(ConsistencyProto)
	*p = x
	return p
}

func (x ConsistencyProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConsistencyProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[8].Descriptor()
}

func (ConsistencyProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[8]
}

func (x ConsistencyProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConsistencyProto.Descriptor instead.
func (ConsistencyProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{8}
}

type CompositionProto int32

const (
	CompositionProto_CompositionProto_AND_      CompositionProto = 0
	CompositionProto_CompositionProto_OR_       CompositionProto = 1
	CompositionProto_CompositionProto_SEQUENCE_ CompositionProto = 2
	CompositionProto_CompositionProto_REPEAT_   CompositionProto = 3
)

// Enum value maps for CompositionProto.
var (
	CompositionProto_name = map[int32]string{
		0: "CompositionProto_AND_",
		1: "CompositionProto_OR_",
		2: "CompositionProto_SEQUENCE_",
		3: "CompositionProto_REPEAT_",
	}
	CompositionProto_value = map[string]int32{
		"CompositionProto_AND_":      0,
		"CompositionProto_OR_":       1,
		"CompositionProto_SEQUENCE_": 2,
		"CompositionProto_REPEAT_":   3,
	}
)

func (x CompositionProto) Enum() *CompositionProto {
	p := new(CompositionProto)
	*p = x
	return p
}

func (x CompositionProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CompositionProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[9].Descriptor()
}

func (CompositionProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[9]
}

func (x CompositionProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CompositionProto.Descriptor instead.
func (CompositionProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{9}
}

type SqlFunctionCategoryProto int32

const (
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_                               SqlFunctionCategoryProto = 0
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_NUMERIC_                              SqlFunctionCategoryProto = 1
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_TIMEDATE_                             SqlFunctionCategoryProto = 2
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_SYSTEM_                               SqlFunctionCategoryProto = 3
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_FUNCTION_                SqlFunctionCategoryProto = 4
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_PROCEDURE_               SqlFunctionCategoryProto = 5
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_CONSTRUCTOR_             SqlFunctionCategoryProto = 6
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_SPECIFIC_FUNCTION_       SqlFunctionCategoryProto = 7
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_TABLE_FUNCTION_          SqlFunctionCategoryProto = 8
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_USER_DEFINED_TABLE_SPECIFIC_FUNCTION_ SqlFunctionCategoryProto = 9
	SqlFunctionCategoryProto_SqlFunctionCategoryProto_MATCH_RECOGNIZE_                      SqlFunctionCategoryProto = 10
)

// Enum value maps for SqlFunctionCategoryProto.
var (
	SqlFunctionCategoryProto_name = map[int32]string{
		0:  "SqlFunctionCategoryProto_STRING_",
		1:  "SqlFunctionCategoryProto_NUMERIC_",
		2:  "SqlFunctionCategoryProto_TIMEDATE_",
		3:  "SqlFunctionCategoryProto_SYSTEM_",
		4:  "SqlFunctionCategoryProto_USER_DEFINED_FUNCTION_",
		5:  "SqlFunctionCategoryProto_USER_DEFINED_PROCEDURE_",
		6:  "SqlFunctionCategoryProto_USER_DEFINED_CONSTRUCTOR_",
		7:  "SqlFunctionCategoryProto_USER_DEFINED_SPECIFIC_FUNCTION_",
		8:  "SqlFunctionCategoryProto_USER_DEFINED_TABLE_FUNCTION_",
		9:  "SqlFunctionCategoryProto_USER_DEFINED_TABLE_SPECIFIC_FUNCTION_",
		10: "SqlFunctionCategoryProto_MATCH_RECOGNIZE_",
	}
	SqlFunctionCategoryProto_value = map[string]int32{
		"SqlFunctionCategoryProto_STRING_":                               0,
		"SqlFunctionCategoryProto_NUMERIC_":                              1,
		"SqlFunctionCategoryProto_TIMEDATE_":                             2,
		"SqlFunctionCategoryProto_SYSTEM_":                               3,
		"SqlFunctionCategoryProto_USER_DEFINED_FUNCTION_":                4,
		"SqlFunctionCategoryProto_USER_DEFINED_PROCEDURE_":               5,
		"SqlFunctionCategoryProto_USER_DEFINED_CONSTRUCTOR_":             6,
		"SqlFunctionCategoryProto_USER_DEFINED_SPECIFIC_FUNCTION_":       7,
		"SqlFunctionCategoryProto_USER_DEFINED_TABLE_FUNCTION_":          8,
		"SqlFunctionCategoryProto_USER_DEFINED_TABLE_SPECIFIC_FUNCTION_": 9,
		"SqlFunctionCategoryProto_MATCH_RECOGNIZE_":                      10,
	}
)

func (x SqlFunctionCategoryProto) Enum() *SqlFunctionCategoryProto {
	p := new(SqlFunctionCategoryProto)
	*p = x
	return p
}

func (x SqlFunctionCategoryProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlFunctionCategoryProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[10].Descriptor()
}

func (SqlFunctionCategoryProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[10]
}

func (x SqlFunctionCategoryProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlFunctionCategoryProto.Descriptor instead.
func (SqlFunctionCategoryProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{10}
}

type TimeUnitProto int32

const (
	TimeUnitProto_TimeUnitProto_YEAR_        TimeUnitProto = 0
	TimeUnitProto_TimeUnitProto_MONTH_       TimeUnitProto = 1
	TimeUnitProto_TimeUnitProto_DAY_         TimeUnitProto = 2
	TimeUnitProto_TimeUnitProto_HOUR_        TimeUnitProto = 3
	TimeUnitProto_TimeUnitProto_MINUTE_      TimeUnitProto = 4
	TimeUnitProto_TimeUnitProto_SECOND_      TimeUnitProto = 5
	TimeUnitProto_TimeUnitProto_QUARTER_     TimeUnitProto = 6
	TimeUnitProto_TimeUnitProto_ISOYEAR_     TimeUnitProto = 7
	TimeUnitProto_TimeUnitProto_WEEK_        TimeUnitProto = 8
	TimeUnitProto_TimeUnitProto_MILLISECOND_ TimeUnitProto = 9
	TimeUnitProto_TimeUnitProto_MICROSECOND_ TimeUnitProto = 10
	TimeUnitProto_TimeUnitProto_NANOSECOND_  TimeUnitProto = 11
	TimeUnitProto_TimeUnitProto_DOW_         TimeUnitProto = 12
	TimeUnitProto_TimeUnitProto_ISODOW_      TimeUnitProto = 13
	TimeUnitProto_TimeUnitProto_DOY_         TimeUnitProto = 14
	TimeUnitProto_TimeUnitProto_EPOCH_       TimeUnitProto = 15
	TimeUnitProto_TimeUnitProto_DECADE_      TimeUnitProto = 16
	TimeUnitProto_TimeUnitProto_CENTURY_     TimeUnitProto = 17
	TimeUnitProto_TimeUnitProto_MILLENNIUM_  TimeUnitProto = 18
)

// Enum value maps for TimeUnitProto.
var (
	TimeUnitProto_name = map[int32]string{
		0:  "TimeUnitProto_YEAR_",
		1:  "TimeUnitProto_MONTH_",
		2:  "TimeUnitProto_DAY_",
		3:  "TimeUnitProto_HOUR_",
		4:  "TimeUnitProto_MINUTE_",
		5:  "TimeUnitProto_SECOND_",
		6:  "TimeUnitProto_QUARTER_",
		7:  "TimeUnitProto_ISOYEAR_",
		8:  "TimeUnitProto_WEEK_",
		9:  "TimeUnitProto_MILLISECOND_",
		10: "TimeUnitProto_MICROSECOND_",
		11: "TimeUnitProto_NANOSECOND_",
		12: "TimeUnitProto_DOW_",
		13: "TimeUnitProto_ISODOW_",
		14: "TimeUnitProto_DOY_",
		15: "TimeUnitProto_EPOCH_",
		16: "TimeUnitProto_DECADE_",
		17: "TimeUnitProto_CENTURY_",
		18: "TimeUnitProto_MILLENNIUM_",
	}
	TimeUnitProto_value = map[string]int32{
		"TimeUnitProto_YEAR_":        0,
		"TimeUnitProto_MONTH_":       1,
		"TimeUnitProto_DAY_":         2,
		"TimeUnitProto_HOUR_":        3,
		"TimeUnitProto_MINUTE_":      4,
		"TimeUnitProto_SECOND_":      5,
		"TimeUnitProto_QUARTER_":     6,
		"TimeUnitProto_ISOYEAR_":     7,
		"TimeUnitProto_WEEK_":        8,
		"TimeUnitProto_MILLISECOND_": 9,
		"TimeUnitProto_MICROSECOND_": 10,
		"TimeUnitProto_NANOSECOND_":  11,
		"TimeUnitProto_DOW_":         12,
		"TimeUnitProto_ISODOW_":      13,
		"TimeUnitProto_DOY_":         14,
		"TimeUnitProto_EPOCH_":       15,
		"TimeUnitProto_DECADE_":      16,
		"TimeUnitProto_CENTURY_":     17,
		"TimeUnitProto_MILLENNIUM_":  18,
	}
)

func (x TimeUnitProto) Enum() *TimeUnitProto {
	p := new(TimeUnitProto)
	*p = x
	return p
}

func (x TimeUnitProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeUnitProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[11].Descriptor()
}

func (TimeUnitProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[11]
}

func (x TimeUnitProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeUnitProto.Descriptor instead.
func (TimeUnitProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{11}
}

type ObjectPredicateProto int32

const (
	ObjectPredicateProto_ObjectPredicateProto_ALWAYS_TRUE_  ObjectPredicateProto = 0
	ObjectPredicateProto_ObjectPredicateProto_ALWAYS_FALSE_ ObjectPredicateProto = 1
	ObjectPredicateProto_ObjectPredicateProto_IS_NULL_      ObjectPredicateProto = 2
	ObjectPredicateProto_ObjectPredicateProto_NOT_NULL_     ObjectPredicateProto = 3
)

// Enum value maps for ObjectPredicateProto.
var (
	ObjectPredicateProto_name = map[int32]string{
		0: "ObjectPredicateProto_ALWAYS_TRUE_",
		1: "ObjectPredicateProto_ALWAYS_FALSE_",
		2: "ObjectPredicateProto_IS_NULL_",
		3: "ObjectPredicateProto_NOT_NULL_",
	}
	ObjectPredicateProto_value = map[string]int32{
		"ObjectPredicateProto_ALWAYS_TRUE_":  0,
		"ObjectPredicateProto_ALWAYS_FALSE_": 1,
		"ObjectPredicateProto_IS_NULL_":      2,
		"ObjectPredicateProto_NOT_NULL_":     3,
	}
)

func (x ObjectPredicateProto) Enum() *ObjectPredicateProto {
	p := new(ObjectPredicateProto)
	*p = x
	return p
}

func (x ObjectPredicateProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ObjectPredicateProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[12].Descriptor()
}

func (ObjectPredicateProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[12]
}

func (x ObjectPredicateProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ObjectPredicateProto.Descriptor instead.
func (ObjectPredicateProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{12}
}

type OptionalityProto int32

const (
	OptionalityProto_OptionalityProto_MANDATORY_ OptionalityProto = 0
	OptionalityProto_OptionalityProto_OPTIONAL_  OptionalityProto = 1
	OptionalityProto_OptionalityProto_IGNORED_   OptionalityProto = 2
	OptionalityProto_OptionalityProto_FORBIDDEN_ OptionalityProto = 3
)

// Enum value maps for OptionalityProto.
var (
	OptionalityProto_name = map[int32]string{
		0: "OptionalityProto_MANDATORY_",
		1: "OptionalityProto_OPTIONAL_",
		2: "OptionalityProto_IGNORED_",
		3: "OptionalityProto_FORBIDDEN_",
	}
	OptionalityProto_value = map[string]int32{
		"OptionalityProto_MANDATORY_": 0,
		"OptionalityProto_OPTIONAL_":  1,
		"OptionalityProto_IGNORED_":   2,
		"OptionalityProto_FORBIDDEN_": 3,
	}
)

func (x OptionalityProto) Enum() *OptionalityProto {
	p := new(OptionalityProto)
	*p = x
	return p
}

func (x OptionalityProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OptionalityProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[13].Descriptor()
}

func (OptionalityProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[13]
}

func (x OptionalityProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OptionalityProto.Descriptor instead.
func (OptionalityProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{13}
}

type SqlJsonConstructorNullClauseProto int32

const (
	SqlJsonConstructorNullClauseProto_SqlJsonConstructorNullClauseProto_NULL_ON_NULL_   SqlJsonConstructorNullClauseProto = 0
	SqlJsonConstructorNullClauseProto_SqlJsonConstructorNullClauseProto_ABSENT_ON_NULL_ SqlJsonConstructorNullClauseProto = 1
)

// Enum value maps for SqlJsonConstructorNullClauseProto.
var (
	SqlJsonConstructorNullClauseProto_name = map[int32]string{
		0: "SqlJsonConstructorNullClauseProto_NULL_ON_NULL_",
		1: "SqlJsonConstructorNullClauseProto_ABSENT_ON_NULL_",
	}
	SqlJsonConstructorNullClauseProto_value = map[string]int32{
		"SqlJsonConstructorNullClauseProto_NULL_ON_NULL_":   0,
		"SqlJsonConstructorNullClauseProto_ABSENT_ON_NULL_": 1,
	}
)

func (x SqlJsonConstructorNullClauseProto) Enum() *SqlJsonConstructorNullClauseProto {
	p := new(SqlJsonConstructorNullClauseProto)
	*p = x
	return p
}

func (x SqlJsonConstructorNullClauseProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlJsonConstructorNullClauseProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[14].Descriptor()
}

func (SqlJsonConstructorNullClauseProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[14]
}

func (x SqlJsonConstructorNullClauseProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlJsonConstructorNullClauseProto.Descriptor instead.
func (SqlJsonConstructorNullClauseProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{14}
}

type SqlSyntaxProto int32

const (
	SqlSyntaxProto_SqlSyntaxProto_FUNCTION_         SqlSyntaxProto = 0
	SqlSyntaxProto_SqlSyntaxProto_FUNCTION_STAR_    SqlSyntaxProto = 1
	SqlSyntaxProto_SqlSyntaxProto_ORDERED_FUNCTION_ SqlSyntaxProto = 2
	SqlSyntaxProto_SqlSyntaxProto_BINARY_           SqlSyntaxProto = 3
	SqlSyntaxProto_SqlSyntaxProto_PREFIX_           SqlSyntaxProto = 4
	SqlSyntaxProto_SqlSyntaxProto_POSTFIX_          SqlSyntaxProto = 5
	SqlSyntaxProto_SqlSyntaxProto_SPECIAL_          SqlSyntaxProto = 6
	SqlSyntaxProto_SqlSyntaxProto_FUNCTION_ID_      SqlSyntaxProto = 7
	SqlSyntaxProto_SqlSyntaxProto_INTERNAL_         SqlSyntaxProto = 8
)

// Enum value maps for SqlSyntaxProto.
var (
	SqlSyntaxProto_name = map[int32]string{
		0: "SqlSyntaxProto_FUNCTION_",
		1: "SqlSyntaxProto_FUNCTION_STAR_",
		2: "SqlSyntaxProto_ORDERED_FUNCTION_",
		3: "SqlSyntaxProto_BINARY_",
		4: "SqlSyntaxProto_PREFIX_",
		5: "SqlSyntaxProto_POSTFIX_",
		6: "SqlSyntaxProto_SPECIAL_",
		7: "SqlSyntaxProto_FUNCTION_ID_",
		8: "SqlSyntaxProto_INTERNAL_",
	}
	SqlSyntaxProto_value = map[string]int32{
		"SqlSyntaxProto_FUNCTION_":         0,
		"SqlSyntaxProto_FUNCTION_STAR_":    1,
		"SqlSyntaxProto_ORDERED_FUNCTION_": 2,
		"SqlSyntaxProto_BINARY_":           3,
		"SqlSyntaxProto_PREFIX_":           4,
		"SqlSyntaxProto_POSTFIX_":          5,
		"SqlSyntaxProto_SPECIAL_":          6,
		"SqlSyntaxProto_FUNCTION_ID_":      7,
		"SqlSyntaxProto_INTERNAL_":         8,
	}
)

func (x SqlSyntaxProto) Enum() *SqlSyntaxProto {
	p := new(SqlSyntaxProto)
	*p = x
	return p
}

func (x SqlSyntaxProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlSyntaxProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[15].Descriptor()
}

func (SqlSyntaxProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[15]
}

func (x SqlSyntaxProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlSyntaxProto.Descriptor instead.
func (SqlSyntaxProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{15}
}

type SqlModalityProto int32

const (
	SqlModalityProto_SqlModalityProto_RELATION_ SqlModalityProto = 0
	SqlModalityProto_SqlModalityProto_STREAM_   SqlModalityProto = 1
)

// Enum value maps for SqlModalityProto.
var (
	SqlModalityProto_name = map[int32]string{
		0: "SqlModalityProto_RELATION_",
		1: "SqlModalityProto_STREAM_",
	}
	SqlModalityProto_value = map[string]int32{
		"SqlModalityProto_RELATION_": 0,
		"SqlModalityProto_STREAM_":   1,
	}
)

func (x SqlModalityProto) Enum() *SqlModalityProto {
	p := new(SqlModalityProto)
	*p = x
	return p
}

func (x SqlModalityProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SqlModalityProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[16].Descriptor()
}

func (SqlModalityProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[16]
}

func (x SqlModalityProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SqlModalityProto.Descriptor instead.
func (SqlModalityProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{16}
}

type FlagProto int32

const (
	FlagProto_FlagProto_ASYMMETRIC_ FlagProto = 0
	FlagProto_FlagProto_SYMMETRIC_  FlagProto = 1
)

// Enum value maps for FlagProto.
var (
	FlagProto_name = map[int32]string{
		0: "FlagProto_ASYMMETRIC_",
		1: "FlagProto_SYMMETRIC_",
	}
	FlagProto_value = map[string]int32{
		"FlagProto_ASYMMETRIC_": 0,
		"FlagProto_SYMMETRIC_":  1,
	}
)

func (x FlagProto) Enum() *FlagProto {
	p := new(FlagProto)
	*p = x
	return p
}

func (x FlagProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FlagProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[17].Descriptor()
}

func (FlagProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[17]
}

func (x FlagProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FlagProto.Descriptor instead.
func (FlagProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{17}
}

type ColumnStrategyProto int32

const (
	ColumnStrategyProto_ColumnStrategyProto_NULLABLE_     ColumnStrategyProto = 0
	ColumnStrategyProto_ColumnStrategyProto_NOT_NULLABLE_ ColumnStrategyProto = 1
	ColumnStrategyProto_ColumnStrategyProto_DEFAULT_      ColumnStrategyProto = 2
	ColumnStrategyProto_ColumnStrategyProto_STORED_       ColumnStrategyProto = 3
	ColumnStrategyProto_ColumnStrategyProto_VIRTUAL_      ColumnStrategyProto = 4
)

// Enum value maps for ColumnStrategyProto.
var (
	ColumnStrategyProto_name = map[int32]string{
		0: "ColumnStrategyProto_NULLABLE_",
		1: "ColumnStrategyProto_NOT_NULLABLE_",
		2: "ColumnStrategyProto_DEFAULT_",
		3: "ColumnStrategyProto_STORED_",
		4: "ColumnStrategyProto_VIRTUAL_",
	}
	ColumnStrategyProto_value = map[string]int32{
		"ColumnStrategyProto_NULLABLE_":     0,
		"ColumnStrategyProto_NOT_NULLABLE_": 1,
		"ColumnStrategyProto_DEFAULT_":      2,
		"ColumnStrategyProto_STORED_":       3,
		"ColumnStrategyProto_VIRTUAL_":      4,
	}
)

func (x ColumnStrategyProto) Enum() *ColumnStrategyProto {
	p := new(ColumnStrategyProto)
	*p = x
	return p
}

func (x ColumnStrategyProto) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ColumnStrategyProto) Descriptor() protoreflect.EnumDescriptor {
	return file_sql_src_main_proto_ast_proto_enumTypes[18].Descriptor()
}

func (ColumnStrategyProto) Type() protoreflect.EnumType {
	return &file_sql_src_main_proto_ast_proto_enumTypes[18]
}

func (x ColumnStrategyProto) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ColumnStrategyProto.Descriptor instead.
func (ColumnStrategyProto) EnumDescriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{18}
}

// Java Class: org.apache.calcite.rel.type.RelDataType
type RelDataTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeProto:
	//
	//	*RelDataTypeProto_RelDataTypeImplProto
	//	*RelDataTypeProto_AbstractSqlTypeProto
	//	*RelDataTypeProto_RelCrossTypeProto
	//	*RelDataTypeProto_RelRecordTypeProto
	//	*RelDataTypeProto_DynamicRecordTypeProto
	//	*RelDataTypeProto_MultisetSqlTypeProto
	//	*RelDataTypeProto_ArraySqlTypeProto
	//	*RelDataTypeProto_MapSqlTypeProto
	//	*RelDataTypeProto_BasicSqlTypeProto
	//	*RelDataTypeProto_IntervalSqlTypeProto
	//	*RelDataTypeProto_ObjectSqlTypeProto
	//	*RelDataTypeProto_JavaRecordTypeProto
	//	*RelDataTypeProto_DynamicRecordTypeImplProto
	RelDataTypeProto isRelDataTypeProto_RelDataTypeProto `protobuf_oneof:"relDataTypeProto"`
}

func (x *RelDataTypeProto) Reset() {
	*x = RelDataTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeProto) ProtoMessage() {}

func (x *RelDataTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{0}
}

func (m *RelDataTypeProto) GetRelDataTypeProto() isRelDataTypeProto_RelDataTypeProto {
	if m != nil {
		return m.RelDataTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetRelDataTypeImplProto() *RelDataTypeImplProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_RelDataTypeImplProto); ok {
		return x.RelDataTypeImplProto
	}
	return nil
}

func (x *RelDataTypeProto) GetAbstractSqlTypeProto() *AbstractSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_AbstractSqlTypeProto); ok {
		return x.AbstractSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetRelCrossTypeProto() *RelCrossTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_RelCrossTypeProto); ok {
		return x.RelCrossTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetRelRecordTypeProto() *RelRecordTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_RelRecordTypeProto); ok {
		return x.RelRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetDynamicRecordTypeProto() *DynamicRecordTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_DynamicRecordTypeProto); ok {
		return x.DynamicRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetMultisetSqlTypeProto() *MultisetSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_MultisetSqlTypeProto); ok {
		return x.MultisetSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetArraySqlTypeProto() *ArraySqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_ArraySqlTypeProto); ok {
		return x.ArraySqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetMapSqlTypeProto() *MapSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_MapSqlTypeProto); ok {
		return x.MapSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetBasicSqlTypeProto() *BasicSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_BasicSqlTypeProto); ok {
		return x.BasicSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetIntervalSqlTypeProto() *IntervalSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_IntervalSqlTypeProto); ok {
		return x.IntervalSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetObjectSqlTypeProto() *ObjectSqlTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_ObjectSqlTypeProto); ok {
		return x.ObjectSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetJavaRecordTypeProto() *JavaRecordTypeProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_JavaRecordTypeProto); ok {
		return x.JavaRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeProto) GetDynamicRecordTypeImplProto() *DynamicRecordTypeImplProto {
	if x, ok := x.GetRelDataTypeProto().(*RelDataTypeProto_DynamicRecordTypeImplProto); ok {
		return x.DynamicRecordTypeImplProto
	}
	return nil
}

type isRelDataTypeProto_RelDataTypeProto interface {
	isRelDataTypeProto_RelDataTypeProto()
}

type RelDataTypeProto_RelDataTypeImplProto struct {
	RelDataTypeImplProto *RelDataTypeImplProto `protobuf:"bytes,1,opt,name=relDataTypeImplProto,proto3,oneof"`
}

type RelDataTypeProto_AbstractSqlTypeProto struct {
	AbstractSqlTypeProto *AbstractSqlTypeProto `protobuf:"bytes,2,opt,name=abstractSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_RelCrossTypeProto struct {
	RelCrossTypeProto *RelCrossTypeProto `protobuf:"bytes,3,opt,name=relCrossTypeProto,proto3,oneof"`
}

type RelDataTypeProto_RelRecordTypeProto struct {
	RelRecordTypeProto *RelRecordTypeProto `protobuf:"bytes,4,opt,name=relRecordTypeProto,proto3,oneof"`
}

type RelDataTypeProto_DynamicRecordTypeProto struct {
	DynamicRecordTypeProto *DynamicRecordTypeProto `protobuf:"bytes,5,opt,name=dynamicRecordTypeProto,proto3,oneof"`
}

type RelDataTypeProto_MultisetSqlTypeProto struct {
	MultisetSqlTypeProto *MultisetSqlTypeProto `protobuf:"bytes,6,opt,name=multisetSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_ArraySqlTypeProto struct {
	ArraySqlTypeProto *ArraySqlTypeProto `protobuf:"bytes,7,opt,name=arraySqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_MapSqlTypeProto struct {
	MapSqlTypeProto *MapSqlTypeProto `protobuf:"bytes,8,opt,name=mapSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_BasicSqlTypeProto struct {
	BasicSqlTypeProto *BasicSqlTypeProto `protobuf:"bytes,9,opt,name=basicSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_IntervalSqlTypeProto struct {
	IntervalSqlTypeProto *IntervalSqlTypeProto `protobuf:"bytes,10,opt,name=intervalSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_ObjectSqlTypeProto struct {
	ObjectSqlTypeProto *ObjectSqlTypeProto `protobuf:"bytes,11,opt,name=objectSqlTypeProto,proto3,oneof"`
}

type RelDataTypeProto_JavaRecordTypeProto struct {
	JavaRecordTypeProto *JavaRecordTypeProto `protobuf:"bytes,12,opt,name=javaRecordTypeProto,proto3,oneof"`
}

type RelDataTypeProto_DynamicRecordTypeImplProto struct {
	DynamicRecordTypeImplProto *DynamicRecordTypeImplProto `protobuf:"bytes,13,opt,name=dynamicRecordTypeImplProto,proto3,oneof"`
}

func (*RelDataTypeProto_RelDataTypeImplProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_AbstractSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_RelCrossTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_RelRecordTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_DynamicRecordTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_MultisetSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_ArraySqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_MapSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_BasicSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_IntervalSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_ObjectSqlTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_JavaRecordTypeProto) isRelDataTypeProto_RelDataTypeProto() {}

func (*RelDataTypeProto_DynamicRecordTypeImplProto) isRelDataTypeProto_RelDataTypeProto() {}

// Java Class: org.apache.calcite.rel.type.RelDataTypeImpl
type RelDataTypeImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeImplProto:
	//
	//	*RelDataTypeImplProto_AbstractSqlTypeProto
	//	*RelDataTypeImplProto_RelCrossTypeProto
	//	*RelDataTypeImplProto_RelRecordTypeProto
	//	*RelDataTypeImplProto_DynamicRecordTypeProto
	//	*RelDataTypeImplProto_MultisetSqlTypeProto
	//	*RelDataTypeImplProto_ArraySqlTypeProto
	//	*RelDataTypeImplProto_MapSqlTypeProto
	//	*RelDataTypeImplProto_BasicSqlTypeProto
	//	*RelDataTypeImplProto_IntervalSqlTypeProto
	//	*RelDataTypeImplProto_ObjectSqlTypeProto
	//	*RelDataTypeImplProto_JavaRecordTypeProto
	//	*RelDataTypeImplProto_DynamicRecordTypeImplProto
	RelDataTypeImplProto isRelDataTypeImplProto_RelDataTypeImplProto `protobuf_oneof:"relDataTypeImplProto"`
	FieldList            []*RelDataTypeFieldProto                    `protobuf:"bytes,13,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest               string                                      `protobuf:"bytes,14,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *RelDataTypeImplProto) Reset() {
	*x = RelDataTypeImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeImplProto) ProtoMessage() {}

func (x *RelDataTypeImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeImplProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{1}
}

func (m *RelDataTypeImplProto) GetRelDataTypeImplProto() isRelDataTypeImplProto_RelDataTypeImplProto {
	if m != nil {
		return m.RelDataTypeImplProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetAbstractSqlTypeProto() *AbstractSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_AbstractSqlTypeProto); ok {
		return x.AbstractSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetRelCrossTypeProto() *RelCrossTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_RelCrossTypeProto); ok {
		return x.RelCrossTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetRelRecordTypeProto() *RelRecordTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_RelRecordTypeProto); ok {
		return x.RelRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetDynamicRecordTypeProto() *DynamicRecordTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_DynamicRecordTypeProto); ok {
		return x.DynamicRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetMultisetSqlTypeProto() *MultisetSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_MultisetSqlTypeProto); ok {
		return x.MultisetSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetArraySqlTypeProto() *ArraySqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_ArraySqlTypeProto); ok {
		return x.ArraySqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetMapSqlTypeProto() *MapSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_MapSqlTypeProto); ok {
		return x.MapSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetBasicSqlTypeProto() *BasicSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_BasicSqlTypeProto); ok {
		return x.BasicSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetIntervalSqlTypeProto() *IntervalSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_IntervalSqlTypeProto); ok {
		return x.IntervalSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetObjectSqlTypeProto() *ObjectSqlTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_ObjectSqlTypeProto); ok {
		return x.ObjectSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetJavaRecordTypeProto() *JavaRecordTypeProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_JavaRecordTypeProto); ok {
		return x.JavaRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetDynamicRecordTypeImplProto() *DynamicRecordTypeImplProto {
	if x, ok := x.GetRelDataTypeImplProto().(*RelDataTypeImplProto_DynamicRecordTypeImplProto); ok {
		return x.DynamicRecordTypeImplProto
	}
	return nil
}

func (x *RelDataTypeImplProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *RelDataTypeImplProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type isRelDataTypeImplProto_RelDataTypeImplProto interface {
	isRelDataTypeImplProto_RelDataTypeImplProto()
}

type RelDataTypeImplProto_AbstractSqlTypeProto struct {
	AbstractSqlTypeProto *AbstractSqlTypeProto `protobuf:"bytes,1,opt,name=abstractSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_RelCrossTypeProto struct {
	RelCrossTypeProto *RelCrossTypeProto `protobuf:"bytes,2,opt,name=relCrossTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_RelRecordTypeProto struct {
	RelRecordTypeProto *RelRecordTypeProto `protobuf:"bytes,3,opt,name=relRecordTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_DynamicRecordTypeProto struct {
	DynamicRecordTypeProto *DynamicRecordTypeProto `protobuf:"bytes,4,opt,name=dynamicRecordTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_MultisetSqlTypeProto struct {
	MultisetSqlTypeProto *MultisetSqlTypeProto `protobuf:"bytes,5,opt,name=multisetSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_ArraySqlTypeProto struct {
	ArraySqlTypeProto *ArraySqlTypeProto `protobuf:"bytes,6,opt,name=arraySqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_MapSqlTypeProto struct {
	MapSqlTypeProto *MapSqlTypeProto `protobuf:"bytes,7,opt,name=mapSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_BasicSqlTypeProto struct {
	BasicSqlTypeProto *BasicSqlTypeProto `protobuf:"bytes,8,opt,name=basicSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_IntervalSqlTypeProto struct {
	IntervalSqlTypeProto *IntervalSqlTypeProto `protobuf:"bytes,9,opt,name=intervalSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_ObjectSqlTypeProto struct {
	ObjectSqlTypeProto *ObjectSqlTypeProto `protobuf:"bytes,10,opt,name=objectSqlTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_JavaRecordTypeProto struct {
	JavaRecordTypeProto *JavaRecordTypeProto `protobuf:"bytes,11,opt,name=javaRecordTypeProto,proto3,oneof"`
}

type RelDataTypeImplProto_DynamicRecordTypeImplProto struct {
	DynamicRecordTypeImplProto *DynamicRecordTypeImplProto `protobuf:"bytes,12,opt,name=dynamicRecordTypeImplProto,proto3,oneof"`
}

func (*RelDataTypeImplProto_AbstractSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_RelCrossTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_RelRecordTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_DynamicRecordTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_MultisetSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_ArraySqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_MapSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_BasicSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_IntervalSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_ObjectSqlTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_JavaRecordTypeProto) isRelDataTypeImplProto_RelDataTypeImplProto() {}

func (*RelDataTypeImplProto_DynamicRecordTypeImplProto) isRelDataTypeImplProto_RelDataTypeImplProto() {
}

// Java Class: org.apache.calcite.sql.type.AbstractSqlType
type AbstractSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractSqlTypeProto:
	//
	//	*AbstractSqlTypeProto_MultisetSqlTypeProto
	//	*AbstractSqlTypeProto_ArraySqlTypeProto
	//	*AbstractSqlTypeProto_MapSqlTypeProto
	//	*AbstractSqlTypeProto_BasicSqlTypeProto
	//	*AbstractSqlTypeProto_IntervalSqlTypeProto
	//	*AbstractSqlTypeProto_ObjectSqlTypeProto
	AbstractSqlTypeProto isAbstractSqlTypeProto_AbstractSqlTypeProto `protobuf_oneof:"abstractSqlTypeProto"`
	TypeName             SqlTypeNameProto                            `protobuf:"varint,7,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable           bool                                        `protobuf:"varint,8,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList            []*RelDataTypeFieldProto                    `protobuf:"bytes,9,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest               string                                      `protobuf:"bytes,10,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *AbstractSqlTypeProto) Reset() {
	*x = AbstractSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractSqlTypeProto) ProtoMessage() {}

func (x *AbstractSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractSqlTypeProto.ProtoReflect.Descriptor instead.
func (*AbstractSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{2}
}

func (m *AbstractSqlTypeProto) GetAbstractSqlTypeProto() isAbstractSqlTypeProto_AbstractSqlTypeProto {
	if m != nil {
		return m.AbstractSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetMultisetSqlTypeProto() *MultisetSqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_MultisetSqlTypeProto); ok {
		return x.MultisetSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetArraySqlTypeProto() *ArraySqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_ArraySqlTypeProto); ok {
		return x.ArraySqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetMapSqlTypeProto() *MapSqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_MapSqlTypeProto); ok {
		return x.MapSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetBasicSqlTypeProto() *BasicSqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_BasicSqlTypeProto); ok {
		return x.BasicSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetIntervalSqlTypeProto() *IntervalSqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_IntervalSqlTypeProto); ok {
		return x.IntervalSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetObjectSqlTypeProto() *ObjectSqlTypeProto {
	if x, ok := x.GetAbstractSqlTypeProto().(*AbstractSqlTypeProto_ObjectSqlTypeProto); ok {
		return x.ObjectSqlTypeProto
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *AbstractSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *AbstractSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *AbstractSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type isAbstractSqlTypeProto_AbstractSqlTypeProto interface {
	isAbstractSqlTypeProto_AbstractSqlTypeProto()
}

type AbstractSqlTypeProto_MultisetSqlTypeProto struct {
	MultisetSqlTypeProto *MultisetSqlTypeProto `protobuf:"bytes,1,opt,name=multisetSqlTypeProto,proto3,oneof"`
}

type AbstractSqlTypeProto_ArraySqlTypeProto struct {
	ArraySqlTypeProto *ArraySqlTypeProto `protobuf:"bytes,2,opt,name=arraySqlTypeProto,proto3,oneof"`
}

type AbstractSqlTypeProto_MapSqlTypeProto struct {
	MapSqlTypeProto *MapSqlTypeProto `protobuf:"bytes,3,opt,name=mapSqlTypeProto,proto3,oneof"`
}

type AbstractSqlTypeProto_BasicSqlTypeProto struct {
	BasicSqlTypeProto *BasicSqlTypeProto `protobuf:"bytes,4,opt,name=basicSqlTypeProto,proto3,oneof"`
}

type AbstractSqlTypeProto_IntervalSqlTypeProto struct {
	IntervalSqlTypeProto *IntervalSqlTypeProto `protobuf:"bytes,5,opt,name=intervalSqlTypeProto,proto3,oneof"`
}

type AbstractSqlTypeProto_ObjectSqlTypeProto struct {
	ObjectSqlTypeProto *ObjectSqlTypeProto `protobuf:"bytes,6,opt,name=objectSqlTypeProto,proto3,oneof"`
}

func (*AbstractSqlTypeProto_MultisetSqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

func (*AbstractSqlTypeProto_ArraySqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

func (*AbstractSqlTypeProto_MapSqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

func (*AbstractSqlTypeProto_BasicSqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

func (*AbstractSqlTypeProto_IntervalSqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

func (*AbstractSqlTypeProto_ObjectSqlTypeProto) isAbstractSqlTypeProto_AbstractSqlTypeProto() {}

// Java Class: org.apache.calcite.sql.type.MultisetSqlType
type MultisetSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementType *RelDataTypeProto        `protobuf:"bytes,1,opt,name=elementType,proto3" json:"elementType,omitempty"`
	TypeName    SqlTypeNameProto         `protobuf:"varint,2,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable  bool                     `protobuf:"varint,3,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList   []*RelDataTypeFieldProto `protobuf:"bytes,4,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest      string                   `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *MultisetSqlTypeProto) Reset() {
	*x = MultisetSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisetSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisetSqlTypeProto) ProtoMessage() {}

func (x *MultisetSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisetSqlTypeProto.ProtoReflect.Descriptor instead.
func (*MultisetSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{3}
}

func (x *MultisetSqlTypeProto) GetElementType() *RelDataTypeProto {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *MultisetSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *MultisetSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *MultisetSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *MultisetSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeField
type RelDataTypeFieldProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeFieldProto:
	//
	//	*RelDataTypeFieldProto_RelDataTypeFieldImplProto
	RelDataTypeFieldProto isRelDataTypeFieldProto_RelDataTypeFieldProto `protobuf_oneof:"relDataTypeFieldProto"`
}

func (x *RelDataTypeFieldProto) Reset() {
	*x = RelDataTypeFieldProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeFieldProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeFieldProto) ProtoMessage() {}

func (x *RelDataTypeFieldProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeFieldProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeFieldProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{4}
}

func (m *RelDataTypeFieldProto) GetRelDataTypeFieldProto() isRelDataTypeFieldProto_RelDataTypeFieldProto {
	if m != nil {
		return m.RelDataTypeFieldProto
	}
	return nil
}

func (x *RelDataTypeFieldProto) GetRelDataTypeFieldImplProto() *RelDataTypeFieldImplProto {
	if x, ok := x.GetRelDataTypeFieldProto().(*RelDataTypeFieldProto_RelDataTypeFieldImplProto); ok {
		return x.RelDataTypeFieldImplProto
	}
	return nil
}

type isRelDataTypeFieldProto_RelDataTypeFieldProto interface {
	isRelDataTypeFieldProto_RelDataTypeFieldProto()
}

type RelDataTypeFieldProto_RelDataTypeFieldImplProto struct {
	RelDataTypeFieldImplProto *RelDataTypeFieldImplProto `protobuf:"bytes,1,opt,name=relDataTypeFieldImplProto,proto3,oneof"`
}

func (*RelDataTypeFieldProto_RelDataTypeFieldImplProto) isRelDataTypeFieldProto_RelDataTypeFieldProto() {
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeFieldImpl
type RelDataTypeFieldImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type  *RelDataTypeProto `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Name  string            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Index int32             `protobuf:"zigzag32,3,opt,name=index,proto3" json:"index,omitempty"`
}

func (x *RelDataTypeFieldImplProto) Reset() {
	*x = RelDataTypeFieldImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeFieldImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeFieldImplProto) ProtoMessage() {}

func (x *RelDataTypeFieldImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeFieldImplProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeFieldImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{5}
}

func (x *RelDataTypeFieldImplProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *RelDataTypeFieldImplProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RelDataTypeFieldImplProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.ArraySqlType
type ArraySqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementType *RelDataTypeProto        `protobuf:"bytes,1,opt,name=elementType,proto3" json:"elementType,omitempty"`
	TypeName    SqlTypeNameProto         `protobuf:"varint,2,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable  bool                     `protobuf:"varint,3,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList   []*RelDataTypeFieldProto `protobuf:"bytes,4,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest      string                   `protobuf:"bytes,5,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ArraySqlTypeProto) Reset() {
	*x = ArraySqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArraySqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArraySqlTypeProto) ProtoMessage() {}

func (x *ArraySqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArraySqlTypeProto.ProtoReflect.Descriptor instead.
func (*ArraySqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{6}
}

func (x *ArraySqlTypeProto) GetElementType() *RelDataTypeProto {
	if x != nil {
		return x.ElementType
	}
	return nil
}

func (x *ArraySqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *ArraySqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ArraySqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *ArraySqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.sql.type.MapSqlType
type MapSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyType    *RelDataTypeProto        `protobuf:"bytes,1,opt,name=keyType,proto3" json:"keyType,omitempty"`
	ValueType  *RelDataTypeProto        `protobuf:"bytes,2,opt,name=valueType,proto3" json:"valueType,omitempty"`
	TypeName   SqlTypeNameProto         `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable bool                     `protobuf:"varint,4,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList  []*RelDataTypeFieldProto `protobuf:"bytes,5,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest     string                   `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *MapSqlTypeProto) Reset() {
	*x = MapSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MapSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MapSqlTypeProto) ProtoMessage() {}

func (x *MapSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MapSqlTypeProto.ProtoReflect.Descriptor instead.
func (*MapSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{7}
}

func (x *MapSqlTypeProto) GetKeyType() *RelDataTypeProto {
	if x != nil {
		return x.KeyType
	}
	return nil
}

func (x *MapSqlTypeProto) GetValueType() *RelDataTypeProto {
	if x != nil {
		return x.ValueType
	}
	return nil
}

func (x *MapSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *MapSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *MapSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *MapSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.sql.type.BasicSqlType
type BasicSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Precision      int32                     `protobuf:"zigzag32,1,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale          int32                     `protobuf:"zigzag32,2,opt,name=scale,proto3" json:"scale,omitempty"`
	TypeSystem     *RelDataTypeSystemProto   `protobuf:"bytes,3,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
	Collation      *SqlCollationProto        `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	WrappedCharset *SerializableCharsetProto `protobuf:"bytes,5,opt,name=wrappedCharset,proto3" json:"wrappedCharset,omitempty"`
	TypeName       SqlTypeNameProto          `protobuf:"varint,6,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable     bool                      `protobuf:"varint,7,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList      []*RelDataTypeFieldProto  `protobuf:"bytes,8,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest         string                    `protobuf:"bytes,9,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *BasicSqlTypeProto) Reset() {
	*x = BasicSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BasicSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BasicSqlTypeProto) ProtoMessage() {}

func (x *BasicSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BasicSqlTypeProto.ProtoReflect.Descriptor instead.
func (*BasicSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{8}
}

func (x *BasicSqlTypeProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *BasicSqlTypeProto) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *BasicSqlTypeProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

func (x *BasicSqlTypeProto) GetCollation() *SqlCollationProto {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *BasicSqlTypeProto) GetWrappedCharset() *SerializableCharsetProto {
	if x != nil {
		return x.WrappedCharset
	}
	return nil
}

func (x *BasicSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *BasicSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *BasicSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *BasicSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeSystem
type RelDataTypeSystemProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeSystemProto:
	//
	//	*RelDataTypeSystemProto_RelDataTypeSystemImplProto
	//	*RelDataTypeSystemProto_DelegatingTypeSystemProto
	RelDataTypeSystemProto isRelDataTypeSystemProto_RelDataTypeSystemProto `protobuf_oneof:"relDataTypeSystemProto"`
}

func (x *RelDataTypeSystemProto) Reset() {
	*x = RelDataTypeSystemProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeSystemProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeSystemProto) ProtoMessage() {}

func (x *RelDataTypeSystemProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeSystemProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeSystemProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{9}
}

func (m *RelDataTypeSystemProto) GetRelDataTypeSystemProto() isRelDataTypeSystemProto_RelDataTypeSystemProto {
	if m != nil {
		return m.RelDataTypeSystemProto
	}
	return nil
}

func (x *RelDataTypeSystemProto) GetRelDataTypeSystemImplProto() *RelDataTypeSystemImplProto {
	if x, ok := x.GetRelDataTypeSystemProto().(*RelDataTypeSystemProto_RelDataTypeSystemImplProto); ok {
		return x.RelDataTypeSystemImplProto
	}
	return nil
}

func (x *RelDataTypeSystemProto) GetDelegatingTypeSystemProto() *DelegatingTypeSystemProto {
	if x, ok := x.GetRelDataTypeSystemProto().(*RelDataTypeSystemProto_DelegatingTypeSystemProto); ok {
		return x.DelegatingTypeSystemProto
	}
	return nil
}

type isRelDataTypeSystemProto_RelDataTypeSystemProto interface {
	isRelDataTypeSystemProto_RelDataTypeSystemProto()
}

type RelDataTypeSystemProto_RelDataTypeSystemImplProto struct {
	RelDataTypeSystemImplProto *RelDataTypeSystemImplProto `protobuf:"bytes,1,opt,name=relDataTypeSystemImplProto,proto3,oneof"`
}

type RelDataTypeSystemProto_DelegatingTypeSystemProto struct {
	DelegatingTypeSystemProto *DelegatingTypeSystemProto `protobuf:"bytes,2,opt,name=delegatingTypeSystemProto,proto3,oneof"`
}

func (*RelDataTypeSystemProto_RelDataTypeSystemImplProto) isRelDataTypeSystemProto_RelDataTypeSystemProto() {
}

func (*RelDataTypeSystemProto_DelegatingTypeSystemProto) isRelDataTypeSystemProto_RelDataTypeSystemProto() {
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeSystemImpl
type RelDataTypeSystemImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelDataTypeSystemImplProto) Reset() {
	*x = RelDataTypeSystemImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeSystemImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeSystemImplProto) ProtoMessage() {}

func (x *RelDataTypeSystemImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeSystemImplProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeSystemImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{10}
}

// Java Class: org.apache.calcite.rel.type.DelegatingTypeSystem
type DelegatingTypeSystemProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeSystem *RelDataTypeSystemProto `protobuf:"bytes,1,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
}

func (x *DelegatingTypeSystemProto) Reset() {
	*x = DelegatingTypeSystemProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatingTypeSystemProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatingTypeSystemProto) ProtoMessage() {}

func (x *DelegatingTypeSystemProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatingTypeSystemProto.ProtoReflect.Descriptor instead.
func (*DelegatingTypeSystemProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{11}
}

func (x *DelegatingTypeSystemProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlCollation
type SqlCollationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlCollationProto:
	//
	//	*SqlCollationProto_JavaCollationProto
	SqlCollationProto isSqlCollationProto_SqlCollationProto `protobuf_oneof:"sqlCollationProto"`
	CollationName     string                                `protobuf:"bytes,2,opt,name=collationName,proto3" json:"collationName,omitempty"`
	WrappedCharset    *SerializableCharsetProto             `protobuf:"bytes,3,opt,name=wrappedCharset,proto3" json:"wrappedCharset,omitempty"`
	Locale            *LocaleProto                          `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Strength          string                                `protobuf:"bytes,5,opt,name=strength,proto3" json:"strength,omitempty"`
	Coercibility      CoercibilityProto                     `protobuf:"varint,6,opt,name=coercibility,proto3,enum=rill.sql.v1.CoercibilityProto" json:"coercibility,omitempty"`
}

func (x *SqlCollationProto) Reset() {
	*x = SqlCollationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCollationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCollationProto) ProtoMessage() {}

func (x *SqlCollationProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCollationProto.ProtoReflect.Descriptor instead.
func (*SqlCollationProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{12}
}

func (m *SqlCollationProto) GetSqlCollationProto() isSqlCollationProto_SqlCollationProto {
	if m != nil {
		return m.SqlCollationProto
	}
	return nil
}

func (x *SqlCollationProto) GetJavaCollationProto() *JavaCollationProto {
	if x, ok := x.GetSqlCollationProto().(*SqlCollationProto_JavaCollationProto); ok {
		return x.JavaCollationProto
	}
	return nil
}

func (x *SqlCollationProto) GetCollationName() string {
	if x != nil {
		return x.CollationName
	}
	return ""
}

func (x *SqlCollationProto) GetWrappedCharset() *SerializableCharsetProto {
	if x != nil {
		return x.WrappedCharset
	}
	return nil
}

func (x *SqlCollationProto) GetLocale() *LocaleProto {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *SqlCollationProto) GetStrength() string {
	if x != nil {
		return x.Strength
	}
	return ""
}

func (x *SqlCollationProto) GetCoercibility() CoercibilityProto {
	if x != nil {
		return x.Coercibility
	}
	return CoercibilityProto_CoercibilityProto_EXPLICIT_
}

type isSqlCollationProto_SqlCollationProto interface {
	isSqlCollationProto_SqlCollationProto()
}

type SqlCollationProto_JavaCollationProto struct {
	JavaCollationProto *JavaCollationProto `protobuf:"bytes,1,opt,name=javaCollationProto,proto3,oneof"`
}

func (*SqlCollationProto_JavaCollationProto) isSqlCollationProto_SqlCollationProto() {}

// Java Class: org.apache.calcite.jdbc.JavaCollation
type JavaCollationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Collator       *CollatorProto            `protobuf:"bytes,1,opt,name=collator,proto3" json:"collator,omitempty"`
	CollationName  string                    `protobuf:"bytes,2,opt,name=collationName,proto3" json:"collationName,omitempty"`
	WrappedCharset *SerializableCharsetProto `protobuf:"bytes,3,opt,name=wrappedCharset,proto3" json:"wrappedCharset,omitempty"`
	Locale         *LocaleProto              `protobuf:"bytes,4,opt,name=locale,proto3" json:"locale,omitempty"`
	Strength       string                    `protobuf:"bytes,5,opt,name=strength,proto3" json:"strength,omitempty"`
	Coercibility   CoercibilityProto         `protobuf:"varint,6,opt,name=coercibility,proto3,enum=rill.sql.v1.CoercibilityProto" json:"coercibility,omitempty"`
}

func (x *JavaCollationProto) Reset() {
	*x = JavaCollationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaCollationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaCollationProto) ProtoMessage() {}

func (x *JavaCollationProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaCollationProto.ProtoReflect.Descriptor instead.
func (*JavaCollationProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{13}
}

func (x *JavaCollationProto) GetCollator() *CollatorProto {
	if x != nil {
		return x.Collator
	}
	return nil
}

func (x *JavaCollationProto) GetCollationName() string {
	if x != nil {
		return x.CollationName
	}
	return ""
}

func (x *JavaCollationProto) GetWrappedCharset() *SerializableCharsetProto {
	if x != nil {
		return x.WrappedCharset
	}
	return nil
}

func (x *JavaCollationProto) GetLocale() *LocaleProto {
	if x != nil {
		return x.Locale
	}
	return nil
}

func (x *JavaCollationProto) GetStrength() string {
	if x != nil {
		return x.Strength
	}
	return ""
}

func (x *JavaCollationProto) GetCoercibility() CoercibilityProto {
	if x != nil {
		return x.Coercibility
	}
	return CoercibilityProto_CoercibilityProto_EXPLICIT_
}

// Java Class: java.text.Collator
type CollatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CollatorProto) Reset() {
	*x = CollatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CollatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CollatorProto) ProtoMessage() {}

func (x *CollatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CollatorProto.ProtoReflect.Descriptor instead.
func (*CollatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{14}
}

// Java Class: org.apache.calcite.util.SerializableCharset
type SerializableCharsetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Charset     *CharsetProto `protobuf:"bytes,1,opt,name=charset,proto3" json:"charset,omitempty"`
	CharsetName string        `protobuf:"bytes,2,opt,name=charsetName,proto3" json:"charsetName,omitempty"`
}

func (x *SerializableCharsetProto) Reset() {
	*x = SerializableCharsetProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SerializableCharsetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SerializableCharsetProto) ProtoMessage() {}

func (x *SerializableCharsetProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SerializableCharsetProto.ProtoReflect.Descriptor instead.
func (*SerializableCharsetProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{15}
}

func (x *SerializableCharsetProto) GetCharset() *CharsetProto {
	if x != nil {
		return x.Charset
	}
	return nil
}

func (x *SerializableCharsetProto) GetCharsetName() string {
	if x != nil {
		return x.CharsetName
	}
	return ""
}

// Java Class: java.nio.charset.Charset
type CharsetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CharsetProto) Reset() {
	*x = CharsetProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharsetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharsetProto) ProtoMessage() {}

func (x *CharsetProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharsetProto.ProtoReflect.Descriptor instead.
func (*CharsetProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{16}
}

// Java Class: java.util.Locale
type LocaleProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LocaleProto) Reset() {
	*x = LocaleProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocaleProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocaleProto) ProtoMessage() {}

func (x *LocaleProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocaleProto.ProtoReflect.Descriptor instead.
func (*LocaleProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{17}
}

// Java Class: org.apache.calcite.sql.type.IntervalSqlType
type IntervalSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeSystem        *RelDataTypeSystemProto    `protobuf:"bytes,1,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
	IntervalQualifier *SqlIntervalQualifierProto `protobuf:"bytes,2,opt,name=intervalQualifier,proto3" json:"intervalQualifier,omitempty"`
	TypeName          SqlTypeNameProto           `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable        bool                       `protobuf:"varint,4,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList         []*RelDataTypeFieldProto   `protobuf:"bytes,5,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest            string                     `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *IntervalSqlTypeProto) Reset() {
	*x = IntervalSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntervalSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntervalSqlTypeProto) ProtoMessage() {}

func (x *IntervalSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntervalSqlTypeProto.ProtoReflect.Descriptor instead.
func (*IntervalSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{18}
}

func (x *IntervalSqlTypeProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

func (x *IntervalSqlTypeProto) GetIntervalQualifier() *SqlIntervalQualifierProto {
	if x != nil {
		return x.IntervalQualifier
	}
	return nil
}

func (x *IntervalSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *IntervalSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *IntervalSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *IntervalSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlIntervalQualifier
type SqlIntervalQualifierProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartPrecision            int32              `protobuf:"zigzag32,1,opt,name=startPrecision,proto3" json:"startPrecision,omitempty"`
	TimeUnitRange             TimeUnitRangeProto `protobuf:"varint,2,opt,name=timeUnitRange,proto3,enum=rill.sql.v1.TimeUnitRangeProto" json:"timeUnitRange,omitempty"`
	FractionalSecondPrecision int32              `protobuf:"zigzag32,3,opt,name=fractionalSecondPrecision,proto3" json:"fractionalSecondPrecision,omitempty"`
	Pos                       *SqlParserPosProto `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation           *RelDataTypeProto  `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlIntervalQualifierProto) Reset() {
	*x = SqlIntervalQualifierProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlIntervalQualifierProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlIntervalQualifierProto) ProtoMessage() {}

func (x *SqlIntervalQualifierProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlIntervalQualifierProto.ProtoReflect.Descriptor instead.
func (*SqlIntervalQualifierProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{19}
}

func (x *SqlIntervalQualifierProto) GetStartPrecision() int32 {
	if x != nil {
		return x.StartPrecision
	}
	return 0
}

func (x *SqlIntervalQualifierProto) GetTimeUnitRange() TimeUnitRangeProto {
	if x != nil {
		return x.TimeUnitRange
	}
	return TimeUnitRangeProto_TimeUnitRangeProto_YEAR_
}

func (x *SqlIntervalQualifierProto) GetFractionalSecondPrecision() int32 {
	if x != nil {
		return x.FractionalSecondPrecision
	}
	return 0
}

func (x *SqlIntervalQualifierProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlIntervalQualifierProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.parser.SqlParserPos
type SqlParserPosProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LineNumber      int32 `protobuf:"zigzag32,1,opt,name=lineNumber,proto3" json:"lineNumber,omitempty"`
	ColumnNumber    int32 `protobuf:"zigzag32,2,opt,name=columnNumber,proto3" json:"columnNumber,omitempty"`
	EndLineNumber   int32 `protobuf:"zigzag32,3,opt,name=endLineNumber,proto3" json:"endLineNumber,omitempty"`
	EndColumnNumber int32 `protobuf:"zigzag32,4,opt,name=endColumnNumber,proto3" json:"endColumnNumber,omitempty"`
}

func (x *SqlParserPosProto) Reset() {
	*x = SqlParserPosProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlParserPosProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlParserPosProto) ProtoMessage() {}

func (x *SqlParserPosProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlParserPosProto.ProtoReflect.Descriptor instead.
func (*SqlParserPosProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{20}
}

func (x *SqlParserPosProto) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *SqlParserPosProto) GetColumnNumber() int32 {
	if x != nil {
		return x.ColumnNumber
	}
	return 0
}

func (x *SqlParserPosProto) GetEndLineNumber() int32 {
	if x != nil {
		return x.EndLineNumber
	}
	return 0
}

func (x *SqlParserPosProto) GetEndColumnNumber() int32 {
	if x != nil {
		return x.EndColumnNumber
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.ObjectSqlType
type ObjectSqlTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SqlIdentifier *SqlIdentifierProto           `protobuf:"bytes,1,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Comparability RelDataTypeComparabilityProto `protobuf:"varint,2,opt,name=comparability,proto3,enum=rill.sql.v1.RelDataTypeComparabilityProto" json:"comparability,omitempty"`
	Family        *RelDataTypeFamilyProto       `protobuf:"bytes,3,opt,name=family,proto3" json:"family,omitempty"`
	TypeName      SqlTypeNameProto              `protobuf:"varint,4,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	IsNullable    bool                          `protobuf:"varint,5,opt,name=isNullable,proto3" json:"isNullable,omitempty"`
	FieldList     []*RelDataTypeFieldProto      `protobuf:"bytes,6,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest        string                        `protobuf:"bytes,7,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *ObjectSqlTypeProto) Reset() {
	*x = ObjectSqlTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObjectSqlTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObjectSqlTypeProto) ProtoMessage() {}

func (x *ObjectSqlTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObjectSqlTypeProto.ProtoReflect.Descriptor instead.
func (*ObjectSqlTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{21}
}

func (x *ObjectSqlTypeProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *ObjectSqlTypeProto) GetComparability() RelDataTypeComparabilityProto {
	if x != nil {
		return x.Comparability
	}
	return RelDataTypeComparabilityProto_RelDataTypeComparabilityProto_NONE_
}

func (x *ObjectSqlTypeProto) GetFamily() *RelDataTypeFamilyProto {
	if x != nil {
		return x.Family
	}
	return nil
}

func (x *ObjectSqlTypeProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *ObjectSqlTypeProto) GetIsNullable() bool {
	if x != nil {
		return x.IsNullable
	}
	return false
}

func (x *ObjectSqlTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *ObjectSqlTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlIdentifier
type SqlIdentifierProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names              []string             `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	Collation          *SqlCollationProto   `protobuf:"bytes,2,opt,name=collation,proto3" json:"collation,omitempty"`
	ComponentPositions []*SqlParserPosProto `protobuf:"bytes,3,rep,name=componentPositions,proto3" json:"componentPositions,omitempty"`
	Pos                *SqlParserPosProto   `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation    *RelDataTypeProto    `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlIdentifierProto) Reset() {
	*x = SqlIdentifierProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlIdentifierProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlIdentifierProto) ProtoMessage() {}

func (x *SqlIdentifierProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlIdentifierProto.ProtoReflect.Descriptor instead.
func (*SqlIdentifierProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{22}
}

func (x *SqlIdentifierProto) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *SqlIdentifierProto) GetCollation() *SqlCollationProto {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *SqlIdentifierProto) GetComponentPositions() []*SqlParserPosProto {
	if x != nil {
		return x.ComponentPositions
	}
	return nil
}

func (x *SqlIdentifierProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlIdentifierProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeFamily
type RelDataTypeFamilyProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeFamilyProto:
	//
	//	*RelDataTypeFamilyProto_RelDataTypeImplProto
	//	*RelDataTypeFamilyProto_SqlTypeFamilyProto
	//	*RelDataTypeFamilyProto_AbstractSqlTypeProto
	//	*RelDataTypeFamilyProto_RelCrossTypeProto
	//	*RelDataTypeFamilyProto_RelRecordTypeProto
	//	*RelDataTypeFamilyProto_DynamicRecordTypeProto
	//	*RelDataTypeFamilyProto_MultisetSqlTypeProto
	//	*RelDataTypeFamilyProto_ArraySqlTypeProto
	//	*RelDataTypeFamilyProto_MapSqlTypeProto
	//	*RelDataTypeFamilyProto_BasicSqlTypeProto
	//	*RelDataTypeFamilyProto_IntervalSqlTypeProto
	//	*RelDataTypeFamilyProto_ObjectSqlTypeProto
	//	*RelDataTypeFamilyProto_JavaRecordTypeProto
	//	*RelDataTypeFamilyProto_DynamicRecordTypeImplProto
	RelDataTypeFamilyProto isRelDataTypeFamilyProto_RelDataTypeFamilyProto `protobuf_oneof:"relDataTypeFamilyProto"`
}

func (x *RelDataTypeFamilyProto) Reset() {
	*x = RelDataTypeFamilyProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeFamilyProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeFamilyProto) ProtoMessage() {}

func (x *RelDataTypeFamilyProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeFamilyProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeFamilyProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{23}
}

func (m *RelDataTypeFamilyProto) GetRelDataTypeFamilyProto() isRelDataTypeFamilyProto_RelDataTypeFamilyProto {
	if m != nil {
		return m.RelDataTypeFamilyProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetRelDataTypeImplProto() *RelDataTypeImplProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_RelDataTypeImplProto); ok {
		return x.RelDataTypeImplProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetSqlTypeFamilyProto() SqlTypeFamilyProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_SqlTypeFamilyProto); ok {
		return x.SqlTypeFamilyProto
	}
	return SqlTypeFamilyProto_SqlTypeFamilyProto_CHARACTER_
}

func (x *RelDataTypeFamilyProto) GetAbstractSqlTypeProto() *AbstractSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_AbstractSqlTypeProto); ok {
		return x.AbstractSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetRelCrossTypeProto() *RelCrossTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_RelCrossTypeProto); ok {
		return x.RelCrossTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetRelRecordTypeProto() *RelRecordTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_RelRecordTypeProto); ok {
		return x.RelRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetDynamicRecordTypeProto() *DynamicRecordTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_DynamicRecordTypeProto); ok {
		return x.DynamicRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetMultisetSqlTypeProto() *MultisetSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_MultisetSqlTypeProto); ok {
		return x.MultisetSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetArraySqlTypeProto() *ArraySqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_ArraySqlTypeProto); ok {
		return x.ArraySqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetMapSqlTypeProto() *MapSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_MapSqlTypeProto); ok {
		return x.MapSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetBasicSqlTypeProto() *BasicSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_BasicSqlTypeProto); ok {
		return x.BasicSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetIntervalSqlTypeProto() *IntervalSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_IntervalSqlTypeProto); ok {
		return x.IntervalSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetObjectSqlTypeProto() *ObjectSqlTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_ObjectSqlTypeProto); ok {
		return x.ObjectSqlTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetJavaRecordTypeProto() *JavaRecordTypeProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_JavaRecordTypeProto); ok {
		return x.JavaRecordTypeProto
	}
	return nil
}

func (x *RelDataTypeFamilyProto) GetDynamicRecordTypeImplProto() *DynamicRecordTypeImplProto {
	if x, ok := x.GetRelDataTypeFamilyProto().(*RelDataTypeFamilyProto_DynamicRecordTypeImplProto); ok {
		return x.DynamicRecordTypeImplProto
	}
	return nil
}

type isRelDataTypeFamilyProto_RelDataTypeFamilyProto interface {
	isRelDataTypeFamilyProto_RelDataTypeFamilyProto()
}

type RelDataTypeFamilyProto_RelDataTypeImplProto struct {
	RelDataTypeImplProto *RelDataTypeImplProto `protobuf:"bytes,1,opt,name=relDataTypeImplProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_SqlTypeFamilyProto struct {
	SqlTypeFamilyProto SqlTypeFamilyProto `protobuf:"varint,2,opt,name=sqlTypeFamilyProto,proto3,enum=rill.sql.v1.SqlTypeFamilyProto,oneof"`
}

type RelDataTypeFamilyProto_AbstractSqlTypeProto struct {
	AbstractSqlTypeProto *AbstractSqlTypeProto `protobuf:"bytes,3,opt,name=abstractSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_RelCrossTypeProto struct {
	RelCrossTypeProto *RelCrossTypeProto `protobuf:"bytes,4,opt,name=relCrossTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_RelRecordTypeProto struct {
	RelRecordTypeProto *RelRecordTypeProto `protobuf:"bytes,5,opt,name=relRecordTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_DynamicRecordTypeProto struct {
	DynamicRecordTypeProto *DynamicRecordTypeProto `protobuf:"bytes,6,opt,name=dynamicRecordTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_MultisetSqlTypeProto struct {
	MultisetSqlTypeProto *MultisetSqlTypeProto `protobuf:"bytes,7,opt,name=multisetSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_ArraySqlTypeProto struct {
	ArraySqlTypeProto *ArraySqlTypeProto `protobuf:"bytes,8,opt,name=arraySqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_MapSqlTypeProto struct {
	MapSqlTypeProto *MapSqlTypeProto `protobuf:"bytes,9,opt,name=mapSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_BasicSqlTypeProto struct {
	BasicSqlTypeProto *BasicSqlTypeProto `protobuf:"bytes,10,opt,name=basicSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_IntervalSqlTypeProto struct {
	IntervalSqlTypeProto *IntervalSqlTypeProto `protobuf:"bytes,11,opt,name=intervalSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_ObjectSqlTypeProto struct {
	ObjectSqlTypeProto *ObjectSqlTypeProto `protobuf:"bytes,12,opt,name=objectSqlTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_JavaRecordTypeProto struct {
	JavaRecordTypeProto *JavaRecordTypeProto `protobuf:"bytes,13,opt,name=javaRecordTypeProto,proto3,oneof"`
}

type RelDataTypeFamilyProto_DynamicRecordTypeImplProto struct {
	DynamicRecordTypeImplProto *DynamicRecordTypeImplProto `protobuf:"bytes,14,opt,name=dynamicRecordTypeImplProto,proto3,oneof"`
}

func (*RelDataTypeFamilyProto_RelDataTypeImplProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_SqlTypeFamilyProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_AbstractSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_RelCrossTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_RelRecordTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_DynamicRecordTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_MultisetSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_ArraySqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_MapSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_BasicSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_IntervalSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_ObjectSqlTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {}

func (*RelDataTypeFamilyProto_JavaRecordTypeProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

func (*RelDataTypeFamilyProto_DynamicRecordTypeImplProto) isRelDataTypeFamilyProto_RelDataTypeFamilyProto() {
}

// Java Class: org.apache.calcite.rel.type.RelCrossType
type RelCrossTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Types     []*RelDataTypeProto      `protobuf:"bytes,1,rep,name=types,proto3" json:"types,omitempty"`
	FieldList []*RelDataTypeFieldProto `protobuf:"bytes,2,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest    string                   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *RelCrossTypeProto) Reset() {
	*x = RelCrossTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelCrossTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelCrossTypeProto) ProtoMessage() {}

func (x *RelCrossTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelCrossTypeProto.ProtoReflect.Descriptor instead.
func (*RelCrossTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{24}
}

func (x *RelCrossTypeProto) GetTypes() []*RelDataTypeProto {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *RelCrossTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *RelCrossTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.rel.type.RelRecordType
type RelRecordTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelRecordTypeProto:
	//
	//	*RelRecordTypeProto_JavaRecordTypeProto
	RelRecordTypeProto isRelRecordTypeProto_RelRecordTypeProto `protobuf_oneof:"relRecordTypeProto"`
	Kind               StructKindProto                         `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.StructKindProto" json:"kind,omitempty"`
	Nullable           bool                                    `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	FieldNameMap       map[string]*RelDataTypeFieldProto       `protobuf:"bytes,4,rep,name=fieldNameMap,proto3" json:"fieldNameMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldList          []*RelDataTypeFieldProto                `protobuf:"bytes,5,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest             string                                  `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *RelRecordTypeProto) Reset() {
	*x = RelRecordTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelRecordTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelRecordTypeProto) ProtoMessage() {}

func (x *RelRecordTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelRecordTypeProto.ProtoReflect.Descriptor instead.
func (*RelRecordTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{25}
}

func (m *RelRecordTypeProto) GetRelRecordTypeProto() isRelRecordTypeProto_RelRecordTypeProto {
	if m != nil {
		return m.RelRecordTypeProto
	}
	return nil
}

func (x *RelRecordTypeProto) GetJavaRecordTypeProto() *JavaRecordTypeProto {
	if x, ok := x.GetRelRecordTypeProto().(*RelRecordTypeProto_JavaRecordTypeProto); ok {
		return x.JavaRecordTypeProto
	}
	return nil
}

func (x *RelRecordTypeProto) GetKind() StructKindProto {
	if x != nil {
		return x.Kind
	}
	return StructKindProto_StructKindProto_NONE_
}

func (x *RelRecordTypeProto) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *RelRecordTypeProto) GetFieldNameMap() map[string]*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldNameMap
	}
	return nil
}

func (x *RelRecordTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *RelRecordTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type isRelRecordTypeProto_RelRecordTypeProto interface {
	isRelRecordTypeProto_RelRecordTypeProto()
}

type RelRecordTypeProto_JavaRecordTypeProto struct {
	JavaRecordTypeProto *JavaRecordTypeProto `protobuf:"bytes,1,opt,name=javaRecordTypeProto,proto3,oneof"`
}

func (*RelRecordTypeProto_JavaRecordTypeProto) isRelRecordTypeProto_RelRecordTypeProto() {}

// Java Class: org.apache.calcite.jdbc.JavaRecordType
type JavaRecordTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Clazz        *ClassProto                       `protobuf:"bytes,1,opt,name=clazz,proto3" json:"clazz,omitempty"`
	Kind         StructKindProto                   `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.StructKindProto" json:"kind,omitempty"`
	Nullable     bool                              `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	FieldNameMap map[string]*RelDataTypeFieldProto `protobuf:"bytes,4,rep,name=fieldNameMap,proto3" json:"fieldNameMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	FieldList    []*RelDataTypeFieldProto          `protobuf:"bytes,5,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest       string                            `protobuf:"bytes,6,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *JavaRecordTypeProto) Reset() {
	*x = JavaRecordTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaRecordTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaRecordTypeProto) ProtoMessage() {}

func (x *JavaRecordTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaRecordTypeProto.ProtoReflect.Descriptor instead.
func (*JavaRecordTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{26}
}

func (x *JavaRecordTypeProto) GetClazz() *ClassProto {
	if x != nil {
		return x.Clazz
	}
	return nil
}

func (x *JavaRecordTypeProto) GetKind() StructKindProto {
	if x != nil {
		return x.Kind
	}
	return StructKindProto_StructKindProto_NONE_
}

func (x *JavaRecordTypeProto) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *JavaRecordTypeProto) GetFieldNameMap() map[string]*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldNameMap
	}
	return nil
}

func (x *JavaRecordTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *JavaRecordTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: java.lang.Class
type ClassProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ClassProto) Reset() {
	*x = ClassProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClassProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClassProto) ProtoMessage() {}

func (x *ClassProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClassProto.ProtoReflect.Descriptor instead.
func (*ClassProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{27}
}

// Java Class: org.apache.calcite.rel.type.DynamicRecordType
type DynamicRecordTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to DynamicRecordTypeProto:
	//
	//	*DynamicRecordTypeProto_DynamicRecordTypeImplProto
	DynamicRecordTypeProto isDynamicRecordTypeProto_DynamicRecordTypeProto `protobuf_oneof:"dynamicRecordTypeProto"`
	FieldList              []*RelDataTypeFieldProto                        `protobuf:"bytes,2,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest                 string                                          `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *DynamicRecordTypeProto) Reset() {
	*x = DynamicRecordTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicRecordTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicRecordTypeProto) ProtoMessage() {}

func (x *DynamicRecordTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicRecordTypeProto.ProtoReflect.Descriptor instead.
func (*DynamicRecordTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{28}
}

func (m *DynamicRecordTypeProto) GetDynamicRecordTypeProto() isDynamicRecordTypeProto_DynamicRecordTypeProto {
	if m != nil {
		return m.DynamicRecordTypeProto
	}
	return nil
}

func (x *DynamicRecordTypeProto) GetDynamicRecordTypeImplProto() *DynamicRecordTypeImplProto {
	if x, ok := x.GetDynamicRecordTypeProto().(*DynamicRecordTypeProto_DynamicRecordTypeImplProto); ok {
		return x.DynamicRecordTypeImplProto
	}
	return nil
}

func (x *DynamicRecordTypeProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *DynamicRecordTypeProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type isDynamicRecordTypeProto_DynamicRecordTypeProto interface {
	isDynamicRecordTypeProto_DynamicRecordTypeProto()
}

type DynamicRecordTypeProto_DynamicRecordTypeImplProto struct {
	DynamicRecordTypeImplProto *DynamicRecordTypeImplProto `protobuf:"bytes,1,opt,name=dynamicRecordTypeImplProto,proto3,oneof"`
}

func (*DynamicRecordTypeProto_DynamicRecordTypeImplProto) isDynamicRecordTypeProto_DynamicRecordTypeProto() {
}

// Java Class: org.apache.calcite.rel.type.DynamicRecordTypeImpl
type DynamicRecordTypeImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Holder    *RelDataTypeHolderProto  `protobuf:"bytes,1,opt,name=holder,proto3" json:"holder,omitempty"`
	FieldList []*RelDataTypeFieldProto `protobuf:"bytes,2,rep,name=fieldList,proto3" json:"fieldList,omitempty"`
	Digest    string                   `protobuf:"bytes,3,opt,name=digest,proto3" json:"digest,omitempty"`
}

func (x *DynamicRecordTypeImplProto) Reset() {
	*x = DynamicRecordTypeImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DynamicRecordTypeImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DynamicRecordTypeImplProto) ProtoMessage() {}

func (x *DynamicRecordTypeImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DynamicRecordTypeImplProto.ProtoReflect.Descriptor instead.
func (*DynamicRecordTypeImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{29}
}

func (x *DynamicRecordTypeImplProto) GetHolder() *RelDataTypeHolderProto {
	if x != nil {
		return x.Holder
	}
	return nil
}

func (x *DynamicRecordTypeImplProto) GetFieldList() []*RelDataTypeFieldProto {
	if x != nil {
		return x.FieldList
	}
	return nil
}

func (x *DynamicRecordTypeImplProto) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeHolder
type RelDataTypeHolderProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Fields      []*RelDataTypeFieldProto `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	TypeFactory *RelDataTypeFactoryProto `protobuf:"bytes,2,opt,name=typeFactory,proto3" json:"typeFactory,omitempty"`
}

func (x *RelDataTypeHolderProto) Reset() {
	*x = RelDataTypeHolderProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeHolderProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeHolderProto) ProtoMessage() {}

func (x *RelDataTypeHolderProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeHolderProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeHolderProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{30}
}

func (x *RelDataTypeHolderProto) GetFields() []*RelDataTypeFieldProto {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *RelDataTypeHolderProto) GetTypeFactory() *RelDataTypeFactoryProto {
	if x != nil {
		return x.TypeFactory
	}
	return nil
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeFactory
type RelDataTypeFactoryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeFactoryProto:
	//
	//	*RelDataTypeFactoryProto_JavaTypeFactoryProto
	//	*RelDataTypeFactoryProto_RelDataTypeFactoryImplProto
	//	*RelDataTypeFactoryProto_JavaTypeFactoryImplProto
	//	*RelDataTypeFactoryProto_SqlTypeFactoryImplProto
	RelDataTypeFactoryProto isRelDataTypeFactoryProto_RelDataTypeFactoryProto `protobuf_oneof:"relDataTypeFactoryProto"`
}

func (x *RelDataTypeFactoryProto) Reset() {
	*x = RelDataTypeFactoryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeFactoryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeFactoryProto) ProtoMessage() {}

func (x *RelDataTypeFactoryProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeFactoryProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeFactoryProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{31}
}

func (m *RelDataTypeFactoryProto) GetRelDataTypeFactoryProto() isRelDataTypeFactoryProto_RelDataTypeFactoryProto {
	if m != nil {
		return m.RelDataTypeFactoryProto
	}
	return nil
}

func (x *RelDataTypeFactoryProto) GetJavaTypeFactoryProto() *JavaTypeFactoryProto {
	if x, ok := x.GetRelDataTypeFactoryProto().(*RelDataTypeFactoryProto_JavaTypeFactoryProto); ok {
		return x.JavaTypeFactoryProto
	}
	return nil
}

func (x *RelDataTypeFactoryProto) GetRelDataTypeFactoryImplProto() *RelDataTypeFactoryImplProto {
	if x, ok := x.GetRelDataTypeFactoryProto().(*RelDataTypeFactoryProto_RelDataTypeFactoryImplProto); ok {
		return x.RelDataTypeFactoryImplProto
	}
	return nil
}

func (x *RelDataTypeFactoryProto) GetJavaTypeFactoryImplProto() *JavaTypeFactoryImplProto {
	if x, ok := x.GetRelDataTypeFactoryProto().(*RelDataTypeFactoryProto_JavaTypeFactoryImplProto); ok {
		return x.JavaTypeFactoryImplProto
	}
	return nil
}

func (x *RelDataTypeFactoryProto) GetSqlTypeFactoryImplProto() *SqlTypeFactoryImplProto {
	if x, ok := x.GetRelDataTypeFactoryProto().(*RelDataTypeFactoryProto_SqlTypeFactoryImplProto); ok {
		return x.SqlTypeFactoryImplProto
	}
	return nil
}

type isRelDataTypeFactoryProto_RelDataTypeFactoryProto interface {
	isRelDataTypeFactoryProto_RelDataTypeFactoryProto()
}

type RelDataTypeFactoryProto_JavaTypeFactoryProto struct {
	JavaTypeFactoryProto *JavaTypeFactoryProto `protobuf:"bytes,1,opt,name=javaTypeFactoryProto,proto3,oneof"`
}

type RelDataTypeFactoryProto_RelDataTypeFactoryImplProto struct {
	RelDataTypeFactoryImplProto *RelDataTypeFactoryImplProto `protobuf:"bytes,2,opt,name=relDataTypeFactoryImplProto,proto3,oneof"`
}

type RelDataTypeFactoryProto_JavaTypeFactoryImplProto struct {
	JavaTypeFactoryImplProto *JavaTypeFactoryImplProto `protobuf:"bytes,3,opt,name=javaTypeFactoryImplProto,proto3,oneof"`
}

type RelDataTypeFactoryProto_SqlTypeFactoryImplProto struct {
	SqlTypeFactoryImplProto *SqlTypeFactoryImplProto `protobuf:"bytes,4,opt,name=sqlTypeFactoryImplProto,proto3,oneof"`
}

func (*RelDataTypeFactoryProto_JavaTypeFactoryProto) isRelDataTypeFactoryProto_RelDataTypeFactoryProto() {
}

func (*RelDataTypeFactoryProto_RelDataTypeFactoryImplProto) isRelDataTypeFactoryProto_RelDataTypeFactoryProto() {
}

func (*RelDataTypeFactoryProto_JavaTypeFactoryImplProto) isRelDataTypeFactoryProto_RelDataTypeFactoryProto() {
}

func (*RelDataTypeFactoryProto_SqlTypeFactoryImplProto) isRelDataTypeFactoryProto_RelDataTypeFactoryProto() {
}

// Java Class: org.apache.calcite.adapter.java.JavaTypeFactory
type JavaTypeFactoryProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to JavaTypeFactoryProto:
	//
	//	*JavaTypeFactoryProto_JavaTypeFactoryImplProto
	JavaTypeFactoryProto isJavaTypeFactoryProto_JavaTypeFactoryProto `protobuf_oneof:"javaTypeFactoryProto"`
}

func (x *JavaTypeFactoryProto) Reset() {
	*x = JavaTypeFactoryProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaTypeFactoryProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaTypeFactoryProto) ProtoMessage() {}

func (x *JavaTypeFactoryProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaTypeFactoryProto.ProtoReflect.Descriptor instead.
func (*JavaTypeFactoryProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{32}
}

func (m *JavaTypeFactoryProto) GetJavaTypeFactoryProto() isJavaTypeFactoryProto_JavaTypeFactoryProto {
	if m != nil {
		return m.JavaTypeFactoryProto
	}
	return nil
}

func (x *JavaTypeFactoryProto) GetJavaTypeFactoryImplProto() *JavaTypeFactoryImplProto {
	if x, ok := x.GetJavaTypeFactoryProto().(*JavaTypeFactoryProto_JavaTypeFactoryImplProto); ok {
		return x.JavaTypeFactoryImplProto
	}
	return nil
}

type isJavaTypeFactoryProto_JavaTypeFactoryProto interface {
	isJavaTypeFactoryProto_JavaTypeFactoryProto()
}

type JavaTypeFactoryProto_JavaTypeFactoryImplProto struct {
	JavaTypeFactoryImplProto *JavaTypeFactoryImplProto `protobuf:"bytes,1,opt,name=javaTypeFactoryImplProto,proto3,oneof"`
}

func (*JavaTypeFactoryProto_JavaTypeFactoryImplProto) isJavaTypeFactoryProto_JavaTypeFactoryProto() {}

// Java Class: org.apache.calcite.jdbc.JavaTypeFactoryImpl
type JavaTypeFactoryImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeSystem *RelDataTypeSystemProto `protobuf:"bytes,1,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
}

func (x *JavaTypeFactoryImplProto) Reset() {
	*x = JavaTypeFactoryImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JavaTypeFactoryImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JavaTypeFactoryImplProto) ProtoMessage() {}

func (x *JavaTypeFactoryImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JavaTypeFactoryImplProto.ProtoReflect.Descriptor instead.
func (*JavaTypeFactoryImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{33}
}

func (x *JavaTypeFactoryImplProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

// Java Class: org.apache.calcite.rel.type.RelDataTypeFactoryImpl
type RelDataTypeFactoryImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to RelDataTypeFactoryImplProto:
	//
	//	*RelDataTypeFactoryImplProto_SqlTypeFactoryImplProto
	//	*RelDataTypeFactoryImplProto_JavaTypeFactoryImplProto
	RelDataTypeFactoryImplProto isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto `protobuf_oneof:"relDataTypeFactoryImplProto"`
	TypeSystem                  *RelDataTypeSystemProto                                   `protobuf:"bytes,3,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
}

func (x *RelDataTypeFactoryImplProto) Reset() {
	*x = RelDataTypeFactoryImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelDataTypeFactoryImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelDataTypeFactoryImplProto) ProtoMessage() {}

func (x *RelDataTypeFactoryImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelDataTypeFactoryImplProto.ProtoReflect.Descriptor instead.
func (*RelDataTypeFactoryImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{34}
}

func (m *RelDataTypeFactoryImplProto) GetRelDataTypeFactoryImplProto() isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto {
	if m != nil {
		return m.RelDataTypeFactoryImplProto
	}
	return nil
}

func (x *RelDataTypeFactoryImplProto) GetSqlTypeFactoryImplProto() *SqlTypeFactoryImplProto {
	if x, ok := x.GetRelDataTypeFactoryImplProto().(*RelDataTypeFactoryImplProto_SqlTypeFactoryImplProto); ok {
		return x.SqlTypeFactoryImplProto
	}
	return nil
}

func (x *RelDataTypeFactoryImplProto) GetJavaTypeFactoryImplProto() *JavaTypeFactoryImplProto {
	if x, ok := x.GetRelDataTypeFactoryImplProto().(*RelDataTypeFactoryImplProto_JavaTypeFactoryImplProto); ok {
		return x.JavaTypeFactoryImplProto
	}
	return nil
}

func (x *RelDataTypeFactoryImplProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

type isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto interface {
	isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto()
}

type RelDataTypeFactoryImplProto_SqlTypeFactoryImplProto struct {
	SqlTypeFactoryImplProto *SqlTypeFactoryImplProto `protobuf:"bytes,1,opt,name=sqlTypeFactoryImplProto,proto3,oneof"`
}

type RelDataTypeFactoryImplProto_JavaTypeFactoryImplProto struct {
	JavaTypeFactoryImplProto *JavaTypeFactoryImplProto `protobuf:"bytes,2,opt,name=javaTypeFactoryImplProto,proto3,oneof"`
}

func (*RelDataTypeFactoryImplProto_SqlTypeFactoryImplProto) isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto() {
}

func (*RelDataTypeFactoryImplProto_JavaTypeFactoryImplProto) isRelDataTypeFactoryImplProto_RelDataTypeFactoryImplProto() {
}

// Java Class: org.apache.calcite.sql.type.SqlTypeFactoryImpl
type SqlTypeFactoryImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlTypeFactoryImplProto:
	//
	//	*SqlTypeFactoryImplProto_JavaTypeFactoryImplProto
	SqlTypeFactoryImplProto isSqlTypeFactoryImplProto_SqlTypeFactoryImplProto `protobuf_oneof:"sqlTypeFactoryImplProto"`
	TypeSystem              *RelDataTypeSystemProto                           `protobuf:"bytes,2,opt,name=typeSystem,proto3" json:"typeSystem,omitempty"`
}

func (x *SqlTypeFactoryImplProto) Reset() {
	*x = SqlTypeFactoryImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTypeFactoryImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTypeFactoryImplProto) ProtoMessage() {}

func (x *SqlTypeFactoryImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTypeFactoryImplProto.ProtoReflect.Descriptor instead.
func (*SqlTypeFactoryImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{35}
}

func (m *SqlTypeFactoryImplProto) GetSqlTypeFactoryImplProto() isSqlTypeFactoryImplProto_SqlTypeFactoryImplProto {
	if m != nil {
		return m.SqlTypeFactoryImplProto
	}
	return nil
}

func (x *SqlTypeFactoryImplProto) GetJavaTypeFactoryImplProto() *JavaTypeFactoryImplProto {
	if x, ok := x.GetSqlTypeFactoryImplProto().(*SqlTypeFactoryImplProto_JavaTypeFactoryImplProto); ok {
		return x.JavaTypeFactoryImplProto
	}
	return nil
}

func (x *SqlTypeFactoryImplProto) GetTypeSystem() *RelDataTypeSystemProto {
	if x != nil {
		return x.TypeSystem
	}
	return nil
}

type isSqlTypeFactoryImplProto_SqlTypeFactoryImplProto interface {
	isSqlTypeFactoryImplProto_SqlTypeFactoryImplProto()
}

type SqlTypeFactoryImplProto_JavaTypeFactoryImplProto struct {
	JavaTypeFactoryImplProto *JavaTypeFactoryImplProto `protobuf:"bytes,1,opt,name=javaTypeFactoryImplProto,proto3,oneof"`
}

func (*SqlTypeFactoryImplProto_JavaTypeFactoryImplProto) isSqlTypeFactoryImplProto_SqlTypeFactoryImplProto() {
}

// Java Class: org.apache.calcite.sql.SqlNode
type SqlNodeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlNodeProto:
	//
	//	*SqlNodeProto_SqlCallProto
	//	*SqlNodeProto_SqlIntervalQualifierProto
	//	*SqlNodeProto_SqlLiteralProto
	//	*SqlNodeProto_SqlDynamicParamProto
	//	*SqlNodeProto_SqlIdentifierProto
	//	*SqlNodeProto_SqlNodeListProto
	//	*SqlNodeProto_SqlDataTypeSpecProto
	//	*SqlNodeProto_SqlUpdateProto
	//	*SqlNodeProto_SqlInsertProto
	//	*SqlNodeProto_SqlCaseProto
	//	*SqlNodeProto_SqlDeleteProto
	//	*SqlNodeProto_SqlCheckConstraintProto
	//	*SqlNodeProto_SqlPivotProto
	//	*SqlNodeProto_SqlTableRefProto
	//	*SqlNodeProto_SqlKeyConstraintProto
	//	*SqlNodeProto_SqlWithProto
	//	*SqlNodeProto_SqlSnapshotProto
	//	*SqlNodeProto_SqlOrderByProto
	//	*SqlNodeProto_SqlWindowProto
	//	*SqlNodeProto_SqlSelectProto
	//	*SqlNodeProto_SqlAttributeDefinitionProto
	//	*SqlNodeProto_SqlExplainProto
	//	*SqlNodeProto_SqlWithItemProto
	//	*SqlNodeProto_SqlUnpivotProto
	//	*SqlNodeProto_SqlMergeProto
	//	*SqlNodeProto_SqlHintProto
	//	*SqlNodeProto_SqlBasicCallProto
	//	*SqlNodeProto_SqlMatchRecognizeProto
	//	*SqlNodeProto_SqlAlterProto
	//	*SqlNodeProto_SqlDdlProto
	//	*SqlNodeProto_SqlDescribeSchemaProto
	//	*SqlNodeProto_SqlJoinProto
	//	*SqlNodeProto_SqlDescribeTableProto
	//	*SqlNodeProto_SqlColumnDeclarationProto
	//	*SqlNodeProto_SqlNumericLiteralProto
	//	*SqlNodeProto_SqlAbstractStringLiteralProto
	//	*SqlNodeProto_SqlAbstractDateTimeLiteralProto
	//	*SqlNodeProto_SqlIntervalLiteralProto
	//	*SqlNodeProto_SqlSetOptionProto
	//	*SqlNodeProto_SqlDropProto
	//	*SqlNodeProto_SqlCreateProto
	//	*SqlNodeProto_SqlBinaryStringLiteralProto
	//	*SqlNodeProto_SqlCharStringLiteralProto
	//	*SqlNodeProto_SqlDateLiteralProto
	//	*SqlNodeProto_SqlTimestampLiteralProto
	//	*SqlNodeProto_SqlTimeLiteralProto
	//	*SqlNodeProto_SqlDropSchemaProto
	//	*SqlNodeProto_SqlDropObjectProto
	//	*SqlNodeProto_SqlCreateTypeProto
	//	*SqlNodeProto_SqlCreateTableProto
	//	*SqlNodeProto_SqlCreateViewProto
	//	*SqlNodeProto_SqlCreateFunctionProto
	//	*SqlNodeProto_SqlCreateForeignSchemaProto
	//	*SqlNodeProto_SqlCreateSchemaProto
	//	*SqlNodeProto_SqlCreateMaterializedViewProto
	//	*SqlNodeProto_SqlDropTableProto
	//	*SqlNodeProto_SqlDropMaterializedViewProto
	//	*SqlNodeProto_SqlDropViewProto
	//	*SqlNodeProto_SqlDropFunctionProto
	//	*SqlNodeProto_SqlDropTypeProto
	//	*SqlNodeProto_SqlCreateSourceProto
	//	*SqlNodeProto_SqlCreateMetricsViewProto
	SqlNodeProto isSqlNodeProto_SqlNodeProto `protobuf_oneof:"sqlNodeProto"`
	Pos          *SqlParserPosProto          `protobuf:"bytes,63,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlNodeProto) Reset() {
	*x = SqlNodeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNodeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNodeProto) ProtoMessage() {}

func (x *SqlNodeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNodeProto.ProtoReflect.Descriptor instead.
func (*SqlNodeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{36}
}

func (m *SqlNodeProto) GetSqlNodeProto() isSqlNodeProto_SqlNodeProto {
	if m != nil {
		return m.SqlNodeProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCallProto() *SqlCallProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCallProto); ok {
		return x.SqlCallProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlIntervalQualifierProto() *SqlIntervalQualifierProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlIntervalQualifierProto); ok {
		return x.SqlIntervalQualifierProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlLiteralProto() *SqlLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlLiteralProto); ok {
		return x.SqlLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDynamicParamProto() *SqlDynamicParamProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDynamicParamProto); ok {
		return x.SqlDynamicParamProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlIdentifierProto() *SqlIdentifierProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlIdentifierProto); ok {
		return x.SqlIdentifierProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlNodeListProto() *SqlNodeListProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlNodeListProto); ok {
		return x.SqlNodeListProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDataTypeSpecProto() *SqlDataTypeSpecProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDataTypeSpecProto); ok {
		return x.SqlDataTypeSpecProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlUpdateProto() *SqlUpdateProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlUpdateProto); ok {
		return x.SqlUpdateProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlInsertProto() *SqlInsertProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlInsertProto); ok {
		return x.SqlInsertProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCaseProto() *SqlCaseProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCaseProto); ok {
		return x.SqlCaseProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDeleteProto() *SqlDeleteProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDeleteProto); ok {
		return x.SqlDeleteProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCheckConstraintProto() *SqlCheckConstraintProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCheckConstraintProto); ok {
		return x.SqlCheckConstraintProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlPivotProto() *SqlPivotProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlPivotProto); ok {
		return x.SqlPivotProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlTableRefProto() *SqlTableRefProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlTableRefProto); ok {
		return x.SqlTableRefProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlKeyConstraintProto() *SqlKeyConstraintProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlKeyConstraintProto); ok {
		return x.SqlKeyConstraintProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlWithProto() *SqlWithProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlWithProto); ok {
		return x.SqlWithProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlSnapshotProto() *SqlSnapshotProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlSnapshotProto); ok {
		return x.SqlSnapshotProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlOrderByProto() *SqlOrderByProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlOrderByProto); ok {
		return x.SqlOrderByProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlWindowProto() *SqlWindowProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlWindowProto); ok {
		return x.SqlWindowProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlSelectProto() *SqlSelectProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlSelectProto); ok {
		return x.SqlSelectProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlAttributeDefinitionProto() *SqlAttributeDefinitionProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlAttributeDefinitionProto); ok {
		return x.SqlAttributeDefinitionProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlExplainProto() *SqlExplainProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlExplainProto); ok {
		return x.SqlExplainProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlWithItemProto() *SqlWithItemProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlWithItemProto); ok {
		return x.SqlWithItemProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlUnpivotProto() *SqlUnpivotProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlUnpivotProto); ok {
		return x.SqlUnpivotProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlMergeProto() *SqlMergeProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlMergeProto); ok {
		return x.SqlMergeProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlHintProto() *SqlHintProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlHintProto); ok {
		return x.SqlHintProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlBasicCallProto() *SqlBasicCallProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlBasicCallProto); ok {
		return x.SqlBasicCallProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlMatchRecognizeProto() *SqlMatchRecognizeProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlMatchRecognizeProto); ok {
		return x.SqlMatchRecognizeProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlAlterProto() *SqlAlterProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlAlterProto); ok {
		return x.SqlAlterProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDdlProto() *SqlDdlProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDdlProto); ok {
		return x.SqlDdlProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDescribeSchemaProto() *SqlDescribeSchemaProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDescribeSchemaProto); ok {
		return x.SqlDescribeSchemaProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlJoinProto() *SqlJoinProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlJoinProto); ok {
		return x.SqlJoinProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDescribeTableProto() *SqlDescribeTableProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDescribeTableProto); ok {
		return x.SqlDescribeTableProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlColumnDeclarationProto() *SqlColumnDeclarationProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlColumnDeclarationProto); ok {
		return x.SqlColumnDeclarationProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlNumericLiteralProto() *SqlNumericLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlNumericLiteralProto); ok {
		return x.SqlNumericLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlAbstractStringLiteralProto() *SqlAbstractStringLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlAbstractStringLiteralProto); ok {
		return x.SqlAbstractStringLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlAbstractDateTimeLiteralProto() *SqlAbstractDateTimeLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlAbstractDateTimeLiteralProto); ok {
		return x.SqlAbstractDateTimeLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlIntervalLiteralProto() *SqlIntervalLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlIntervalLiteralProto); ok {
		return x.SqlIntervalLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlSetOptionProto() *SqlSetOptionProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlSetOptionProto); ok {
		return x.SqlSetOptionProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropProto() *SqlDropProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropProto); ok {
		return x.SqlDropProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateProto() *SqlCreateProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateProto); ok {
		return x.SqlCreateProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlBinaryStringLiteralProto() *SqlBinaryStringLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlBinaryStringLiteralProto); ok {
		return x.SqlBinaryStringLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCharStringLiteralProto() *SqlCharStringLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCharStringLiteralProto); ok {
		return x.SqlCharStringLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDateLiteralProto() *SqlDateLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDateLiteralProto); ok {
		return x.SqlDateLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlTimestampLiteralProto() *SqlTimestampLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlTimestampLiteralProto); ok {
		return x.SqlTimestampLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlTimeLiteralProto() *SqlTimeLiteralProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlTimeLiteralProto); ok {
		return x.SqlTimeLiteralProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropSchemaProto() *SqlDropSchemaProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropSchemaProto); ok {
		return x.SqlDropSchemaProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropObjectProto() *SqlDropObjectProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropObjectProto); ok {
		return x.SqlDropObjectProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateTypeProto() *SqlCreateTypeProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateTypeProto); ok {
		return x.SqlCreateTypeProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateTableProto() *SqlCreateTableProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateTableProto); ok {
		return x.SqlCreateTableProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateViewProto() *SqlCreateViewProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateViewProto); ok {
		return x.SqlCreateViewProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateFunctionProto() *SqlCreateFunctionProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateFunctionProto); ok {
		return x.SqlCreateFunctionProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateForeignSchemaProto() *SqlCreateForeignSchemaProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateForeignSchemaProto); ok {
		return x.SqlCreateForeignSchemaProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateSchemaProto() *SqlCreateSchemaProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateSchemaProto); ok {
		return x.SqlCreateSchemaProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateMaterializedViewProto() *SqlCreateMaterializedViewProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateMaterializedViewProto); ok {
		return x.SqlCreateMaterializedViewProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropTableProto() *SqlDropTableProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropTableProto); ok {
		return x.SqlDropTableProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropMaterializedViewProto() *SqlDropMaterializedViewProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropMaterializedViewProto); ok {
		return x.SqlDropMaterializedViewProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropViewProto() *SqlDropViewProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropViewProto); ok {
		return x.SqlDropViewProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropFunctionProto() *SqlDropFunctionProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropFunctionProto); ok {
		return x.SqlDropFunctionProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlDropTypeProto() *SqlDropTypeProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlDropTypeProto); ok {
		return x.SqlDropTypeProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateSourceProto() *SqlCreateSourceProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateSourceProto); ok {
		return x.SqlCreateSourceProto
	}
	return nil
}

func (x *SqlNodeProto) GetSqlCreateMetricsViewProto() *SqlCreateMetricsViewProto {
	if x, ok := x.GetSqlNodeProto().(*SqlNodeProto_SqlCreateMetricsViewProto); ok {
		return x.SqlCreateMetricsViewProto
	}
	return nil
}

func (x *SqlNodeProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

type isSqlNodeProto_SqlNodeProto interface {
	isSqlNodeProto_SqlNodeProto()
}

type SqlNodeProto_SqlCallProto struct {
	SqlCallProto *SqlCallProto `protobuf:"bytes,1,opt,name=sqlCallProto,proto3,oneof"`
}

type SqlNodeProto_SqlIntervalQualifierProto struct {
	SqlIntervalQualifierProto *SqlIntervalQualifierProto `protobuf:"bytes,2,opt,name=sqlIntervalQualifierProto,proto3,oneof"`
}

type SqlNodeProto_SqlLiteralProto struct {
	SqlLiteralProto *SqlLiteralProto `protobuf:"bytes,3,opt,name=sqlLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlDynamicParamProto struct {
	SqlDynamicParamProto *SqlDynamicParamProto `protobuf:"bytes,4,opt,name=sqlDynamicParamProto,proto3,oneof"`
}

type SqlNodeProto_SqlIdentifierProto struct {
	SqlIdentifierProto *SqlIdentifierProto `protobuf:"bytes,5,opt,name=sqlIdentifierProto,proto3,oneof"`
}

type SqlNodeProto_SqlNodeListProto struct {
	SqlNodeListProto *SqlNodeListProto `protobuf:"bytes,6,opt,name=sqlNodeListProto,proto3,oneof"`
}

type SqlNodeProto_SqlDataTypeSpecProto struct {
	SqlDataTypeSpecProto *SqlDataTypeSpecProto `protobuf:"bytes,7,opt,name=sqlDataTypeSpecProto,proto3,oneof"`
}

type SqlNodeProto_SqlUpdateProto struct {
	SqlUpdateProto *SqlUpdateProto `protobuf:"bytes,8,opt,name=sqlUpdateProto,proto3,oneof"`
}

type SqlNodeProto_SqlInsertProto struct {
	SqlInsertProto *SqlInsertProto `protobuf:"bytes,9,opt,name=sqlInsertProto,proto3,oneof"`
}

type SqlNodeProto_SqlCaseProto struct {
	SqlCaseProto *SqlCaseProto `protobuf:"bytes,10,opt,name=sqlCaseProto,proto3,oneof"`
}

type SqlNodeProto_SqlDeleteProto struct {
	SqlDeleteProto *SqlDeleteProto `protobuf:"bytes,11,opt,name=sqlDeleteProto,proto3,oneof"`
}

type SqlNodeProto_SqlCheckConstraintProto struct {
	SqlCheckConstraintProto *SqlCheckConstraintProto `protobuf:"bytes,12,opt,name=sqlCheckConstraintProto,proto3,oneof"`
}

type SqlNodeProto_SqlPivotProto struct {
	SqlPivotProto *SqlPivotProto `protobuf:"bytes,13,opt,name=sqlPivotProto,proto3,oneof"`
}

type SqlNodeProto_SqlTableRefProto struct {
	SqlTableRefProto *SqlTableRefProto `protobuf:"bytes,14,opt,name=sqlTableRefProto,proto3,oneof"`
}

type SqlNodeProto_SqlKeyConstraintProto struct {
	SqlKeyConstraintProto *SqlKeyConstraintProto `protobuf:"bytes,15,opt,name=sqlKeyConstraintProto,proto3,oneof"`
}

type SqlNodeProto_SqlWithProto struct {
	SqlWithProto *SqlWithProto `protobuf:"bytes,16,opt,name=sqlWithProto,proto3,oneof"`
}

type SqlNodeProto_SqlSnapshotProto struct {
	SqlSnapshotProto *SqlSnapshotProto `protobuf:"bytes,17,opt,name=sqlSnapshotProto,proto3,oneof"`
}

type SqlNodeProto_SqlOrderByProto struct {
	SqlOrderByProto *SqlOrderByProto `protobuf:"bytes,18,opt,name=sqlOrderByProto,proto3,oneof"`
}

type SqlNodeProto_SqlWindowProto struct {
	SqlWindowProto *SqlWindowProto `protobuf:"bytes,19,opt,name=sqlWindowProto,proto3,oneof"`
}

type SqlNodeProto_SqlSelectProto struct {
	SqlSelectProto *SqlSelectProto `protobuf:"bytes,20,opt,name=sqlSelectProto,proto3,oneof"`
}

type SqlNodeProto_SqlAttributeDefinitionProto struct {
	SqlAttributeDefinitionProto *SqlAttributeDefinitionProto `protobuf:"bytes,21,opt,name=sqlAttributeDefinitionProto,proto3,oneof"`
}

type SqlNodeProto_SqlExplainProto struct {
	SqlExplainProto *SqlExplainProto `protobuf:"bytes,22,opt,name=sqlExplainProto,proto3,oneof"`
}

type SqlNodeProto_SqlWithItemProto struct {
	SqlWithItemProto *SqlWithItemProto `protobuf:"bytes,23,opt,name=sqlWithItemProto,proto3,oneof"`
}

type SqlNodeProto_SqlUnpivotProto struct {
	SqlUnpivotProto *SqlUnpivotProto `protobuf:"bytes,24,opt,name=sqlUnpivotProto,proto3,oneof"`
}

type SqlNodeProto_SqlMergeProto struct {
	SqlMergeProto *SqlMergeProto `protobuf:"bytes,25,opt,name=sqlMergeProto,proto3,oneof"`
}

type SqlNodeProto_SqlHintProto struct {
	SqlHintProto *SqlHintProto `protobuf:"bytes,26,opt,name=sqlHintProto,proto3,oneof"`
}

type SqlNodeProto_SqlBasicCallProto struct {
	SqlBasicCallProto *SqlBasicCallProto `protobuf:"bytes,27,opt,name=sqlBasicCallProto,proto3,oneof"`
}

type SqlNodeProto_SqlMatchRecognizeProto struct {
	SqlMatchRecognizeProto *SqlMatchRecognizeProto `protobuf:"bytes,28,opt,name=sqlMatchRecognizeProto,proto3,oneof"`
}

type SqlNodeProto_SqlAlterProto struct {
	SqlAlterProto *SqlAlterProto `protobuf:"bytes,29,opt,name=sqlAlterProto,proto3,oneof"`
}

type SqlNodeProto_SqlDdlProto struct {
	SqlDdlProto *SqlDdlProto `protobuf:"bytes,30,opt,name=sqlDdlProto,proto3,oneof"`
}

type SqlNodeProto_SqlDescribeSchemaProto struct {
	SqlDescribeSchemaProto *SqlDescribeSchemaProto `protobuf:"bytes,31,opt,name=sqlDescribeSchemaProto,proto3,oneof"`
}

type SqlNodeProto_SqlJoinProto struct {
	SqlJoinProto *SqlJoinProto `protobuf:"bytes,32,opt,name=sqlJoinProto,proto3,oneof"`
}

type SqlNodeProto_SqlDescribeTableProto struct {
	SqlDescribeTableProto *SqlDescribeTableProto `protobuf:"bytes,33,opt,name=sqlDescribeTableProto,proto3,oneof"`
}

type SqlNodeProto_SqlColumnDeclarationProto struct {
	SqlColumnDeclarationProto *SqlColumnDeclarationProto `protobuf:"bytes,34,opt,name=sqlColumnDeclarationProto,proto3,oneof"`
}

type SqlNodeProto_SqlNumericLiteralProto struct {
	SqlNumericLiteralProto *SqlNumericLiteralProto `protobuf:"bytes,35,opt,name=sqlNumericLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlAbstractStringLiteralProto struct {
	SqlAbstractStringLiteralProto *SqlAbstractStringLiteralProto `protobuf:"bytes,36,opt,name=sqlAbstractStringLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlAbstractDateTimeLiteralProto struct {
	SqlAbstractDateTimeLiteralProto *SqlAbstractDateTimeLiteralProto `protobuf:"bytes,37,opt,name=sqlAbstractDateTimeLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlIntervalLiteralProto struct {
	SqlIntervalLiteralProto *SqlIntervalLiteralProto `protobuf:"bytes,38,opt,name=sqlIntervalLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlSetOptionProto struct {
	SqlSetOptionProto *SqlSetOptionProto `protobuf:"bytes,39,opt,name=sqlSetOptionProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropProto struct {
	SqlDropProto *SqlDropProto `protobuf:"bytes,40,opt,name=sqlDropProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateProto struct {
	SqlCreateProto *SqlCreateProto `protobuf:"bytes,41,opt,name=sqlCreateProto,proto3,oneof"`
}

type SqlNodeProto_SqlBinaryStringLiteralProto struct {
	SqlBinaryStringLiteralProto *SqlBinaryStringLiteralProto `protobuf:"bytes,42,opt,name=sqlBinaryStringLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlCharStringLiteralProto struct {
	SqlCharStringLiteralProto *SqlCharStringLiteralProto `protobuf:"bytes,43,opt,name=sqlCharStringLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlDateLiteralProto struct {
	SqlDateLiteralProto *SqlDateLiteralProto `protobuf:"bytes,44,opt,name=sqlDateLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlTimestampLiteralProto struct {
	SqlTimestampLiteralProto *SqlTimestampLiteralProto `protobuf:"bytes,45,opt,name=sqlTimestampLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlTimeLiteralProto struct {
	SqlTimeLiteralProto *SqlTimeLiteralProto `protobuf:"bytes,46,opt,name=sqlTimeLiteralProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropSchemaProto struct {
	SqlDropSchemaProto *SqlDropSchemaProto `protobuf:"bytes,47,opt,name=sqlDropSchemaProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropObjectProto struct {
	SqlDropObjectProto *SqlDropObjectProto `protobuf:"bytes,48,opt,name=sqlDropObjectProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateTypeProto struct {
	SqlCreateTypeProto *SqlCreateTypeProto `protobuf:"bytes,49,opt,name=sqlCreateTypeProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateTableProto struct {
	SqlCreateTableProto *SqlCreateTableProto `protobuf:"bytes,50,opt,name=sqlCreateTableProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateViewProto struct {
	SqlCreateViewProto *SqlCreateViewProto `protobuf:"bytes,51,opt,name=sqlCreateViewProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateFunctionProto struct {
	SqlCreateFunctionProto *SqlCreateFunctionProto `protobuf:"bytes,52,opt,name=sqlCreateFunctionProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateForeignSchemaProto struct {
	SqlCreateForeignSchemaProto *SqlCreateForeignSchemaProto `protobuf:"bytes,53,opt,name=sqlCreateForeignSchemaProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateSchemaProto struct {
	SqlCreateSchemaProto *SqlCreateSchemaProto `protobuf:"bytes,54,opt,name=sqlCreateSchemaProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateMaterializedViewProto struct {
	SqlCreateMaterializedViewProto *SqlCreateMaterializedViewProto `protobuf:"bytes,55,opt,name=sqlCreateMaterializedViewProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropTableProto struct {
	SqlDropTableProto *SqlDropTableProto `protobuf:"bytes,56,opt,name=sqlDropTableProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropMaterializedViewProto struct {
	SqlDropMaterializedViewProto *SqlDropMaterializedViewProto `protobuf:"bytes,57,opt,name=sqlDropMaterializedViewProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropViewProto struct {
	SqlDropViewProto *SqlDropViewProto `protobuf:"bytes,58,opt,name=sqlDropViewProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropFunctionProto struct {
	SqlDropFunctionProto *SqlDropFunctionProto `protobuf:"bytes,59,opt,name=sqlDropFunctionProto,proto3,oneof"`
}

type SqlNodeProto_SqlDropTypeProto struct {
	SqlDropTypeProto *SqlDropTypeProto `protobuf:"bytes,60,opt,name=sqlDropTypeProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateSourceProto struct {
	SqlCreateSourceProto *SqlCreateSourceProto `protobuf:"bytes,61,opt,name=sqlCreateSourceProto,proto3,oneof"`
}

type SqlNodeProto_SqlCreateMetricsViewProto struct {
	SqlCreateMetricsViewProto *SqlCreateMetricsViewProto `protobuf:"bytes,62,opt,name=sqlCreateMetricsViewProto,proto3,oneof"`
}

func (*SqlNodeProto_SqlCallProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlIntervalQualifierProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDynamicParamProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlIdentifierProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlNodeListProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDataTypeSpecProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlUpdateProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlInsertProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCaseProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDeleteProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCheckConstraintProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlPivotProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlTableRefProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlKeyConstraintProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlWithProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlSnapshotProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlOrderByProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlWindowProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlSelectProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlAttributeDefinitionProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlExplainProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlWithItemProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlUnpivotProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlMergeProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlHintProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlBasicCallProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlMatchRecognizeProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlAlterProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDdlProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDescribeSchemaProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlJoinProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDescribeTableProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlColumnDeclarationProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlNumericLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlAbstractStringLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlAbstractDateTimeLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlIntervalLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlSetOptionProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlBinaryStringLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCharStringLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDateLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlTimestampLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlTimeLiteralProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropSchemaProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropObjectProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateTypeProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateTableProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateViewProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateFunctionProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateForeignSchemaProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateSchemaProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateMaterializedViewProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropTableProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropMaterializedViewProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropViewProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropFunctionProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlDropTypeProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateSourceProto) isSqlNodeProto_SqlNodeProto() {}

func (*SqlNodeProto_SqlCreateMetricsViewProto) isSqlNodeProto_SqlNodeProto() {}

// Java Class: org.apache.calcite.sql.SqlCall
type SqlCallProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlCallProto:
	//
	//	*SqlCallProto_SqlUpdateProto
	//	*SqlCallProto_SqlInsertProto
	//	*SqlCallProto_SqlCaseProto
	//	*SqlCallProto_SqlDeleteProto
	//	*SqlCallProto_SqlCheckConstraintProto
	//	*SqlCallProto_SqlPivotProto
	//	*SqlCallProto_SqlTableRefProto
	//	*SqlCallProto_SqlKeyConstraintProto
	//	*SqlCallProto_SqlWithProto
	//	*SqlCallProto_SqlSnapshotProto
	//	*SqlCallProto_SqlOrderByProto
	//	*SqlCallProto_SqlWindowProto
	//	*SqlCallProto_SqlSelectProto
	//	*SqlCallProto_SqlAttributeDefinitionProto
	//	*SqlCallProto_SqlExplainProto
	//	*SqlCallProto_SqlWithItemProto
	//	*SqlCallProto_SqlUnpivotProto
	//	*SqlCallProto_SqlMergeProto
	//	*SqlCallProto_SqlHintProto
	//	*SqlCallProto_SqlBasicCallProto
	//	*SqlCallProto_SqlMatchRecognizeProto
	//	*SqlCallProto_SqlAlterProto
	//	*SqlCallProto_SqlDdlProto
	//	*SqlCallProto_SqlDescribeSchemaProto
	//	*SqlCallProto_SqlJoinProto
	//	*SqlCallProto_SqlDescribeTableProto
	//	*SqlCallProto_SqlColumnDeclarationProto
	//	*SqlCallProto_SqlSetOptionProto
	//	*SqlCallProto_SqlDropProto
	//	*SqlCallProto_SqlCreateProto
	//	*SqlCallProto_SqlDropSchemaProto
	//	*SqlCallProto_SqlDropObjectProto
	//	*SqlCallProto_SqlCreateTypeProto
	//	*SqlCallProto_SqlCreateTableProto
	//	*SqlCallProto_SqlCreateViewProto
	//	*SqlCallProto_SqlCreateFunctionProto
	//	*SqlCallProto_SqlCreateForeignSchemaProto
	//	*SqlCallProto_SqlCreateSchemaProto
	//	*SqlCallProto_SqlCreateMaterializedViewProto
	//	*SqlCallProto_SqlDropTableProto
	//	*SqlCallProto_SqlDropMaterializedViewProto
	//	*SqlCallProto_SqlDropViewProto
	//	*SqlCallProto_SqlDropFunctionProto
	//	*SqlCallProto_SqlDropTypeProto
	SqlCallProto    isSqlCallProto_SqlCallProto `protobuf_oneof:"sqlCallProto"`
	Pos             *SqlParserPosProto          `protobuf:"bytes,45,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto           `protobuf:"bytes,46,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCallProto) Reset() {
	*x = SqlCallProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCallProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCallProto) ProtoMessage() {}

func (x *SqlCallProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCallProto.ProtoReflect.Descriptor instead.
func (*SqlCallProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{37}
}

func (m *SqlCallProto) GetSqlCallProto() isSqlCallProto_SqlCallProto {
	if m != nil {
		return m.SqlCallProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlUpdateProto() *SqlUpdateProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlUpdateProto); ok {
		return x.SqlUpdateProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlInsertProto() *SqlInsertProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlInsertProto); ok {
		return x.SqlInsertProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCaseProto() *SqlCaseProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCaseProto); ok {
		return x.SqlCaseProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDeleteProto() *SqlDeleteProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDeleteProto); ok {
		return x.SqlDeleteProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCheckConstraintProto() *SqlCheckConstraintProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCheckConstraintProto); ok {
		return x.SqlCheckConstraintProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlPivotProto() *SqlPivotProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlPivotProto); ok {
		return x.SqlPivotProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlTableRefProto() *SqlTableRefProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlTableRefProto); ok {
		return x.SqlTableRefProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlKeyConstraintProto() *SqlKeyConstraintProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlKeyConstraintProto); ok {
		return x.SqlKeyConstraintProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlWithProto() *SqlWithProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlWithProto); ok {
		return x.SqlWithProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlSnapshotProto() *SqlSnapshotProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlSnapshotProto); ok {
		return x.SqlSnapshotProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlOrderByProto() *SqlOrderByProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlOrderByProto); ok {
		return x.SqlOrderByProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlWindowProto() *SqlWindowProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlWindowProto); ok {
		return x.SqlWindowProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlSelectProto() *SqlSelectProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlSelectProto); ok {
		return x.SqlSelectProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlAttributeDefinitionProto() *SqlAttributeDefinitionProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlAttributeDefinitionProto); ok {
		return x.SqlAttributeDefinitionProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlExplainProto() *SqlExplainProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlExplainProto); ok {
		return x.SqlExplainProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlWithItemProto() *SqlWithItemProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlWithItemProto); ok {
		return x.SqlWithItemProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlUnpivotProto() *SqlUnpivotProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlUnpivotProto); ok {
		return x.SqlUnpivotProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlMergeProto() *SqlMergeProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlMergeProto); ok {
		return x.SqlMergeProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlHintProto() *SqlHintProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlHintProto); ok {
		return x.SqlHintProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlBasicCallProto() *SqlBasicCallProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlBasicCallProto); ok {
		return x.SqlBasicCallProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlMatchRecognizeProto() *SqlMatchRecognizeProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlMatchRecognizeProto); ok {
		return x.SqlMatchRecognizeProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlAlterProto() *SqlAlterProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlAlterProto); ok {
		return x.SqlAlterProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDdlProto() *SqlDdlProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDdlProto); ok {
		return x.SqlDdlProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDescribeSchemaProto() *SqlDescribeSchemaProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDescribeSchemaProto); ok {
		return x.SqlDescribeSchemaProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlJoinProto() *SqlJoinProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlJoinProto); ok {
		return x.SqlJoinProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDescribeTableProto() *SqlDescribeTableProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDescribeTableProto); ok {
		return x.SqlDescribeTableProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlColumnDeclarationProto() *SqlColumnDeclarationProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlColumnDeclarationProto); ok {
		return x.SqlColumnDeclarationProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlSetOptionProto() *SqlSetOptionProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlSetOptionProto); ok {
		return x.SqlSetOptionProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropProto() *SqlDropProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropProto); ok {
		return x.SqlDropProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateProto() *SqlCreateProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateProto); ok {
		return x.SqlCreateProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropSchemaProto() *SqlDropSchemaProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropSchemaProto); ok {
		return x.SqlDropSchemaProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropObjectProto() *SqlDropObjectProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropObjectProto); ok {
		return x.SqlDropObjectProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateTypeProto() *SqlCreateTypeProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateTypeProto); ok {
		return x.SqlCreateTypeProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateTableProto() *SqlCreateTableProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateTableProto); ok {
		return x.SqlCreateTableProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateViewProto() *SqlCreateViewProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateViewProto); ok {
		return x.SqlCreateViewProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateFunctionProto() *SqlCreateFunctionProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateFunctionProto); ok {
		return x.SqlCreateFunctionProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateForeignSchemaProto() *SqlCreateForeignSchemaProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateForeignSchemaProto); ok {
		return x.SqlCreateForeignSchemaProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateSchemaProto() *SqlCreateSchemaProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateSchemaProto); ok {
		return x.SqlCreateSchemaProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlCreateMaterializedViewProto() *SqlCreateMaterializedViewProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlCreateMaterializedViewProto); ok {
		return x.SqlCreateMaterializedViewProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropTableProto() *SqlDropTableProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropTableProto); ok {
		return x.SqlDropTableProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropMaterializedViewProto() *SqlDropMaterializedViewProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropMaterializedViewProto); ok {
		return x.SqlDropMaterializedViewProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropViewProto() *SqlDropViewProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropViewProto); ok {
		return x.SqlDropViewProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropFunctionProto() *SqlDropFunctionProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropFunctionProto); ok {
		return x.SqlDropFunctionProto
	}
	return nil
}

func (x *SqlCallProto) GetSqlDropTypeProto() *SqlDropTypeProto {
	if x, ok := x.GetSqlCallProto().(*SqlCallProto_SqlDropTypeProto); ok {
		return x.SqlDropTypeProto
	}
	return nil
}

func (x *SqlCallProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCallProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlCallProto_SqlCallProto interface {
	isSqlCallProto_SqlCallProto()
}

type SqlCallProto_SqlUpdateProto struct {
	SqlUpdateProto *SqlUpdateProto `protobuf:"bytes,1,opt,name=sqlUpdateProto,proto3,oneof"`
}

type SqlCallProto_SqlInsertProto struct {
	SqlInsertProto *SqlInsertProto `protobuf:"bytes,2,opt,name=sqlInsertProto,proto3,oneof"`
}

type SqlCallProto_SqlCaseProto struct {
	SqlCaseProto *SqlCaseProto `protobuf:"bytes,3,opt,name=sqlCaseProto,proto3,oneof"`
}

type SqlCallProto_SqlDeleteProto struct {
	SqlDeleteProto *SqlDeleteProto `protobuf:"bytes,4,opt,name=sqlDeleteProto,proto3,oneof"`
}

type SqlCallProto_SqlCheckConstraintProto struct {
	SqlCheckConstraintProto *SqlCheckConstraintProto `protobuf:"bytes,5,opt,name=sqlCheckConstraintProto,proto3,oneof"`
}

type SqlCallProto_SqlPivotProto struct {
	SqlPivotProto *SqlPivotProto `protobuf:"bytes,6,opt,name=sqlPivotProto,proto3,oneof"`
}

type SqlCallProto_SqlTableRefProto struct {
	SqlTableRefProto *SqlTableRefProto `protobuf:"bytes,7,opt,name=sqlTableRefProto,proto3,oneof"`
}

type SqlCallProto_SqlKeyConstraintProto struct {
	SqlKeyConstraintProto *SqlKeyConstraintProto `protobuf:"bytes,8,opt,name=sqlKeyConstraintProto,proto3,oneof"`
}

type SqlCallProto_SqlWithProto struct {
	SqlWithProto *SqlWithProto `protobuf:"bytes,9,opt,name=sqlWithProto,proto3,oneof"`
}

type SqlCallProto_SqlSnapshotProto struct {
	SqlSnapshotProto *SqlSnapshotProto `protobuf:"bytes,10,opt,name=sqlSnapshotProto,proto3,oneof"`
}

type SqlCallProto_SqlOrderByProto struct {
	SqlOrderByProto *SqlOrderByProto `protobuf:"bytes,11,opt,name=sqlOrderByProto,proto3,oneof"`
}

type SqlCallProto_SqlWindowProto struct {
	SqlWindowProto *SqlWindowProto `protobuf:"bytes,12,opt,name=sqlWindowProto,proto3,oneof"`
}

type SqlCallProto_SqlSelectProto struct {
	SqlSelectProto *SqlSelectProto `protobuf:"bytes,13,opt,name=sqlSelectProto,proto3,oneof"`
}

type SqlCallProto_SqlAttributeDefinitionProto struct {
	SqlAttributeDefinitionProto *SqlAttributeDefinitionProto `protobuf:"bytes,14,opt,name=sqlAttributeDefinitionProto,proto3,oneof"`
}

type SqlCallProto_SqlExplainProto struct {
	SqlExplainProto *SqlExplainProto `protobuf:"bytes,15,opt,name=sqlExplainProto,proto3,oneof"`
}

type SqlCallProto_SqlWithItemProto struct {
	SqlWithItemProto *SqlWithItemProto `protobuf:"bytes,16,opt,name=sqlWithItemProto,proto3,oneof"`
}

type SqlCallProto_SqlUnpivotProto struct {
	SqlUnpivotProto *SqlUnpivotProto `protobuf:"bytes,17,opt,name=sqlUnpivotProto,proto3,oneof"`
}

type SqlCallProto_SqlMergeProto struct {
	SqlMergeProto *SqlMergeProto `protobuf:"bytes,18,opt,name=sqlMergeProto,proto3,oneof"`
}

type SqlCallProto_SqlHintProto struct {
	SqlHintProto *SqlHintProto `protobuf:"bytes,19,opt,name=sqlHintProto,proto3,oneof"`
}

type SqlCallProto_SqlBasicCallProto struct {
	SqlBasicCallProto *SqlBasicCallProto `protobuf:"bytes,20,opt,name=sqlBasicCallProto,proto3,oneof"`
}

type SqlCallProto_SqlMatchRecognizeProto struct {
	SqlMatchRecognizeProto *SqlMatchRecognizeProto `protobuf:"bytes,21,opt,name=sqlMatchRecognizeProto,proto3,oneof"`
}

type SqlCallProto_SqlAlterProto struct {
	SqlAlterProto *SqlAlterProto `protobuf:"bytes,22,opt,name=sqlAlterProto,proto3,oneof"`
}

type SqlCallProto_SqlDdlProto struct {
	SqlDdlProto *SqlDdlProto `protobuf:"bytes,23,opt,name=sqlDdlProto,proto3,oneof"`
}

type SqlCallProto_SqlDescribeSchemaProto struct {
	SqlDescribeSchemaProto *SqlDescribeSchemaProto `protobuf:"bytes,24,opt,name=sqlDescribeSchemaProto,proto3,oneof"`
}

type SqlCallProto_SqlJoinProto struct {
	SqlJoinProto *SqlJoinProto `protobuf:"bytes,25,opt,name=sqlJoinProto,proto3,oneof"`
}

type SqlCallProto_SqlDescribeTableProto struct {
	SqlDescribeTableProto *SqlDescribeTableProto `protobuf:"bytes,26,opt,name=sqlDescribeTableProto,proto3,oneof"`
}

type SqlCallProto_SqlColumnDeclarationProto struct {
	SqlColumnDeclarationProto *SqlColumnDeclarationProto `protobuf:"bytes,27,opt,name=sqlColumnDeclarationProto,proto3,oneof"`
}

type SqlCallProto_SqlSetOptionProto struct {
	SqlSetOptionProto *SqlSetOptionProto `protobuf:"bytes,28,opt,name=sqlSetOptionProto,proto3,oneof"`
}

type SqlCallProto_SqlDropProto struct {
	SqlDropProto *SqlDropProto `protobuf:"bytes,29,opt,name=sqlDropProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateProto struct {
	SqlCreateProto *SqlCreateProto `protobuf:"bytes,30,opt,name=sqlCreateProto,proto3,oneof"`
}

type SqlCallProto_SqlDropSchemaProto struct {
	SqlDropSchemaProto *SqlDropSchemaProto `protobuf:"bytes,31,opt,name=sqlDropSchemaProto,proto3,oneof"`
}

type SqlCallProto_SqlDropObjectProto struct {
	SqlDropObjectProto *SqlDropObjectProto `protobuf:"bytes,32,opt,name=sqlDropObjectProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateTypeProto struct {
	SqlCreateTypeProto *SqlCreateTypeProto `protobuf:"bytes,33,opt,name=sqlCreateTypeProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateTableProto struct {
	SqlCreateTableProto *SqlCreateTableProto `protobuf:"bytes,34,opt,name=sqlCreateTableProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateViewProto struct {
	SqlCreateViewProto *SqlCreateViewProto `protobuf:"bytes,35,opt,name=sqlCreateViewProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateFunctionProto struct {
	SqlCreateFunctionProto *SqlCreateFunctionProto `protobuf:"bytes,36,opt,name=sqlCreateFunctionProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateForeignSchemaProto struct {
	SqlCreateForeignSchemaProto *SqlCreateForeignSchemaProto `protobuf:"bytes,37,opt,name=sqlCreateForeignSchemaProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateSchemaProto struct {
	SqlCreateSchemaProto *SqlCreateSchemaProto `protobuf:"bytes,38,opt,name=sqlCreateSchemaProto,proto3,oneof"`
}

type SqlCallProto_SqlCreateMaterializedViewProto struct {
	SqlCreateMaterializedViewProto *SqlCreateMaterializedViewProto `protobuf:"bytes,39,opt,name=sqlCreateMaterializedViewProto,proto3,oneof"`
}

type SqlCallProto_SqlDropTableProto struct {
	SqlDropTableProto *SqlDropTableProto `protobuf:"bytes,40,opt,name=sqlDropTableProto,proto3,oneof"`
}

type SqlCallProto_SqlDropMaterializedViewProto struct {
	SqlDropMaterializedViewProto *SqlDropMaterializedViewProto `protobuf:"bytes,41,opt,name=sqlDropMaterializedViewProto,proto3,oneof"`
}

type SqlCallProto_SqlDropViewProto struct {
	SqlDropViewProto *SqlDropViewProto `protobuf:"bytes,42,opt,name=sqlDropViewProto,proto3,oneof"`
}

type SqlCallProto_SqlDropFunctionProto struct {
	SqlDropFunctionProto *SqlDropFunctionProto `protobuf:"bytes,43,opt,name=sqlDropFunctionProto,proto3,oneof"`
}

type SqlCallProto_SqlDropTypeProto struct {
	SqlDropTypeProto *SqlDropTypeProto `protobuf:"bytes,44,opt,name=sqlDropTypeProto,proto3,oneof"`
}

func (*SqlCallProto_SqlUpdateProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlInsertProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCaseProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDeleteProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCheckConstraintProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlPivotProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlTableRefProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlKeyConstraintProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlWithProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlSnapshotProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlOrderByProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlWindowProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlSelectProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlAttributeDefinitionProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlExplainProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlWithItemProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlUnpivotProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlMergeProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlHintProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlBasicCallProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlMatchRecognizeProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlAlterProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDdlProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDescribeSchemaProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlJoinProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDescribeTableProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlColumnDeclarationProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlSetOptionProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropSchemaProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropObjectProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateTypeProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateTableProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateViewProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateFunctionProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateForeignSchemaProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateSchemaProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlCreateMaterializedViewProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropTableProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropMaterializedViewProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropViewProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropFunctionProto) isSqlCallProto_SqlCallProto() {}

func (*SqlCallProto_SqlDropTypeProto) isSqlCallProto_SqlCallProto() {}

// Java Class: org.apache.calcite.sql.SqlUpdate
type SqlUpdateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTable          *SqlNodeProto       `protobuf:"bytes,1,opt,name=targetTable,proto3" json:"targetTable,omitempty"`
	TargetColumnList     []*SqlNodeListProto `protobuf:"bytes,2,rep,name=targetColumnList,proto3" json:"targetColumnList,omitempty"`
	SourceExpressionList *SqlNodeListProto   `protobuf:"bytes,3,opt,name=sourceExpressionList,proto3" json:"sourceExpressionList,omitempty"`
	Condition            *SqlNodeProto       `protobuf:"bytes,4,opt,name=condition,proto3" json:"condition,omitempty"`
	SourceSelect         *SqlSelectProto     `protobuf:"bytes,5,opt,name=sourceSelect,proto3" json:"sourceSelect,omitempty"`
	Alias                *SqlIdentifierProto `protobuf:"bytes,6,opt,name=alias,proto3" json:"alias,omitempty"`
	Pos                  *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation      *RelDataTypeProto   `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlUpdateProto) Reset() {
	*x = SqlUpdateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUpdateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUpdateProto) ProtoMessage() {}

func (x *SqlUpdateProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUpdateProto.ProtoReflect.Descriptor instead.
func (*SqlUpdateProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{38}
}

func (x *SqlUpdateProto) GetTargetTable() *SqlNodeProto {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *SqlUpdateProto) GetTargetColumnList() []*SqlNodeListProto {
	if x != nil {
		return x.TargetColumnList
	}
	return nil
}

func (x *SqlUpdateProto) GetSourceExpressionList() *SqlNodeListProto {
	if x != nil {
		return x.SourceExpressionList
	}
	return nil
}

func (x *SqlUpdateProto) GetCondition() *SqlNodeProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SqlUpdateProto) GetSourceSelect() *SqlSelectProto {
	if x != nil {
		return x.SourceSelect
	}
	return nil
}

func (x *SqlUpdateProto) GetAlias() *SqlIdentifierProto {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SqlUpdateProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlUpdateProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlNodeList
type SqlNodeListProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	List            []*SqlNodeProto    `protobuf:"bytes,1,rep,name=list,proto3" json:"list,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,3,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlNodeListProto) Reset() {
	*x = SqlNodeListProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNodeListProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNodeListProto) ProtoMessage() {}

func (x *SqlNodeListProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNodeListProto.ProtoReflect.Descriptor instead.
func (*SqlNodeListProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{39}
}

func (x *SqlNodeListProto) GetList() []*SqlNodeProto {
	if x != nil {
		return x.List
	}
	return nil
}

func (x *SqlNodeListProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlNodeListProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlSelect
type SqlSelectProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeywordList     *SqlNodeListProto  `protobuf:"bytes,1,opt,name=keywordList,proto3" json:"keywordList,omitempty"`
	SelectList      *SqlNodeListProto  `protobuf:"bytes,2,opt,name=selectList,proto3" json:"selectList,omitempty"`
	From            *SqlNodeProto      `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	Where           *SqlNodeProto      `protobuf:"bytes,4,opt,name=where,proto3" json:"where,omitempty"`
	GroupBy         *SqlNodeListProto  `protobuf:"bytes,5,opt,name=groupBy,proto3" json:"groupBy,omitempty"`
	Having          *SqlNodeProto      `protobuf:"bytes,6,opt,name=having,proto3" json:"having,omitempty"`
	WindowDecls     *SqlNodeListProto  `protobuf:"bytes,7,opt,name=windowDecls,proto3" json:"windowDecls,omitempty"`
	OrderBy         *SqlNodeListProto  `protobuf:"bytes,8,opt,name=orderBy,proto3" json:"orderBy,omitempty"`
	Offset          *SqlNodeProto      `protobuf:"bytes,9,opt,name=offset,proto3" json:"offset,omitempty"`
	Fetch           *SqlNodeProto      `protobuf:"bytes,10,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Hints           *SqlNodeListProto  `protobuf:"bytes,11,opt,name=hints,proto3" json:"hints,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,12,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,13,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlSelectProto) Reset() {
	*x = SqlSelectProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSelectProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSelectProto) ProtoMessage() {}

func (x *SqlSelectProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSelectProto.ProtoReflect.Descriptor instead.
func (*SqlSelectProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{40}
}

func (x *SqlSelectProto) GetKeywordList() *SqlNodeListProto {
	if x != nil {
		return x.KeywordList
	}
	return nil
}

func (x *SqlSelectProto) GetSelectList() *SqlNodeListProto {
	if x != nil {
		return x.SelectList
	}
	return nil
}

func (x *SqlSelectProto) GetFrom() *SqlNodeProto {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SqlSelectProto) GetWhere() *SqlNodeProto {
	if x != nil {
		return x.Where
	}
	return nil
}

func (x *SqlSelectProto) GetGroupBy() *SqlNodeListProto {
	if x != nil {
		return x.GroupBy
	}
	return nil
}

func (x *SqlSelectProto) GetHaving() *SqlNodeProto {
	if x != nil {
		return x.Having
	}
	return nil
}

func (x *SqlSelectProto) GetWindowDecls() *SqlNodeListProto {
	if x != nil {
		return x.WindowDecls
	}
	return nil
}

func (x *SqlSelectProto) GetOrderBy() *SqlNodeListProto {
	if x != nil {
		return x.OrderBy
	}
	return nil
}

func (x *SqlSelectProto) GetOffset() *SqlNodeProto {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *SqlSelectProto) GetFetch() *SqlNodeProto {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *SqlSelectProto) GetHints() *SqlNodeListProto {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *SqlSelectProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlSelectProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlInsert
type SqlInsertProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keywords        *SqlNodeListProto  `protobuf:"bytes,1,opt,name=keywords,proto3" json:"keywords,omitempty"`
	TargetTable     *SqlNodeProto      `protobuf:"bytes,2,opt,name=targetTable,proto3" json:"targetTable,omitempty"`
	Source          *SqlNodeProto      `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	ColumnList      *SqlNodeListProto  `protobuf:"bytes,4,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlInsertProto) Reset() {
	*x = SqlInsertProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInsertProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInsertProto) ProtoMessage() {}

func (x *SqlInsertProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInsertProto.ProtoReflect.Descriptor instead.
func (*SqlInsertProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{41}
}

func (x *SqlInsertProto) GetKeywords() *SqlNodeListProto {
	if x != nil {
		return x.Keywords
	}
	return nil
}

func (x *SqlInsertProto) GetTargetTable() *SqlNodeProto {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *SqlInsertProto) GetSource() *SqlNodeProto {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SqlInsertProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlInsertProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlInsertProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.fun.SqlCase
type SqlCaseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value           *SqlNodeProto      `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
	WhenList        *SqlNodeListProto  `protobuf:"bytes,2,opt,name=whenList,proto3" json:"whenList,omitempty"`
	ThenList        *SqlNodeListProto  `protobuf:"bytes,3,opt,name=thenList,proto3" json:"thenList,omitempty"`
	ElseExpr        *SqlNodeProto      `protobuf:"bytes,4,opt,name=elseExpr,proto3" json:"elseExpr,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCaseProto) Reset() {
	*x = SqlCaseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCaseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCaseProto) ProtoMessage() {}

func (x *SqlCaseProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCaseProto.ProtoReflect.Descriptor instead.
func (*SqlCaseProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{42}
}

func (x *SqlCaseProto) GetValue() *SqlNodeProto {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SqlCaseProto) GetWhenList() *SqlNodeListProto {
	if x != nil {
		return x.WhenList
	}
	return nil
}

func (x *SqlCaseProto) GetThenList() *SqlNodeListProto {
	if x != nil {
		return x.ThenList
	}
	return nil
}

func (x *SqlCaseProto) GetElseExpr() *SqlNodeProto {
	if x != nil {
		return x.ElseExpr
	}
	return nil
}

func (x *SqlCaseProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCaseProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDelete
type SqlDeleteProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTable     *SqlNodeProto       `protobuf:"bytes,1,opt,name=targetTable,proto3" json:"targetTable,omitempty"`
	Condition       *SqlNodeProto       `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	SourceSelect    *SqlSelectProto     `protobuf:"bytes,3,opt,name=sourceSelect,proto3" json:"sourceSelect,omitempty"`
	Alias           *SqlIdentifierProto `protobuf:"bytes,4,opt,name=alias,proto3" json:"alias,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDeleteProto) Reset() {
	*x = SqlDeleteProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDeleteProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDeleteProto) ProtoMessage() {}

func (x *SqlDeleteProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDeleteProto.ProtoReflect.Descriptor instead.
func (*SqlDeleteProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{43}
}

func (x *SqlDeleteProto) GetTargetTable() *SqlNodeProto {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *SqlDeleteProto) GetCondition() *SqlNodeProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SqlDeleteProto) GetSourceSelect() *SqlSelectProto {
	if x != nil {
		return x.SourceSelect
	}
	return nil
}

func (x *SqlDeleteProto) GetAlias() *SqlIdentifierProto {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SqlDeleteProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDeleteProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCheckConstraint
type SqlCheckConstraintProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Expression      *SqlNodeProto       `protobuf:"bytes,2,opt,name=expression,proto3" json:"expression,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCheckConstraintProto) Reset() {
	*x = SqlCheckConstraintProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCheckConstraintProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCheckConstraintProto) ProtoMessage() {}

func (x *SqlCheckConstraintProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCheckConstraintProto.ProtoReflect.Descriptor instead.
func (*SqlCheckConstraintProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{44}
}

func (x *SqlCheckConstraintProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCheckConstraintProto) GetExpression() *SqlNodeProto {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *SqlCheckConstraintProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCheckConstraintProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlPivot
type SqlPivotProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           *SqlNodeProto      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	AggList         *SqlNodeListProto  `protobuf:"bytes,2,opt,name=aggList,proto3" json:"aggList,omitempty"`
	AxisList        *SqlNodeListProto  `protobuf:"bytes,3,opt,name=axisList,proto3" json:"axisList,omitempty"`
	InList          *SqlNodeListProto  `protobuf:"bytes,4,opt,name=inList,proto3" json:"inList,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlPivotProto) Reset() {
	*x = SqlPivotProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlPivotProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlPivotProto) ProtoMessage() {}

func (x *SqlPivotProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlPivotProto.ProtoReflect.Descriptor instead.
func (*SqlPivotProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{45}
}

func (x *SqlPivotProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlPivotProto) GetAggList() *SqlNodeListProto {
	if x != nil {
		return x.AggList
	}
	return nil
}

func (x *SqlPivotProto) GetAxisList() *SqlNodeListProto {
	if x != nil {
		return x.AxisList
	}
	return nil
}

func (x *SqlPivotProto) GetInList() *SqlNodeListProto {
	if x != nil {
		return x.InList
	}
	return nil
}

func (x *SqlPivotProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlPivotProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlTableRef
type SqlTableRefProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableName       *SqlIdentifierProto `protobuf:"bytes,1,opt,name=tableName,proto3" json:"tableName,omitempty"`
	Hints           *SqlNodeListProto   `protobuf:"bytes,2,opt,name=hints,proto3" json:"hints,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlTableRefProto) Reset() {
	*x = SqlTableRefProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTableRefProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTableRefProto) ProtoMessage() {}

func (x *SqlTableRefProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTableRefProto.ProtoReflect.Descriptor instead.
func (*SqlTableRefProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{46}
}

func (x *SqlTableRefProto) GetTableName() *SqlIdentifierProto {
	if x != nil {
		return x.TableName
	}
	return nil
}

func (x *SqlTableRefProto) GetHints() *SqlNodeListProto {
	if x != nil {
		return x.Hints
	}
	return nil
}

func (x *SqlTableRefProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlTableRefProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlKeyConstraint
type SqlKeyConstraintProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnList      *SqlNodeListProto   `protobuf:"bytes,2,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlKeyConstraintProto) Reset() {
	*x = SqlKeyConstraintProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlKeyConstraintProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlKeyConstraintProto) ProtoMessage() {}

func (x *SqlKeyConstraintProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlKeyConstraintProto.ProtoReflect.Descriptor instead.
func (*SqlKeyConstraintProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{47}
}

func (x *SqlKeyConstraintProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlKeyConstraintProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlKeyConstraintProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlKeyConstraintProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlWith
type SqlWithProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithList        *SqlNodeListProto  `protobuf:"bytes,1,opt,name=withList,proto3" json:"withList,omitempty"`
	Body            *SqlNodeProto      `protobuf:"bytes,2,opt,name=body,proto3" json:"body,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlWithProto) Reset() {
	*x = SqlWithProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWithProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWithProto) ProtoMessage() {}

func (x *SqlWithProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWithProto.ProtoReflect.Descriptor instead.
func (*SqlWithProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{48}
}

func (x *SqlWithProto) GetWithList() *SqlNodeListProto {
	if x != nil {
		return x.WithList
	}
	return nil
}

func (x *SqlWithProto) GetBody() *SqlNodeProto {
	if x != nil {
		return x.Body
	}
	return nil
}

func (x *SqlWithProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlWithProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlSnapshot
type SqlSnapshotProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableRef        *SqlNodeProto      `protobuf:"bytes,1,opt,name=tableRef,proto3" json:"tableRef,omitempty"`
	Period          *SqlNodeProto      `protobuf:"bytes,2,opt,name=period,proto3" json:"period,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlSnapshotProto) Reset() {
	*x = SqlSnapshotProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSnapshotProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSnapshotProto) ProtoMessage() {}

func (x *SqlSnapshotProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSnapshotProto.ProtoReflect.Descriptor instead.
func (*SqlSnapshotProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{49}
}

func (x *SqlSnapshotProto) GetTableRef() *SqlNodeProto {
	if x != nil {
		return x.TableRef
	}
	return nil
}

func (x *SqlSnapshotProto) GetPeriod() *SqlNodeProto {
	if x != nil {
		return x.Period
	}
	return nil
}

func (x *SqlSnapshotProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlSnapshotProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlOrderBy
type SqlOrderByProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           *SqlNodeProto      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	OrderList       *SqlNodeListProto  `protobuf:"bytes,2,opt,name=orderList,proto3" json:"orderList,omitempty"`
	Offset          *SqlNodeProto      `protobuf:"bytes,3,opt,name=offset,proto3" json:"offset,omitempty"`
	Fetch           *SqlNodeProto      `protobuf:"bytes,4,opt,name=fetch,proto3" json:"fetch,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlOrderByProto) Reset() {
	*x = SqlOrderByProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOrderByProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOrderByProto) ProtoMessage() {}

func (x *SqlOrderByProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOrderByProto.ProtoReflect.Descriptor instead.
func (*SqlOrderByProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{50}
}

func (x *SqlOrderByProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlOrderByProto) GetOrderList() *SqlNodeListProto {
	if x != nil {
		return x.OrderList
	}
	return nil
}

func (x *SqlOrderByProto) GetOffset() *SqlNodeProto {
	if x != nil {
		return x.Offset
	}
	return nil
}

func (x *SqlOrderByProto) GetFetch() *SqlNodeProto {
	if x != nil {
		return x.Fetch
	}
	return nil
}

func (x *SqlOrderByProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlOrderByProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlWindow
type SqlWindowProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DeclName        *SqlIdentifierProto `protobuf:"bytes,1,opt,name=declName,proto3" json:"declName,omitempty"`
	RefName         *SqlIdentifierProto `protobuf:"bytes,2,opt,name=refName,proto3" json:"refName,omitempty"`
	PartitionList   *SqlNodeListProto   `protobuf:"bytes,3,opt,name=partitionList,proto3" json:"partitionList,omitempty"`
	OrderList       *SqlNodeListProto   `protobuf:"bytes,4,opt,name=orderList,proto3" json:"orderList,omitempty"`
	IsRows          *SqlLiteralProto    `protobuf:"bytes,5,opt,name=isRows,proto3" json:"isRows,omitempty"`
	LowerBound      *SqlNodeProto       `protobuf:"bytes,6,opt,name=lowerBound,proto3" json:"lowerBound,omitempty"`
	UpperBound      *SqlNodeProto       `protobuf:"bytes,7,opt,name=upperBound,proto3" json:"upperBound,omitempty"`
	AllowPartial    *SqlLiteralProto    `protobuf:"bytes,8,opt,name=allowPartial,proto3" json:"allowPartial,omitempty"`
	WindowCall      *SqlCallProto       `protobuf:"bytes,9,opt,name=windowCall,proto3" json:"windowCall,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,10,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,11,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlWindowProto) Reset() {
	*x = SqlWindowProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWindowProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWindowProto) ProtoMessage() {}

func (x *SqlWindowProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWindowProto.ProtoReflect.Descriptor instead.
func (*SqlWindowProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{51}
}

func (x *SqlWindowProto) GetDeclName() *SqlIdentifierProto {
	if x != nil {
		return x.DeclName
	}
	return nil
}

func (x *SqlWindowProto) GetRefName() *SqlIdentifierProto {
	if x != nil {
		return x.RefName
	}
	return nil
}

func (x *SqlWindowProto) GetPartitionList() *SqlNodeListProto {
	if x != nil {
		return x.PartitionList
	}
	return nil
}

func (x *SqlWindowProto) GetOrderList() *SqlNodeListProto {
	if x != nil {
		return x.OrderList
	}
	return nil
}

func (x *SqlWindowProto) GetIsRows() *SqlLiteralProto {
	if x != nil {
		return x.IsRows
	}
	return nil
}

func (x *SqlWindowProto) GetLowerBound() *SqlNodeProto {
	if x != nil {
		return x.LowerBound
	}
	return nil
}

func (x *SqlWindowProto) GetUpperBound() *SqlNodeProto {
	if x != nil {
		return x.UpperBound
	}
	return nil
}

func (x *SqlWindowProto) GetAllowPartial() *SqlLiteralProto {
	if x != nil {
		return x.AllowPartial
	}
	return nil
}

func (x *SqlWindowProto) GetWindowCall() *SqlCallProto {
	if x != nil {
		return x.WindowCall
	}
	return nil
}

func (x *SqlWindowProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlWindowProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlLiteral
type SqlLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlLiteralProto:
	//
	//	*SqlLiteralProto_SqlNumericLiteralProto
	//	*SqlLiteralProto_SqlAbstractStringLiteralProto
	//	*SqlLiteralProto_SqlAbstractDateTimeLiteralProto
	//	*SqlLiteralProto_SqlIntervalLiteralProto
	//	*SqlLiteralProto_SqlBinaryStringLiteralProto
	//	*SqlLiteralProto_SqlCharStringLiteralProto
	//	*SqlLiteralProto_SqlDateLiteralProto
	//	*SqlLiteralProto_SqlTimestampLiteralProto
	//	*SqlLiteralProto_SqlTimeLiteralProto
	SqlLiteralProto isSqlLiteralProto_SqlLiteralProto `protobuf_oneof:"sqlLiteralProto"`
	TypeName        SqlTypeNameProto                  `protobuf:"varint,10,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string                            `protobuf:"bytes,11,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto                `protobuf:"bytes,12,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto                 `protobuf:"bytes,13,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlLiteralProto) Reset() {
	*x = SqlLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlLiteralProto) ProtoMessage() {}

func (x *SqlLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{52}
}

func (m *SqlLiteralProto) GetSqlLiteralProto() isSqlLiteralProto_SqlLiteralProto {
	if m != nil {
		return m.SqlLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlNumericLiteralProto() *SqlNumericLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlNumericLiteralProto); ok {
		return x.SqlNumericLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlAbstractStringLiteralProto() *SqlAbstractStringLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlAbstractStringLiteralProto); ok {
		return x.SqlAbstractStringLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlAbstractDateTimeLiteralProto() *SqlAbstractDateTimeLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlAbstractDateTimeLiteralProto); ok {
		return x.SqlAbstractDateTimeLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlIntervalLiteralProto() *SqlIntervalLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlIntervalLiteralProto); ok {
		return x.SqlIntervalLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlBinaryStringLiteralProto() *SqlBinaryStringLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlBinaryStringLiteralProto); ok {
		return x.SqlBinaryStringLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlCharStringLiteralProto() *SqlCharStringLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlCharStringLiteralProto); ok {
		return x.SqlCharStringLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlDateLiteralProto() *SqlDateLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlDateLiteralProto); ok {
		return x.SqlDateLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlTimestampLiteralProto() *SqlTimestampLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlTimestampLiteralProto); ok {
		return x.SqlTimestampLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetSqlTimeLiteralProto() *SqlTimeLiteralProto {
	if x, ok := x.GetSqlLiteralProto().(*SqlLiteralProto_SqlTimeLiteralProto); ok {
		return x.SqlTimeLiteralProto
	}
	return nil
}

func (x *SqlLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlLiteralProto_SqlLiteralProto interface {
	isSqlLiteralProto_SqlLiteralProto()
}

type SqlLiteralProto_SqlNumericLiteralProto struct {
	SqlNumericLiteralProto *SqlNumericLiteralProto `protobuf:"bytes,1,opt,name=sqlNumericLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlAbstractStringLiteralProto struct {
	SqlAbstractStringLiteralProto *SqlAbstractStringLiteralProto `protobuf:"bytes,2,opt,name=sqlAbstractStringLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlAbstractDateTimeLiteralProto struct {
	SqlAbstractDateTimeLiteralProto *SqlAbstractDateTimeLiteralProto `protobuf:"bytes,3,opt,name=sqlAbstractDateTimeLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlIntervalLiteralProto struct {
	SqlIntervalLiteralProto *SqlIntervalLiteralProto `protobuf:"bytes,4,opt,name=sqlIntervalLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlBinaryStringLiteralProto struct {
	SqlBinaryStringLiteralProto *SqlBinaryStringLiteralProto `protobuf:"bytes,5,opt,name=sqlBinaryStringLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlCharStringLiteralProto struct {
	SqlCharStringLiteralProto *SqlCharStringLiteralProto `protobuf:"bytes,6,opt,name=sqlCharStringLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlDateLiteralProto struct {
	SqlDateLiteralProto *SqlDateLiteralProto `protobuf:"bytes,7,opt,name=sqlDateLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlTimestampLiteralProto struct {
	SqlTimestampLiteralProto *SqlTimestampLiteralProto `protobuf:"bytes,8,opt,name=sqlTimestampLiteralProto,proto3,oneof"`
}

type SqlLiteralProto_SqlTimeLiteralProto struct {
	SqlTimeLiteralProto *SqlTimeLiteralProto `protobuf:"bytes,9,opt,name=sqlTimeLiteralProto,proto3,oneof"`
}

func (*SqlLiteralProto_SqlNumericLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlAbstractStringLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlAbstractDateTimeLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlIntervalLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlBinaryStringLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlCharStringLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlDateLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlTimestampLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

func (*SqlLiteralProto_SqlTimeLiteralProto) isSqlLiteralProto_SqlLiteralProto() {}

// Java Class: org.apache.calcite.sql.SqlNumericLiteral
type SqlNumericLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Prec            int32              `protobuf:"zigzag32,1,opt,name=prec,proto3" json:"prec,omitempty"`
	Scale           int32              `protobuf:"zigzag32,2,opt,name=scale,proto3" json:"scale,omitempty"`
	IsExact         bool               `protobuf:"varint,3,opt,name=isExact,proto3" json:"isExact,omitempty"`
	TypeName        SqlTypeNameProto   `protobuf:"varint,4,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,5,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,7,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlNumericLiteralProto) Reset() {
	*x = SqlNumericLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNumericLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNumericLiteralProto) ProtoMessage() {}

func (x *SqlNumericLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNumericLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlNumericLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{53}
}

func (x *SqlNumericLiteralProto) GetPrec() int32 {
	if x != nil {
		return x.Prec
	}
	return 0
}

func (x *SqlNumericLiteralProto) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *SqlNumericLiteralProto) GetIsExact() bool {
	if x != nil {
		return x.IsExact
	}
	return false
}

func (x *SqlNumericLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlNumericLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlNumericLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlNumericLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlAbstractStringLiteral
type SqlAbstractStringLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAbstractStringLiteralProto:
	//
	//	*SqlAbstractStringLiteralProto_SqlBinaryStringLiteralProto
	//	*SqlAbstractStringLiteralProto_SqlCharStringLiteralProto
	SqlAbstractStringLiteralProto isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto `protobuf_oneof:"sqlAbstractStringLiteralProto"`
	TypeName                      SqlTypeNameProto                                              `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value                         string                                                        `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Pos                           *SqlParserPosProto                                            `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation               *RelDataTypeProto                                             `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlAbstractStringLiteralProto) Reset() {
	*x = SqlAbstractStringLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAbstractStringLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAbstractStringLiteralProto) ProtoMessage() {}

func (x *SqlAbstractStringLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAbstractStringLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlAbstractStringLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{54}
}

func (m *SqlAbstractStringLiteralProto) GetSqlAbstractStringLiteralProto() isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto {
	if m != nil {
		return m.SqlAbstractStringLiteralProto
	}
	return nil
}

func (x *SqlAbstractStringLiteralProto) GetSqlBinaryStringLiteralProto() *SqlBinaryStringLiteralProto {
	if x, ok := x.GetSqlAbstractStringLiteralProto().(*SqlAbstractStringLiteralProto_SqlBinaryStringLiteralProto); ok {
		return x.SqlBinaryStringLiteralProto
	}
	return nil
}

func (x *SqlAbstractStringLiteralProto) GetSqlCharStringLiteralProto() *SqlCharStringLiteralProto {
	if x, ok := x.GetSqlAbstractStringLiteralProto().(*SqlAbstractStringLiteralProto_SqlCharStringLiteralProto); ok {
		return x.SqlCharStringLiteralProto
	}
	return nil
}

func (x *SqlAbstractStringLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlAbstractStringLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlAbstractStringLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlAbstractStringLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto interface {
	isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto()
}

type SqlAbstractStringLiteralProto_SqlBinaryStringLiteralProto struct {
	SqlBinaryStringLiteralProto *SqlBinaryStringLiteralProto `protobuf:"bytes,1,opt,name=sqlBinaryStringLiteralProto,proto3,oneof"`
}

type SqlAbstractStringLiteralProto_SqlCharStringLiteralProto struct {
	SqlCharStringLiteralProto *SqlCharStringLiteralProto `protobuf:"bytes,2,opt,name=sqlCharStringLiteralProto,proto3,oneof"`
}

func (*SqlAbstractStringLiteralProto_SqlBinaryStringLiteralProto) isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto() {
}

func (*SqlAbstractStringLiteralProto_SqlCharStringLiteralProto) isSqlAbstractStringLiteralProto_SqlAbstractStringLiteralProto() {
}

// Java Class: org.apache.calcite.sql.SqlBinaryStringLiteral
type SqlBinaryStringLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName        SqlTypeNameProto   `protobuf:"varint,1,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlBinaryStringLiteralProto) Reset() {
	*x = SqlBinaryStringLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBinaryStringLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBinaryStringLiteralProto) ProtoMessage() {}

func (x *SqlBinaryStringLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBinaryStringLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlBinaryStringLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{55}
}

func (x *SqlBinaryStringLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlBinaryStringLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlBinaryStringLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlBinaryStringLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlCharStringLiteral
type SqlCharStringLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName        SqlTypeNameProto   `protobuf:"varint,1,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCharStringLiteralProto) Reset() {
	*x = SqlCharStringLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCharStringLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCharStringLiteralProto) ProtoMessage() {}

func (x *SqlCharStringLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCharStringLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlCharStringLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{56}
}

func (x *SqlCharStringLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlCharStringLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlCharStringLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCharStringLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlAbstractDateTimeLiteral
type SqlAbstractDateTimeLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAbstractDateTimeLiteralProto:
	//
	//	*SqlAbstractDateTimeLiteralProto_SqlDateLiteralProto
	//	*SqlAbstractDateTimeLiteralProto_SqlTimestampLiteralProto
	//	*SqlAbstractDateTimeLiteralProto_SqlTimeLiteralProto
	SqlAbstractDateTimeLiteralProto isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto `protobuf_oneof:"sqlAbstractDateTimeLiteralProto"`
	HasTimeZone                     bool                                                              `protobuf:"varint,4,opt,name=hasTimeZone,proto3" json:"hasTimeZone,omitempty"`
	Precision                       int32                                                             `protobuf:"zigzag32,5,opt,name=precision,proto3" json:"precision,omitempty"`
	TypeName                        SqlTypeNameProto                                                  `protobuf:"varint,6,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value                           string                                                            `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`
	Pos                             *SqlParserPosProto                                                `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation                 *RelDataTypeProto                                                 `protobuf:"bytes,9,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlAbstractDateTimeLiteralProto) Reset() {
	*x = SqlAbstractDateTimeLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAbstractDateTimeLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAbstractDateTimeLiteralProto) ProtoMessage() {}

func (x *SqlAbstractDateTimeLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAbstractDateTimeLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlAbstractDateTimeLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{57}
}

func (m *SqlAbstractDateTimeLiteralProto) GetSqlAbstractDateTimeLiteralProto() isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto {
	if m != nil {
		return m.SqlAbstractDateTimeLiteralProto
	}
	return nil
}

func (x *SqlAbstractDateTimeLiteralProto) GetSqlDateLiteralProto() *SqlDateLiteralProto {
	if x, ok := x.GetSqlAbstractDateTimeLiteralProto().(*SqlAbstractDateTimeLiteralProto_SqlDateLiteralProto); ok {
		return x.SqlDateLiteralProto
	}
	return nil
}

func (x *SqlAbstractDateTimeLiteralProto) GetSqlTimestampLiteralProto() *SqlTimestampLiteralProto {
	if x, ok := x.GetSqlAbstractDateTimeLiteralProto().(*SqlAbstractDateTimeLiteralProto_SqlTimestampLiteralProto); ok {
		return x.SqlTimestampLiteralProto
	}
	return nil
}

func (x *SqlAbstractDateTimeLiteralProto) GetSqlTimeLiteralProto() *SqlTimeLiteralProto {
	if x, ok := x.GetSqlAbstractDateTimeLiteralProto().(*SqlAbstractDateTimeLiteralProto_SqlTimeLiteralProto); ok {
		return x.SqlTimeLiteralProto
	}
	return nil
}

func (x *SqlAbstractDateTimeLiteralProto) GetHasTimeZone() bool {
	if x != nil {
		return x.HasTimeZone
	}
	return false
}

func (x *SqlAbstractDateTimeLiteralProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlAbstractDateTimeLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlAbstractDateTimeLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlAbstractDateTimeLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlAbstractDateTimeLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto interface {
	isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto()
}

type SqlAbstractDateTimeLiteralProto_SqlDateLiteralProto struct {
	SqlDateLiteralProto *SqlDateLiteralProto `protobuf:"bytes,1,opt,name=sqlDateLiteralProto,proto3,oneof"`
}

type SqlAbstractDateTimeLiteralProto_SqlTimestampLiteralProto struct {
	SqlTimestampLiteralProto *SqlTimestampLiteralProto `protobuf:"bytes,2,opt,name=sqlTimestampLiteralProto,proto3,oneof"`
}

type SqlAbstractDateTimeLiteralProto_SqlTimeLiteralProto struct {
	SqlTimeLiteralProto *SqlTimeLiteralProto `protobuf:"bytes,3,opt,name=sqlTimeLiteralProto,proto3,oneof"`
}

func (*SqlAbstractDateTimeLiteralProto_SqlDateLiteralProto) isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto() {
}

func (*SqlAbstractDateTimeLiteralProto_SqlTimestampLiteralProto) isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto() {
}

func (*SqlAbstractDateTimeLiteralProto_SqlTimeLiteralProto) isSqlAbstractDateTimeLiteralProto_SqlAbstractDateTimeLiteralProto() {
}

// Java Class: org.apache.calcite.sql.SqlDateLiteral
type SqlDateLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTimeZone     bool               `protobuf:"varint,1,opt,name=hasTimeZone,proto3" json:"hasTimeZone,omitempty"`
	Precision       int32              `protobuf:"zigzag32,2,opt,name=precision,proto3" json:"precision,omitempty"`
	TypeName        SqlTypeNameProto   `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDateLiteralProto) Reset() {
	*x = SqlDateLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDateLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDateLiteralProto) ProtoMessage() {}

func (x *SqlDateLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDateLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlDateLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{58}
}

func (x *SqlDateLiteralProto) GetHasTimeZone() bool {
	if x != nil {
		return x.HasTimeZone
	}
	return false
}

func (x *SqlDateLiteralProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlDateLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlDateLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlDateLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDateLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlTimestampLiteral
type SqlTimestampLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTimeZone     bool               `protobuf:"varint,1,opt,name=hasTimeZone,proto3" json:"hasTimeZone,omitempty"`
	Precision       int32              `protobuf:"zigzag32,2,opt,name=precision,proto3" json:"precision,omitempty"`
	TypeName        SqlTypeNameProto   `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlTimestampLiteralProto) Reset() {
	*x = SqlTimestampLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimestampLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimestampLiteralProto) ProtoMessage() {}

func (x *SqlTimestampLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimestampLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlTimestampLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{59}
}

func (x *SqlTimestampLiteralProto) GetHasTimeZone() bool {
	if x != nil {
		return x.HasTimeZone
	}
	return false
}

func (x *SqlTimestampLiteralProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlTimestampLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlTimestampLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlTimestampLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlTimestampLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlTimeLiteral
type SqlTimeLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HasTimeZone     bool               `protobuf:"varint,1,opt,name=hasTimeZone,proto3" json:"hasTimeZone,omitempty"`
	Precision       int32              `protobuf:"zigzag32,2,opt,name=precision,proto3" json:"precision,omitempty"`
	TypeName        SqlTypeNameProto   `protobuf:"varint,3,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,4,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlTimeLiteralProto) Reset() {
	*x = SqlTimeLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimeLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimeLiteralProto) ProtoMessage() {}

func (x *SqlTimeLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimeLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlTimeLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{60}
}

func (x *SqlTimeLiteralProto) GetHasTimeZone() bool {
	if x != nil {
		return x.HasTimeZone
	}
	return false
}

func (x *SqlTimeLiteralProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlTimeLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlTimeLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlTimeLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlTimeLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlIntervalLiteral
type SqlIntervalLiteralProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName        SqlTypeNameProto   `protobuf:"varint,1,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Value           string             `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlIntervalLiteralProto) Reset() {
	*x = SqlIntervalLiteralProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlIntervalLiteralProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlIntervalLiteralProto) ProtoMessage() {}

func (x *SqlIntervalLiteralProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlIntervalLiteralProto.ProtoReflect.Descriptor instead.
func (*SqlIntervalLiteralProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{61}
}

func (x *SqlIntervalLiteralProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlIntervalLiteralProto) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *SqlIntervalLiteralProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlIntervalLiteralProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlAttributeDefinition
type SqlAttributeDefinitionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType        *SqlDataTypeSpecProto `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Expression      *SqlNodeProto         `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	Collation       *SqlCollationProto    `protobuf:"bytes,4,opt,name=collation,proto3" json:"collation,omitempty"`
	Pos             *SqlParserPosProto    `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto     `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlAttributeDefinitionProto) Reset() {
	*x = SqlAttributeDefinitionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAttributeDefinitionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAttributeDefinitionProto) ProtoMessage() {}

func (x *SqlAttributeDefinitionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAttributeDefinitionProto.ProtoReflect.Descriptor instead.
func (*SqlAttributeDefinitionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{62}
}

func (x *SqlAttributeDefinitionProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlAttributeDefinitionProto) GetDataType() *SqlDataTypeSpecProto {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *SqlAttributeDefinitionProto) GetExpression() *SqlNodeProto {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *SqlAttributeDefinitionProto) GetCollation() *SqlCollationProto {
	if x != nil {
		return x.Collation
	}
	return nil
}

func (x *SqlAttributeDefinitionProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlAttributeDefinitionProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDataTypeSpec
type SqlDataTypeSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeNameSpec    *SqlTypeNameSpecProto `protobuf:"bytes,1,opt,name=typeNameSpec,proto3" json:"typeNameSpec,omitempty"`
	TimeZone        *TimeZoneProto        `protobuf:"bytes,2,opt,name=timeZone,proto3" json:"timeZone,omitempty"`
	Nullable        bool                  `protobuf:"varint,3,opt,name=nullable,proto3" json:"nullable,omitempty"`
	Pos             *SqlParserPosProto    `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto     `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDataTypeSpecProto) Reset() {
	*x = SqlDataTypeSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDataTypeSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDataTypeSpecProto) ProtoMessage() {}

func (x *SqlDataTypeSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDataTypeSpecProto.ProtoReflect.Descriptor instead.
func (*SqlDataTypeSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{63}
}

func (x *SqlDataTypeSpecProto) GetTypeNameSpec() *SqlTypeNameSpecProto {
	if x != nil {
		return x.TypeNameSpec
	}
	return nil
}

func (x *SqlDataTypeSpecProto) GetTimeZone() *TimeZoneProto {
	if x != nil {
		return x.TimeZone
	}
	return nil
}

func (x *SqlDataTypeSpecProto) GetNullable() bool {
	if x != nil {
		return x.Nullable
	}
	return false
}

func (x *SqlDataTypeSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDataTypeSpecProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlTypeNameSpec
type SqlTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlTypeNameSpecProto:
	//
	//	*SqlTypeNameSpecProto_SqlUserDefinedTypeNameSpecProto
	//	*SqlTypeNameSpecProto_SqlRowTypeNameSpecProto
	//	*SqlTypeNameSpecProto_SqlBasicTypeNameSpecProto
	//	*SqlTypeNameSpecProto_SqlCollectionTypeNameSpecProto
	//	*SqlTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto
	SqlTypeNameSpecProto isSqlTypeNameSpecProto_SqlTypeNameSpecProto `protobuf_oneof:"sqlTypeNameSpecProto"`
	TypeName             *SqlIdentifierProto                         `protobuf:"bytes,6,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos                  *SqlParserPosProto                          `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlTypeNameSpecProto) Reset() {
	*x = SqlTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTypeNameSpecProto) ProtoMessage() {}

func (x *SqlTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{64}
}

func (m *SqlTypeNameSpecProto) GetSqlTypeNameSpecProto() isSqlTypeNameSpecProto_SqlTypeNameSpecProto {
	if m != nil {
		return m.SqlTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetSqlUserDefinedTypeNameSpecProto() *SqlUserDefinedTypeNameSpecProto {
	if x, ok := x.GetSqlTypeNameSpecProto().(*SqlTypeNameSpecProto_SqlUserDefinedTypeNameSpecProto); ok {
		return x.SqlUserDefinedTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetSqlRowTypeNameSpecProto() *SqlRowTypeNameSpecProto {
	if x, ok := x.GetSqlTypeNameSpecProto().(*SqlTypeNameSpecProto_SqlRowTypeNameSpecProto); ok {
		return x.SqlRowTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetSqlBasicTypeNameSpecProto() *SqlBasicTypeNameSpecProto {
	if x, ok := x.GetSqlTypeNameSpecProto().(*SqlTypeNameSpecProto_SqlBasicTypeNameSpecProto); ok {
		return x.SqlBasicTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetSqlCollectionTypeNameSpecProto() *SqlCollectionTypeNameSpecProto {
	if x, ok := x.GetSqlTypeNameSpecProto().(*SqlTypeNameSpecProto_SqlCollectionTypeNameSpecProto); ok {
		return x.SqlCollectionTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetSqlAlienSystemTypeNameSpecProto() *SqlAlienSystemTypeNameSpecProto {
	if x, ok := x.GetSqlTypeNameSpecProto().(*SqlTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto); ok {
		return x.SqlAlienSystemTypeNameSpecProto
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

type isSqlTypeNameSpecProto_SqlTypeNameSpecProto interface {
	isSqlTypeNameSpecProto_SqlTypeNameSpecProto()
}

type SqlTypeNameSpecProto_SqlUserDefinedTypeNameSpecProto struct {
	SqlUserDefinedTypeNameSpecProto *SqlUserDefinedTypeNameSpecProto `protobuf:"bytes,1,opt,name=sqlUserDefinedTypeNameSpecProto,proto3,oneof"`
}

type SqlTypeNameSpecProto_SqlRowTypeNameSpecProto struct {
	SqlRowTypeNameSpecProto *SqlRowTypeNameSpecProto `protobuf:"bytes,2,opt,name=sqlRowTypeNameSpecProto,proto3,oneof"`
}

type SqlTypeNameSpecProto_SqlBasicTypeNameSpecProto struct {
	SqlBasicTypeNameSpecProto *SqlBasicTypeNameSpecProto `protobuf:"bytes,3,opt,name=sqlBasicTypeNameSpecProto,proto3,oneof"`
}

type SqlTypeNameSpecProto_SqlCollectionTypeNameSpecProto struct {
	SqlCollectionTypeNameSpecProto *SqlCollectionTypeNameSpecProto `protobuf:"bytes,4,opt,name=sqlCollectionTypeNameSpecProto,proto3,oneof"`
}

type SqlTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto struct {
	SqlAlienSystemTypeNameSpecProto *SqlAlienSystemTypeNameSpecProto `protobuf:"bytes,5,opt,name=sqlAlienSystemTypeNameSpecProto,proto3,oneof"`
}

func (*SqlTypeNameSpecProto_SqlUserDefinedTypeNameSpecProto) isSqlTypeNameSpecProto_SqlTypeNameSpecProto() {
}

func (*SqlTypeNameSpecProto_SqlRowTypeNameSpecProto) isSqlTypeNameSpecProto_SqlTypeNameSpecProto() {}

func (*SqlTypeNameSpecProto_SqlBasicTypeNameSpecProto) isSqlTypeNameSpecProto_SqlTypeNameSpecProto() {
}

func (*SqlTypeNameSpecProto_SqlCollectionTypeNameSpecProto) isSqlTypeNameSpecProto_SqlTypeNameSpecProto() {
}

func (*SqlTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto) isSqlTypeNameSpecProto_SqlTypeNameSpecProto() {
}

// Java Class: org.apache.calcite.sql.SqlUserDefinedTypeNameSpec
type SqlUserDefinedTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName *SqlIdentifierProto `protobuf:"bytes,1,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos      *SqlParserPosProto  `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlUserDefinedTypeNameSpecProto) Reset() {
	*x = SqlUserDefinedTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUserDefinedTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUserDefinedTypeNameSpecProto) ProtoMessage() {}

func (x *SqlUserDefinedTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUserDefinedTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlUserDefinedTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{65}
}

func (x *SqlUserDefinedTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlUserDefinedTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlRowTypeNameSpec
type SqlRowTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldNames []*SqlIdentifierProto   `protobuf:"bytes,1,rep,name=fieldNames,proto3" json:"fieldNames,omitempty"`
	FieldTypes []*SqlDataTypeSpecProto `protobuf:"bytes,2,rep,name=fieldTypes,proto3" json:"fieldTypes,omitempty"`
	TypeName   *SqlIdentifierProto     `protobuf:"bytes,3,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos        *SqlParserPosProto      `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlRowTypeNameSpecProto) Reset() {
	*x = SqlRowTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRowTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRowTypeNameSpecProto) ProtoMessage() {}

func (x *SqlRowTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRowTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlRowTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{66}
}

func (x *SqlRowTypeNameSpecProto) GetFieldNames() []*SqlIdentifierProto {
	if x != nil {
		return x.FieldNames
	}
	return nil
}

func (x *SqlRowTypeNameSpecProto) GetFieldTypes() []*SqlDataTypeSpecProto {
	if x != nil {
		return x.FieldTypes
	}
	return nil
}

func (x *SqlRowTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlRowTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlBasicTypeNameSpec
type SqlBasicTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlBasicTypeNameSpecProto:
	//
	//	*SqlBasicTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto
	SqlBasicTypeNameSpecProto isSqlBasicTypeNameSpecProto_SqlBasicTypeNameSpecProto `protobuf_oneof:"sqlBasicTypeNameSpecProto"`
	SqlTypeName               SqlTypeNameProto                                      `protobuf:"varint,2,opt,name=sqlTypeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"sqlTypeName,omitempty"`
	Precision                 int32                                                 `protobuf:"zigzag32,3,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale                     int32                                                 `protobuf:"zigzag32,4,opt,name=scale,proto3" json:"scale,omitempty"`
	CharSetName               string                                                `protobuf:"bytes,5,opt,name=charSetName,proto3" json:"charSetName,omitempty"`
	TypeName                  *SqlIdentifierProto                                   `protobuf:"bytes,6,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos                       *SqlParserPosProto                                    `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlBasicTypeNameSpecProto) Reset() {
	*x = SqlBasicTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBasicTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBasicTypeNameSpecProto) ProtoMessage() {}

func (x *SqlBasicTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBasicTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlBasicTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{67}
}

func (m *SqlBasicTypeNameSpecProto) GetSqlBasicTypeNameSpecProto() isSqlBasicTypeNameSpecProto_SqlBasicTypeNameSpecProto {
	if m != nil {
		return m.SqlBasicTypeNameSpecProto
	}
	return nil
}

func (x *SqlBasicTypeNameSpecProto) GetSqlAlienSystemTypeNameSpecProto() *SqlAlienSystemTypeNameSpecProto {
	if x, ok := x.GetSqlBasicTypeNameSpecProto().(*SqlBasicTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto); ok {
		return x.SqlAlienSystemTypeNameSpecProto
	}
	return nil
}

func (x *SqlBasicTypeNameSpecProto) GetSqlTypeName() SqlTypeNameProto {
	if x != nil {
		return x.SqlTypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlBasicTypeNameSpecProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlBasicTypeNameSpecProto) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *SqlBasicTypeNameSpecProto) GetCharSetName() string {
	if x != nil {
		return x.CharSetName
	}
	return ""
}

func (x *SqlBasicTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlBasicTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

type isSqlBasicTypeNameSpecProto_SqlBasicTypeNameSpecProto interface {
	isSqlBasicTypeNameSpecProto_SqlBasicTypeNameSpecProto()
}

type SqlBasicTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto struct {
	SqlAlienSystemTypeNameSpecProto *SqlAlienSystemTypeNameSpecProto `protobuf:"bytes,1,opt,name=sqlAlienSystemTypeNameSpecProto,proto3,oneof"`
}

func (*SqlBasicTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto) isSqlBasicTypeNameSpecProto_SqlBasicTypeNameSpecProto() {
}

// Java Class: org.apache.calcite.sql.SqlAlienSystemTypeNameSpec
type SqlAlienSystemTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeAlias   string              `protobuf:"bytes,1,opt,name=typeAlias,proto3" json:"typeAlias,omitempty"`
	SqlTypeName SqlTypeNameProto    `protobuf:"varint,2,opt,name=sqlTypeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"sqlTypeName,omitempty"`
	Precision   int32               `protobuf:"zigzag32,3,opt,name=precision,proto3" json:"precision,omitempty"`
	Scale       int32               `protobuf:"zigzag32,4,opt,name=scale,proto3" json:"scale,omitempty"`
	CharSetName string              `protobuf:"bytes,5,opt,name=charSetName,proto3" json:"charSetName,omitempty"`
	TypeName    *SqlIdentifierProto `protobuf:"bytes,6,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos         *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlAlienSystemTypeNameSpecProto) Reset() {
	*x = SqlAlienSystemTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAlienSystemTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAlienSystemTypeNameSpecProto) ProtoMessage() {}

func (x *SqlAlienSystemTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAlienSystemTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlAlienSystemTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{68}
}

func (x *SqlAlienSystemTypeNameSpecProto) GetTypeAlias() string {
	if x != nil {
		return x.TypeAlias
	}
	return ""
}

func (x *SqlAlienSystemTypeNameSpecProto) GetSqlTypeName() SqlTypeNameProto {
	if x != nil {
		return x.SqlTypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlAlienSystemTypeNameSpecProto) GetPrecision() int32 {
	if x != nil {
		return x.Precision
	}
	return 0
}

func (x *SqlAlienSystemTypeNameSpecProto) GetScale() int32 {
	if x != nil {
		return x.Scale
	}
	return 0
}

func (x *SqlAlienSystemTypeNameSpecProto) GetCharSetName() string {
	if x != nil {
		return x.CharSetName
	}
	return ""
}

func (x *SqlAlienSystemTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlAlienSystemTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlCollectionTypeNameSpec
type SqlCollectionTypeNameSpecProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElementTypeName    *SqlTypeNameSpecProto `protobuf:"bytes,1,opt,name=elementTypeName,proto3" json:"elementTypeName,omitempty"`
	CollectionTypeName SqlTypeNameProto      `protobuf:"varint,2,opt,name=collectionTypeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"collectionTypeName,omitempty"`
	TypeName           *SqlIdentifierProto   `protobuf:"bytes,3,opt,name=typeName,proto3" json:"typeName,omitempty"`
	Pos                *SqlParserPosProto    `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
}

func (x *SqlCollectionTypeNameSpecProto) Reset() {
	*x = SqlCollectionTypeNameSpecProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCollectionTypeNameSpecProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCollectionTypeNameSpecProto) ProtoMessage() {}

func (x *SqlCollectionTypeNameSpecProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCollectionTypeNameSpecProto.ProtoReflect.Descriptor instead.
func (*SqlCollectionTypeNameSpecProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{69}
}

func (x *SqlCollectionTypeNameSpecProto) GetElementTypeName() *SqlTypeNameSpecProto {
	if x != nil {
		return x.ElementTypeName
	}
	return nil
}

func (x *SqlCollectionTypeNameSpecProto) GetCollectionTypeName() SqlTypeNameProto {
	if x != nil {
		return x.CollectionTypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlCollectionTypeNameSpecProto) GetTypeName() *SqlIdentifierProto {
	if x != nil {
		return x.TypeName
	}
	return nil
}

func (x *SqlCollectionTypeNameSpecProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

// Java Class: java.util.TimeZone
type TimeZoneProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TimeZoneProto) Reset() {
	*x = TimeZoneProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TimeZoneProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TimeZoneProto) ProtoMessage() {}

func (x *TimeZoneProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TimeZoneProto.ProtoReflect.Descriptor instead.
func (*TimeZoneProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{70}
}

// Java Class: org.apache.calcite.sql.SqlExplain
type SqlExplainProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Explicandum           *SqlNodeProto      `protobuf:"bytes,1,opt,name=explicandum,proto3" json:"explicandum,omitempty"`
	DetailLevel           *SqlLiteralProto   `protobuf:"bytes,2,opt,name=detailLevel,proto3" json:"detailLevel,omitempty"`
	Depth                 *SqlLiteralProto   `protobuf:"bytes,3,opt,name=depth,proto3" json:"depth,omitempty"`
	Format                *SqlLiteralProto   `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	DynamicParameterCount int32              `protobuf:"zigzag32,5,opt,name=dynamicParameterCount,proto3" json:"dynamicParameterCount,omitempty"`
	Pos                   *SqlParserPosProto `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation       *RelDataTypeProto  `protobuf:"bytes,7,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlExplainProto) Reset() {
	*x = SqlExplainProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlExplainProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlExplainProto) ProtoMessage() {}

func (x *SqlExplainProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlExplainProto.ProtoReflect.Descriptor instead.
func (*SqlExplainProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{71}
}

func (x *SqlExplainProto) GetExplicandum() *SqlNodeProto {
	if x != nil {
		return x.Explicandum
	}
	return nil
}

func (x *SqlExplainProto) GetDetailLevel() *SqlLiteralProto {
	if x != nil {
		return x.DetailLevel
	}
	return nil
}

func (x *SqlExplainProto) GetDepth() *SqlLiteralProto {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *SqlExplainProto) GetFormat() *SqlLiteralProto {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *SqlExplainProto) GetDynamicParameterCount() int32 {
	if x != nil {
		return x.DynamicParameterCount
	}
	return 0
}

func (x *SqlExplainProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlExplainProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlWithItem
type SqlWithItemProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnList      *SqlNodeListProto   `protobuf:"bytes,2,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Query           *SqlNodeProto       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlWithItemProto) Reset() {
	*x = SqlWithItemProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWithItemProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWithItemProto) ProtoMessage() {}

func (x *SqlWithItemProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWithItemProto.ProtoReflect.Descriptor instead.
func (*SqlWithItemProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{72}
}

func (x *SqlWithItemProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlWithItemProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlWithItemProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlWithItemProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlWithItemProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlUnpivot
type SqlUnpivotProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Query           *SqlNodeProto      `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	IncludeNulls    bool               `protobuf:"varint,2,opt,name=includeNulls,proto3" json:"includeNulls,omitempty"`
	MeasureList     *SqlNodeListProto  `protobuf:"bytes,3,opt,name=measureList,proto3" json:"measureList,omitempty"`
	AxisList        *SqlNodeListProto  `protobuf:"bytes,4,opt,name=axisList,proto3" json:"axisList,omitempty"`
	InList          *SqlNodeListProto  `protobuf:"bytes,5,opt,name=inList,proto3" json:"inList,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,7,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlUnpivotProto) Reset() {
	*x = SqlUnpivotProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUnpivotProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUnpivotProto) ProtoMessage() {}

func (x *SqlUnpivotProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUnpivotProto.ProtoReflect.Descriptor instead.
func (*SqlUnpivotProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{73}
}

func (x *SqlUnpivotProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlUnpivotProto) GetIncludeNulls() bool {
	if x != nil {
		return x.IncludeNulls
	}
	return false
}

func (x *SqlUnpivotProto) GetMeasureList() *SqlNodeListProto {
	if x != nil {
		return x.MeasureList
	}
	return nil
}

func (x *SqlUnpivotProto) GetAxisList() *SqlNodeListProto {
	if x != nil {
		return x.AxisList
	}
	return nil
}

func (x *SqlUnpivotProto) GetInList() *SqlNodeListProto {
	if x != nil {
		return x.InList
	}
	return nil
}

func (x *SqlUnpivotProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlUnpivotProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlMerge
type SqlMergeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetTable     *SqlNodeProto       `protobuf:"bytes,1,opt,name=targetTable,proto3" json:"targetTable,omitempty"`
	Condition       *SqlNodeProto       `protobuf:"bytes,2,opt,name=condition,proto3" json:"condition,omitempty"`
	Source          *SqlNodeProto       `protobuf:"bytes,3,opt,name=source,proto3" json:"source,omitempty"`
	UpdateCall      *SqlUpdateProto     `protobuf:"bytes,4,opt,name=updateCall,proto3" json:"updateCall,omitempty"`
	InsertCall      *SqlInsertProto     `protobuf:"bytes,5,opt,name=insertCall,proto3" json:"insertCall,omitempty"`
	SourceSelect    *SqlSelectProto     `protobuf:"bytes,6,opt,name=sourceSelect,proto3" json:"sourceSelect,omitempty"`
	Alias           *SqlIdentifierProto `protobuf:"bytes,7,opt,name=alias,proto3" json:"alias,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,9,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlMergeProto) Reset() {
	*x = SqlMergeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMergeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMergeProto) ProtoMessage() {}

func (x *SqlMergeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMergeProto.ProtoReflect.Descriptor instead.
func (*SqlMergeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{74}
}

func (x *SqlMergeProto) GetTargetTable() *SqlNodeProto {
	if x != nil {
		return x.TargetTable
	}
	return nil
}

func (x *SqlMergeProto) GetCondition() *SqlNodeProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SqlMergeProto) GetSource() *SqlNodeProto {
	if x != nil {
		return x.Source
	}
	return nil
}

func (x *SqlMergeProto) GetUpdateCall() *SqlUpdateProto {
	if x != nil {
		return x.UpdateCall
	}
	return nil
}

func (x *SqlMergeProto) GetInsertCall() *SqlInsertProto {
	if x != nil {
		return x.InsertCall
	}
	return nil
}

func (x *SqlMergeProto) GetSourceSelect() *SqlSelectProto {
	if x != nil {
		return x.SourceSelect
	}
	return nil
}

func (x *SqlMergeProto) GetAlias() *SqlIdentifierProto {
	if x != nil {
		return x.Alias
	}
	return nil
}

func (x *SqlMergeProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlMergeProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlHint
type SqlHintProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Options         *SqlNodeListProto     `protobuf:"bytes,2,opt,name=options,proto3" json:"options,omitempty"`
	OptionFormat    HintOptionFormatProto `protobuf:"varint,3,opt,name=optionFormat,proto3,enum=rill.sql.v1.HintOptionFormatProto" json:"optionFormat,omitempty"`
	Pos             *SqlParserPosProto    `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto     `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlHintProto) Reset() {
	*x = SqlHintProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlHintProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlHintProto) ProtoMessage() {}

func (x *SqlHintProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlHintProto.ProtoReflect.Descriptor instead.
func (*SqlHintProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{75}
}

func (x *SqlHintProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlHintProto) GetOptions() *SqlNodeListProto {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *SqlHintProto) GetOptionFormat() HintOptionFormatProto {
	if x != nil {
		return x.OptionFormat
	}
	return HintOptionFormatProto_HintOptionFormatProto_EMPTY_
}

func (x *SqlHintProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlHintProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlBasicCall
type SqlBasicCallProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operator           *SqlOperatorProto  `protobuf:"bytes,1,opt,name=operator,proto3" json:"operator,omitempty"`
	OperandList        []*SqlNodeProto    `protobuf:"bytes,2,rep,name=operandList,proto3" json:"operandList,omitempty"`
	FunctionQuantifier *SqlLiteralProto   `protobuf:"bytes,3,opt,name=functionQuantifier,proto3" json:"functionQuantifier,omitempty"`
	Pos                *SqlParserPosProto `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation    *RelDataTypeProto  `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlBasicCallProto) Reset() {
	*x = SqlBasicCallProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[76]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBasicCallProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBasicCallProto) ProtoMessage() {}

func (x *SqlBasicCallProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[76]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBasicCallProto.ProtoReflect.Descriptor instead.
func (*SqlBasicCallProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{76}
}

func (x *SqlBasicCallProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlBasicCallProto) GetOperandList() []*SqlNodeProto {
	if x != nil {
		return x.OperandList
	}
	return nil
}

func (x *SqlBasicCallProto) GetFunctionQuantifier() *SqlLiteralProto {
	if x != nil {
		return x.FunctionQuantifier
	}
	return nil
}

func (x *SqlBasicCallProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlBasicCallProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlOperator
type SqlOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlOperatorProto:
	//
	//	*SqlOperatorProto_SqlPrefixOperatorProto
	//	*SqlOperatorProto_SqlDescriptorOperatorProto
	//	*SqlOperatorProto_SqlPostfixOperatorProto
	//	*SqlOperatorProto_SqlFunctionProto
	//	*SqlOperatorProto_SqlCaseOperatorProto
	//	*SqlOperatorProto_SqlBinaryOperatorProto
	//	*SqlOperatorProto_SqlSelectOperatorProto
	//	*SqlOperatorProto_SqlSpecialOperatorProto
	//	*SqlOperatorProto_SqlNewOperatorProto
	//	*SqlOperatorProto_SqlProcedureCallOperatorProto
	//	*SqlOperatorProto_SqlJsonValueExpressionOperatorProto
	//	*SqlOperatorProto_SqlUnresolvedFunctionProto
	//	*SqlOperatorProto_SqlJdbcFunctionCallProto
	//	*SqlOperatorProto_SqlUserDefinedTableMacroProto
	//	*SqlOperatorProto_SqlUserDefinedFunctionProto
	//	*SqlOperatorProto_SqlExtractFunctionProto
	//	*SqlOperatorProto_SqlTranslate3FunctionProto
	//	*SqlOperatorProto_SqlTrimFunctionProto
	//	*SqlOperatorProto_SqlSubstringFunctionProto
	//	*SqlOperatorProto_SqlJsonDepthFunctionProto
	//	*SqlOperatorProto_SqlAbstractTimeFunctionProto
	//	*SqlOperatorProto_SqlRandFunctionProto
	//	*SqlOperatorProto_SqlCoalesceFunctionProto
	//	*SqlOperatorProto_SqlJsonTypeFunctionProto
	//	*SqlOperatorProto_SqlJsonValueFunctionProto
	//	*SqlOperatorProto_SqlDatePartFunctionProto
	//	*SqlOperatorProto_SqlJsonObjectFunctionProto
	//	*SqlOperatorProto_SqlNullifFunctionProto
	//	*SqlOperatorProto_SqlTimestampAddFunctionProto
	//	*SqlOperatorProto_SqlJsonPrettyFunctionProto
	//	*SqlOperatorProto_SqlBaseContextVariableProto
	//	*SqlOperatorProto_SqlConvertFunctionProto
	//	*SqlOperatorProto_SqlGroupedWindowFunctionProto
	//	*SqlOperatorProto_SqlTypeConstructorFunctionProto
	//	*SqlOperatorProto_SqlTimestampDiffFunctionProto
	//	*SqlOperatorProto_SqlJsonKeysFunctionProto
	//	*SqlOperatorProto_SqlJsonLengthFunctionProto
	//	*SqlOperatorProto_SqlCastFunctionProto
	//	*SqlOperatorProto_SqlPositionFunctionProto
	//	*SqlOperatorProto_SqlJsonRemoveFunctionProto
	//	*SqlOperatorProto_SqlMatchFunctionProto
	//	*SqlOperatorProto_SqlOverlayFunctionProto
	//	*SqlOperatorProto_SqlJsonArrayFunctionProto
	//	*SqlOperatorProto_SqlRandIntegerFunctionProto
	//	*SqlOperatorProto_SqlCurrentDateFunctionProto
	//	*SqlOperatorProto_SqlAggFunctionProto
	//	*SqlOperatorProto_SqlWindowTableFunctionProto
	//	*SqlOperatorProto_SqlRegexpReplaceFunctionProto
	//	*SqlOperatorProto_SqlMonotonicUnaryFunctionProto
	//	*SqlOperatorProto_SqlJsonStorageSizeFunctionProto
	//	*SqlOperatorProto_SqlJsonQueryFunctionProto
	//	*SqlOperatorProto_SqlJsonExistsFunctionProto
	//	*SqlOperatorProto_SqlSetOperatorProto
	//	*SqlOperatorProto_SqlOverlapsOperatorProto
	//	*SqlOperatorProto_SqlCastOperatorProto
	//	*SqlOperatorProto_SqlMonotonicBinaryOperatorProto
	//	*SqlOperatorProto_SqlMultisetMemberOfOperatorProto
	//	*SqlOperatorProto_SqlMultisetSetOperatorProto
	//	*SqlOperatorProto_SqlWithinGroupOperatorProto
	//	*SqlOperatorProto_SqlFilterOperatorProto
	//	*SqlOperatorProto_SqlOverOperatorProto
	//	*SqlOperatorProto_SqlInOperatorProto
	//	*SqlOperatorProto_SqlPosixRegexOperatorProto
	//	*SqlOperatorProto_SqlWithinDistinctOperatorProto
	//	*SqlOperatorProto_SqlLateralOperatorProto
	//	*SqlOperatorProto_SqlMultisetValueConstructorProto
	//	*SqlOperatorProto_SqlDefaultOperatorProto
	//	*SqlOperatorProto_SqlLiteralChainOperatorProto
	//	*SqlOperatorProto_SqlDatetimePlusOperatorProto
	//	*SqlOperatorProto_SqlSequenceValueOperatorProto
	//	*SqlOperatorProto_SqlFunctionalOperatorProto
	//	*SqlOperatorProto_SqlLikeOperatorProto
	//	*SqlOperatorProto_SqlInternalOperatorProto
	//	*SqlOperatorProto_SqlDotOperatorProto
	//	*SqlOperatorProto_SqlThrowOperatorProto
	//	*SqlOperatorProto_SqlItemOperatorProto
	//	*SqlOperatorProto_SqlInfixOperatorProto
	//	*SqlOperatorProto_SqlAsOperatorProto
	//	*SqlOperatorProto_SqlValuesOperatorProto
	//	*SqlOperatorProto_SqlColumnListConstructorProto
	//	*SqlOperatorProto_SqlMultisetQueryConstructorProto
	//	*SqlOperatorProto_SqlCursorConstructorProto
	//	*SqlOperatorProto_SqlRowOperatorProto
	//	*SqlOperatorProto_SqlDatetimeSubtractionOperatorProto
	//	*SqlOperatorProto_SqlNullTreatmentOperatorProto
	//	*SqlOperatorProto_SqlUserDefinedTableFunctionProto
	//	*SqlOperatorProto_SqlStringContextVariableProto
	//	*SqlOperatorProto_SqlUserDefinedAggFunctionProto
	//	*SqlOperatorProto_SqlCovarAggFunctionProto
	//	*SqlOperatorProto_SqlJsonArrayAggAggFunctionProto
	//	*SqlOperatorProto_SqlSumAggFunctionProto
	//	*SqlOperatorProto_SqlMinMaxAggFunctionProto
	//	*SqlOperatorProto_SqlCountAggFunctionProto
	//	*SqlOperatorProto_SqlAnyValueAggFunctionProto
	//	*SqlOperatorProto_SqlAvgAggFunctionProto
	//	*SqlOperatorProto_SqlNthValueAggFunctionProto
	//	*SqlOperatorProto_SqlBasicAggFunctionProto
	//	*SqlOperatorProto_SqlSingleValueAggFunctionProto
	//	*SqlOperatorProto_SqlSumEmptyIsZeroAggFunctionProto
	//	*SqlOperatorProto_SqlListaggAggFunctionProto
	//	*SqlOperatorProto_SqlNtileAggFunctionProto
	//	*SqlOperatorProto_SqlJsonObjectAggAggFunctionProto
	//	*SqlOperatorProto_SqlFirstLastValueAggFunctionProto
	//	*SqlOperatorProto_SqlAbstractGroupFunctionProto
	//	*SqlOperatorProto_SqlHistogramAggFunctionProto
	//	*SqlOperatorProto_SqlRankFunctionProto
	//	*SqlOperatorProto_SqlLeadLagAggFunctionProto
	//	*SqlOperatorProto_SqlBitOpAggFunctionProto
	//	*SqlOperatorProto_SqlTumbleTableFunctionProto
	//	*SqlOperatorProto_SqlSessionTableFunctionProto
	//	*SqlOperatorProto_SqlHopTableFunctionProto
	//	*SqlOperatorProto_SqlFloorFunctionProto
	//	*SqlOperatorProto_SqlQuantifyOperatorProto
	//	*SqlOperatorProto_SqlArrayValueConstructorProto
	//	*SqlOperatorProto_SqlMapValueConstructorProto
	//	*SqlOperatorProto_SqlCollectionTableOperatorProto
	//	*SqlOperatorProto_SqlUnnestOperatorProto
	//	*SqlOperatorProto_SqlExtendOperatorProto
	//	*SqlOperatorProto_SqlRollupOperatorProto
	//	*SqlOperatorProto_SqlIntervalOperatorProto
	//	*SqlOperatorProto_SqlSearchOperatorProto
	//	*SqlOperatorProto_SqlBetweenOperatorProto
	//	*SqlOperatorProto_SqlArgumentAssignmentOperatorProto
	//	*SqlOperatorProto_SqlArrayQueryConstructorProto
	//	*SqlOperatorProto_SqlMapQueryConstructorProto
	//	*SqlOperatorProto_SqlRegrCountAggFunctionProto
	//	*SqlOperatorProto_SqlGroupIdFunctionProto
	//	*SqlOperatorProto_SqlGroupingIdFunctionProto
	//	*SqlOperatorProto_SqlGroupingFunctionProto
	SqlOperatorProto     isSqlOperatorProto_SqlOperatorProto `protobuf_oneof:"sqlOperatorProto"`
	Name                 string                              `protobuf:"bytes,130,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                        `protobuf:"varint,131,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                               `protobuf:"zigzag32,132,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                               `protobuf:"zigzag32,133,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto        `protobuf:"bytes,134,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto       `protobuf:"bytes,135,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto         `protobuf:"bytes,136,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                              `protobuf:"bytes,137,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlOperatorProto) Reset() {
	*x = SqlOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[77]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperatorProto) ProtoMessage() {}

func (x *SqlOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[77]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{77}
}

func (m *SqlOperatorProto) GetSqlOperatorProto() isSqlOperatorProto_SqlOperatorProto {
	if m != nil {
		return m.SqlOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlPrefixOperatorProto() *SqlPrefixOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlPrefixOperatorProto); ok {
		return x.SqlPrefixOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDescriptorOperatorProto() *SqlDescriptorOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDescriptorOperatorProto); ok {
		return x.SqlDescriptorOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlPostfixOperatorProto() *SqlPostfixOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlPostfixOperatorProto); ok {
		return x.SqlPostfixOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlFunctionProto() *SqlFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlFunctionProto); ok {
		return x.SqlFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCaseOperatorProto() *SqlCaseOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCaseOperatorProto); ok {
		return x.SqlCaseOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlBinaryOperatorProto() *SqlBinaryOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlBinaryOperatorProto); ok {
		return x.SqlBinaryOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSelectOperatorProto() *SqlSelectOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSelectOperatorProto); ok {
		return x.SqlSelectOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSpecialOperatorProto() *SqlSpecialOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSpecialOperatorProto); ok {
		return x.SqlSpecialOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlNewOperatorProto() *SqlNewOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlNewOperatorProto); ok {
		return x.SqlNewOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlProcedureCallOperatorProto() *SqlProcedureCallOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlProcedureCallOperatorProto); ok {
		return x.SqlProcedureCallOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonValueExpressionOperatorProto() *SqlJsonValueExpressionOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonValueExpressionOperatorProto); ok {
		return x.SqlJsonValueExpressionOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUnresolvedFunctionProto() *SqlUnresolvedFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUnresolvedFunctionProto); ok {
		return x.SqlUnresolvedFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJdbcFunctionCallProto() *SqlJdbcFunctionCallProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJdbcFunctionCallProto); ok {
		return x.SqlJdbcFunctionCallProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUserDefinedTableMacroProto() *SqlUserDefinedTableMacroProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUserDefinedTableMacroProto); ok {
		return x.SqlUserDefinedTableMacroProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUserDefinedFunctionProto() *SqlUserDefinedFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUserDefinedFunctionProto); ok {
		return x.SqlUserDefinedFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlExtractFunctionProto() *SqlExtractFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlExtractFunctionProto); ok {
		return x.SqlExtractFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTranslate3FunctionProto() *SqlTranslate3FunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTranslate3FunctionProto); ok {
		return x.SqlTranslate3FunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTrimFunctionProto() *SqlTrimFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTrimFunctionProto); ok {
		return x.SqlTrimFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSubstringFunctionProto() *SqlSubstringFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSubstringFunctionProto); ok {
		return x.SqlSubstringFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonDepthFunctionProto() *SqlJsonDepthFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonDepthFunctionProto); ok {
		return x.SqlJsonDepthFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAbstractTimeFunctionProto() *SqlAbstractTimeFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAbstractTimeFunctionProto); ok {
		return x.SqlAbstractTimeFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRandFunctionProto() *SqlRandFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRandFunctionProto); ok {
		return x.SqlRandFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCoalesceFunctionProto() *SqlCoalesceFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCoalesceFunctionProto); ok {
		return x.SqlCoalesceFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonTypeFunctionProto() *SqlJsonTypeFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonTypeFunctionProto); ok {
		return x.SqlJsonTypeFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonValueFunctionProto() *SqlJsonValueFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonValueFunctionProto); ok {
		return x.SqlJsonValueFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDatePartFunctionProto() *SqlDatePartFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDatePartFunctionProto); ok {
		return x.SqlDatePartFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonObjectFunctionProto() *SqlJsonObjectFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonObjectFunctionProto); ok {
		return x.SqlJsonObjectFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlNullifFunctionProto() *SqlNullifFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlNullifFunctionProto); ok {
		return x.SqlNullifFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTimestampAddFunctionProto() *SqlTimestampAddFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTimestampAddFunctionProto); ok {
		return x.SqlTimestampAddFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonPrettyFunctionProto() *SqlJsonPrettyFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonPrettyFunctionProto); ok {
		return x.SqlJsonPrettyFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlBaseContextVariableProto() *SqlBaseContextVariableProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlBaseContextVariableProto); ok {
		return x.SqlBaseContextVariableProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlConvertFunctionProto() *SqlConvertFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlConvertFunctionProto); ok {
		return x.SqlConvertFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlGroupedWindowFunctionProto() *SqlGroupedWindowFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlGroupedWindowFunctionProto); ok {
		return x.SqlGroupedWindowFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTypeConstructorFunctionProto() *SqlTypeConstructorFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTypeConstructorFunctionProto); ok {
		return x.SqlTypeConstructorFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTimestampDiffFunctionProto() *SqlTimestampDiffFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTimestampDiffFunctionProto); ok {
		return x.SqlTimestampDiffFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonKeysFunctionProto() *SqlJsonKeysFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonKeysFunctionProto); ok {
		return x.SqlJsonKeysFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonLengthFunctionProto() *SqlJsonLengthFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonLengthFunctionProto); ok {
		return x.SqlJsonLengthFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCastFunctionProto() *SqlCastFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCastFunctionProto); ok {
		return x.SqlCastFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlPositionFunctionProto() *SqlPositionFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlPositionFunctionProto); ok {
		return x.SqlPositionFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonRemoveFunctionProto() *SqlJsonRemoveFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonRemoveFunctionProto); ok {
		return x.SqlJsonRemoveFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMatchFunctionProto() *SqlMatchFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMatchFunctionProto); ok {
		return x.SqlMatchFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlOverlayFunctionProto() *SqlOverlayFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlOverlayFunctionProto); ok {
		return x.SqlOverlayFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonArrayFunctionProto() *SqlJsonArrayFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonArrayFunctionProto); ok {
		return x.SqlJsonArrayFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRandIntegerFunctionProto() *SqlRandIntegerFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRandIntegerFunctionProto); ok {
		return x.SqlRandIntegerFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCurrentDateFunctionProto() *SqlCurrentDateFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCurrentDateFunctionProto); ok {
		return x.SqlCurrentDateFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAggFunctionProto() *SqlAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAggFunctionProto); ok {
		return x.SqlAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlWindowTableFunctionProto() *SqlWindowTableFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlWindowTableFunctionProto); ok {
		return x.SqlWindowTableFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRegexpReplaceFunctionProto() *SqlRegexpReplaceFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRegexpReplaceFunctionProto); ok {
		return x.SqlRegexpReplaceFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMonotonicUnaryFunctionProto() *SqlMonotonicUnaryFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMonotonicUnaryFunctionProto); ok {
		return x.SqlMonotonicUnaryFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonStorageSizeFunctionProto() *SqlJsonStorageSizeFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonStorageSizeFunctionProto); ok {
		return x.SqlJsonStorageSizeFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonQueryFunctionProto() *SqlJsonQueryFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonQueryFunctionProto); ok {
		return x.SqlJsonQueryFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonExistsFunctionProto() *SqlJsonExistsFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonExistsFunctionProto); ok {
		return x.SqlJsonExistsFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSetOperatorProto() *SqlSetOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSetOperatorProto); ok {
		return x.SqlSetOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlOverlapsOperatorProto() *SqlOverlapsOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlOverlapsOperatorProto); ok {
		return x.SqlOverlapsOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCastOperatorProto() *SqlCastOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCastOperatorProto); ok {
		return x.SqlCastOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMonotonicBinaryOperatorProto() *SqlMonotonicBinaryOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMonotonicBinaryOperatorProto); ok {
		return x.SqlMonotonicBinaryOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMultisetMemberOfOperatorProto() *SqlMultisetMemberOfOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMultisetMemberOfOperatorProto); ok {
		return x.SqlMultisetMemberOfOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMultisetSetOperatorProto() *SqlMultisetSetOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMultisetSetOperatorProto); ok {
		return x.SqlMultisetSetOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlWithinGroupOperatorProto() *SqlWithinGroupOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlWithinGroupOperatorProto); ok {
		return x.SqlWithinGroupOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlFilterOperatorProto() *SqlFilterOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlFilterOperatorProto); ok {
		return x.SqlFilterOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlOverOperatorProto() *SqlOverOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlOverOperatorProto); ok {
		return x.SqlOverOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlInOperatorProto() *SqlInOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlInOperatorProto); ok {
		return x.SqlInOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlPosixRegexOperatorProto() *SqlPosixRegexOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlPosixRegexOperatorProto); ok {
		return x.SqlPosixRegexOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlWithinDistinctOperatorProto() *SqlWithinDistinctOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlWithinDistinctOperatorProto); ok {
		return x.SqlWithinDistinctOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlLateralOperatorProto() *SqlLateralOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlLateralOperatorProto); ok {
		return x.SqlLateralOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMultisetValueConstructorProto() *SqlMultisetValueConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMultisetValueConstructorProto); ok {
		return x.SqlMultisetValueConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDefaultOperatorProto() *SqlDefaultOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDefaultOperatorProto); ok {
		return x.SqlDefaultOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlLiteralChainOperatorProto() *SqlLiteralChainOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlLiteralChainOperatorProto); ok {
		return x.SqlLiteralChainOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDatetimePlusOperatorProto() *SqlDatetimePlusOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDatetimePlusOperatorProto); ok {
		return x.SqlDatetimePlusOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSequenceValueOperatorProto() *SqlSequenceValueOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSequenceValueOperatorProto); ok {
		return x.SqlSequenceValueOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlFunctionalOperatorProto() *SqlFunctionalOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlFunctionalOperatorProto); ok {
		return x.SqlFunctionalOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlLikeOperatorProto() *SqlLikeOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlLikeOperatorProto); ok {
		return x.SqlLikeOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlInternalOperatorProto() *SqlInternalOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlInternalOperatorProto); ok {
		return x.SqlInternalOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDotOperatorProto() *SqlDotOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDotOperatorProto); ok {
		return x.SqlDotOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlThrowOperatorProto() *SqlThrowOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlThrowOperatorProto); ok {
		return x.SqlThrowOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlItemOperatorProto() *SqlItemOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlItemOperatorProto); ok {
		return x.SqlItemOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlInfixOperatorProto() *SqlInfixOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlInfixOperatorProto); ok {
		return x.SqlInfixOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAsOperatorProto() *SqlAsOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAsOperatorProto); ok {
		return x.SqlAsOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlValuesOperatorProto() *SqlValuesOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlValuesOperatorProto); ok {
		return x.SqlValuesOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlColumnListConstructorProto() *SqlColumnListConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlColumnListConstructorProto); ok {
		return x.SqlColumnListConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMultisetQueryConstructorProto() *SqlMultisetQueryConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMultisetQueryConstructorProto); ok {
		return x.SqlMultisetQueryConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCursorConstructorProto() *SqlCursorConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCursorConstructorProto); ok {
		return x.SqlCursorConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRowOperatorProto() *SqlRowOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRowOperatorProto); ok {
		return x.SqlRowOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlDatetimeSubtractionOperatorProto() *SqlDatetimeSubtractionOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlDatetimeSubtractionOperatorProto); ok {
		return x.SqlDatetimeSubtractionOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlNullTreatmentOperatorProto() *SqlNullTreatmentOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlNullTreatmentOperatorProto); ok {
		return x.SqlNullTreatmentOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUserDefinedTableFunctionProto() *SqlUserDefinedTableFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUserDefinedTableFunctionProto); ok {
		return x.SqlUserDefinedTableFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlStringContextVariableProto() *SqlStringContextVariableProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlStringContextVariableProto); ok {
		return x.SqlStringContextVariableProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUserDefinedAggFunctionProto() *SqlUserDefinedAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUserDefinedAggFunctionProto); ok {
		return x.SqlUserDefinedAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCovarAggFunctionProto() *SqlCovarAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCovarAggFunctionProto); ok {
		return x.SqlCovarAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonArrayAggAggFunctionProto() *SqlJsonArrayAggAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonArrayAggAggFunctionProto); ok {
		return x.SqlJsonArrayAggAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSumAggFunctionProto() *SqlSumAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSumAggFunctionProto); ok {
		return x.SqlSumAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMinMaxAggFunctionProto() *SqlMinMaxAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMinMaxAggFunctionProto); ok {
		return x.SqlMinMaxAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCountAggFunctionProto() *SqlCountAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCountAggFunctionProto); ok {
		return x.SqlCountAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAnyValueAggFunctionProto() *SqlAnyValueAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAnyValueAggFunctionProto); ok {
		return x.SqlAnyValueAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAvgAggFunctionProto() *SqlAvgAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAvgAggFunctionProto); ok {
		return x.SqlAvgAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlNthValueAggFunctionProto() *SqlNthValueAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlNthValueAggFunctionProto); ok {
		return x.SqlNthValueAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlBasicAggFunctionProto() *SqlBasicAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlBasicAggFunctionProto); ok {
		return x.SqlBasicAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSingleValueAggFunctionProto() *SqlSingleValueAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSingleValueAggFunctionProto); ok {
		return x.SqlSingleValueAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSumEmptyIsZeroAggFunctionProto() *SqlSumEmptyIsZeroAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSumEmptyIsZeroAggFunctionProto); ok {
		return x.SqlSumEmptyIsZeroAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlListaggAggFunctionProto() *SqlListaggAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlListaggAggFunctionProto); ok {
		return x.SqlListaggAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlNtileAggFunctionProto() *SqlNtileAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlNtileAggFunctionProto); ok {
		return x.SqlNtileAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlJsonObjectAggAggFunctionProto() *SqlJsonObjectAggAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlJsonObjectAggAggFunctionProto); ok {
		return x.SqlJsonObjectAggAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlFirstLastValueAggFunctionProto() *SqlFirstLastValueAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlFirstLastValueAggFunctionProto); ok {
		return x.SqlFirstLastValueAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlAbstractGroupFunctionProto() *SqlAbstractGroupFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlAbstractGroupFunctionProto); ok {
		return x.SqlAbstractGroupFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlHistogramAggFunctionProto() *SqlHistogramAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlHistogramAggFunctionProto); ok {
		return x.SqlHistogramAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRankFunctionProto() *SqlRankFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRankFunctionProto); ok {
		return x.SqlRankFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlLeadLagAggFunctionProto() *SqlLeadLagAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlLeadLagAggFunctionProto); ok {
		return x.SqlLeadLagAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlBitOpAggFunctionProto() *SqlBitOpAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlBitOpAggFunctionProto); ok {
		return x.SqlBitOpAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlTumbleTableFunctionProto() *SqlTumbleTableFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlTumbleTableFunctionProto); ok {
		return x.SqlTumbleTableFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSessionTableFunctionProto() *SqlSessionTableFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSessionTableFunctionProto); ok {
		return x.SqlSessionTableFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlHopTableFunctionProto() *SqlHopTableFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlHopTableFunctionProto); ok {
		return x.SqlHopTableFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlFloorFunctionProto() *SqlFloorFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlFloorFunctionProto); ok {
		return x.SqlFloorFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlQuantifyOperatorProto() *SqlQuantifyOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlQuantifyOperatorProto); ok {
		return x.SqlQuantifyOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlArrayValueConstructorProto() *SqlArrayValueConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlArrayValueConstructorProto); ok {
		return x.SqlArrayValueConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMapValueConstructorProto() *SqlMapValueConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMapValueConstructorProto); ok {
		return x.SqlMapValueConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlCollectionTableOperatorProto() *SqlCollectionTableOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlCollectionTableOperatorProto); ok {
		return x.SqlCollectionTableOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlUnnestOperatorProto() *SqlUnnestOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlUnnestOperatorProto); ok {
		return x.SqlUnnestOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlExtendOperatorProto() *SqlExtendOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlExtendOperatorProto); ok {
		return x.SqlExtendOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRollupOperatorProto() *SqlRollupOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRollupOperatorProto); ok {
		return x.SqlRollupOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlIntervalOperatorProto() *SqlIntervalOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlIntervalOperatorProto); ok {
		return x.SqlIntervalOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlSearchOperatorProto() *SqlSearchOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlSearchOperatorProto); ok {
		return x.SqlSearchOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlBetweenOperatorProto() *SqlBetweenOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlBetweenOperatorProto); ok {
		return x.SqlBetweenOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlArgumentAssignmentOperatorProto() *SqlArgumentAssignmentOperatorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlArgumentAssignmentOperatorProto); ok {
		return x.SqlArgumentAssignmentOperatorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlArrayQueryConstructorProto() *SqlArrayQueryConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlArrayQueryConstructorProto); ok {
		return x.SqlArrayQueryConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlMapQueryConstructorProto() *SqlMapQueryConstructorProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlMapQueryConstructorProto); ok {
		return x.SqlMapQueryConstructorProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlRegrCountAggFunctionProto() *SqlRegrCountAggFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlRegrCountAggFunctionProto); ok {
		return x.SqlRegrCountAggFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlGroupIdFunctionProto() *SqlGroupIdFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlGroupIdFunctionProto); ok {
		return x.SqlGroupIdFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlGroupingIdFunctionProto() *SqlGroupingIdFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlGroupingIdFunctionProto); ok {
		return x.SqlGroupingIdFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetSqlGroupingFunctionProto() *SqlGroupingFunctionProto {
	if x, ok := x.GetSqlOperatorProto().(*SqlOperatorProto_SqlGroupingFunctionProto); ok {
		return x.SqlGroupingFunctionProto
	}
	return nil
}

func (x *SqlOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlOperatorProto_SqlOperatorProto interface {
	isSqlOperatorProto_SqlOperatorProto()
}

type SqlOperatorProto_SqlPrefixOperatorProto struct {
	SqlPrefixOperatorProto *SqlPrefixOperatorProto `protobuf:"bytes,1,opt,name=sqlPrefixOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDescriptorOperatorProto struct {
	SqlDescriptorOperatorProto *SqlDescriptorOperatorProto `protobuf:"bytes,2,opt,name=sqlDescriptorOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlPostfixOperatorProto struct {
	SqlPostfixOperatorProto *SqlPostfixOperatorProto `protobuf:"bytes,3,opt,name=sqlPostfixOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlFunctionProto struct {
	SqlFunctionProto *SqlFunctionProto `protobuf:"bytes,4,opt,name=sqlFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCaseOperatorProto struct {
	SqlCaseOperatorProto *SqlCaseOperatorProto `protobuf:"bytes,5,opt,name=sqlCaseOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlBinaryOperatorProto struct {
	SqlBinaryOperatorProto *SqlBinaryOperatorProto `protobuf:"bytes,6,opt,name=sqlBinaryOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSelectOperatorProto struct {
	SqlSelectOperatorProto *SqlSelectOperatorProto `protobuf:"bytes,7,opt,name=sqlSelectOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSpecialOperatorProto struct {
	SqlSpecialOperatorProto *SqlSpecialOperatorProto `protobuf:"bytes,8,opt,name=sqlSpecialOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlNewOperatorProto struct {
	SqlNewOperatorProto *SqlNewOperatorProto `protobuf:"bytes,9,opt,name=sqlNewOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlProcedureCallOperatorProto struct {
	SqlProcedureCallOperatorProto *SqlProcedureCallOperatorProto `protobuf:"bytes,10,opt,name=sqlProcedureCallOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonValueExpressionOperatorProto struct {
	SqlJsonValueExpressionOperatorProto *SqlJsonValueExpressionOperatorProto `protobuf:"bytes,11,opt,name=sqlJsonValueExpressionOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUnresolvedFunctionProto struct {
	SqlUnresolvedFunctionProto *SqlUnresolvedFunctionProto `protobuf:"bytes,12,opt,name=sqlUnresolvedFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJdbcFunctionCallProto struct {
	SqlJdbcFunctionCallProto *SqlJdbcFunctionCallProto `protobuf:"bytes,13,opt,name=sqlJdbcFunctionCallProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUserDefinedTableMacroProto struct {
	SqlUserDefinedTableMacroProto *SqlUserDefinedTableMacroProto `protobuf:"bytes,14,opt,name=sqlUserDefinedTableMacroProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUserDefinedFunctionProto struct {
	SqlUserDefinedFunctionProto *SqlUserDefinedFunctionProto `protobuf:"bytes,15,opt,name=sqlUserDefinedFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlExtractFunctionProto struct {
	SqlExtractFunctionProto *SqlExtractFunctionProto `protobuf:"bytes,16,opt,name=sqlExtractFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTranslate3FunctionProto struct {
	SqlTranslate3FunctionProto *SqlTranslate3FunctionProto `protobuf:"bytes,17,opt,name=sqlTranslate3FunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTrimFunctionProto struct {
	SqlTrimFunctionProto *SqlTrimFunctionProto `protobuf:"bytes,18,opt,name=sqlTrimFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSubstringFunctionProto struct {
	SqlSubstringFunctionProto *SqlSubstringFunctionProto `protobuf:"bytes,19,opt,name=sqlSubstringFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonDepthFunctionProto struct {
	SqlJsonDepthFunctionProto *SqlJsonDepthFunctionProto `protobuf:"bytes,20,opt,name=sqlJsonDepthFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAbstractTimeFunctionProto struct {
	SqlAbstractTimeFunctionProto *SqlAbstractTimeFunctionProto `protobuf:"bytes,21,opt,name=sqlAbstractTimeFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRandFunctionProto struct {
	SqlRandFunctionProto *SqlRandFunctionProto `protobuf:"bytes,22,opt,name=sqlRandFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCoalesceFunctionProto struct {
	SqlCoalesceFunctionProto *SqlCoalesceFunctionProto `protobuf:"bytes,23,opt,name=sqlCoalesceFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonTypeFunctionProto struct {
	SqlJsonTypeFunctionProto *SqlJsonTypeFunctionProto `protobuf:"bytes,24,opt,name=sqlJsonTypeFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonValueFunctionProto struct {
	SqlJsonValueFunctionProto *SqlJsonValueFunctionProto `protobuf:"bytes,25,opt,name=sqlJsonValueFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDatePartFunctionProto struct {
	SqlDatePartFunctionProto *SqlDatePartFunctionProto `protobuf:"bytes,26,opt,name=sqlDatePartFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonObjectFunctionProto struct {
	SqlJsonObjectFunctionProto *SqlJsonObjectFunctionProto `protobuf:"bytes,27,opt,name=sqlJsonObjectFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlNullifFunctionProto struct {
	SqlNullifFunctionProto *SqlNullifFunctionProto `protobuf:"bytes,28,opt,name=sqlNullifFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTimestampAddFunctionProto struct {
	SqlTimestampAddFunctionProto *SqlTimestampAddFunctionProto `protobuf:"bytes,29,opt,name=sqlTimestampAddFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonPrettyFunctionProto struct {
	SqlJsonPrettyFunctionProto *SqlJsonPrettyFunctionProto `protobuf:"bytes,30,opt,name=sqlJsonPrettyFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlBaseContextVariableProto struct {
	SqlBaseContextVariableProto *SqlBaseContextVariableProto `protobuf:"bytes,31,opt,name=sqlBaseContextVariableProto,proto3,oneof"`
}

type SqlOperatorProto_SqlConvertFunctionProto struct {
	SqlConvertFunctionProto *SqlConvertFunctionProto `protobuf:"bytes,32,opt,name=sqlConvertFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlGroupedWindowFunctionProto struct {
	SqlGroupedWindowFunctionProto *SqlGroupedWindowFunctionProto `protobuf:"bytes,33,opt,name=sqlGroupedWindowFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTypeConstructorFunctionProto struct {
	SqlTypeConstructorFunctionProto *SqlTypeConstructorFunctionProto `protobuf:"bytes,34,opt,name=sqlTypeConstructorFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTimestampDiffFunctionProto struct {
	SqlTimestampDiffFunctionProto *SqlTimestampDiffFunctionProto `protobuf:"bytes,35,opt,name=sqlTimestampDiffFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonKeysFunctionProto struct {
	SqlJsonKeysFunctionProto *SqlJsonKeysFunctionProto `protobuf:"bytes,36,opt,name=sqlJsonKeysFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonLengthFunctionProto struct {
	SqlJsonLengthFunctionProto *SqlJsonLengthFunctionProto `protobuf:"bytes,37,opt,name=sqlJsonLengthFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCastFunctionProto struct {
	SqlCastFunctionProto *SqlCastFunctionProto `protobuf:"bytes,38,opt,name=sqlCastFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlPositionFunctionProto struct {
	SqlPositionFunctionProto *SqlPositionFunctionProto `protobuf:"bytes,39,opt,name=sqlPositionFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonRemoveFunctionProto struct {
	SqlJsonRemoveFunctionProto *SqlJsonRemoveFunctionProto `protobuf:"bytes,40,opt,name=sqlJsonRemoveFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMatchFunctionProto struct {
	SqlMatchFunctionProto *SqlMatchFunctionProto `protobuf:"bytes,41,opt,name=sqlMatchFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlOverlayFunctionProto struct {
	SqlOverlayFunctionProto *SqlOverlayFunctionProto `protobuf:"bytes,42,opt,name=sqlOverlayFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonArrayFunctionProto struct {
	SqlJsonArrayFunctionProto *SqlJsonArrayFunctionProto `protobuf:"bytes,43,opt,name=sqlJsonArrayFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRandIntegerFunctionProto struct {
	SqlRandIntegerFunctionProto *SqlRandIntegerFunctionProto `protobuf:"bytes,44,opt,name=sqlRandIntegerFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCurrentDateFunctionProto struct {
	SqlCurrentDateFunctionProto *SqlCurrentDateFunctionProto `protobuf:"bytes,45,opt,name=sqlCurrentDateFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAggFunctionProto struct {
	SqlAggFunctionProto *SqlAggFunctionProto `protobuf:"bytes,46,opt,name=sqlAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlWindowTableFunctionProto struct {
	SqlWindowTableFunctionProto *SqlWindowTableFunctionProto `protobuf:"bytes,47,opt,name=sqlWindowTableFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRegexpReplaceFunctionProto struct {
	SqlRegexpReplaceFunctionProto *SqlRegexpReplaceFunctionProto `protobuf:"bytes,48,opt,name=sqlRegexpReplaceFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMonotonicUnaryFunctionProto struct {
	SqlMonotonicUnaryFunctionProto *SqlMonotonicUnaryFunctionProto `protobuf:"bytes,49,opt,name=sqlMonotonicUnaryFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonStorageSizeFunctionProto struct {
	SqlJsonStorageSizeFunctionProto *SqlJsonStorageSizeFunctionProto `protobuf:"bytes,50,opt,name=sqlJsonStorageSizeFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonQueryFunctionProto struct {
	SqlJsonQueryFunctionProto *SqlJsonQueryFunctionProto `protobuf:"bytes,51,opt,name=sqlJsonQueryFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonExistsFunctionProto struct {
	SqlJsonExistsFunctionProto *SqlJsonExistsFunctionProto `protobuf:"bytes,52,opt,name=sqlJsonExistsFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSetOperatorProto struct {
	SqlSetOperatorProto *SqlSetOperatorProto `protobuf:"bytes,53,opt,name=sqlSetOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlOverlapsOperatorProto struct {
	SqlOverlapsOperatorProto *SqlOverlapsOperatorProto `protobuf:"bytes,54,opt,name=sqlOverlapsOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCastOperatorProto struct {
	SqlCastOperatorProto *SqlCastOperatorProto `protobuf:"bytes,55,opt,name=sqlCastOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMonotonicBinaryOperatorProto struct {
	SqlMonotonicBinaryOperatorProto *SqlMonotonicBinaryOperatorProto `protobuf:"bytes,56,opt,name=sqlMonotonicBinaryOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMultisetMemberOfOperatorProto struct {
	SqlMultisetMemberOfOperatorProto *SqlMultisetMemberOfOperatorProto `protobuf:"bytes,57,opt,name=sqlMultisetMemberOfOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMultisetSetOperatorProto struct {
	SqlMultisetSetOperatorProto *SqlMultisetSetOperatorProto `protobuf:"bytes,58,opt,name=sqlMultisetSetOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlWithinGroupOperatorProto struct {
	SqlWithinGroupOperatorProto *SqlWithinGroupOperatorProto `protobuf:"bytes,59,opt,name=sqlWithinGroupOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlFilterOperatorProto struct {
	SqlFilterOperatorProto *SqlFilterOperatorProto `protobuf:"bytes,60,opt,name=sqlFilterOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlOverOperatorProto struct {
	SqlOverOperatorProto *SqlOverOperatorProto `protobuf:"bytes,61,opt,name=sqlOverOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlInOperatorProto struct {
	SqlInOperatorProto *SqlInOperatorProto `protobuf:"bytes,62,opt,name=sqlInOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlPosixRegexOperatorProto struct {
	SqlPosixRegexOperatorProto *SqlPosixRegexOperatorProto `protobuf:"bytes,63,opt,name=sqlPosixRegexOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlWithinDistinctOperatorProto struct {
	SqlWithinDistinctOperatorProto *SqlWithinDistinctOperatorProto `protobuf:"bytes,64,opt,name=sqlWithinDistinctOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlLateralOperatorProto struct {
	SqlLateralOperatorProto *SqlLateralOperatorProto `protobuf:"bytes,65,opt,name=sqlLateralOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMultisetValueConstructorProto struct {
	SqlMultisetValueConstructorProto *SqlMultisetValueConstructorProto `protobuf:"bytes,66,opt,name=sqlMultisetValueConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDefaultOperatorProto struct {
	SqlDefaultOperatorProto *SqlDefaultOperatorProto `protobuf:"bytes,67,opt,name=sqlDefaultOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlLiteralChainOperatorProto struct {
	SqlLiteralChainOperatorProto *SqlLiteralChainOperatorProto `protobuf:"bytes,68,opt,name=sqlLiteralChainOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDatetimePlusOperatorProto struct {
	SqlDatetimePlusOperatorProto *SqlDatetimePlusOperatorProto `protobuf:"bytes,69,opt,name=sqlDatetimePlusOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSequenceValueOperatorProto struct {
	SqlSequenceValueOperatorProto *SqlSequenceValueOperatorProto `protobuf:"bytes,70,opt,name=sqlSequenceValueOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlFunctionalOperatorProto struct {
	SqlFunctionalOperatorProto *SqlFunctionalOperatorProto `protobuf:"bytes,71,opt,name=sqlFunctionalOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlLikeOperatorProto struct {
	SqlLikeOperatorProto *SqlLikeOperatorProto `protobuf:"bytes,72,opt,name=sqlLikeOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlInternalOperatorProto struct {
	SqlInternalOperatorProto *SqlInternalOperatorProto `protobuf:"bytes,73,opt,name=sqlInternalOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDotOperatorProto struct {
	SqlDotOperatorProto *SqlDotOperatorProto `protobuf:"bytes,74,opt,name=sqlDotOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlThrowOperatorProto struct {
	SqlThrowOperatorProto *SqlThrowOperatorProto `protobuf:"bytes,75,opt,name=sqlThrowOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlItemOperatorProto struct {
	SqlItemOperatorProto *SqlItemOperatorProto `protobuf:"bytes,76,opt,name=sqlItemOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlInfixOperatorProto struct {
	SqlInfixOperatorProto *SqlInfixOperatorProto `protobuf:"bytes,77,opt,name=sqlInfixOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAsOperatorProto struct {
	SqlAsOperatorProto *SqlAsOperatorProto `protobuf:"bytes,78,opt,name=sqlAsOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlValuesOperatorProto struct {
	SqlValuesOperatorProto *SqlValuesOperatorProto `protobuf:"bytes,79,opt,name=sqlValuesOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlColumnListConstructorProto struct {
	SqlColumnListConstructorProto *SqlColumnListConstructorProto `protobuf:"bytes,80,opt,name=sqlColumnListConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMultisetQueryConstructorProto struct {
	SqlMultisetQueryConstructorProto *SqlMultisetQueryConstructorProto `protobuf:"bytes,81,opt,name=sqlMultisetQueryConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCursorConstructorProto struct {
	SqlCursorConstructorProto *SqlCursorConstructorProto `protobuf:"bytes,82,opt,name=sqlCursorConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRowOperatorProto struct {
	SqlRowOperatorProto *SqlRowOperatorProto `protobuf:"bytes,83,opt,name=sqlRowOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlDatetimeSubtractionOperatorProto struct {
	SqlDatetimeSubtractionOperatorProto *SqlDatetimeSubtractionOperatorProto `protobuf:"bytes,84,opt,name=sqlDatetimeSubtractionOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlNullTreatmentOperatorProto struct {
	SqlNullTreatmentOperatorProto *SqlNullTreatmentOperatorProto `protobuf:"bytes,85,opt,name=sqlNullTreatmentOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUserDefinedTableFunctionProto struct {
	SqlUserDefinedTableFunctionProto *SqlUserDefinedTableFunctionProto `protobuf:"bytes,86,opt,name=sqlUserDefinedTableFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlStringContextVariableProto struct {
	SqlStringContextVariableProto *SqlStringContextVariableProto `protobuf:"bytes,87,opt,name=sqlStringContextVariableProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUserDefinedAggFunctionProto struct {
	SqlUserDefinedAggFunctionProto *SqlUserDefinedAggFunctionProto `protobuf:"bytes,88,opt,name=sqlUserDefinedAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCovarAggFunctionProto struct {
	SqlCovarAggFunctionProto *SqlCovarAggFunctionProto `protobuf:"bytes,89,opt,name=sqlCovarAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonArrayAggAggFunctionProto struct {
	SqlJsonArrayAggAggFunctionProto *SqlJsonArrayAggAggFunctionProto `protobuf:"bytes,90,opt,name=sqlJsonArrayAggAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSumAggFunctionProto struct {
	SqlSumAggFunctionProto *SqlSumAggFunctionProto `protobuf:"bytes,91,opt,name=sqlSumAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMinMaxAggFunctionProto struct {
	SqlMinMaxAggFunctionProto *SqlMinMaxAggFunctionProto `protobuf:"bytes,92,opt,name=sqlMinMaxAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCountAggFunctionProto struct {
	SqlCountAggFunctionProto *SqlCountAggFunctionProto `protobuf:"bytes,93,opt,name=sqlCountAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAnyValueAggFunctionProto struct {
	SqlAnyValueAggFunctionProto *SqlAnyValueAggFunctionProto `protobuf:"bytes,94,opt,name=sqlAnyValueAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAvgAggFunctionProto struct {
	SqlAvgAggFunctionProto *SqlAvgAggFunctionProto `protobuf:"bytes,95,opt,name=sqlAvgAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlNthValueAggFunctionProto struct {
	SqlNthValueAggFunctionProto *SqlNthValueAggFunctionProto `protobuf:"bytes,96,opt,name=sqlNthValueAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlBasicAggFunctionProto struct {
	SqlBasicAggFunctionProto *SqlBasicAggFunctionProto `protobuf:"bytes,97,opt,name=sqlBasicAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSingleValueAggFunctionProto struct {
	SqlSingleValueAggFunctionProto *SqlSingleValueAggFunctionProto `protobuf:"bytes,98,opt,name=sqlSingleValueAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSumEmptyIsZeroAggFunctionProto struct {
	SqlSumEmptyIsZeroAggFunctionProto *SqlSumEmptyIsZeroAggFunctionProto `protobuf:"bytes,99,opt,name=sqlSumEmptyIsZeroAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlListaggAggFunctionProto struct {
	SqlListaggAggFunctionProto *SqlListaggAggFunctionProto `protobuf:"bytes,100,opt,name=sqlListaggAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlNtileAggFunctionProto struct {
	SqlNtileAggFunctionProto *SqlNtileAggFunctionProto `protobuf:"bytes,101,opt,name=sqlNtileAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlJsonObjectAggAggFunctionProto struct {
	SqlJsonObjectAggAggFunctionProto *SqlJsonObjectAggAggFunctionProto `protobuf:"bytes,102,opt,name=sqlJsonObjectAggAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlFirstLastValueAggFunctionProto struct {
	SqlFirstLastValueAggFunctionProto *SqlFirstLastValueAggFunctionProto `protobuf:"bytes,103,opt,name=sqlFirstLastValueAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlAbstractGroupFunctionProto struct {
	SqlAbstractGroupFunctionProto *SqlAbstractGroupFunctionProto `protobuf:"bytes,104,opt,name=sqlAbstractGroupFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlHistogramAggFunctionProto struct {
	SqlHistogramAggFunctionProto *SqlHistogramAggFunctionProto `protobuf:"bytes,105,opt,name=sqlHistogramAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRankFunctionProto struct {
	SqlRankFunctionProto *SqlRankFunctionProto `protobuf:"bytes,106,opt,name=sqlRankFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlLeadLagAggFunctionProto struct {
	SqlLeadLagAggFunctionProto *SqlLeadLagAggFunctionProto `protobuf:"bytes,107,opt,name=sqlLeadLagAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlBitOpAggFunctionProto struct {
	SqlBitOpAggFunctionProto *SqlBitOpAggFunctionProto `protobuf:"bytes,108,opt,name=sqlBitOpAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlTumbleTableFunctionProto struct {
	SqlTumbleTableFunctionProto *SqlTumbleTableFunctionProto `protobuf:"bytes,109,opt,name=sqlTumbleTableFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSessionTableFunctionProto struct {
	SqlSessionTableFunctionProto *SqlSessionTableFunctionProto `protobuf:"bytes,110,opt,name=sqlSessionTableFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlHopTableFunctionProto struct {
	SqlHopTableFunctionProto *SqlHopTableFunctionProto `protobuf:"bytes,111,opt,name=sqlHopTableFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlFloorFunctionProto struct {
	SqlFloorFunctionProto *SqlFloorFunctionProto `protobuf:"bytes,112,opt,name=sqlFloorFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlQuantifyOperatorProto struct {
	SqlQuantifyOperatorProto *SqlQuantifyOperatorProto `protobuf:"bytes,113,opt,name=sqlQuantifyOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlArrayValueConstructorProto struct {
	SqlArrayValueConstructorProto *SqlArrayValueConstructorProto `protobuf:"bytes,114,opt,name=sqlArrayValueConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMapValueConstructorProto struct {
	SqlMapValueConstructorProto *SqlMapValueConstructorProto `protobuf:"bytes,115,opt,name=sqlMapValueConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlCollectionTableOperatorProto struct {
	SqlCollectionTableOperatorProto *SqlCollectionTableOperatorProto `protobuf:"bytes,116,opt,name=sqlCollectionTableOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlUnnestOperatorProto struct {
	SqlUnnestOperatorProto *SqlUnnestOperatorProto `protobuf:"bytes,117,opt,name=sqlUnnestOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlExtendOperatorProto struct {
	SqlExtendOperatorProto *SqlExtendOperatorProto `protobuf:"bytes,118,opt,name=sqlExtendOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRollupOperatorProto struct {
	SqlRollupOperatorProto *SqlRollupOperatorProto `protobuf:"bytes,119,opt,name=sqlRollupOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlIntervalOperatorProto struct {
	SqlIntervalOperatorProto *SqlIntervalOperatorProto `protobuf:"bytes,120,opt,name=sqlIntervalOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlSearchOperatorProto struct {
	SqlSearchOperatorProto *SqlSearchOperatorProto `protobuf:"bytes,121,opt,name=sqlSearchOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlBetweenOperatorProto struct {
	SqlBetweenOperatorProto *SqlBetweenOperatorProto `protobuf:"bytes,122,opt,name=sqlBetweenOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlArgumentAssignmentOperatorProto struct {
	SqlArgumentAssignmentOperatorProto *SqlArgumentAssignmentOperatorProto `protobuf:"bytes,123,opt,name=sqlArgumentAssignmentOperatorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlArrayQueryConstructorProto struct {
	SqlArrayQueryConstructorProto *SqlArrayQueryConstructorProto `protobuf:"bytes,124,opt,name=sqlArrayQueryConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlMapQueryConstructorProto struct {
	SqlMapQueryConstructorProto *SqlMapQueryConstructorProto `protobuf:"bytes,125,opt,name=sqlMapQueryConstructorProto,proto3,oneof"`
}

type SqlOperatorProto_SqlRegrCountAggFunctionProto struct {
	SqlRegrCountAggFunctionProto *SqlRegrCountAggFunctionProto `protobuf:"bytes,126,opt,name=sqlRegrCountAggFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlGroupIdFunctionProto struct {
	SqlGroupIdFunctionProto *SqlGroupIdFunctionProto `protobuf:"bytes,127,opt,name=sqlGroupIdFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlGroupingIdFunctionProto struct {
	SqlGroupingIdFunctionProto *SqlGroupingIdFunctionProto `protobuf:"bytes,128,opt,name=sqlGroupingIdFunctionProto,proto3,oneof"`
}

type SqlOperatorProto_SqlGroupingFunctionProto struct {
	SqlGroupingFunctionProto *SqlGroupingFunctionProto `protobuf:"bytes,129,opt,name=sqlGroupingFunctionProto,proto3,oneof"`
}

func (*SqlOperatorProto_SqlPrefixOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDescriptorOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlPostfixOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCaseOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlBinaryOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSelectOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSpecialOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlNewOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlProcedureCallOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonValueExpressionOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUnresolvedFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJdbcFunctionCallProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUserDefinedTableMacroProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUserDefinedFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlExtractFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTranslate3FunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTrimFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSubstringFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonDepthFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAbstractTimeFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRandFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCoalesceFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonTypeFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonValueFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDatePartFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonObjectFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlNullifFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTimestampAddFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonPrettyFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlBaseContextVariableProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlConvertFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlGroupedWindowFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTypeConstructorFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTimestampDiffFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonKeysFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonLengthFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCastFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlPositionFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonRemoveFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMatchFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlOverlayFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonArrayFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRandIntegerFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCurrentDateFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlWindowTableFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRegexpReplaceFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMonotonicUnaryFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonStorageSizeFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonQueryFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonExistsFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSetOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlOverlapsOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCastOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMonotonicBinaryOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMultisetMemberOfOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMultisetSetOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlWithinGroupOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlFilterOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlOverOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlInOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlPosixRegexOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlWithinDistinctOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlLateralOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMultisetValueConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDefaultOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlLiteralChainOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDatetimePlusOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSequenceValueOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlFunctionalOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlLikeOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlInternalOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDotOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlThrowOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlItemOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlInfixOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAsOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlValuesOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlColumnListConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMultisetQueryConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCursorConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRowOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlDatetimeSubtractionOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlNullTreatmentOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUserDefinedTableFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlStringContextVariableProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUserDefinedAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCovarAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonArrayAggAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSumAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMinMaxAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCountAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAnyValueAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAvgAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlNthValueAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlBasicAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSingleValueAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSumEmptyIsZeroAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlListaggAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlNtileAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlJsonObjectAggAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlFirstLastValueAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlAbstractGroupFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlHistogramAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRankFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlLeadLagAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlBitOpAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlTumbleTableFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSessionTableFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlHopTableFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlFloorFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlQuantifyOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlArrayValueConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMapValueConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlCollectionTableOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlUnnestOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlExtendOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRollupOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlIntervalOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlSearchOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlBetweenOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlArgumentAssignmentOperatorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlArrayQueryConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlMapQueryConstructorProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlRegrCountAggFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlGroupIdFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlGroupingIdFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

func (*SqlOperatorProto_SqlGroupingFunctionProto) isSqlOperatorProto_SqlOperatorProto() {}

// Java Class: org.apache.calcite.sql.SqlPrefixOperator
type SqlPrefixOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlPrefixOperatorProto:
	//
	//	*SqlPrefixOperatorProto_SqlNewOperatorProto
	//	*SqlPrefixOperatorProto_SqlProcedureCallOperatorProto
	SqlPrefixOperatorProto isSqlPrefixOperatorProto_SqlPrefixOperatorProto `protobuf_oneof:"sqlPrefixOperatorProto"`
	Name                   string                                          `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                   SqlKindProto                                    `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec               int32                                           `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec              int32                                           `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference    *SqlReturnTypeInferenceProto                    `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference   *SqlOperandTypeInferenceProto                   `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker     *SqlOperandTypeCheckerProto                     `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures      string                                          `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlPrefixOperatorProto) Reset() {
	*x = SqlPrefixOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[78]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlPrefixOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlPrefixOperatorProto) ProtoMessage() {}

func (x *SqlPrefixOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[78]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlPrefixOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlPrefixOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{78}
}

func (m *SqlPrefixOperatorProto) GetSqlPrefixOperatorProto() isSqlPrefixOperatorProto_SqlPrefixOperatorProto {
	if m != nil {
		return m.SqlPrefixOperatorProto
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetSqlNewOperatorProto() *SqlNewOperatorProto {
	if x, ok := x.GetSqlPrefixOperatorProto().(*SqlPrefixOperatorProto_SqlNewOperatorProto); ok {
		return x.SqlNewOperatorProto
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetSqlProcedureCallOperatorProto() *SqlProcedureCallOperatorProto {
	if x, ok := x.GetSqlPrefixOperatorProto().(*SqlPrefixOperatorProto_SqlProcedureCallOperatorProto); ok {
		return x.SqlProcedureCallOperatorProto
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlPrefixOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlPrefixOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlPrefixOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlPrefixOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlPrefixOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlPrefixOperatorProto_SqlPrefixOperatorProto interface {
	isSqlPrefixOperatorProto_SqlPrefixOperatorProto()
}

type SqlPrefixOperatorProto_SqlNewOperatorProto struct {
	SqlNewOperatorProto *SqlNewOperatorProto `protobuf:"bytes,1,opt,name=sqlNewOperatorProto,proto3,oneof"`
}

type SqlPrefixOperatorProto_SqlProcedureCallOperatorProto struct {
	SqlProcedureCallOperatorProto *SqlProcedureCallOperatorProto `protobuf:"bytes,2,opt,name=sqlProcedureCallOperatorProto,proto3,oneof"`
}

func (*SqlPrefixOperatorProto_SqlNewOperatorProto) isSqlPrefixOperatorProto_SqlPrefixOperatorProto() {
}

func (*SqlPrefixOperatorProto_SqlProcedureCallOperatorProto) isSqlPrefixOperatorProto_SqlPrefixOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlNewOperator
type SqlNewOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlNewOperatorProto) Reset() {
	*x = SqlNewOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[79]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNewOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNewOperatorProto) ProtoMessage() {}

func (x *SqlNewOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[79]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNewOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlNewOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{79}
}

func (x *SqlNewOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlNewOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlNewOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlNewOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlNewOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlNewOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlNewOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlNewOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.type.SqlReturnTypeInference
type SqlReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlReturnTypeInferenceProto:
	//
	//	*SqlReturnTypeInferenceProto_SqlReturnTypeInferenceChainProto
	//	*SqlReturnTypeInferenceProto_OrdinalReturnTypeInferenceProto
	//	*SqlReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto
	//	*SqlReturnTypeInferenceProto_CursorReturnTypeInferenceProto
	//	*SqlReturnTypeInferenceProto_SqlTypeTransformCascadeProto
	//	*SqlReturnTypeInferenceProto_MatchReturnTypeInferenceProto
	//	*SqlReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto
	SqlReturnTypeInferenceProto isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto `protobuf_oneof:"sqlReturnTypeInferenceProto"`
}

func (x *SqlReturnTypeInferenceProto) Reset() {
	*x = SqlReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[80]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlReturnTypeInferenceProto) ProtoMessage() {}

func (x *SqlReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[80]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*SqlReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{80}
}

func (m *SqlReturnTypeInferenceProto) GetSqlReturnTypeInferenceProto() isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto {
	if m != nil {
		return m.SqlReturnTypeInferenceProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetSqlReturnTypeInferenceChainProto() *SqlReturnTypeInferenceChainProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_SqlReturnTypeInferenceChainProto); ok {
		return x.SqlReturnTypeInferenceChainProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetOrdinalReturnTypeInferenceProto() *OrdinalReturnTypeInferenceProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_OrdinalReturnTypeInferenceProto); ok {
		return x.OrdinalReturnTypeInferenceProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetExplicitReturnTypeInferenceProto() *ExplicitReturnTypeInferenceProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto); ok {
		return x.ExplicitReturnTypeInferenceProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetCursorReturnTypeInferenceProto() *CursorReturnTypeInferenceProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_CursorReturnTypeInferenceProto); ok {
		return x.CursorReturnTypeInferenceProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetSqlTypeTransformCascadeProto() *SqlTypeTransformCascadeProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_SqlTypeTransformCascadeProto); ok {
		return x.SqlTypeTransformCascadeProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetMatchReturnTypeInferenceProto() *MatchReturnTypeInferenceProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_MatchReturnTypeInferenceProto); ok {
		return x.MatchReturnTypeInferenceProto
	}
	return nil
}

func (x *SqlReturnTypeInferenceProto) GetTableFunctionReturnTypeInferenceProto() *TableFunctionReturnTypeInferenceProto {
	if x, ok := x.GetSqlReturnTypeInferenceProto().(*SqlReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto); ok {
		return x.TableFunctionReturnTypeInferenceProto
	}
	return nil
}

type isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto interface {
	isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto()
}

type SqlReturnTypeInferenceProto_SqlReturnTypeInferenceChainProto struct {
	SqlReturnTypeInferenceChainProto *SqlReturnTypeInferenceChainProto `protobuf:"bytes,1,opt,name=sqlReturnTypeInferenceChainProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_OrdinalReturnTypeInferenceProto struct {
	OrdinalReturnTypeInferenceProto *OrdinalReturnTypeInferenceProto `protobuf:"bytes,2,opt,name=ordinalReturnTypeInferenceProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto struct {
	ExplicitReturnTypeInferenceProto *ExplicitReturnTypeInferenceProto `protobuf:"bytes,3,opt,name=explicitReturnTypeInferenceProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_CursorReturnTypeInferenceProto struct {
	CursorReturnTypeInferenceProto *CursorReturnTypeInferenceProto `protobuf:"bytes,4,opt,name=cursorReturnTypeInferenceProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_SqlTypeTransformCascadeProto struct {
	SqlTypeTransformCascadeProto *SqlTypeTransformCascadeProto `protobuf:"bytes,5,opt,name=sqlTypeTransformCascadeProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_MatchReturnTypeInferenceProto struct {
	MatchReturnTypeInferenceProto *MatchReturnTypeInferenceProto `protobuf:"bytes,6,opt,name=matchReturnTypeInferenceProto,proto3,oneof"`
}

type SqlReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto struct {
	TableFunctionReturnTypeInferenceProto *TableFunctionReturnTypeInferenceProto `protobuf:"bytes,7,opt,name=tableFunctionReturnTypeInferenceProto,proto3,oneof"`
}

func (*SqlReturnTypeInferenceProto_SqlReturnTypeInferenceChainProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_OrdinalReturnTypeInferenceProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_CursorReturnTypeInferenceProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_SqlTypeTransformCascadeProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_MatchReturnTypeInferenceProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

func (*SqlReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto) isSqlReturnTypeInferenceProto_SqlReturnTypeInferenceProto() {
}

// Java Class: org.apache.calcite.sql.type.SqlReturnTypeInferenceChain
type SqlReturnTypeInferenceChainProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rules []*SqlReturnTypeInferenceProto `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
}

func (x *SqlReturnTypeInferenceChainProto) Reset() {
	*x = SqlReturnTypeInferenceChainProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[81]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlReturnTypeInferenceChainProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlReturnTypeInferenceChainProto) ProtoMessage() {}

func (x *SqlReturnTypeInferenceChainProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[81]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlReturnTypeInferenceChainProto.ProtoReflect.Descriptor instead.
func (*SqlReturnTypeInferenceChainProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{81}
}

func (x *SqlReturnTypeInferenceChainProto) GetRules() []*SqlReturnTypeInferenceProto {
	if x != nil {
		return x.Rules
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.OrdinalReturnTypeInference
type OrdinalReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ordinal int32 `protobuf:"zigzag32,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *OrdinalReturnTypeInferenceProto) Reset() {
	*x = OrdinalReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[82]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrdinalReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrdinalReturnTypeInferenceProto) ProtoMessage() {}

func (x *OrdinalReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[82]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrdinalReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*OrdinalReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{82}
}

func (x *OrdinalReturnTypeInferenceProto) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.ExplicitReturnTypeInference
type ExplicitReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ExplicitReturnTypeInferenceProto:
	//
	//	*ExplicitReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto
	ExplicitReturnTypeInferenceProto isExplicitReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto `protobuf_oneof:"explicitReturnTypeInferenceProto"`
	ProtoType                        *RelProtoDataTypeProto                                              `protobuf:"bytes,2,opt,name=protoType,proto3" json:"protoType,omitempty"`
}

func (x *ExplicitReturnTypeInferenceProto) Reset() {
	*x = ExplicitReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[83]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitReturnTypeInferenceProto) ProtoMessage() {}

func (x *ExplicitReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[83]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*ExplicitReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{83}
}

func (m *ExplicitReturnTypeInferenceProto) GetExplicitReturnTypeInferenceProto() isExplicitReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto {
	if m != nil {
		return m.ExplicitReturnTypeInferenceProto
	}
	return nil
}

func (x *ExplicitReturnTypeInferenceProto) GetTableFunctionReturnTypeInferenceProto() *TableFunctionReturnTypeInferenceProto {
	if x, ok := x.GetExplicitReturnTypeInferenceProto().(*ExplicitReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto); ok {
		return x.TableFunctionReturnTypeInferenceProto
	}
	return nil
}

func (x *ExplicitReturnTypeInferenceProto) GetProtoType() *RelProtoDataTypeProto {
	if x != nil {
		return x.ProtoType
	}
	return nil
}

type isExplicitReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto interface {
	isExplicitReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto()
}

type ExplicitReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto struct {
	TableFunctionReturnTypeInferenceProto *TableFunctionReturnTypeInferenceProto `protobuf:"bytes,1,opt,name=tableFunctionReturnTypeInferenceProto,proto3,oneof"`
}

func (*ExplicitReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto) isExplicitReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto() {
}

// Java Class: org.apache.calcite.sql.type.TableFunctionReturnTypeInference
type TableFunctionReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamNames     []string                 `protobuf:"bytes,1,rep,name=paramNames,proto3" json:"paramNames,omitempty"`
	ColumnMappings []*RelColumnMappingProto `protobuf:"bytes,2,rep,name=columnMappings,proto3" json:"columnMappings,omitempty"`
	IsPassthrough  bool                     `protobuf:"varint,3,opt,name=isPassthrough,proto3" json:"isPassthrough,omitempty"`
	ProtoType      *RelProtoDataTypeProto   `protobuf:"bytes,4,opt,name=protoType,proto3" json:"protoType,omitempty"`
}

func (x *TableFunctionReturnTypeInferenceProto) Reset() {
	*x = TableFunctionReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[84]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunctionReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunctionReturnTypeInferenceProto) ProtoMessage() {}

func (x *TableFunctionReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[84]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunctionReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*TableFunctionReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{84}
}

func (x *TableFunctionReturnTypeInferenceProto) GetParamNames() []string {
	if x != nil {
		return x.ParamNames
	}
	return nil
}

func (x *TableFunctionReturnTypeInferenceProto) GetColumnMappings() []*RelColumnMappingProto {
	if x != nil {
		return x.ColumnMappings
	}
	return nil
}

func (x *TableFunctionReturnTypeInferenceProto) GetIsPassthrough() bool {
	if x != nil {
		return x.IsPassthrough
	}
	return false
}

func (x *TableFunctionReturnTypeInferenceProto) GetProtoType() *RelProtoDataTypeProto {
	if x != nil {
		return x.ProtoType
	}
	return nil
}

// Java Class: org.apache.calcite.rel.metadata.RelColumnMapping
type RelColumnMappingProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IOutputColumn int32 `protobuf:"zigzag32,1,opt,name=iOutputColumn,proto3" json:"iOutputColumn,omitempty"`
	IInputRel     int32 `protobuf:"zigzag32,2,opt,name=iInputRel,proto3" json:"iInputRel,omitempty"`
	IInputColumn  int32 `protobuf:"zigzag32,3,opt,name=iInputColumn,proto3" json:"iInputColumn,omitempty"`
	Derived       bool  `protobuf:"varint,4,opt,name=derived,proto3" json:"derived,omitempty"`
}

func (x *RelColumnMappingProto) Reset() {
	*x = RelColumnMappingProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[85]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelColumnMappingProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelColumnMappingProto) ProtoMessage() {}

func (x *RelColumnMappingProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[85]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelColumnMappingProto.ProtoReflect.Descriptor instead.
func (*RelColumnMappingProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{85}
}

func (x *RelColumnMappingProto) GetIOutputColumn() int32 {
	if x != nil {
		return x.IOutputColumn
	}
	return 0
}

func (x *RelColumnMappingProto) GetIInputRel() int32 {
	if x != nil {
		return x.IInputRel
	}
	return 0
}

func (x *RelColumnMappingProto) GetIInputColumn() int32 {
	if x != nil {
		return x.IInputColumn
	}
	return 0
}

func (x *RelColumnMappingProto) GetDerived() bool {
	if x != nil {
		return x.Derived
	}
	return false
}

// Java Class: org.apache.calcite.rel.type.RelProtoDataType
type RelProtoDataTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *RelProtoDataTypeProto) Reset() {
	*x = RelProtoDataTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[86]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RelProtoDataTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RelProtoDataTypeProto) ProtoMessage() {}

func (x *RelProtoDataTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[86]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RelProtoDataTypeProto.ProtoReflect.Descriptor instead.
func (*RelProtoDataTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{86}
}

// Java Class: org.apache.calcite.sql.type.CursorReturnTypeInference
type CursorReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ordinal int32 `protobuf:"zigzag32,1,opt,name=ordinal,proto3" json:"ordinal,omitempty"`
}

func (x *CursorReturnTypeInferenceProto) Reset() {
	*x = CursorReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[87]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CursorReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CursorReturnTypeInferenceProto) ProtoMessage() {}

func (x *CursorReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[87]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CursorReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*CursorReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{87}
}

func (x *CursorReturnTypeInferenceProto) GetOrdinal() int32 {
	if x != nil {
		return x.Ordinal
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.SqlTypeTransformCascade
type SqlTypeTransformCascadeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Rule       *SqlReturnTypeInferenceProto `protobuf:"bytes,1,opt,name=rule,proto3" json:"rule,omitempty"`
	Transforms []*SqlTypeTransformProto     `protobuf:"bytes,2,rep,name=transforms,proto3" json:"transforms,omitempty"`
}

func (x *SqlTypeTransformCascadeProto) Reset() {
	*x = SqlTypeTransformCascadeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[88]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTypeTransformCascadeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTypeTransformCascadeProto) ProtoMessage() {}

func (x *SqlTypeTransformCascadeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[88]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTypeTransformCascadeProto.ProtoReflect.Descriptor instead.
func (*SqlTypeTransformCascadeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{88}
}

func (x *SqlTypeTransformCascadeProto) GetRule() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.Rule
	}
	return nil
}

func (x *SqlTypeTransformCascadeProto) GetTransforms() []*SqlTypeTransformProto {
	if x != nil {
		return x.Transforms
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.SqlTypeTransform
type SqlTypeTransformProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SqlTypeTransformProto) Reset() {
	*x = SqlTypeTransformProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[89]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTypeTransformProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTypeTransformProto) ProtoMessage() {}

func (x *SqlTypeTransformProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[89]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTypeTransformProto.ProtoReflect.Descriptor instead.
func (*SqlTypeTransformProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{89}
}

// Java Class: org.apache.calcite.sql.type.MatchReturnTypeInference
type MatchReturnTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Start     int32              `protobuf:"zigzag32,1,opt,name=start,proto3" json:"start,omitempty"`
	TypeNames []SqlTypeNameProto `protobuf:"varint,2,rep,packed,name=typeNames,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeNames,omitempty"`
}

func (x *MatchReturnTypeInferenceProto) Reset() {
	*x = MatchReturnTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[90]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatchReturnTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatchReturnTypeInferenceProto) ProtoMessage() {}

func (x *MatchReturnTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[90]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatchReturnTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*MatchReturnTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{90}
}

func (x *MatchReturnTypeInferenceProto) GetStart() int32 {
	if x != nil {
		return x.Start
	}
	return 0
}

func (x *MatchReturnTypeInferenceProto) GetTypeNames() []SqlTypeNameProto {
	if x != nil {
		return x.TypeNames
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.SqlOperandTypeInference
type SqlOperandTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlOperandTypeInferenceProto:
	//
	//	*SqlOperandTypeInferenceProto_ExplicitOperandTypeInferenceProto
	SqlOperandTypeInferenceProto isSqlOperandTypeInferenceProto_SqlOperandTypeInferenceProto `protobuf_oneof:"sqlOperandTypeInferenceProto"`
}

func (x *SqlOperandTypeInferenceProto) Reset() {
	*x = SqlOperandTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[91]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperandTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperandTypeInferenceProto) ProtoMessage() {}

func (x *SqlOperandTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[91]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperandTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*SqlOperandTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{91}
}

func (m *SqlOperandTypeInferenceProto) GetSqlOperandTypeInferenceProto() isSqlOperandTypeInferenceProto_SqlOperandTypeInferenceProto {
	if m != nil {
		return m.SqlOperandTypeInferenceProto
	}
	return nil
}

func (x *SqlOperandTypeInferenceProto) GetExplicitOperandTypeInferenceProto() *ExplicitOperandTypeInferenceProto {
	if x, ok := x.GetSqlOperandTypeInferenceProto().(*SqlOperandTypeInferenceProto_ExplicitOperandTypeInferenceProto); ok {
		return x.ExplicitOperandTypeInferenceProto
	}
	return nil
}

type isSqlOperandTypeInferenceProto_SqlOperandTypeInferenceProto interface {
	isSqlOperandTypeInferenceProto_SqlOperandTypeInferenceProto()
}

type SqlOperandTypeInferenceProto_ExplicitOperandTypeInferenceProto struct {
	ExplicitOperandTypeInferenceProto *ExplicitOperandTypeInferenceProto `protobuf:"bytes,1,opt,name=explicitOperandTypeInferenceProto,proto3,oneof"`
}

func (*SqlOperandTypeInferenceProto_ExplicitOperandTypeInferenceProto) isSqlOperandTypeInferenceProto_SqlOperandTypeInferenceProto() {
}

// Java Class: org.apache.calcite.sql.type.ExplicitOperandTypeInference
type ExplicitOperandTypeInferenceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamTypes []*RelDataTypeProto `protobuf:"bytes,1,rep,name=paramTypes,proto3" json:"paramTypes,omitempty"`
}

func (x *ExplicitOperandTypeInferenceProto) Reset() {
	*x = ExplicitOperandTypeInferenceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[92]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitOperandTypeInferenceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitOperandTypeInferenceProto) ProtoMessage() {}

func (x *ExplicitOperandTypeInferenceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[92]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitOperandTypeInferenceProto.ProtoReflect.Descriptor instead.
func (*ExplicitOperandTypeInferenceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{92}
}

func (x *ExplicitOperandTypeInferenceProto) GetParamTypes() []*RelDataTypeProto {
	if x != nil {
		return x.ParamTypes
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.SqlOperandTypeChecker
type SqlOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlOperandTypeCheckerProto:
	//
	//	*SqlOperandTypeCheckerProto_SqlOperandMetadataProto
	//	*SqlOperandTypeCheckerProto_SetopOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_ExplicitOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_AssignableOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_MultisetOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_CompositeOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_OperandMetadataImplProto
	//	*SqlOperandTypeCheckerProto_LiteralOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_SameOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_FamilyOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto
	//	*SqlOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto
	//	*SqlOperandTypeCheckerProto_ComparableOperandTypeCheckerProto
	SqlOperandTypeCheckerProto isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto `protobuf_oneof:"sqlOperandTypeCheckerProto"`
}

func (x *SqlOperandTypeCheckerProto) Reset() {
	*x = SqlOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[93]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperandTypeCheckerProto) ProtoMessage() {}

func (x *SqlOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[93]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*SqlOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{93}
}

func (m *SqlOperandTypeCheckerProto) GetSqlOperandTypeCheckerProto() isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto {
	if m != nil {
		return m.SqlOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetSqlOperandMetadataProto() *SqlOperandMetadataProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_SqlOperandMetadataProto); ok {
		return x.SqlOperandMetadataProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetSetopOperandTypeCheckerProto() *SetopOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_SetopOperandTypeCheckerProto); ok {
		return x.SetopOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetExplicitOperandTypeCheckerProto() *ExplicitOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_ExplicitOperandTypeCheckerProto); ok {
		return x.ExplicitOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetSqlSingleOperandTypeCheckerProto() *SqlSingleOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto); ok {
		return x.SqlSingleOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetAssignableOperandTypeCheckerProto() *AssignableOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_AssignableOperandTypeCheckerProto); ok {
		return x.AssignableOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetMultisetOperandTypeCheckerProto() *MultisetOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_MultisetOperandTypeCheckerProto); ok {
		return x.MultisetOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetCompositeOperandTypeCheckerProto() *CompositeOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_CompositeOperandTypeCheckerProto); ok {
		return x.CompositeOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetOperandMetadataImplProto() *OperandMetadataImplProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_OperandMetadataImplProto); ok {
		return x.OperandMetadataImplProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetLiteralOperandTypeCheckerProto() *LiteralOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_LiteralOperandTypeCheckerProto); ok {
		return x.LiteralOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetSameOperandTypeCheckerProto() *SameOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_SameOperandTypeCheckerProto); ok {
		return x.SameOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetFamilyOperandTypeCheckerProto() *FamilyOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_FamilyOperandTypeCheckerProto); ok {
		return x.FamilyOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetCompositeSingleOperandTypeCheckerProto() *CompositeSingleOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto); ok {
		return x.CompositeSingleOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetSameOperandTypeExceptLastOperandCheckerProto() *SameOperandTypeExceptLastOperandCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto); ok {
		return x.SameOperandTypeExceptLastOperandCheckerProto
	}
	return nil
}

func (x *SqlOperandTypeCheckerProto) GetComparableOperandTypeCheckerProto() *ComparableOperandTypeCheckerProto {
	if x, ok := x.GetSqlOperandTypeCheckerProto().(*SqlOperandTypeCheckerProto_ComparableOperandTypeCheckerProto); ok {
		return x.ComparableOperandTypeCheckerProto
	}
	return nil
}

type isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto interface {
	isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto()
}

type SqlOperandTypeCheckerProto_SqlOperandMetadataProto struct {
	SqlOperandMetadataProto *SqlOperandMetadataProto `protobuf:"bytes,1,opt,name=sqlOperandMetadataProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_SetopOperandTypeCheckerProto struct {
	SetopOperandTypeCheckerProto *SetopOperandTypeCheckerProto `protobuf:"bytes,2,opt,name=setopOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_ExplicitOperandTypeCheckerProto struct {
	ExplicitOperandTypeCheckerProto *ExplicitOperandTypeCheckerProto `protobuf:"bytes,3,opt,name=explicitOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto struct {
	SqlSingleOperandTypeCheckerProto *SqlSingleOperandTypeCheckerProto `protobuf:"bytes,4,opt,name=sqlSingleOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_AssignableOperandTypeCheckerProto struct {
	AssignableOperandTypeCheckerProto *AssignableOperandTypeCheckerProto `protobuf:"bytes,5,opt,name=assignableOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_MultisetOperandTypeCheckerProto struct {
	MultisetOperandTypeCheckerProto *MultisetOperandTypeCheckerProto `protobuf:"bytes,6,opt,name=multisetOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_CompositeOperandTypeCheckerProto struct {
	CompositeOperandTypeCheckerProto *CompositeOperandTypeCheckerProto `protobuf:"bytes,7,opt,name=compositeOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_OperandMetadataImplProto struct {
	OperandMetadataImplProto *OperandMetadataImplProto `protobuf:"bytes,8,opt,name=operandMetadataImplProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_LiteralOperandTypeCheckerProto struct {
	LiteralOperandTypeCheckerProto *LiteralOperandTypeCheckerProto `protobuf:"bytes,9,opt,name=literalOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_SameOperandTypeCheckerProto struct {
	SameOperandTypeCheckerProto *SameOperandTypeCheckerProto `protobuf:"bytes,10,opt,name=sameOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_FamilyOperandTypeCheckerProto struct {
	FamilyOperandTypeCheckerProto *FamilyOperandTypeCheckerProto `protobuf:"bytes,11,opt,name=familyOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto struct {
	CompositeSingleOperandTypeCheckerProto *CompositeSingleOperandTypeCheckerProto `protobuf:"bytes,12,opt,name=compositeSingleOperandTypeCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto struct {
	SameOperandTypeExceptLastOperandCheckerProto *SameOperandTypeExceptLastOperandCheckerProto `protobuf:"bytes,13,opt,name=sameOperandTypeExceptLastOperandCheckerProto,proto3,oneof"`
}

type SqlOperandTypeCheckerProto_ComparableOperandTypeCheckerProto struct {
	ComparableOperandTypeCheckerProto *ComparableOperandTypeCheckerProto `protobuf:"bytes,14,opt,name=comparableOperandTypeCheckerProto,proto3,oneof"`
}

func (*SqlOperandTypeCheckerProto_SqlOperandMetadataProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_SetopOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_ExplicitOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_AssignableOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_MultisetOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_CompositeOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_OperandMetadataImplProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_LiteralOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_SameOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_FamilyOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

func (*SqlOperandTypeCheckerProto_ComparableOperandTypeCheckerProto) isSqlOperandTypeCheckerProto_SqlOperandTypeCheckerProto() {
}

// Java Class: org.apache.calcite.sql.type.SqlOperandMetadata
type SqlOperandMetadataProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlOperandMetadataProto:
	//
	//	*SqlOperandMetadataProto_OperandMetadataImplProto
	SqlOperandMetadataProto isSqlOperandMetadataProto_SqlOperandMetadataProto `protobuf_oneof:"sqlOperandMetadataProto"`
}

func (x *SqlOperandMetadataProto) Reset() {
	*x = SqlOperandMetadataProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[94]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperandMetadataProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperandMetadataProto) ProtoMessage() {}

func (x *SqlOperandMetadataProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[94]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperandMetadataProto.ProtoReflect.Descriptor instead.
func (*SqlOperandMetadataProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{94}
}

func (m *SqlOperandMetadataProto) GetSqlOperandMetadataProto() isSqlOperandMetadataProto_SqlOperandMetadataProto {
	if m != nil {
		return m.SqlOperandMetadataProto
	}
	return nil
}

func (x *SqlOperandMetadataProto) GetOperandMetadataImplProto() *OperandMetadataImplProto {
	if x, ok := x.GetSqlOperandMetadataProto().(*SqlOperandMetadataProto_OperandMetadataImplProto); ok {
		return x.OperandMetadataImplProto
	}
	return nil
}

type isSqlOperandMetadataProto_SqlOperandMetadataProto interface {
	isSqlOperandMetadataProto_SqlOperandMetadataProto()
}

type SqlOperandMetadataProto_OperandMetadataImplProto struct {
	OperandMetadataImplProto *OperandMetadataImplProto `protobuf:"bytes,1,opt,name=operandMetadataImplProto,proto3,oneof"`
}

func (*SqlOperandMetadataProto_OperandMetadataImplProto) isSqlOperandMetadataProto_SqlOperandMetadataProto() {
}

// Java Class: org.apache.calcite.sql.type.OperandMetadataImpl
type OperandMetadataImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamTypesFactory *FunctionProto       `protobuf:"bytes,1,opt,name=paramTypesFactory,proto3" json:"paramTypesFactory,omitempty"`
	ParamNameFn       *IntFunctionProto    `protobuf:"bytes,2,opt,name=paramNameFn,proto3" json:"paramNameFn,omitempty"`
	Families          []SqlTypeFamilyProto `protobuf:"varint,3,rep,packed,name=families,proto3,enum=rill.sql.v1.SqlTypeFamilyProto" json:"families,omitempty"`
	Optional          *PredicateProto      `protobuf:"bytes,4,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *OperandMetadataImplProto) Reset() {
	*x = OperandMetadataImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[95]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OperandMetadataImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OperandMetadataImplProto) ProtoMessage() {}

func (x *OperandMetadataImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[95]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OperandMetadataImplProto.ProtoReflect.Descriptor instead.
func (*OperandMetadataImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{95}
}

func (x *OperandMetadataImplProto) GetParamTypesFactory() *FunctionProto {
	if x != nil {
		return x.ParamTypesFactory
	}
	return nil
}

func (x *OperandMetadataImplProto) GetParamNameFn() *IntFunctionProto {
	if x != nil {
		return x.ParamNameFn
	}
	return nil
}

func (x *OperandMetadataImplProto) GetFamilies() []SqlTypeFamilyProto {
	if x != nil {
		return x.Families
	}
	return nil
}

func (x *OperandMetadataImplProto) GetOptional() *PredicateProto {
	if x != nil {
		return x.Optional
	}
	return nil
}

// Java Class: java.util.function.Function
type FunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FunctionProto) Reset() {
	*x = FunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[96]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionProto) ProtoMessage() {}

func (x *FunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[96]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionProto.ProtoReflect.Descriptor instead.
func (*FunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{96}
}

// Java Class: java.util.function.IntFunction
type IntFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *IntFunctionProto) Reset() {
	*x = IntFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[97]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IntFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IntFunctionProto) ProtoMessage() {}

func (x *IntFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[97]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IntFunctionProto.ProtoReflect.Descriptor instead.
func (*IntFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{97}
}

// Java Class: java.util.function.Predicate
type PredicateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *PredicateProto) Reset() {
	*x = PredicateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[98]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PredicateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PredicateProto) ProtoMessage() {}

func (x *PredicateProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[98]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PredicateProto.ProtoReflect.Descriptor instead.
func (*PredicateProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{98}
}

// Java Class: org.apache.calcite.sql.type.SetopOperandTypeChecker
type SetopOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SetopOperandTypeCheckerProto) Reset() {
	*x = SetopOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[99]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetopOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetopOperandTypeCheckerProto) ProtoMessage() {}

func (x *SetopOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[99]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetopOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*SetopOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{99}
}

// Java Class: org.apache.calcite.sql.type.ExplicitOperandTypeChecker
type ExplicitOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type *RelDataTypeProto `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ExplicitOperandTypeCheckerProto) Reset() {
	*x = ExplicitOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[100]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExplicitOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExplicitOperandTypeCheckerProto) ProtoMessage() {}

func (x *ExplicitOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[100]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExplicitOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*ExplicitOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{100}
}

func (x *ExplicitOperandTypeCheckerProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.SqlSingleOperandTypeChecker
type SqlSingleOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlSingleOperandTypeCheckerProto:
	//
	//	*SqlSingleOperandTypeCheckerProto_LiteralOperandTypeCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_SameOperandTypeCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_FamilyOperandTypeCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_ComparableOperandTypeCheckerProto
	//	*SqlSingleOperandTypeCheckerProto_OperandMetadataImplProto
	SqlSingleOperandTypeCheckerProto isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto `protobuf_oneof:"sqlSingleOperandTypeCheckerProto"`
}

func (x *SqlSingleOperandTypeCheckerProto) Reset() {
	*x = SqlSingleOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[101]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSingleOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSingleOperandTypeCheckerProto) ProtoMessage() {}

func (x *SqlSingleOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[101]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSingleOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*SqlSingleOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{101}
}

func (m *SqlSingleOperandTypeCheckerProto) GetSqlSingleOperandTypeCheckerProto() isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto {
	if m != nil {
		return m.SqlSingleOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetLiteralOperandTypeCheckerProto() *LiteralOperandTypeCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_LiteralOperandTypeCheckerProto); ok {
		return x.LiteralOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetSameOperandTypeCheckerProto() *SameOperandTypeCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_SameOperandTypeCheckerProto); ok {
		return x.SameOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetFamilyOperandTypeCheckerProto() *FamilyOperandTypeCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_FamilyOperandTypeCheckerProto); ok {
		return x.FamilyOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetCompositeSingleOperandTypeCheckerProto() *CompositeSingleOperandTypeCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto); ok {
		return x.CompositeSingleOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetSameOperandTypeExceptLastOperandCheckerProto() *SameOperandTypeExceptLastOperandCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto); ok {
		return x.SameOperandTypeExceptLastOperandCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetComparableOperandTypeCheckerProto() *ComparableOperandTypeCheckerProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_ComparableOperandTypeCheckerProto); ok {
		return x.ComparableOperandTypeCheckerProto
	}
	return nil
}

func (x *SqlSingleOperandTypeCheckerProto) GetOperandMetadataImplProto() *OperandMetadataImplProto {
	if x, ok := x.GetSqlSingleOperandTypeCheckerProto().(*SqlSingleOperandTypeCheckerProto_OperandMetadataImplProto); ok {
		return x.OperandMetadataImplProto
	}
	return nil
}

type isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto interface {
	isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto()
}

type SqlSingleOperandTypeCheckerProto_LiteralOperandTypeCheckerProto struct {
	LiteralOperandTypeCheckerProto *LiteralOperandTypeCheckerProto `protobuf:"bytes,1,opt,name=literalOperandTypeCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_SameOperandTypeCheckerProto struct {
	SameOperandTypeCheckerProto *SameOperandTypeCheckerProto `protobuf:"bytes,2,opt,name=sameOperandTypeCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_FamilyOperandTypeCheckerProto struct {
	FamilyOperandTypeCheckerProto *FamilyOperandTypeCheckerProto `protobuf:"bytes,3,opt,name=familyOperandTypeCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto struct {
	CompositeSingleOperandTypeCheckerProto *CompositeSingleOperandTypeCheckerProto `protobuf:"bytes,4,opt,name=compositeSingleOperandTypeCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto struct {
	SameOperandTypeExceptLastOperandCheckerProto *SameOperandTypeExceptLastOperandCheckerProto `protobuf:"bytes,5,opt,name=sameOperandTypeExceptLastOperandCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_ComparableOperandTypeCheckerProto struct {
	ComparableOperandTypeCheckerProto *ComparableOperandTypeCheckerProto `protobuf:"bytes,6,opt,name=comparableOperandTypeCheckerProto,proto3,oneof"`
}

type SqlSingleOperandTypeCheckerProto_OperandMetadataImplProto struct {
	OperandMetadataImplProto *OperandMetadataImplProto `protobuf:"bytes,7,opt,name=operandMetadataImplProto,proto3,oneof"`
}

func (*SqlSingleOperandTypeCheckerProto_LiteralOperandTypeCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_SameOperandTypeCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_FamilyOperandTypeCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_ComparableOperandTypeCheckerProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

func (*SqlSingleOperandTypeCheckerProto_OperandMetadataImplProto) isSqlSingleOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto() {
}

// Java Class: org.apache.calcite.sql.type.LiteralOperandTypeChecker
type LiteralOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllowNull bool `protobuf:"varint,1,opt,name=allowNull,proto3" json:"allowNull,omitempty"`
}

func (x *LiteralOperandTypeCheckerProto) Reset() {
	*x = LiteralOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[102]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiteralOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiteralOperandTypeCheckerProto) ProtoMessage() {}

func (x *LiteralOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[102]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiteralOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*LiteralOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{102}
}

func (x *LiteralOperandTypeCheckerProto) GetAllowNull() bool {
	if x != nil {
		return x.AllowNull
	}
	return false
}

// Java Class: org.apache.calcite.sql.type.SameOperandTypeChecker
type SameOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SameOperandTypeCheckerProto:
	//
	//	*SameOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto
	//	*SameOperandTypeCheckerProto_ComparableOperandTypeCheckerProto
	SameOperandTypeCheckerProto isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto `protobuf_oneof:"sameOperandTypeCheckerProto"`
	NOperands                   int32                                                     `protobuf:"zigzag32,3,opt,name=nOperands,proto3" json:"nOperands,omitempty"`
}

func (x *SameOperandTypeCheckerProto) Reset() {
	*x = SameOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[103]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SameOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SameOperandTypeCheckerProto) ProtoMessage() {}

func (x *SameOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[103]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SameOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*SameOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{103}
}

func (m *SameOperandTypeCheckerProto) GetSameOperandTypeCheckerProto() isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto {
	if m != nil {
		return m.SameOperandTypeCheckerProto
	}
	return nil
}

func (x *SameOperandTypeCheckerProto) GetSameOperandTypeExceptLastOperandCheckerProto() *SameOperandTypeExceptLastOperandCheckerProto {
	if x, ok := x.GetSameOperandTypeCheckerProto().(*SameOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto); ok {
		return x.SameOperandTypeExceptLastOperandCheckerProto
	}
	return nil
}

func (x *SameOperandTypeCheckerProto) GetComparableOperandTypeCheckerProto() *ComparableOperandTypeCheckerProto {
	if x, ok := x.GetSameOperandTypeCheckerProto().(*SameOperandTypeCheckerProto_ComparableOperandTypeCheckerProto); ok {
		return x.ComparableOperandTypeCheckerProto
	}
	return nil
}

func (x *SameOperandTypeCheckerProto) GetNOperands() int32 {
	if x != nil {
		return x.NOperands
	}
	return 0
}

type isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto interface {
	isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto()
}

type SameOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto struct {
	SameOperandTypeExceptLastOperandCheckerProto *SameOperandTypeExceptLastOperandCheckerProto `protobuf:"bytes,1,opt,name=sameOperandTypeExceptLastOperandCheckerProto,proto3,oneof"`
}

type SameOperandTypeCheckerProto_ComparableOperandTypeCheckerProto struct {
	ComparableOperandTypeCheckerProto *ComparableOperandTypeCheckerProto `protobuf:"bytes,2,opt,name=comparableOperandTypeCheckerProto,proto3,oneof"`
}

func (*SameOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto) isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto() {
}

func (*SameOperandTypeCheckerProto_ComparableOperandTypeCheckerProto) isSameOperandTypeCheckerProto_SameOperandTypeCheckerProto() {
}

// Java Class: org.apache.calcite.sql.type.SameOperandTypeExceptLastOperandChecker
type SameOperandTypeExceptLastOperandCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	LastOperandTypeName string `protobuf:"bytes,1,opt,name=lastOperandTypeName,proto3" json:"lastOperandTypeName,omitempty"`
	NOperands           int32  `protobuf:"zigzag32,2,opt,name=nOperands,proto3" json:"nOperands,omitempty"`
}

func (x *SameOperandTypeExceptLastOperandCheckerProto) Reset() {
	*x = SameOperandTypeExceptLastOperandCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[104]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SameOperandTypeExceptLastOperandCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SameOperandTypeExceptLastOperandCheckerProto) ProtoMessage() {}

func (x *SameOperandTypeExceptLastOperandCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[104]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SameOperandTypeExceptLastOperandCheckerProto.ProtoReflect.Descriptor instead.
func (*SameOperandTypeExceptLastOperandCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{104}
}

func (x *SameOperandTypeExceptLastOperandCheckerProto) GetLastOperandTypeName() string {
	if x != nil {
		return x.LastOperandTypeName
	}
	return ""
}

func (x *SameOperandTypeExceptLastOperandCheckerProto) GetNOperands() int32 {
	if x != nil {
		return x.NOperands
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.ComparableOperandTypeChecker
type ComparableOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiredComparability RelDataTypeComparabilityProto `protobuf:"varint,1,opt,name=requiredComparability,proto3,enum=rill.sql.v1.RelDataTypeComparabilityProto" json:"requiredComparability,omitempty"`
	Consistency           ConsistencyProto              `protobuf:"varint,2,opt,name=consistency,proto3,enum=rill.sql.v1.ConsistencyProto" json:"consistency,omitempty"`
	NOperands             int32                         `protobuf:"zigzag32,3,opt,name=nOperands,proto3" json:"nOperands,omitempty"`
}

func (x *ComparableOperandTypeCheckerProto) Reset() {
	*x = ComparableOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[105]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComparableOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComparableOperandTypeCheckerProto) ProtoMessage() {}

func (x *ComparableOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[105]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComparableOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*ComparableOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{105}
}

func (x *ComparableOperandTypeCheckerProto) GetRequiredComparability() RelDataTypeComparabilityProto {
	if x != nil {
		return x.RequiredComparability
	}
	return RelDataTypeComparabilityProto_RelDataTypeComparabilityProto_NONE_
}

func (x *ComparableOperandTypeCheckerProto) GetConsistency() ConsistencyProto {
	if x != nil {
		return x.Consistency
	}
	return ConsistencyProto_ConsistencyProto_NONE_
}

func (x *ComparableOperandTypeCheckerProto) GetNOperands() int32 {
	if x != nil {
		return x.NOperands
	}
	return 0
}

// Java Class: org.apache.calcite.sql.type.FamilyOperandTypeChecker
type FamilyOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FamilyOperandTypeCheckerProto:
	//
	//	*FamilyOperandTypeCheckerProto_OperandMetadataImplProto
	FamilyOperandTypeCheckerProto isFamilyOperandTypeCheckerProto_FamilyOperandTypeCheckerProto `protobuf_oneof:"familyOperandTypeCheckerProto"`
	Families                      []SqlTypeFamilyProto                                          `protobuf:"varint,2,rep,packed,name=families,proto3,enum=rill.sql.v1.SqlTypeFamilyProto" json:"families,omitempty"`
	Optional                      *PredicateProto                                               `protobuf:"bytes,3,opt,name=optional,proto3" json:"optional,omitempty"`
}

func (x *FamilyOperandTypeCheckerProto) Reset() {
	*x = FamilyOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[106]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FamilyOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FamilyOperandTypeCheckerProto) ProtoMessage() {}

func (x *FamilyOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[106]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FamilyOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*FamilyOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{106}
}

func (m *FamilyOperandTypeCheckerProto) GetFamilyOperandTypeCheckerProto() isFamilyOperandTypeCheckerProto_FamilyOperandTypeCheckerProto {
	if m != nil {
		return m.FamilyOperandTypeCheckerProto
	}
	return nil
}

func (x *FamilyOperandTypeCheckerProto) GetOperandMetadataImplProto() *OperandMetadataImplProto {
	if x, ok := x.GetFamilyOperandTypeCheckerProto().(*FamilyOperandTypeCheckerProto_OperandMetadataImplProto); ok {
		return x.OperandMetadataImplProto
	}
	return nil
}

func (x *FamilyOperandTypeCheckerProto) GetFamilies() []SqlTypeFamilyProto {
	if x != nil {
		return x.Families
	}
	return nil
}

func (x *FamilyOperandTypeCheckerProto) GetOptional() *PredicateProto {
	if x != nil {
		return x.Optional
	}
	return nil
}

type isFamilyOperandTypeCheckerProto_FamilyOperandTypeCheckerProto interface {
	isFamilyOperandTypeCheckerProto_FamilyOperandTypeCheckerProto()
}

type FamilyOperandTypeCheckerProto_OperandMetadataImplProto struct {
	OperandMetadataImplProto *OperandMetadataImplProto `protobuf:"bytes,1,opt,name=operandMetadataImplProto,proto3,oneof"`
}

func (*FamilyOperandTypeCheckerProto_OperandMetadataImplProto) isFamilyOperandTypeCheckerProto_FamilyOperandTypeCheckerProto() {
}

// Java Class: org.apache.calcite.sql.type.CompositeSingleOperandTypeChecker
type CompositeSingleOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Range             *SqlOperandCountRangeProto `protobuf:"bytes,1,opt,name=range,proto3" json:"range,omitempty"`
	Composition       CompositionProto           `protobuf:"varint,2,opt,name=composition,proto3,enum=rill.sql.v1.CompositionProto" json:"composition,omitempty"`
	AllowedSignatures string                     `protobuf:"bytes,3,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *CompositeSingleOperandTypeCheckerProto) Reset() {
	*x = CompositeSingleOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[107]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeSingleOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeSingleOperandTypeCheckerProto) ProtoMessage() {}

func (x *CompositeSingleOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[107]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeSingleOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*CompositeSingleOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{107}
}

func (x *CompositeSingleOperandTypeCheckerProto) GetRange() *SqlOperandCountRangeProto {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CompositeSingleOperandTypeCheckerProto) GetComposition() CompositionProto {
	if x != nil {
		return x.Composition
	}
	return CompositionProto_CompositionProto_AND_
}

func (x *CompositeSingleOperandTypeCheckerProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlOperandCountRange
type SqlOperandCountRangeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SqlOperandCountRangeProto) Reset() {
	*x = SqlOperandCountRangeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[108]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOperandCountRangeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOperandCountRangeProto) ProtoMessage() {}

func (x *SqlOperandCountRangeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[108]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOperandCountRangeProto.ProtoReflect.Descriptor instead.
func (*SqlOperandCountRangeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{108}
}

// Java Class: org.apache.calcite.sql.type.AssignableOperandTypeChecker
type AssignableOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ParamTypes []*RelDataTypeProto `protobuf:"bytes,1,rep,name=paramTypes,proto3" json:"paramTypes,omitempty"`
	ParamNames []string            `protobuf:"bytes,2,rep,name=paramNames,proto3" json:"paramNames,omitempty"`
}

func (x *AssignableOperandTypeCheckerProto) Reset() {
	*x = AssignableOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[109]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AssignableOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AssignableOperandTypeCheckerProto) ProtoMessage() {}

func (x *AssignableOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[109]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AssignableOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*AssignableOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{109}
}

func (x *AssignableOperandTypeCheckerProto) GetParamTypes() []*RelDataTypeProto {
	if x != nil {
		return x.ParamTypes
	}
	return nil
}

func (x *AssignableOperandTypeCheckerProto) GetParamNames() []string {
	if x != nil {
		return x.ParamNames
	}
	return nil
}

// Java Class: org.apache.calcite.sql.type.MultisetOperandTypeChecker
type MultisetOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MultisetOperandTypeCheckerProto) Reset() {
	*x = MultisetOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[110]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultisetOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultisetOperandTypeCheckerProto) ProtoMessage() {}

func (x *MultisetOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[110]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultisetOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*MultisetOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{110}
}

// Java Class: org.apache.calcite.sql.type.CompositeOperandTypeChecker
type CompositeOperandTypeCheckerProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CompositeOperandTypeCheckerProto:
	//
	//	*CompositeOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto
	CompositeOperandTypeCheckerProto isCompositeOperandTypeCheckerProto_CompositeOperandTypeCheckerProto `protobuf_oneof:"compositeOperandTypeCheckerProto"`
	Range                            *SqlOperandCountRangeProto                                          `protobuf:"bytes,2,opt,name=range,proto3" json:"range,omitempty"`
	Composition                      CompositionProto                                                    `protobuf:"varint,3,opt,name=composition,proto3,enum=rill.sql.v1.CompositionProto" json:"composition,omitempty"`
	AllowedSignatures                string                                                              `protobuf:"bytes,4,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *CompositeOperandTypeCheckerProto) Reset() {
	*x = CompositeOperandTypeCheckerProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[111]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CompositeOperandTypeCheckerProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompositeOperandTypeCheckerProto) ProtoMessage() {}

func (x *CompositeOperandTypeCheckerProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[111]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompositeOperandTypeCheckerProto.ProtoReflect.Descriptor instead.
func (*CompositeOperandTypeCheckerProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{111}
}

func (m *CompositeOperandTypeCheckerProto) GetCompositeOperandTypeCheckerProto() isCompositeOperandTypeCheckerProto_CompositeOperandTypeCheckerProto {
	if m != nil {
		return m.CompositeOperandTypeCheckerProto
	}
	return nil
}

func (x *CompositeOperandTypeCheckerProto) GetCompositeSingleOperandTypeCheckerProto() *CompositeSingleOperandTypeCheckerProto {
	if x, ok := x.GetCompositeOperandTypeCheckerProto().(*CompositeOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto); ok {
		return x.CompositeSingleOperandTypeCheckerProto
	}
	return nil
}

func (x *CompositeOperandTypeCheckerProto) GetRange() *SqlOperandCountRangeProto {
	if x != nil {
		return x.Range
	}
	return nil
}

func (x *CompositeOperandTypeCheckerProto) GetComposition() CompositionProto {
	if x != nil {
		return x.Composition
	}
	return CompositionProto_CompositionProto_AND_
}

func (x *CompositeOperandTypeCheckerProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isCompositeOperandTypeCheckerProto_CompositeOperandTypeCheckerProto interface {
	isCompositeOperandTypeCheckerProto_CompositeOperandTypeCheckerProto()
}

type CompositeOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto struct {
	CompositeSingleOperandTypeCheckerProto *CompositeSingleOperandTypeCheckerProto `protobuf:"bytes,1,opt,name=compositeSingleOperandTypeCheckerProto,proto3,oneof"`
}

func (*CompositeOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto) isCompositeOperandTypeCheckerProto_CompositeOperandTypeCheckerProto() {
}

// Java Class: org.apache.calcite.sql.SqlProcedureCallOperator
type SqlProcedureCallOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlProcedureCallOperatorProto) Reset() {
	*x = SqlProcedureCallOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[112]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlProcedureCallOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlProcedureCallOperatorProto) ProtoMessage() {}

func (x *SqlProcedureCallOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[112]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlProcedureCallOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlProcedureCallOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{112}
}

func (x *SqlProcedureCallOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlProcedureCallOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlProcedureCallOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlProcedureCallOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlProcedureCallOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlProcedureCallOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlProcedureCallOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlProcedureCallOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlDescriptorOperator
type SqlDescriptorOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDescriptorOperatorProto) Reset() {
	*x = SqlDescriptorOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[113]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDescriptorOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDescriptorOperatorProto) ProtoMessage() {}

func (x *SqlDescriptorOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[113]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDescriptorOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlDescriptorOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{113}
}

func (x *SqlDescriptorOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDescriptorOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDescriptorOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDescriptorOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDescriptorOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDescriptorOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDescriptorOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDescriptorOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlPostfixOperator
type SqlPostfixOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlPostfixOperatorProto:
	//
	//	*SqlPostfixOperatorProto_SqlJsonValueExpressionOperatorProto
	SqlPostfixOperatorProto isSqlPostfixOperatorProto_SqlPostfixOperatorProto `protobuf_oneof:"sqlPostfixOperatorProto"`
	Name                    string                                            `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                    SqlKindProto                                      `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                int32                                             `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec               int32                                             `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference     *SqlReturnTypeInferenceProto                      `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference    *SqlOperandTypeInferenceProto                     `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker      *SqlOperandTypeCheckerProto                       `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures       string                                            `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlPostfixOperatorProto) Reset() {
	*x = SqlPostfixOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[114]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlPostfixOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlPostfixOperatorProto) ProtoMessage() {}

func (x *SqlPostfixOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[114]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlPostfixOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlPostfixOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{114}
}

func (m *SqlPostfixOperatorProto) GetSqlPostfixOperatorProto() isSqlPostfixOperatorProto_SqlPostfixOperatorProto {
	if m != nil {
		return m.SqlPostfixOperatorProto
	}
	return nil
}

func (x *SqlPostfixOperatorProto) GetSqlJsonValueExpressionOperatorProto() *SqlJsonValueExpressionOperatorProto {
	if x, ok := x.GetSqlPostfixOperatorProto().(*SqlPostfixOperatorProto_SqlJsonValueExpressionOperatorProto); ok {
		return x.SqlJsonValueExpressionOperatorProto
	}
	return nil
}

func (x *SqlPostfixOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlPostfixOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlPostfixOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlPostfixOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlPostfixOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlPostfixOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlPostfixOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlPostfixOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlPostfixOperatorProto_SqlPostfixOperatorProto interface {
	isSqlPostfixOperatorProto_SqlPostfixOperatorProto()
}

type SqlPostfixOperatorProto_SqlJsonValueExpressionOperatorProto struct {
	SqlJsonValueExpressionOperatorProto *SqlJsonValueExpressionOperatorProto `protobuf:"bytes,1,opt,name=sqlJsonValueExpressionOperatorProto,proto3,oneof"`
}

func (*SqlPostfixOperatorProto_SqlJsonValueExpressionOperatorProto) isSqlPostfixOperatorProto_SqlPostfixOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonValueExpressionOperator
type SqlJsonValueExpressionOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonValueExpressionOperatorProto) Reset() {
	*x = SqlJsonValueExpressionOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[115]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonValueExpressionOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonValueExpressionOperatorProto) ProtoMessage() {}

func (x *SqlJsonValueExpressionOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[115]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonValueExpressionOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlJsonValueExpressionOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{115}
}

func (x *SqlJsonValueExpressionOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonValueExpressionOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonValueExpressionOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonValueExpressionOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonValueExpressionOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonValueExpressionOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonValueExpressionOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonValueExpressionOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlFunction
type SqlFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlFunctionProto:
	//
	//	*SqlFunctionProto_SqlUnresolvedFunctionProto
	//	*SqlFunctionProto_SqlJdbcFunctionCallProto
	//	*SqlFunctionProto_SqlUserDefinedTableMacroProto
	//	*SqlFunctionProto_SqlUserDefinedFunctionProto
	//	*SqlFunctionProto_SqlExtractFunctionProto
	//	*SqlFunctionProto_SqlTranslate3FunctionProto
	//	*SqlFunctionProto_SqlTrimFunctionProto
	//	*SqlFunctionProto_SqlSubstringFunctionProto
	//	*SqlFunctionProto_SqlJsonDepthFunctionProto
	//	*SqlFunctionProto_SqlAbstractTimeFunctionProto
	//	*SqlFunctionProto_SqlRandFunctionProto
	//	*SqlFunctionProto_SqlCoalesceFunctionProto
	//	*SqlFunctionProto_SqlJsonTypeFunctionProto
	//	*SqlFunctionProto_SqlJsonValueFunctionProto
	//	*SqlFunctionProto_SqlDatePartFunctionProto
	//	*SqlFunctionProto_SqlJsonObjectFunctionProto
	//	*SqlFunctionProto_SqlNullifFunctionProto
	//	*SqlFunctionProto_SqlTimestampAddFunctionProto
	//	*SqlFunctionProto_SqlJsonPrettyFunctionProto
	//	*SqlFunctionProto_SqlBaseContextVariableProto
	//	*SqlFunctionProto_SqlConvertFunctionProto
	//	*SqlFunctionProto_SqlGroupedWindowFunctionProto
	//	*SqlFunctionProto_SqlTypeConstructorFunctionProto
	//	*SqlFunctionProto_SqlTimestampDiffFunctionProto
	//	*SqlFunctionProto_SqlJsonKeysFunctionProto
	//	*SqlFunctionProto_SqlJsonLengthFunctionProto
	//	*SqlFunctionProto_SqlCastFunctionProto
	//	*SqlFunctionProto_SqlPositionFunctionProto
	//	*SqlFunctionProto_SqlJsonRemoveFunctionProto
	//	*SqlFunctionProto_SqlMatchFunctionProto
	//	*SqlFunctionProto_SqlOverlayFunctionProto
	//	*SqlFunctionProto_SqlJsonArrayFunctionProto
	//	*SqlFunctionProto_SqlRandIntegerFunctionProto
	//	*SqlFunctionProto_SqlCurrentDateFunctionProto
	//	*SqlFunctionProto_SqlAggFunctionProto
	//	*SqlFunctionProto_SqlWindowTableFunctionProto
	//	*SqlFunctionProto_SqlRegexpReplaceFunctionProto
	//	*SqlFunctionProto_SqlMonotonicUnaryFunctionProto
	//	*SqlFunctionProto_SqlJsonStorageSizeFunctionProto
	//	*SqlFunctionProto_SqlJsonQueryFunctionProto
	//	*SqlFunctionProto_SqlJsonExistsFunctionProto
	//	*SqlFunctionProto_SqlUserDefinedTableFunctionProto
	//	*SqlFunctionProto_SqlStringContextVariableProto
	//	*SqlFunctionProto_SqlUserDefinedAggFunctionProto
	//	*SqlFunctionProto_SqlCovarAggFunctionProto
	//	*SqlFunctionProto_SqlJsonArrayAggAggFunctionProto
	//	*SqlFunctionProto_SqlSumAggFunctionProto
	//	*SqlFunctionProto_SqlMinMaxAggFunctionProto
	//	*SqlFunctionProto_SqlCountAggFunctionProto
	//	*SqlFunctionProto_SqlAnyValueAggFunctionProto
	//	*SqlFunctionProto_SqlAvgAggFunctionProto
	//	*SqlFunctionProto_SqlNthValueAggFunctionProto
	//	*SqlFunctionProto_SqlBasicAggFunctionProto
	//	*SqlFunctionProto_SqlSingleValueAggFunctionProto
	//	*SqlFunctionProto_SqlSumEmptyIsZeroAggFunctionProto
	//	*SqlFunctionProto_SqlListaggAggFunctionProto
	//	*SqlFunctionProto_SqlNtileAggFunctionProto
	//	*SqlFunctionProto_SqlJsonObjectAggAggFunctionProto
	//	*SqlFunctionProto_SqlFirstLastValueAggFunctionProto
	//	*SqlFunctionProto_SqlAbstractGroupFunctionProto
	//	*SqlFunctionProto_SqlHistogramAggFunctionProto
	//	*SqlFunctionProto_SqlRankFunctionProto
	//	*SqlFunctionProto_SqlLeadLagAggFunctionProto
	//	*SqlFunctionProto_SqlBitOpAggFunctionProto
	//	*SqlFunctionProto_SqlTumbleTableFunctionProto
	//	*SqlFunctionProto_SqlSessionTableFunctionProto
	//	*SqlFunctionProto_SqlHopTableFunctionProto
	//	*SqlFunctionProto_SqlFloorFunctionProto
	//	*SqlFunctionProto_SqlRegrCountAggFunctionProto
	//	*SqlFunctionProto_SqlGroupIdFunctionProto
	//	*SqlFunctionProto_SqlGroupingIdFunctionProto
	//	*SqlFunctionProto_SqlGroupingFunctionProto
	SqlFunctionProto     isSqlFunctionProto_SqlFunctionProto `protobuf_oneof:"sqlFunctionProto"`
	Category             SqlFunctionCategoryProto            `protobuf:"varint,73,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto                 `protobuf:"bytes,74,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                              `protobuf:"bytes,75,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                        `protobuf:"varint,76,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                               `protobuf:"zigzag32,77,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                               `protobuf:"zigzag32,78,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto        `protobuf:"bytes,79,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto       `protobuf:"bytes,80,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto         `protobuf:"bytes,81,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                              `protobuf:"bytes,82,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlFunctionProto) Reset() {
	*x = SqlFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[116]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFunctionProto) ProtoMessage() {}

func (x *SqlFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[116]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{116}
}

func (m *SqlFunctionProto) GetSqlFunctionProto() isSqlFunctionProto_SqlFunctionProto {
	if m != nil {
		return m.SqlFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlUnresolvedFunctionProto() *SqlUnresolvedFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlUnresolvedFunctionProto); ok {
		return x.SqlUnresolvedFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJdbcFunctionCallProto() *SqlJdbcFunctionCallProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJdbcFunctionCallProto); ok {
		return x.SqlJdbcFunctionCallProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlUserDefinedTableMacroProto() *SqlUserDefinedTableMacroProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlUserDefinedTableMacroProto); ok {
		return x.SqlUserDefinedTableMacroProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlUserDefinedFunctionProto() *SqlUserDefinedFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlUserDefinedFunctionProto); ok {
		return x.SqlUserDefinedFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlExtractFunctionProto() *SqlExtractFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlExtractFunctionProto); ok {
		return x.SqlExtractFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTranslate3FunctionProto() *SqlTranslate3FunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTranslate3FunctionProto); ok {
		return x.SqlTranslate3FunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTrimFunctionProto() *SqlTrimFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTrimFunctionProto); ok {
		return x.SqlTrimFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlSubstringFunctionProto() *SqlSubstringFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlSubstringFunctionProto); ok {
		return x.SqlSubstringFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonDepthFunctionProto() *SqlJsonDepthFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonDepthFunctionProto); ok {
		return x.SqlJsonDepthFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlAbstractTimeFunctionProto() *SqlAbstractTimeFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlAbstractTimeFunctionProto); ok {
		return x.SqlAbstractTimeFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlRandFunctionProto() *SqlRandFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlRandFunctionProto); ok {
		return x.SqlRandFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlCoalesceFunctionProto() *SqlCoalesceFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlCoalesceFunctionProto); ok {
		return x.SqlCoalesceFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonTypeFunctionProto() *SqlJsonTypeFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonTypeFunctionProto); ok {
		return x.SqlJsonTypeFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonValueFunctionProto() *SqlJsonValueFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonValueFunctionProto); ok {
		return x.SqlJsonValueFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlDatePartFunctionProto() *SqlDatePartFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlDatePartFunctionProto); ok {
		return x.SqlDatePartFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonObjectFunctionProto() *SqlJsonObjectFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonObjectFunctionProto); ok {
		return x.SqlJsonObjectFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlNullifFunctionProto() *SqlNullifFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlNullifFunctionProto); ok {
		return x.SqlNullifFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTimestampAddFunctionProto() *SqlTimestampAddFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTimestampAddFunctionProto); ok {
		return x.SqlTimestampAddFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonPrettyFunctionProto() *SqlJsonPrettyFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonPrettyFunctionProto); ok {
		return x.SqlJsonPrettyFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlBaseContextVariableProto() *SqlBaseContextVariableProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlBaseContextVariableProto); ok {
		return x.SqlBaseContextVariableProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlConvertFunctionProto() *SqlConvertFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlConvertFunctionProto); ok {
		return x.SqlConvertFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlGroupedWindowFunctionProto() *SqlGroupedWindowFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlGroupedWindowFunctionProto); ok {
		return x.SqlGroupedWindowFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTypeConstructorFunctionProto() *SqlTypeConstructorFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTypeConstructorFunctionProto); ok {
		return x.SqlTypeConstructorFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTimestampDiffFunctionProto() *SqlTimestampDiffFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTimestampDiffFunctionProto); ok {
		return x.SqlTimestampDiffFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonKeysFunctionProto() *SqlJsonKeysFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonKeysFunctionProto); ok {
		return x.SqlJsonKeysFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonLengthFunctionProto() *SqlJsonLengthFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonLengthFunctionProto); ok {
		return x.SqlJsonLengthFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlCastFunctionProto() *SqlCastFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlCastFunctionProto); ok {
		return x.SqlCastFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlPositionFunctionProto() *SqlPositionFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlPositionFunctionProto); ok {
		return x.SqlPositionFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonRemoveFunctionProto() *SqlJsonRemoveFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonRemoveFunctionProto); ok {
		return x.SqlJsonRemoveFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlMatchFunctionProto() *SqlMatchFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlMatchFunctionProto); ok {
		return x.SqlMatchFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlOverlayFunctionProto() *SqlOverlayFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlOverlayFunctionProto); ok {
		return x.SqlOverlayFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonArrayFunctionProto() *SqlJsonArrayFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonArrayFunctionProto); ok {
		return x.SqlJsonArrayFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlRandIntegerFunctionProto() *SqlRandIntegerFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlRandIntegerFunctionProto); ok {
		return x.SqlRandIntegerFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlCurrentDateFunctionProto() *SqlCurrentDateFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlCurrentDateFunctionProto); ok {
		return x.SqlCurrentDateFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlAggFunctionProto() *SqlAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlAggFunctionProto); ok {
		return x.SqlAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlWindowTableFunctionProto() *SqlWindowTableFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlWindowTableFunctionProto); ok {
		return x.SqlWindowTableFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlRegexpReplaceFunctionProto() *SqlRegexpReplaceFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlRegexpReplaceFunctionProto); ok {
		return x.SqlRegexpReplaceFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlMonotonicUnaryFunctionProto() *SqlMonotonicUnaryFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlMonotonicUnaryFunctionProto); ok {
		return x.SqlMonotonicUnaryFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonStorageSizeFunctionProto() *SqlJsonStorageSizeFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonStorageSizeFunctionProto); ok {
		return x.SqlJsonStorageSizeFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonQueryFunctionProto() *SqlJsonQueryFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonQueryFunctionProto); ok {
		return x.SqlJsonQueryFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonExistsFunctionProto() *SqlJsonExistsFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonExistsFunctionProto); ok {
		return x.SqlJsonExistsFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlUserDefinedTableFunctionProto() *SqlUserDefinedTableFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlUserDefinedTableFunctionProto); ok {
		return x.SqlUserDefinedTableFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlStringContextVariableProto() *SqlStringContextVariableProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlStringContextVariableProto); ok {
		return x.SqlStringContextVariableProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlUserDefinedAggFunctionProto() *SqlUserDefinedAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlUserDefinedAggFunctionProto); ok {
		return x.SqlUserDefinedAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlCovarAggFunctionProto() *SqlCovarAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlCovarAggFunctionProto); ok {
		return x.SqlCovarAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonArrayAggAggFunctionProto() *SqlJsonArrayAggAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonArrayAggAggFunctionProto); ok {
		return x.SqlJsonArrayAggAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlSumAggFunctionProto() *SqlSumAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlSumAggFunctionProto); ok {
		return x.SqlSumAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlMinMaxAggFunctionProto() *SqlMinMaxAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlMinMaxAggFunctionProto); ok {
		return x.SqlMinMaxAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlCountAggFunctionProto() *SqlCountAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlCountAggFunctionProto); ok {
		return x.SqlCountAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlAnyValueAggFunctionProto() *SqlAnyValueAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlAnyValueAggFunctionProto); ok {
		return x.SqlAnyValueAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlAvgAggFunctionProto() *SqlAvgAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlAvgAggFunctionProto); ok {
		return x.SqlAvgAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlNthValueAggFunctionProto() *SqlNthValueAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlNthValueAggFunctionProto); ok {
		return x.SqlNthValueAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlBasicAggFunctionProto() *SqlBasicAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlBasicAggFunctionProto); ok {
		return x.SqlBasicAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlSingleValueAggFunctionProto() *SqlSingleValueAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlSingleValueAggFunctionProto); ok {
		return x.SqlSingleValueAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlSumEmptyIsZeroAggFunctionProto() *SqlSumEmptyIsZeroAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlSumEmptyIsZeroAggFunctionProto); ok {
		return x.SqlSumEmptyIsZeroAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlListaggAggFunctionProto() *SqlListaggAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlListaggAggFunctionProto); ok {
		return x.SqlListaggAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlNtileAggFunctionProto() *SqlNtileAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlNtileAggFunctionProto); ok {
		return x.SqlNtileAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlJsonObjectAggAggFunctionProto() *SqlJsonObjectAggAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlJsonObjectAggAggFunctionProto); ok {
		return x.SqlJsonObjectAggAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlFirstLastValueAggFunctionProto() *SqlFirstLastValueAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlFirstLastValueAggFunctionProto); ok {
		return x.SqlFirstLastValueAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlAbstractGroupFunctionProto() *SqlAbstractGroupFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlAbstractGroupFunctionProto); ok {
		return x.SqlAbstractGroupFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlHistogramAggFunctionProto() *SqlHistogramAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlHistogramAggFunctionProto); ok {
		return x.SqlHistogramAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlRankFunctionProto() *SqlRankFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlRankFunctionProto); ok {
		return x.SqlRankFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlLeadLagAggFunctionProto() *SqlLeadLagAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlLeadLagAggFunctionProto); ok {
		return x.SqlLeadLagAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlBitOpAggFunctionProto() *SqlBitOpAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlBitOpAggFunctionProto); ok {
		return x.SqlBitOpAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlTumbleTableFunctionProto() *SqlTumbleTableFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlTumbleTableFunctionProto); ok {
		return x.SqlTumbleTableFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlSessionTableFunctionProto() *SqlSessionTableFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlSessionTableFunctionProto); ok {
		return x.SqlSessionTableFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlHopTableFunctionProto() *SqlHopTableFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlHopTableFunctionProto); ok {
		return x.SqlHopTableFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlFloorFunctionProto() *SqlFloorFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlFloorFunctionProto); ok {
		return x.SqlFloorFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlRegrCountAggFunctionProto() *SqlRegrCountAggFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlRegrCountAggFunctionProto); ok {
		return x.SqlRegrCountAggFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlGroupIdFunctionProto() *SqlGroupIdFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlGroupIdFunctionProto); ok {
		return x.SqlGroupIdFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlGroupingIdFunctionProto() *SqlGroupingIdFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlGroupingIdFunctionProto); ok {
		return x.SqlGroupingIdFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetSqlGroupingFunctionProto() *SqlGroupingFunctionProto {
	if x, ok := x.GetSqlFunctionProto().(*SqlFunctionProto_SqlGroupingFunctionProto); ok {
		return x.SqlGroupingFunctionProto
	}
	return nil
}

func (x *SqlFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlFunctionProto_SqlFunctionProto interface {
	isSqlFunctionProto_SqlFunctionProto()
}

type SqlFunctionProto_SqlUnresolvedFunctionProto struct {
	SqlUnresolvedFunctionProto *SqlUnresolvedFunctionProto `protobuf:"bytes,1,opt,name=sqlUnresolvedFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJdbcFunctionCallProto struct {
	SqlJdbcFunctionCallProto *SqlJdbcFunctionCallProto `protobuf:"bytes,2,opt,name=sqlJdbcFunctionCallProto,proto3,oneof"`
}

type SqlFunctionProto_SqlUserDefinedTableMacroProto struct {
	SqlUserDefinedTableMacroProto *SqlUserDefinedTableMacroProto `protobuf:"bytes,3,opt,name=sqlUserDefinedTableMacroProto,proto3,oneof"`
}

type SqlFunctionProto_SqlUserDefinedFunctionProto struct {
	SqlUserDefinedFunctionProto *SqlUserDefinedFunctionProto `protobuf:"bytes,4,opt,name=sqlUserDefinedFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlExtractFunctionProto struct {
	SqlExtractFunctionProto *SqlExtractFunctionProto `protobuf:"bytes,5,opt,name=sqlExtractFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTranslate3FunctionProto struct {
	SqlTranslate3FunctionProto *SqlTranslate3FunctionProto `protobuf:"bytes,6,opt,name=sqlTranslate3FunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTrimFunctionProto struct {
	SqlTrimFunctionProto *SqlTrimFunctionProto `protobuf:"bytes,7,opt,name=sqlTrimFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlSubstringFunctionProto struct {
	SqlSubstringFunctionProto *SqlSubstringFunctionProto `protobuf:"bytes,8,opt,name=sqlSubstringFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonDepthFunctionProto struct {
	SqlJsonDepthFunctionProto *SqlJsonDepthFunctionProto `protobuf:"bytes,9,opt,name=sqlJsonDepthFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlAbstractTimeFunctionProto struct {
	SqlAbstractTimeFunctionProto *SqlAbstractTimeFunctionProto `protobuf:"bytes,10,opt,name=sqlAbstractTimeFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlRandFunctionProto struct {
	SqlRandFunctionProto *SqlRandFunctionProto `protobuf:"bytes,11,opt,name=sqlRandFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlCoalesceFunctionProto struct {
	SqlCoalesceFunctionProto *SqlCoalesceFunctionProto `protobuf:"bytes,12,opt,name=sqlCoalesceFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonTypeFunctionProto struct {
	SqlJsonTypeFunctionProto *SqlJsonTypeFunctionProto `protobuf:"bytes,13,opt,name=sqlJsonTypeFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonValueFunctionProto struct {
	SqlJsonValueFunctionProto *SqlJsonValueFunctionProto `protobuf:"bytes,14,opt,name=sqlJsonValueFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlDatePartFunctionProto struct {
	SqlDatePartFunctionProto *SqlDatePartFunctionProto `protobuf:"bytes,15,opt,name=sqlDatePartFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonObjectFunctionProto struct {
	SqlJsonObjectFunctionProto *SqlJsonObjectFunctionProto `protobuf:"bytes,16,opt,name=sqlJsonObjectFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlNullifFunctionProto struct {
	SqlNullifFunctionProto *SqlNullifFunctionProto `protobuf:"bytes,17,opt,name=sqlNullifFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTimestampAddFunctionProto struct {
	SqlTimestampAddFunctionProto *SqlTimestampAddFunctionProto `protobuf:"bytes,18,opt,name=sqlTimestampAddFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonPrettyFunctionProto struct {
	SqlJsonPrettyFunctionProto *SqlJsonPrettyFunctionProto `protobuf:"bytes,19,opt,name=sqlJsonPrettyFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlBaseContextVariableProto struct {
	SqlBaseContextVariableProto *SqlBaseContextVariableProto `protobuf:"bytes,20,opt,name=sqlBaseContextVariableProto,proto3,oneof"`
}

type SqlFunctionProto_SqlConvertFunctionProto struct {
	SqlConvertFunctionProto *SqlConvertFunctionProto `protobuf:"bytes,21,opt,name=sqlConvertFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlGroupedWindowFunctionProto struct {
	SqlGroupedWindowFunctionProto *SqlGroupedWindowFunctionProto `protobuf:"bytes,22,opt,name=sqlGroupedWindowFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTypeConstructorFunctionProto struct {
	SqlTypeConstructorFunctionProto *SqlTypeConstructorFunctionProto `protobuf:"bytes,23,opt,name=sqlTypeConstructorFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTimestampDiffFunctionProto struct {
	SqlTimestampDiffFunctionProto *SqlTimestampDiffFunctionProto `protobuf:"bytes,24,opt,name=sqlTimestampDiffFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonKeysFunctionProto struct {
	SqlJsonKeysFunctionProto *SqlJsonKeysFunctionProto `protobuf:"bytes,25,opt,name=sqlJsonKeysFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonLengthFunctionProto struct {
	SqlJsonLengthFunctionProto *SqlJsonLengthFunctionProto `protobuf:"bytes,26,opt,name=sqlJsonLengthFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlCastFunctionProto struct {
	SqlCastFunctionProto *SqlCastFunctionProto `protobuf:"bytes,27,opt,name=sqlCastFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlPositionFunctionProto struct {
	SqlPositionFunctionProto *SqlPositionFunctionProto `protobuf:"bytes,28,opt,name=sqlPositionFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonRemoveFunctionProto struct {
	SqlJsonRemoveFunctionProto *SqlJsonRemoveFunctionProto `protobuf:"bytes,29,opt,name=sqlJsonRemoveFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlMatchFunctionProto struct {
	SqlMatchFunctionProto *SqlMatchFunctionProto `protobuf:"bytes,30,opt,name=sqlMatchFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlOverlayFunctionProto struct {
	SqlOverlayFunctionProto *SqlOverlayFunctionProto `protobuf:"bytes,31,opt,name=sqlOverlayFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonArrayFunctionProto struct {
	SqlJsonArrayFunctionProto *SqlJsonArrayFunctionProto `protobuf:"bytes,32,opt,name=sqlJsonArrayFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlRandIntegerFunctionProto struct {
	SqlRandIntegerFunctionProto *SqlRandIntegerFunctionProto `protobuf:"bytes,33,opt,name=sqlRandIntegerFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlCurrentDateFunctionProto struct {
	SqlCurrentDateFunctionProto *SqlCurrentDateFunctionProto `protobuf:"bytes,34,opt,name=sqlCurrentDateFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlAggFunctionProto struct {
	SqlAggFunctionProto *SqlAggFunctionProto `protobuf:"bytes,35,opt,name=sqlAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlWindowTableFunctionProto struct {
	SqlWindowTableFunctionProto *SqlWindowTableFunctionProto `protobuf:"bytes,36,opt,name=sqlWindowTableFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlRegexpReplaceFunctionProto struct {
	SqlRegexpReplaceFunctionProto *SqlRegexpReplaceFunctionProto `protobuf:"bytes,37,opt,name=sqlRegexpReplaceFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlMonotonicUnaryFunctionProto struct {
	SqlMonotonicUnaryFunctionProto *SqlMonotonicUnaryFunctionProto `protobuf:"bytes,38,opt,name=sqlMonotonicUnaryFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonStorageSizeFunctionProto struct {
	SqlJsonStorageSizeFunctionProto *SqlJsonStorageSizeFunctionProto `protobuf:"bytes,39,opt,name=sqlJsonStorageSizeFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonQueryFunctionProto struct {
	SqlJsonQueryFunctionProto *SqlJsonQueryFunctionProto `protobuf:"bytes,40,opt,name=sqlJsonQueryFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonExistsFunctionProto struct {
	SqlJsonExistsFunctionProto *SqlJsonExistsFunctionProto `protobuf:"bytes,41,opt,name=sqlJsonExistsFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlUserDefinedTableFunctionProto struct {
	SqlUserDefinedTableFunctionProto *SqlUserDefinedTableFunctionProto `protobuf:"bytes,42,opt,name=sqlUserDefinedTableFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlStringContextVariableProto struct {
	SqlStringContextVariableProto *SqlStringContextVariableProto `protobuf:"bytes,43,opt,name=sqlStringContextVariableProto,proto3,oneof"`
}

type SqlFunctionProto_SqlUserDefinedAggFunctionProto struct {
	SqlUserDefinedAggFunctionProto *SqlUserDefinedAggFunctionProto `protobuf:"bytes,44,opt,name=sqlUserDefinedAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlCovarAggFunctionProto struct {
	SqlCovarAggFunctionProto *SqlCovarAggFunctionProto `protobuf:"bytes,45,opt,name=sqlCovarAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonArrayAggAggFunctionProto struct {
	SqlJsonArrayAggAggFunctionProto *SqlJsonArrayAggAggFunctionProto `protobuf:"bytes,46,opt,name=sqlJsonArrayAggAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlSumAggFunctionProto struct {
	SqlSumAggFunctionProto *SqlSumAggFunctionProto `protobuf:"bytes,47,opt,name=sqlSumAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlMinMaxAggFunctionProto struct {
	SqlMinMaxAggFunctionProto *SqlMinMaxAggFunctionProto `protobuf:"bytes,48,opt,name=sqlMinMaxAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlCountAggFunctionProto struct {
	SqlCountAggFunctionProto *SqlCountAggFunctionProto `protobuf:"bytes,49,opt,name=sqlCountAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlAnyValueAggFunctionProto struct {
	SqlAnyValueAggFunctionProto *SqlAnyValueAggFunctionProto `protobuf:"bytes,50,opt,name=sqlAnyValueAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlAvgAggFunctionProto struct {
	SqlAvgAggFunctionProto *SqlAvgAggFunctionProto `protobuf:"bytes,51,opt,name=sqlAvgAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlNthValueAggFunctionProto struct {
	SqlNthValueAggFunctionProto *SqlNthValueAggFunctionProto `protobuf:"bytes,52,opt,name=sqlNthValueAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlBasicAggFunctionProto struct {
	SqlBasicAggFunctionProto *SqlBasicAggFunctionProto `protobuf:"bytes,53,opt,name=sqlBasicAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlSingleValueAggFunctionProto struct {
	SqlSingleValueAggFunctionProto *SqlSingleValueAggFunctionProto `protobuf:"bytes,54,opt,name=sqlSingleValueAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlSumEmptyIsZeroAggFunctionProto struct {
	SqlSumEmptyIsZeroAggFunctionProto *SqlSumEmptyIsZeroAggFunctionProto `protobuf:"bytes,55,opt,name=sqlSumEmptyIsZeroAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlListaggAggFunctionProto struct {
	SqlListaggAggFunctionProto *SqlListaggAggFunctionProto `protobuf:"bytes,56,opt,name=sqlListaggAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlNtileAggFunctionProto struct {
	SqlNtileAggFunctionProto *SqlNtileAggFunctionProto `protobuf:"bytes,57,opt,name=sqlNtileAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlJsonObjectAggAggFunctionProto struct {
	SqlJsonObjectAggAggFunctionProto *SqlJsonObjectAggAggFunctionProto `protobuf:"bytes,58,opt,name=sqlJsonObjectAggAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlFirstLastValueAggFunctionProto struct {
	SqlFirstLastValueAggFunctionProto *SqlFirstLastValueAggFunctionProto `protobuf:"bytes,59,opt,name=sqlFirstLastValueAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlAbstractGroupFunctionProto struct {
	SqlAbstractGroupFunctionProto *SqlAbstractGroupFunctionProto `protobuf:"bytes,60,opt,name=sqlAbstractGroupFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlHistogramAggFunctionProto struct {
	SqlHistogramAggFunctionProto *SqlHistogramAggFunctionProto `protobuf:"bytes,61,opt,name=sqlHistogramAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlRankFunctionProto struct {
	SqlRankFunctionProto *SqlRankFunctionProto `protobuf:"bytes,62,opt,name=sqlRankFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlLeadLagAggFunctionProto struct {
	SqlLeadLagAggFunctionProto *SqlLeadLagAggFunctionProto `protobuf:"bytes,63,opt,name=sqlLeadLagAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlBitOpAggFunctionProto struct {
	SqlBitOpAggFunctionProto *SqlBitOpAggFunctionProto `protobuf:"bytes,64,opt,name=sqlBitOpAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlTumbleTableFunctionProto struct {
	SqlTumbleTableFunctionProto *SqlTumbleTableFunctionProto `protobuf:"bytes,65,opt,name=sqlTumbleTableFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlSessionTableFunctionProto struct {
	SqlSessionTableFunctionProto *SqlSessionTableFunctionProto `protobuf:"bytes,66,opt,name=sqlSessionTableFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlHopTableFunctionProto struct {
	SqlHopTableFunctionProto *SqlHopTableFunctionProto `protobuf:"bytes,67,opt,name=sqlHopTableFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlFloorFunctionProto struct {
	SqlFloorFunctionProto *SqlFloorFunctionProto `protobuf:"bytes,68,opt,name=sqlFloorFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlRegrCountAggFunctionProto struct {
	SqlRegrCountAggFunctionProto *SqlRegrCountAggFunctionProto `protobuf:"bytes,69,opt,name=sqlRegrCountAggFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlGroupIdFunctionProto struct {
	SqlGroupIdFunctionProto *SqlGroupIdFunctionProto `protobuf:"bytes,70,opt,name=sqlGroupIdFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlGroupingIdFunctionProto struct {
	SqlGroupingIdFunctionProto *SqlGroupingIdFunctionProto `protobuf:"bytes,71,opt,name=sqlGroupingIdFunctionProto,proto3,oneof"`
}

type SqlFunctionProto_SqlGroupingFunctionProto struct {
	SqlGroupingFunctionProto *SqlGroupingFunctionProto `protobuf:"bytes,72,opt,name=sqlGroupingFunctionProto,proto3,oneof"`
}

func (*SqlFunctionProto_SqlUnresolvedFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJdbcFunctionCallProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlUserDefinedTableMacroProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlUserDefinedFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlExtractFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTranslate3FunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTrimFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlSubstringFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonDepthFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlAbstractTimeFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlRandFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlCoalesceFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonTypeFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonValueFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlDatePartFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonObjectFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlNullifFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTimestampAddFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonPrettyFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlBaseContextVariableProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlConvertFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlGroupedWindowFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTypeConstructorFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTimestampDiffFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonKeysFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonLengthFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlCastFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlPositionFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonRemoveFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlMatchFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlOverlayFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonArrayFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlRandIntegerFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlCurrentDateFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlWindowTableFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlRegexpReplaceFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlMonotonicUnaryFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonStorageSizeFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonQueryFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonExistsFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlUserDefinedTableFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlStringContextVariableProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlUserDefinedAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlCovarAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonArrayAggAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlSumAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlMinMaxAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlCountAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlAnyValueAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlAvgAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlNthValueAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlBasicAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlSingleValueAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlSumEmptyIsZeroAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlListaggAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlNtileAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlJsonObjectAggAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlFirstLastValueAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlAbstractGroupFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlHistogramAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlRankFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlLeadLagAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlBitOpAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlTumbleTableFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlSessionTableFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlHopTableFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlFloorFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlRegrCountAggFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlGroupIdFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlGroupingIdFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

func (*SqlFunctionProto_SqlGroupingFunctionProto) isSqlFunctionProto_SqlFunctionProto() {}

// Java Class: org.apache.calcite.sql.SqlUnresolvedFunction
type SqlUnresolvedFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUnresolvedFunctionProto) Reset() {
	*x = SqlUnresolvedFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[117]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUnresolvedFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUnresolvedFunctionProto) ProtoMessage() {}

func (x *SqlUnresolvedFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[117]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUnresolvedFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlUnresolvedFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{117}
}

func (x *SqlUnresolvedFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlUnresolvedFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlUnresolvedFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUnresolvedFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUnresolvedFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUnresolvedFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUnresolvedFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUnresolvedFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUnresolvedFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUnresolvedFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlJdbcFunctionCall
type SqlJdbcFunctionCallProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	JdbcName             string                        `protobuf:"bytes,1,opt,name=jdbcName,proto3" json:"jdbcName,omitempty"`
	LookupCall           *SqlCallProto                 `protobuf:"bytes,2,opt,name=lookupCall,proto3" json:"lookupCall,omitempty"`
	ThisOperands         []*SqlNodeProto               `protobuf:"bytes,3,rep,name=thisOperands,proto3" json:"thisOperands,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJdbcFunctionCallProto) Reset() {
	*x = SqlJdbcFunctionCallProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[118]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJdbcFunctionCallProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJdbcFunctionCallProto) ProtoMessage() {}

func (x *SqlJdbcFunctionCallProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[118]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJdbcFunctionCallProto.ProtoReflect.Descriptor instead.
func (*SqlJdbcFunctionCallProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{118}
}

func (x *SqlJdbcFunctionCallProto) GetJdbcName() string {
	if x != nil {
		return x.JdbcName
	}
	return ""
}

func (x *SqlJdbcFunctionCallProto) GetLookupCall() *SqlCallProto {
	if x != nil {
		return x.LookupCall
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetThisOperands() []*SqlNodeProto {
	if x != nil {
		return x.ThisOperands
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJdbcFunctionCallProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJdbcFunctionCallProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJdbcFunctionCallProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJdbcFunctionCallProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJdbcFunctionCallProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJdbcFunctionCallProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.validate.SqlUserDefinedTableMacro
type SqlUserDefinedTableMacroProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableMacro           *TableMacroProto              `protobuf:"bytes,1,opt,name=tableMacro,proto3" json:"tableMacro,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUserDefinedTableMacroProto) Reset() {
	*x = SqlUserDefinedTableMacroProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[119]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUserDefinedTableMacroProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUserDefinedTableMacroProto) ProtoMessage() {}

func (x *SqlUserDefinedTableMacroProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[119]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUserDefinedTableMacroProto.ProtoReflect.Descriptor instead.
func (*SqlUserDefinedTableMacroProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{119}
}

func (x *SqlUserDefinedTableMacroProto) GetTableMacro() *TableMacroProto {
	if x != nil {
		return x.TableMacro
	}
	return nil
}

func (x *SqlUserDefinedTableMacroProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlUserDefinedTableMacroProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlUserDefinedTableMacroProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUserDefinedTableMacroProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUserDefinedTableMacroProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUserDefinedTableMacroProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUserDefinedTableMacroProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUserDefinedTableMacroProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUserDefinedTableMacroProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUserDefinedTableMacroProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.schema.TableMacro
type TableMacroProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TableMacroProto:
	//
	//	*TableMacroProto_TableMacroImplProto
	//	*TableMacroProto_ViewTableMacroProto
	TableMacroProto isTableMacroProto_TableMacroProto `protobuf_oneof:"tableMacroProto"`
}

func (x *TableMacroProto) Reset() {
	*x = TableMacroProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[120]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMacroProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMacroProto) ProtoMessage() {}

func (x *TableMacroProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[120]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMacroProto.ProtoReflect.Descriptor instead.
func (*TableMacroProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{120}
}

func (m *TableMacroProto) GetTableMacroProto() isTableMacroProto_TableMacroProto {
	if m != nil {
		return m.TableMacroProto
	}
	return nil
}

func (x *TableMacroProto) GetTableMacroImplProto() *TableMacroImplProto {
	if x, ok := x.GetTableMacroProto().(*TableMacroProto_TableMacroImplProto); ok {
		return x.TableMacroImplProto
	}
	return nil
}

func (x *TableMacroProto) GetViewTableMacroProto() *ViewTableMacroProto {
	if x, ok := x.GetTableMacroProto().(*TableMacroProto_ViewTableMacroProto); ok {
		return x.ViewTableMacroProto
	}
	return nil
}

type isTableMacroProto_TableMacroProto interface {
	isTableMacroProto_TableMacroProto()
}

type TableMacroProto_TableMacroImplProto struct {
	TableMacroImplProto *TableMacroImplProto `protobuf:"bytes,1,opt,name=tableMacroImplProto,proto3,oneof"`
}

type TableMacroProto_ViewTableMacroProto struct {
	ViewTableMacroProto *ViewTableMacroProto `protobuf:"bytes,2,opt,name=viewTableMacroProto,proto3,oneof"`
}

func (*TableMacroProto_TableMacroImplProto) isTableMacroProto_TableMacroProto() {}

func (*TableMacroProto_ViewTableMacroProto) isTableMacroProto_TableMacroProto() {}

// Java Class: org.apache.calcite.schema.impl.TableMacroImpl
type TableMacroImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Method     *MethodProto              `protobuf:"bytes,1,opt,name=method,proto3" json:"method,omitempty"`
	Parameters []*FunctionParameterProto `protobuf:"bytes,2,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *TableMacroImplProto) Reset() {
	*x = TableMacroImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[121]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableMacroImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableMacroImplProto) ProtoMessage() {}

func (x *TableMacroImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[121]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableMacroImplProto.ProtoReflect.Descriptor instead.
func (*TableMacroImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{121}
}

func (x *TableMacroImplProto) GetMethod() *MethodProto {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *TableMacroImplProto) GetParameters() []*FunctionParameterProto {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Java Class: java.lang.reflect.Method
type MethodProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *MethodProto) Reset() {
	*x = MethodProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[122]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MethodProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MethodProto) ProtoMessage() {}

func (x *MethodProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[122]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MethodProto.ProtoReflect.Descriptor instead.
func (*MethodProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{122}
}

// Java Class: org.apache.calcite.schema.FunctionParameter
type FunctionParameterProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FunctionParameterProto) Reset() {
	*x = FunctionParameterProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[123]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FunctionParameterProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FunctionParameterProto) ProtoMessage() {}

func (x *FunctionParameterProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[123]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FunctionParameterProto.ProtoReflect.Descriptor instead.
func (*FunctionParameterProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{123}
}

// Java Class: org.apache.calcite.schema.impl.ViewTableMacro
type ViewTableMacroProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ViewSql    string              `protobuf:"bytes,1,opt,name=viewSql,proto3" json:"viewSql,omitempty"`
	Schema     *CalciteSchemaProto `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Modifiable bool                `protobuf:"varint,3,opt,name=modifiable,proto3" json:"modifiable,omitempty"`
	SchemaPath []string            `protobuf:"bytes,4,rep,name=schemaPath,proto3" json:"schemaPath,omitempty"`
	ViewPath   []string            `protobuf:"bytes,5,rep,name=viewPath,proto3" json:"viewPath,omitempty"`
}

func (x *ViewTableMacroProto) Reset() {
	*x = ViewTableMacroProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[124]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ViewTableMacroProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewTableMacroProto) ProtoMessage() {}

func (x *ViewTableMacroProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[124]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewTableMacroProto.ProtoReflect.Descriptor instead.
func (*ViewTableMacroProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{124}
}

func (x *ViewTableMacroProto) GetViewSql() string {
	if x != nil {
		return x.ViewSql
	}
	return ""
}

func (x *ViewTableMacroProto) GetSchema() *CalciteSchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *ViewTableMacroProto) GetModifiable() bool {
	if x != nil {
		return x.Modifiable
	}
	return false
}

func (x *ViewTableMacroProto) GetSchemaPath() []string {
	if x != nil {
		return x.SchemaPath
	}
	return nil
}

func (x *ViewTableMacroProto) GetViewPath() []string {
	if x != nil {
		return x.ViewPath
	}
	return nil
}

// Java Class: org.apache.calcite.jdbc.CalciteSchema
type CalciteSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CalciteSchemaProto:
	//
	//	*CalciteSchemaProto_SimpleCalciteSchemaProto
	//	*CalciteSchemaProto_CachingCalciteSchemaProto
	//	*CalciteSchemaProto_CalciteRootSchemaProto
	CalciteSchemaProto isCalciteSchemaProto_CalciteSchemaProto `protobuf_oneof:"calciteSchemaProto"`
	Parent             *CalciteSchemaProto                     `protobuf:"bytes,4,opt,name=parent,proto3" json:"parent,omitempty"`
	Schema             *SchemaProto                            `protobuf:"bytes,5,opt,name=schema,proto3" json:"schema,omitempty"`
	Name               string                                  `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	TableMap           *NameMapProto                           `protobuf:"bytes,7,opt,name=tableMap,proto3" json:"tableMap,omitempty"`
	FunctionMap        *NameMultimapProto                      `protobuf:"bytes,8,opt,name=functionMap,proto3" json:"functionMap,omitempty"`
	TypeMap            *NameMapProto                           `protobuf:"bytes,9,opt,name=typeMap,proto3" json:"typeMap,omitempty"`
	LatticeMap         *NameMapProto                           `protobuf:"bytes,10,opt,name=latticeMap,proto3" json:"latticeMap,omitempty"`
	FunctionNames      *NameSetProto                           `protobuf:"bytes,11,opt,name=functionNames,proto3" json:"functionNames,omitempty"`
	NullaryFunctionMap *NameMapProto                           `protobuf:"bytes,12,opt,name=nullaryFunctionMap,proto3" json:"nullaryFunctionMap,omitempty"`
	SubSchemaMap       *NameMapProto                           `protobuf:"bytes,13,opt,name=subSchemaMap,proto3" json:"subSchemaMap,omitempty"`
}

func (x *CalciteSchemaProto) Reset() {
	*x = CalciteSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[125]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalciteSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalciteSchemaProto) ProtoMessage() {}

func (x *CalciteSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[125]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalciteSchemaProto.ProtoReflect.Descriptor instead.
func (*CalciteSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{125}
}

func (m *CalciteSchemaProto) GetCalciteSchemaProto() isCalciteSchemaProto_CalciteSchemaProto {
	if m != nil {
		return m.CalciteSchemaProto
	}
	return nil
}

func (x *CalciteSchemaProto) GetSimpleCalciteSchemaProto() *SimpleCalciteSchemaProto {
	if x, ok := x.GetCalciteSchemaProto().(*CalciteSchemaProto_SimpleCalciteSchemaProto); ok {
		return x.SimpleCalciteSchemaProto
	}
	return nil
}

func (x *CalciteSchemaProto) GetCachingCalciteSchemaProto() *CachingCalciteSchemaProto {
	if x, ok := x.GetCalciteSchemaProto().(*CalciteSchemaProto_CachingCalciteSchemaProto); ok {
		return x.CachingCalciteSchemaProto
	}
	return nil
}

func (x *CalciteSchemaProto) GetCalciteRootSchemaProto() *CalciteRootSchemaProto {
	if x, ok := x.GetCalciteSchemaProto().(*CalciteSchemaProto_CalciteRootSchemaProto); ok {
		return x.CalciteRootSchemaProto
	}
	return nil
}

func (x *CalciteSchemaProto) GetParent() *CalciteSchemaProto {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CalciteSchemaProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CalciteSchemaProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CalciteSchemaProto) GetTableMap() *NameMapProto {
	if x != nil {
		return x.TableMap
	}
	return nil
}

func (x *CalciteSchemaProto) GetFunctionMap() *NameMultimapProto {
	if x != nil {
		return x.FunctionMap
	}
	return nil
}

func (x *CalciteSchemaProto) GetTypeMap() *NameMapProto {
	if x != nil {
		return x.TypeMap
	}
	return nil
}

func (x *CalciteSchemaProto) GetLatticeMap() *NameMapProto {
	if x != nil {
		return x.LatticeMap
	}
	return nil
}

func (x *CalciteSchemaProto) GetFunctionNames() *NameSetProto {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *CalciteSchemaProto) GetNullaryFunctionMap() *NameMapProto {
	if x != nil {
		return x.NullaryFunctionMap
	}
	return nil
}

func (x *CalciteSchemaProto) GetSubSchemaMap() *NameMapProto {
	if x != nil {
		return x.SubSchemaMap
	}
	return nil
}

type isCalciteSchemaProto_CalciteSchemaProto interface {
	isCalciteSchemaProto_CalciteSchemaProto()
}

type CalciteSchemaProto_SimpleCalciteSchemaProto struct {
	SimpleCalciteSchemaProto *SimpleCalciteSchemaProto `protobuf:"bytes,1,opt,name=simpleCalciteSchemaProto,proto3,oneof"`
}

type CalciteSchemaProto_CachingCalciteSchemaProto struct {
	CachingCalciteSchemaProto *CachingCalciteSchemaProto `protobuf:"bytes,2,opt,name=cachingCalciteSchemaProto,proto3,oneof"`
}

type CalciteSchemaProto_CalciteRootSchemaProto struct {
	CalciteRootSchemaProto *CalciteRootSchemaProto `protobuf:"bytes,3,opt,name=calciteRootSchemaProto,proto3,oneof"`
}

func (*CalciteSchemaProto_SimpleCalciteSchemaProto) isCalciteSchemaProto_CalciteSchemaProto() {}

func (*CalciteSchemaProto_CachingCalciteSchemaProto) isCalciteSchemaProto_CalciteSchemaProto() {}

func (*CalciteSchemaProto_CalciteRootSchemaProto) isCalciteSchemaProto_CalciteSchemaProto() {}

// Java Class: org.apache.calcite.jdbc.SimpleCalciteSchema
type SimpleCalciteSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Parent             *CalciteSchemaProto `protobuf:"bytes,1,opt,name=parent,proto3" json:"parent,omitempty"`
	Schema             *SchemaProto        `protobuf:"bytes,2,opt,name=schema,proto3" json:"schema,omitempty"`
	Name               string              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	TableMap           *NameMapProto       `protobuf:"bytes,4,opt,name=tableMap,proto3" json:"tableMap,omitempty"`
	FunctionMap        *NameMultimapProto  `protobuf:"bytes,5,opt,name=functionMap,proto3" json:"functionMap,omitempty"`
	TypeMap            *NameMapProto       `protobuf:"bytes,6,opt,name=typeMap,proto3" json:"typeMap,omitempty"`
	LatticeMap         *NameMapProto       `protobuf:"bytes,7,opt,name=latticeMap,proto3" json:"latticeMap,omitempty"`
	FunctionNames      *NameSetProto       `protobuf:"bytes,8,opt,name=functionNames,proto3" json:"functionNames,omitempty"`
	NullaryFunctionMap *NameMapProto       `protobuf:"bytes,9,opt,name=nullaryFunctionMap,proto3" json:"nullaryFunctionMap,omitempty"`
	SubSchemaMap       *NameMapProto       `protobuf:"bytes,10,opt,name=subSchemaMap,proto3" json:"subSchemaMap,omitempty"`
}

func (x *SimpleCalciteSchemaProto) Reset() {
	*x = SimpleCalciteSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[126]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SimpleCalciteSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SimpleCalciteSchemaProto) ProtoMessage() {}

func (x *SimpleCalciteSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[126]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SimpleCalciteSchemaProto.ProtoReflect.Descriptor instead.
func (*SimpleCalciteSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{126}
}

func (x *SimpleCalciteSchemaProto) GetParent() *CalciteSchemaProto {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SimpleCalciteSchemaProto) GetTableMap() *NameMapProto {
	if x != nil {
		return x.TableMap
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetFunctionMap() *NameMultimapProto {
	if x != nil {
		return x.FunctionMap
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetTypeMap() *NameMapProto {
	if x != nil {
		return x.TypeMap
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetLatticeMap() *NameMapProto {
	if x != nil {
		return x.LatticeMap
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetFunctionNames() *NameSetProto {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetNullaryFunctionMap() *NameMapProto {
	if x != nil {
		return x.NullaryFunctionMap
	}
	return nil
}

func (x *SimpleCalciteSchemaProto) GetSubSchemaMap() *NameMapProto {
	if x != nil {
		return x.SubSchemaMap
	}
	return nil
}

// Java Class: org.apache.calcite.schema.Schema
type SchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SchemaProto:
	//
	//	*SchemaProto_SchemaPlusProto
	//	*SchemaProto_DelegatingSchemaProto
	//	*SchemaProto_AbstractSchemaProto
	//	*SchemaProto_SemiMutableSchemaProto
	SchemaProto isSchemaProto_SchemaProto `protobuf_oneof:"schemaProto"`
}

func (x *SchemaProto) Reset() {
	*x = SchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[127]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaProto) ProtoMessage() {}

func (x *SchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[127]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaProto.ProtoReflect.Descriptor instead.
func (*SchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{127}
}

func (m *SchemaProto) GetSchemaProto() isSchemaProto_SchemaProto {
	if m != nil {
		return m.SchemaProto
	}
	return nil
}

func (x *SchemaProto) GetSchemaPlusProto() *SchemaPlusProto {
	if x, ok := x.GetSchemaProto().(*SchemaProto_SchemaPlusProto); ok {
		return x.SchemaPlusProto
	}
	return nil
}

func (x *SchemaProto) GetDelegatingSchemaProto() *DelegatingSchemaProto {
	if x, ok := x.GetSchemaProto().(*SchemaProto_DelegatingSchemaProto); ok {
		return x.DelegatingSchemaProto
	}
	return nil
}

func (x *SchemaProto) GetAbstractSchemaProto() *AbstractSchemaProto {
	if x, ok := x.GetSchemaProto().(*SchemaProto_AbstractSchemaProto); ok {
		return x.AbstractSchemaProto
	}
	return nil
}

func (x *SchemaProto) GetSemiMutableSchemaProto() *SemiMutableSchemaProto {
	if x, ok := x.GetSchemaProto().(*SchemaProto_SemiMutableSchemaProto); ok {
		return x.SemiMutableSchemaProto
	}
	return nil
}

type isSchemaProto_SchemaProto interface {
	isSchemaProto_SchemaProto()
}

type SchemaProto_SchemaPlusProto struct {
	SchemaPlusProto *SchemaPlusProto `protobuf:"bytes,1,opt,name=schemaPlusProto,proto3,oneof"`
}

type SchemaProto_DelegatingSchemaProto struct {
	DelegatingSchemaProto *DelegatingSchemaProto `protobuf:"bytes,2,opt,name=delegatingSchemaProto,proto3,oneof"`
}

type SchemaProto_AbstractSchemaProto struct {
	AbstractSchemaProto *AbstractSchemaProto `protobuf:"bytes,3,opt,name=abstractSchemaProto,proto3,oneof"`
}

type SchemaProto_SemiMutableSchemaProto struct {
	SemiMutableSchemaProto *SemiMutableSchemaProto `protobuf:"bytes,4,opt,name=semiMutableSchemaProto,proto3,oneof"`
}

func (*SchemaProto_SchemaPlusProto) isSchemaProto_SchemaProto() {}

func (*SchemaProto_DelegatingSchemaProto) isSchemaProto_SchemaProto() {}

func (*SchemaProto_AbstractSchemaProto) isSchemaProto_SchemaProto() {}

func (*SchemaProto_SemiMutableSchemaProto) isSchemaProto_SchemaProto() {}

// Java Class: org.apache.calcite.schema.SchemaPlus
type SchemaPlusProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SchemaPlusProto) Reset() {
	*x = SchemaPlusProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[128]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SchemaPlusProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SchemaPlusProto) ProtoMessage() {}

func (x *SchemaPlusProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[128]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SchemaPlusProto.ProtoReflect.Descriptor instead.
func (*SchemaPlusProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{128}
}

// Java Class: org.apache.calcite.schema.impl.DelegatingSchema
type DelegatingSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema *SchemaProto `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
}

func (x *DelegatingSchemaProto) Reset() {
	*x = DelegatingSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[129]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DelegatingSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DelegatingSchemaProto) ProtoMessage() {}

func (x *DelegatingSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[129]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DelegatingSchemaProto.ProtoReflect.Descriptor instead.
func (*DelegatingSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{129}
}

func (x *DelegatingSchemaProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

// Java Class: org.apache.calcite.schema.impl.AbstractSchema
type AbstractSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *AbstractSchemaProto) Reset() {
	*x = AbstractSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[130]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractSchemaProto) ProtoMessage() {}

func (x *AbstractSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[130]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractSchemaProto.ProtoReflect.Descriptor instead.
func (*AbstractSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{130}
}

// Java Class: org.apache.calcite.schema.SemiMutableSchema
type SemiMutableSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *SemiMutableSchemaProto) Reset() {
	*x = SemiMutableSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[131]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemiMutableSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemiMutableSchemaProto) ProtoMessage() {}

func (x *SemiMutableSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[131]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemiMutableSchemaProto.ProtoReflect.Descriptor instead.
func (*SemiMutableSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{131}
}

// Java Class: org.apache.calcite.util.NameMap
type NameMapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NameMapProto) Reset() {
	*x = NameMapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[132]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameMapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameMapProto) ProtoMessage() {}

func (x *NameMapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[132]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameMapProto.ProtoReflect.Descriptor instead.
func (*NameMapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{132}
}

// Java Class: org.apache.calcite.util.NameMultimap
type NameMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Map *NameMapProto `protobuf:"bytes,1,opt,name=map,proto3" json:"map,omitempty"`
}

func (x *NameMultimapProto) Reset() {
	*x = NameMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[133]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameMultimapProto) ProtoMessage() {}

func (x *NameMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[133]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameMultimapProto.ProtoReflect.Descriptor instead.
func (*NameMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{133}
}

func (x *NameMultimapProto) GetMap() *NameMapProto {
	if x != nil {
		return x.Map
	}
	return nil
}

// Java Class: org.apache.calcite.util.NameSet
type NameSetProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Names *NameMapProto `protobuf:"bytes,1,opt,name=names,proto3" json:"names,omitempty"`
}

func (x *NameSetProto) Reset() {
	*x = NameSetProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[134]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameSetProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameSetProto) ProtoMessage() {}

func (x *NameSetProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[134]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameSetProto.ProtoReflect.Descriptor instead.
func (*NameSetProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{134}
}

func (x *NameSetProto) GetNames() *NameMapProto {
	if x != nil {
		return x.Names
	}
	return nil
}

// Java Class: org.apache.calcite.jdbc.CachingCalciteSchema
type CachingCalciteSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CachingCalciteSchemaProto:
	//
	//	*CachingCalciteSchemaProto_CalciteRootSchemaProto
	CachingCalciteSchemaProto isCachingCalciteSchemaProto_CachingCalciteSchemaProto `protobuf_oneof:"cachingCalciteSchemaProto"`
	Cache                     bool                                                  `protobuf:"varint,2,opt,name=cache,proto3" json:"cache,omitempty"`
	Parent                    *CalciteSchemaProto                                   `protobuf:"bytes,3,opt,name=parent,proto3" json:"parent,omitempty"`
	Schema                    *SchemaProto                                          `protobuf:"bytes,4,opt,name=schema,proto3" json:"schema,omitempty"`
	Name                      string                                                `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	TableMap                  *NameMapProto                                         `protobuf:"bytes,6,opt,name=tableMap,proto3" json:"tableMap,omitempty"`
	FunctionMap               *NameMultimapProto                                    `protobuf:"bytes,7,opt,name=functionMap,proto3" json:"functionMap,omitempty"`
	TypeMap                   *NameMapProto                                         `protobuf:"bytes,8,opt,name=typeMap,proto3" json:"typeMap,omitempty"`
	LatticeMap                *NameMapProto                                         `protobuf:"bytes,9,opt,name=latticeMap,proto3" json:"latticeMap,omitempty"`
	FunctionNames             *NameSetProto                                         `protobuf:"bytes,10,opt,name=functionNames,proto3" json:"functionNames,omitempty"`
	NullaryFunctionMap        *NameMapProto                                         `protobuf:"bytes,11,opt,name=nullaryFunctionMap,proto3" json:"nullaryFunctionMap,omitempty"`
	SubSchemaMap              *NameMapProto                                         `protobuf:"bytes,12,opt,name=subSchemaMap,proto3" json:"subSchemaMap,omitempty"`
}

func (x *CachingCalciteSchemaProto) Reset() {
	*x = CachingCalciteSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[135]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CachingCalciteSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CachingCalciteSchemaProto) ProtoMessage() {}

func (x *CachingCalciteSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[135]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CachingCalciteSchemaProto.ProtoReflect.Descriptor instead.
func (*CachingCalciteSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{135}
}

func (m *CachingCalciteSchemaProto) GetCachingCalciteSchemaProto() isCachingCalciteSchemaProto_CachingCalciteSchemaProto {
	if m != nil {
		return m.CachingCalciteSchemaProto
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetCalciteRootSchemaProto() *CalciteRootSchemaProto {
	if x, ok := x.GetCachingCalciteSchemaProto().(*CachingCalciteSchemaProto_CalciteRootSchemaProto); ok {
		return x.CalciteRootSchemaProto
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

func (x *CachingCalciteSchemaProto) GetParent() *CalciteSchemaProto {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CachingCalciteSchemaProto) GetTableMap() *NameMapProto {
	if x != nil {
		return x.TableMap
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetFunctionMap() *NameMultimapProto {
	if x != nil {
		return x.FunctionMap
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetTypeMap() *NameMapProto {
	if x != nil {
		return x.TypeMap
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetLatticeMap() *NameMapProto {
	if x != nil {
		return x.LatticeMap
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetFunctionNames() *NameSetProto {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetNullaryFunctionMap() *NameMapProto {
	if x != nil {
		return x.NullaryFunctionMap
	}
	return nil
}

func (x *CachingCalciteSchemaProto) GetSubSchemaMap() *NameMapProto {
	if x != nil {
		return x.SubSchemaMap
	}
	return nil
}

type isCachingCalciteSchemaProto_CachingCalciteSchemaProto interface {
	isCachingCalciteSchemaProto_CachingCalciteSchemaProto()
}

type CachingCalciteSchemaProto_CalciteRootSchemaProto struct {
	CalciteRootSchemaProto *CalciteRootSchemaProto `protobuf:"bytes,1,opt,name=calciteRootSchemaProto,proto3,oneof"`
}

func (*CachingCalciteSchemaProto_CalciteRootSchemaProto) isCachingCalciteSchemaProto_CachingCalciteSchemaProto() {
}

// Java Class: org.apache.calcite.jdbc.CalciteRootSchema
type CalciteRootSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Cache              bool                `protobuf:"varint,1,opt,name=cache,proto3" json:"cache,omitempty"`
	Parent             *CalciteSchemaProto `protobuf:"bytes,2,opt,name=parent,proto3" json:"parent,omitempty"`
	Schema             *SchemaProto        `protobuf:"bytes,3,opt,name=schema,proto3" json:"schema,omitempty"`
	Name               string              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	TableMap           *NameMapProto       `protobuf:"bytes,5,opt,name=tableMap,proto3" json:"tableMap,omitempty"`
	FunctionMap        *NameMultimapProto  `protobuf:"bytes,6,opt,name=functionMap,proto3" json:"functionMap,omitempty"`
	TypeMap            *NameMapProto       `protobuf:"bytes,7,opt,name=typeMap,proto3" json:"typeMap,omitempty"`
	LatticeMap         *NameMapProto       `protobuf:"bytes,8,opt,name=latticeMap,proto3" json:"latticeMap,omitempty"`
	FunctionNames      *NameSetProto       `protobuf:"bytes,9,opt,name=functionNames,proto3" json:"functionNames,omitempty"`
	NullaryFunctionMap *NameMapProto       `protobuf:"bytes,10,opt,name=nullaryFunctionMap,proto3" json:"nullaryFunctionMap,omitempty"`
	SubSchemaMap       *NameMapProto       `protobuf:"bytes,11,opt,name=subSchemaMap,proto3" json:"subSchemaMap,omitempty"`
}

func (x *CalciteRootSchemaProto) Reset() {
	*x = CalciteRootSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[136]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CalciteRootSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CalciteRootSchemaProto) ProtoMessage() {}

func (x *CalciteRootSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[136]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CalciteRootSchemaProto.ProtoReflect.Descriptor instead.
func (*CalciteRootSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{136}
}

func (x *CalciteRootSchemaProto) GetCache() bool {
	if x != nil {
		return x.Cache
	}
	return false
}

func (x *CalciteRootSchemaProto) GetParent() *CalciteSchemaProto {
	if x != nil {
		return x.Parent
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetSchema() *SchemaProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *CalciteRootSchemaProto) GetTableMap() *NameMapProto {
	if x != nil {
		return x.TableMap
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetFunctionMap() *NameMultimapProto {
	if x != nil {
		return x.FunctionMap
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetTypeMap() *NameMapProto {
	if x != nil {
		return x.TypeMap
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetLatticeMap() *NameMapProto {
	if x != nil {
		return x.LatticeMap
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetFunctionNames() *NameSetProto {
	if x != nil {
		return x.FunctionNames
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetNullaryFunctionMap() *NameMapProto {
	if x != nil {
		return x.NullaryFunctionMap
	}
	return nil
}

func (x *CalciteRootSchemaProto) GetSubSchemaMap() *NameMapProto {
	if x != nil {
		return x.SubSchemaMap
	}
	return nil
}

// Java Class: org.apache.calcite.sql.validate.SqlUserDefinedFunction
type SqlUserDefinedFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlUserDefinedFunctionProto:
	//
	//	*SqlUserDefinedFunctionProto_SqlUserDefinedTableFunctionProto
	SqlUserDefinedFunctionProto isSqlUserDefinedFunctionProto_SqlUserDefinedFunctionProto `protobuf_oneof:"sqlUserDefinedFunctionProto"`
	Function                    *OrgApacheCalciteSchema_FunctionProto                     `protobuf:"bytes,2,opt,name=function,proto3" json:"function,omitempty"`
	Category                    SqlFunctionCategoryProto                                  `protobuf:"varint,3,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier               *SqlIdentifierProto                                       `protobuf:"bytes,4,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                        string                                                    `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Kind                        SqlKindProto                                              `protobuf:"varint,6,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                    int32                                                     `protobuf:"zigzag32,7,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                   int32                                                     `protobuf:"zigzag32,8,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference         *SqlReturnTypeInferenceProto                              `protobuf:"bytes,9,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference        *SqlOperandTypeInferenceProto                             `protobuf:"bytes,10,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker          *SqlOperandTypeCheckerProto                               `protobuf:"bytes,11,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures           string                                                    `protobuf:"bytes,12,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUserDefinedFunctionProto) Reset() {
	*x = SqlUserDefinedFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[137]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUserDefinedFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUserDefinedFunctionProto) ProtoMessage() {}

func (x *SqlUserDefinedFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[137]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUserDefinedFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlUserDefinedFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{137}
}

func (m *SqlUserDefinedFunctionProto) GetSqlUserDefinedFunctionProto() isSqlUserDefinedFunctionProto_SqlUserDefinedFunctionProto {
	if m != nil {
		return m.SqlUserDefinedFunctionProto
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetSqlUserDefinedTableFunctionProto() *SqlUserDefinedTableFunctionProto {
	if x, ok := x.GetSqlUserDefinedFunctionProto().(*SqlUserDefinedFunctionProto_SqlUserDefinedTableFunctionProto); ok {
		return x.SqlUserDefinedTableFunctionProto
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetFunction() *OrgApacheCalciteSchema_FunctionProto {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlUserDefinedFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUserDefinedFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUserDefinedFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUserDefinedFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUserDefinedFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUserDefinedFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlUserDefinedFunctionProto_SqlUserDefinedFunctionProto interface {
	isSqlUserDefinedFunctionProto_SqlUserDefinedFunctionProto()
}

type SqlUserDefinedFunctionProto_SqlUserDefinedTableFunctionProto struct {
	SqlUserDefinedTableFunctionProto *SqlUserDefinedTableFunctionProto `protobuf:"bytes,1,opt,name=sqlUserDefinedTableFunctionProto,proto3,oneof"`
}

func (*SqlUserDefinedFunctionProto_SqlUserDefinedTableFunctionProto) isSqlUserDefinedFunctionProto_SqlUserDefinedFunctionProto() {
}

// Java Class: org.apache.calcite.sql.validate.SqlUserDefinedTableFunction
type SqlUserDefinedTableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function             *OrgApacheCalciteSchema_FunctionProto `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	Category             SqlFunctionCategoryProto              `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto                   `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                                `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                          `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                                 `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                                 `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto          `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto         `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto           `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                                `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUserDefinedTableFunctionProto) Reset() {
	*x = SqlUserDefinedTableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[138]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUserDefinedTableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUserDefinedTableFunctionProto) ProtoMessage() {}

func (x *SqlUserDefinedTableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[138]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUserDefinedTableFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlUserDefinedTableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{138}
}

func (x *SqlUserDefinedTableFunctionProto) GetFunction() *OrgApacheCalciteSchema_FunctionProto {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *SqlUserDefinedTableFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlUserDefinedTableFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlUserDefinedTableFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUserDefinedTableFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUserDefinedTableFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUserDefinedTableFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUserDefinedTableFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUserDefinedTableFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUserDefinedTableFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUserDefinedTableFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.schema.Function
type OrgApacheCalciteSchema_FunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to OrgApacheCalciteSchema_FunctionProto:
	//
	//	*OrgApacheCalciteSchema_FunctionProto_TableFunctionProto
	//	*OrgApacheCalciteSchema_FunctionProto_ReflectiveFunctionBaseProto
	//	*OrgApacheCalciteSchema_FunctionProto_ImplementableFunctionProto
	//	*OrgApacheCalciteSchema_FunctionProto_TableMacroProto
	//	*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionProto
	//	*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionProto
	//	*OrgApacheCalciteSchema_FunctionProto_TableFunctionImplProto
	//	*OrgApacheCalciteSchema_FunctionProto_TableMacroImplProto
	//	*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionImplProto
	//	*OrgApacheCalciteSchema_FunctionProto_ViewTableMacroProto
	//	*OrgApacheCalciteSchema_FunctionProto_ImplementableAggFunctionProto
	//	*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionImplProto
	OrgApacheCalciteSchema_FunctionProto isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto `protobuf_oneof:"org_apache_calcite_schema_FunctionProto"`
}

func (x *OrgApacheCalciteSchema_FunctionProto) Reset() {
	*x = OrgApacheCalciteSchema_FunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[139]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrgApacheCalciteSchema_FunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrgApacheCalciteSchema_FunctionProto) ProtoMessage() {}

func (x *OrgApacheCalciteSchema_FunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[139]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrgApacheCalciteSchema_FunctionProto.ProtoReflect.Descriptor instead.
func (*OrgApacheCalciteSchema_FunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{139}
}

func (m *OrgApacheCalciteSchema_FunctionProto) GetOrgApacheCalciteSchema_FunctionProto() isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto {
	if m != nil {
		return m.OrgApacheCalciteSchema_FunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetTableFunctionProto() *TableFunctionProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_TableFunctionProto); ok {
		return x.TableFunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetReflectiveFunctionBaseProto() *ReflectiveFunctionBaseProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ReflectiveFunctionBaseProto); ok {
		return x.ReflectiveFunctionBaseProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetImplementableFunctionProto() *ImplementableFunctionProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ImplementableFunctionProto); ok {
		return x.ImplementableFunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetTableMacroProto() *TableMacroProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_TableMacroProto); ok {
		return x.TableMacroProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetScalarFunctionProto() *ScalarFunctionProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionProto); ok {
		return x.ScalarFunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetAggregateFunctionProto() *AggregateFunctionProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionProto); ok {
		return x.AggregateFunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetTableFunctionImplProto() *TableFunctionImplProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_TableFunctionImplProto); ok {
		return x.TableFunctionImplProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetTableMacroImplProto() *TableMacroImplProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_TableMacroImplProto); ok {
		return x.TableMacroImplProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetScalarFunctionImplProto() *ScalarFunctionImplProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionImplProto); ok {
		return x.ScalarFunctionImplProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetViewTableMacroProto() *ViewTableMacroProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ViewTableMacroProto); ok {
		return x.ViewTableMacroProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetImplementableAggFunctionProto() *ImplementableAggFunctionProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_ImplementableAggFunctionProto); ok {
		return x.ImplementableAggFunctionProto
	}
	return nil
}

func (x *OrgApacheCalciteSchema_FunctionProto) GetAggregateFunctionImplProto() *AggregateFunctionImplProto {
	if x, ok := x.GetOrgApacheCalciteSchema_FunctionProto().(*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionImplProto); ok {
		return x.AggregateFunctionImplProto
	}
	return nil
}

type isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto interface {
	isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto()
}

type OrgApacheCalciteSchema_FunctionProto_TableFunctionProto struct {
	TableFunctionProto *TableFunctionProto `protobuf:"bytes,1,opt,name=tableFunctionProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ReflectiveFunctionBaseProto struct {
	ReflectiveFunctionBaseProto *ReflectiveFunctionBaseProto `protobuf:"bytes,2,opt,name=reflectiveFunctionBaseProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ImplementableFunctionProto struct {
	ImplementableFunctionProto *ImplementableFunctionProto `protobuf:"bytes,3,opt,name=implementableFunctionProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_TableMacroProto struct {
	TableMacroProto *TableMacroProto `protobuf:"bytes,4,opt,name=tableMacroProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ScalarFunctionProto struct {
	ScalarFunctionProto *ScalarFunctionProto `protobuf:"bytes,5,opt,name=scalarFunctionProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_AggregateFunctionProto struct {
	AggregateFunctionProto *AggregateFunctionProto `protobuf:"bytes,6,opt,name=aggregateFunctionProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_TableFunctionImplProto struct {
	TableFunctionImplProto *TableFunctionImplProto `protobuf:"bytes,7,opt,name=tableFunctionImplProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_TableMacroImplProto struct {
	TableMacroImplProto *TableMacroImplProto `protobuf:"bytes,8,opt,name=tableMacroImplProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ScalarFunctionImplProto struct {
	ScalarFunctionImplProto *ScalarFunctionImplProto `protobuf:"bytes,9,opt,name=scalarFunctionImplProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ViewTableMacroProto struct {
	ViewTableMacroProto *ViewTableMacroProto `protobuf:"bytes,10,opt,name=viewTableMacroProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_ImplementableAggFunctionProto struct {
	ImplementableAggFunctionProto *ImplementableAggFunctionProto `protobuf:"bytes,11,opt,name=implementableAggFunctionProto,proto3,oneof"`
}

type OrgApacheCalciteSchema_FunctionProto_AggregateFunctionImplProto struct {
	AggregateFunctionImplProto *AggregateFunctionImplProto `protobuf:"bytes,12,opt,name=aggregateFunctionImplProto,proto3,oneof"`
}

func (*OrgApacheCalciteSchema_FunctionProto_TableFunctionProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ReflectiveFunctionBaseProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ImplementableFunctionProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_TableMacroProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_TableFunctionImplProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_TableMacroImplProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionImplProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ViewTableMacroProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_ImplementableAggFunctionProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

func (*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionImplProto) isOrgApacheCalciteSchema_FunctionProto_OrgApacheCalciteSchema_FunctionProto() {
}

// Java Class: org.apache.calcite.schema.TableFunction
type TableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to TableFunctionProto:
	//
	//	*TableFunctionProto_TableFunctionImplProto
	TableFunctionProto isTableFunctionProto_TableFunctionProto `protobuf_oneof:"tableFunctionProto"`
}

func (x *TableFunctionProto) Reset() {
	*x = TableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[140]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunctionProto) ProtoMessage() {}

func (x *TableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[140]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunctionProto.ProtoReflect.Descriptor instead.
func (*TableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{140}
}

func (m *TableFunctionProto) GetTableFunctionProto() isTableFunctionProto_TableFunctionProto {
	if m != nil {
		return m.TableFunctionProto
	}
	return nil
}

func (x *TableFunctionProto) GetTableFunctionImplProto() *TableFunctionImplProto {
	if x, ok := x.GetTableFunctionProto().(*TableFunctionProto_TableFunctionImplProto); ok {
		return x.TableFunctionImplProto
	}
	return nil
}

type isTableFunctionProto_TableFunctionProto interface {
	isTableFunctionProto_TableFunctionProto()
}

type TableFunctionProto_TableFunctionImplProto struct {
	TableFunctionImplProto *TableFunctionImplProto `protobuf:"bytes,1,opt,name=tableFunctionImplProto,proto3,oneof"`
}

func (*TableFunctionProto_TableFunctionImplProto) isTableFunctionProto_TableFunctionProto() {}

// Java Class: org.apache.calcite.schema.impl.TableFunctionImpl
type TableFunctionImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implementor *CallImplementorProto     `protobuf:"bytes,1,opt,name=implementor,proto3" json:"implementor,omitempty"`
	Method      *MethodProto              `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Parameters  []*FunctionParameterProto `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *TableFunctionImplProto) Reset() {
	*x = TableFunctionImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[141]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TableFunctionImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TableFunctionImplProto) ProtoMessage() {}

func (x *TableFunctionImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[141]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TableFunctionImplProto.ProtoReflect.Descriptor instead.
func (*TableFunctionImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{141}
}

func (x *TableFunctionImplProto) GetImplementor() *CallImplementorProto {
	if x != nil {
		return x.Implementor
	}
	return nil
}

func (x *TableFunctionImplProto) GetMethod() *MethodProto {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *TableFunctionImplProto) GetParameters() []*FunctionParameterProto {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Java Class: org.apache.calcite.adapter.enumerable.CallImplementor
type CallImplementorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *CallImplementorProto) Reset() {
	*x = CallImplementorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[142]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallImplementorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallImplementorProto) ProtoMessage() {}

func (x *CallImplementorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[142]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallImplementorProto.ProtoReflect.Descriptor instead.
func (*CallImplementorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{142}
}

// Java Class: org.apache.calcite.schema.impl.ReflectiveFunctionBase
type ReflectiveFunctionBaseProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ReflectiveFunctionBaseProto:
	//
	//	*ReflectiveFunctionBaseProto_TableFunctionImplProto
	//	*ReflectiveFunctionBaseProto_TableMacroImplProto
	//	*ReflectiveFunctionBaseProto_ScalarFunctionImplProto
	ReflectiveFunctionBaseProto isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto `protobuf_oneof:"reflectiveFunctionBaseProto"`
	Method                      *MethodProto                                              `protobuf:"bytes,4,opt,name=method,proto3" json:"method,omitempty"`
	Parameters                  []*FunctionParameterProto                                 `protobuf:"bytes,5,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ReflectiveFunctionBaseProto) Reset() {
	*x = ReflectiveFunctionBaseProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[143]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReflectiveFunctionBaseProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReflectiveFunctionBaseProto) ProtoMessage() {}

func (x *ReflectiveFunctionBaseProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[143]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReflectiveFunctionBaseProto.ProtoReflect.Descriptor instead.
func (*ReflectiveFunctionBaseProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{143}
}

func (m *ReflectiveFunctionBaseProto) GetReflectiveFunctionBaseProto() isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto {
	if m != nil {
		return m.ReflectiveFunctionBaseProto
	}
	return nil
}

func (x *ReflectiveFunctionBaseProto) GetTableFunctionImplProto() *TableFunctionImplProto {
	if x, ok := x.GetReflectiveFunctionBaseProto().(*ReflectiveFunctionBaseProto_TableFunctionImplProto); ok {
		return x.TableFunctionImplProto
	}
	return nil
}

func (x *ReflectiveFunctionBaseProto) GetTableMacroImplProto() *TableMacroImplProto {
	if x, ok := x.GetReflectiveFunctionBaseProto().(*ReflectiveFunctionBaseProto_TableMacroImplProto); ok {
		return x.TableMacroImplProto
	}
	return nil
}

func (x *ReflectiveFunctionBaseProto) GetScalarFunctionImplProto() *ScalarFunctionImplProto {
	if x, ok := x.GetReflectiveFunctionBaseProto().(*ReflectiveFunctionBaseProto_ScalarFunctionImplProto); ok {
		return x.ScalarFunctionImplProto
	}
	return nil
}

func (x *ReflectiveFunctionBaseProto) GetMethod() *MethodProto {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *ReflectiveFunctionBaseProto) GetParameters() []*FunctionParameterProto {
	if x != nil {
		return x.Parameters
	}
	return nil
}

type isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto interface {
	isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto()
}

type ReflectiveFunctionBaseProto_TableFunctionImplProto struct {
	TableFunctionImplProto *TableFunctionImplProto `protobuf:"bytes,1,opt,name=tableFunctionImplProto,proto3,oneof"`
}

type ReflectiveFunctionBaseProto_TableMacroImplProto struct {
	TableMacroImplProto *TableMacroImplProto `protobuf:"bytes,2,opt,name=tableMacroImplProto,proto3,oneof"`
}

type ReflectiveFunctionBaseProto_ScalarFunctionImplProto struct {
	ScalarFunctionImplProto *ScalarFunctionImplProto `protobuf:"bytes,3,opt,name=scalarFunctionImplProto,proto3,oneof"`
}

func (*ReflectiveFunctionBaseProto_TableFunctionImplProto) isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto() {
}

func (*ReflectiveFunctionBaseProto_TableMacroImplProto) isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto() {
}

func (*ReflectiveFunctionBaseProto_ScalarFunctionImplProto) isReflectiveFunctionBaseProto_ReflectiveFunctionBaseProto() {
}

// Java Class: org.apache.calcite.schema.impl.ScalarFunctionImpl
type ScalarFunctionImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Implementor *CallImplementorProto     `protobuf:"bytes,1,opt,name=implementor,proto3" json:"implementor,omitempty"`
	Method      *MethodProto              `protobuf:"bytes,2,opt,name=method,proto3" json:"method,omitempty"`
	Parameters  []*FunctionParameterProto `protobuf:"bytes,3,rep,name=parameters,proto3" json:"parameters,omitempty"`
}

func (x *ScalarFunctionImplProto) Reset() {
	*x = ScalarFunctionImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[144]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunctionImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunctionImplProto) ProtoMessage() {}

func (x *ScalarFunctionImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[144]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunctionImplProto.ProtoReflect.Descriptor instead.
func (*ScalarFunctionImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{144}
}

func (x *ScalarFunctionImplProto) GetImplementor() *CallImplementorProto {
	if x != nil {
		return x.Implementor
	}
	return nil
}

func (x *ScalarFunctionImplProto) GetMethod() *MethodProto {
	if x != nil {
		return x.Method
	}
	return nil
}

func (x *ScalarFunctionImplProto) GetParameters() []*FunctionParameterProto {
	if x != nil {
		return x.Parameters
	}
	return nil
}

// Java Class: org.apache.calcite.schema.ImplementableFunction
type ImplementableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImplementableFunctionProto:
	//
	//	*ImplementableFunctionProto_TableFunctionImplProto
	//	*ImplementableFunctionProto_ScalarFunctionImplProto
	ImplementableFunctionProto isImplementableFunctionProto_ImplementableFunctionProto `protobuf_oneof:"implementableFunctionProto"`
}

func (x *ImplementableFunctionProto) Reset() {
	*x = ImplementableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[145]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementableFunctionProto) ProtoMessage() {}

func (x *ImplementableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[145]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementableFunctionProto.ProtoReflect.Descriptor instead.
func (*ImplementableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{145}
}

func (m *ImplementableFunctionProto) GetImplementableFunctionProto() isImplementableFunctionProto_ImplementableFunctionProto {
	if m != nil {
		return m.ImplementableFunctionProto
	}
	return nil
}

func (x *ImplementableFunctionProto) GetTableFunctionImplProto() *TableFunctionImplProto {
	if x, ok := x.GetImplementableFunctionProto().(*ImplementableFunctionProto_TableFunctionImplProto); ok {
		return x.TableFunctionImplProto
	}
	return nil
}

func (x *ImplementableFunctionProto) GetScalarFunctionImplProto() *ScalarFunctionImplProto {
	if x, ok := x.GetImplementableFunctionProto().(*ImplementableFunctionProto_ScalarFunctionImplProto); ok {
		return x.ScalarFunctionImplProto
	}
	return nil
}

type isImplementableFunctionProto_ImplementableFunctionProto interface {
	isImplementableFunctionProto_ImplementableFunctionProto()
}

type ImplementableFunctionProto_TableFunctionImplProto struct {
	TableFunctionImplProto *TableFunctionImplProto `protobuf:"bytes,1,opt,name=tableFunctionImplProto,proto3,oneof"`
}

type ImplementableFunctionProto_ScalarFunctionImplProto struct {
	ScalarFunctionImplProto *ScalarFunctionImplProto `protobuf:"bytes,2,opt,name=scalarFunctionImplProto,proto3,oneof"`
}

func (*ImplementableFunctionProto_TableFunctionImplProto) isImplementableFunctionProto_ImplementableFunctionProto() {
}

func (*ImplementableFunctionProto_ScalarFunctionImplProto) isImplementableFunctionProto_ImplementableFunctionProto() {
}

// Java Class: org.apache.calcite.schema.ScalarFunction
type ScalarFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ScalarFunctionProto:
	//
	//	*ScalarFunctionProto_ScalarFunctionImplProto
	ScalarFunctionProto isScalarFunctionProto_ScalarFunctionProto `protobuf_oneof:"scalarFunctionProto"`
}

func (x *ScalarFunctionProto) Reset() {
	*x = ScalarFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[146]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ScalarFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ScalarFunctionProto) ProtoMessage() {}

func (x *ScalarFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[146]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ScalarFunctionProto.ProtoReflect.Descriptor instead.
func (*ScalarFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{146}
}

func (m *ScalarFunctionProto) GetScalarFunctionProto() isScalarFunctionProto_ScalarFunctionProto {
	if m != nil {
		return m.ScalarFunctionProto
	}
	return nil
}

func (x *ScalarFunctionProto) GetScalarFunctionImplProto() *ScalarFunctionImplProto {
	if x, ok := x.GetScalarFunctionProto().(*ScalarFunctionProto_ScalarFunctionImplProto); ok {
		return x.ScalarFunctionImplProto
	}
	return nil
}

type isScalarFunctionProto_ScalarFunctionProto interface {
	isScalarFunctionProto_ScalarFunctionProto()
}

type ScalarFunctionProto_ScalarFunctionImplProto struct {
	ScalarFunctionImplProto *ScalarFunctionImplProto `protobuf:"bytes,1,opt,name=scalarFunctionImplProto,proto3,oneof"`
}

func (*ScalarFunctionProto_ScalarFunctionImplProto) isScalarFunctionProto_ScalarFunctionProto() {}

// Java Class: org.apache.calcite.schema.AggregateFunction
type AggregateFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AggregateFunctionProto:
	//
	//	*AggregateFunctionProto_ImplementableAggFunctionProto
	//	*AggregateFunctionProto_AggregateFunctionImplProto
	AggregateFunctionProto isAggregateFunctionProto_AggregateFunctionProto `protobuf_oneof:"aggregateFunctionProto"`
}

func (x *AggregateFunctionProto) Reset() {
	*x = AggregateFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[147]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFunctionProto) ProtoMessage() {}

func (x *AggregateFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[147]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFunctionProto.ProtoReflect.Descriptor instead.
func (*AggregateFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{147}
}

func (m *AggregateFunctionProto) GetAggregateFunctionProto() isAggregateFunctionProto_AggregateFunctionProto {
	if m != nil {
		return m.AggregateFunctionProto
	}
	return nil
}

func (x *AggregateFunctionProto) GetImplementableAggFunctionProto() *ImplementableAggFunctionProto {
	if x, ok := x.GetAggregateFunctionProto().(*AggregateFunctionProto_ImplementableAggFunctionProto); ok {
		return x.ImplementableAggFunctionProto
	}
	return nil
}

func (x *AggregateFunctionProto) GetAggregateFunctionImplProto() *AggregateFunctionImplProto {
	if x, ok := x.GetAggregateFunctionProto().(*AggregateFunctionProto_AggregateFunctionImplProto); ok {
		return x.AggregateFunctionImplProto
	}
	return nil
}

type isAggregateFunctionProto_AggregateFunctionProto interface {
	isAggregateFunctionProto_AggregateFunctionProto()
}

type AggregateFunctionProto_ImplementableAggFunctionProto struct {
	ImplementableAggFunctionProto *ImplementableAggFunctionProto `protobuf:"bytes,1,opt,name=implementableAggFunctionProto,proto3,oneof"`
}

type AggregateFunctionProto_AggregateFunctionImplProto struct {
	AggregateFunctionImplProto *AggregateFunctionImplProto `protobuf:"bytes,2,opt,name=aggregateFunctionImplProto,proto3,oneof"`
}

func (*AggregateFunctionProto_ImplementableAggFunctionProto) isAggregateFunctionProto_AggregateFunctionProto() {
}

func (*AggregateFunctionProto_AggregateFunctionImplProto) isAggregateFunctionProto_AggregateFunctionProto() {
}

// Java Class: org.apache.calcite.schema.ImplementableAggFunction
type ImplementableAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImplementableAggFunctionProto:
	//
	//	*ImplementableAggFunctionProto_AggregateFunctionImplProto
	ImplementableAggFunctionProto isImplementableAggFunctionProto_ImplementableAggFunctionProto `protobuf_oneof:"implementableAggFunctionProto"`
}

func (x *ImplementableAggFunctionProto) Reset() {
	*x = ImplementableAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[148]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImplementableAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImplementableAggFunctionProto) ProtoMessage() {}

func (x *ImplementableAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[148]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImplementableAggFunctionProto.ProtoReflect.Descriptor instead.
func (*ImplementableAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{148}
}

func (m *ImplementableAggFunctionProto) GetImplementableAggFunctionProto() isImplementableAggFunctionProto_ImplementableAggFunctionProto {
	if m != nil {
		return m.ImplementableAggFunctionProto
	}
	return nil
}

func (x *ImplementableAggFunctionProto) GetAggregateFunctionImplProto() *AggregateFunctionImplProto {
	if x, ok := x.GetImplementableAggFunctionProto().(*ImplementableAggFunctionProto_AggregateFunctionImplProto); ok {
		return x.AggregateFunctionImplProto
	}
	return nil
}

type isImplementableAggFunctionProto_ImplementableAggFunctionProto interface {
	isImplementableAggFunctionProto_ImplementableAggFunctionProto()
}

type ImplementableAggFunctionProto_AggregateFunctionImplProto struct {
	AggregateFunctionImplProto *AggregateFunctionImplProto `protobuf:"bytes,1,opt,name=aggregateFunctionImplProto,proto3,oneof"`
}

func (*ImplementableAggFunctionProto_AggregateFunctionImplProto) isImplementableAggFunctionProto_ImplementableAggFunctionProto() {
}

// Java Class: org.apache.calcite.schema.impl.AggregateFunctionImpl
type AggregateFunctionImplProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsStatic        bool                      `protobuf:"varint,1,opt,name=isStatic,proto3" json:"isStatic,omitempty"`
	InitMethod      *MethodProto              `protobuf:"bytes,2,opt,name=initMethod,proto3" json:"initMethod,omitempty"`
	AddMethod       *MethodProto              `protobuf:"bytes,3,opt,name=addMethod,proto3" json:"addMethod,omitempty"`
	MergeMethod     *MethodProto              `protobuf:"bytes,4,opt,name=mergeMethod,proto3" json:"mergeMethod,omitempty"`
	ResultMethod    *MethodProto              `protobuf:"bytes,5,opt,name=resultMethod,proto3" json:"resultMethod,omitempty"`
	Parameters      []*FunctionParameterProto `protobuf:"bytes,6,rep,name=parameters,proto3" json:"parameters,omitempty"`
	AccumulatorType *ClassProto               `protobuf:"bytes,7,opt,name=accumulatorType,proto3" json:"accumulatorType,omitempty"`
	ResultType      *ClassProto               `protobuf:"bytes,8,opt,name=resultType,proto3" json:"resultType,omitempty"`
	DeclaringClass  *ClassProto               `protobuf:"bytes,9,opt,name=declaringClass,proto3" json:"declaringClass,omitempty"`
}

func (x *AggregateFunctionImplProto) Reset() {
	*x = AggregateFunctionImplProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[149]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AggregateFunctionImplProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AggregateFunctionImplProto) ProtoMessage() {}

func (x *AggregateFunctionImplProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[149]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AggregateFunctionImplProto.ProtoReflect.Descriptor instead.
func (*AggregateFunctionImplProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{149}
}

func (x *AggregateFunctionImplProto) GetIsStatic() bool {
	if x != nil {
		return x.IsStatic
	}
	return false
}

func (x *AggregateFunctionImplProto) GetInitMethod() *MethodProto {
	if x != nil {
		return x.InitMethod
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetAddMethod() *MethodProto {
	if x != nil {
		return x.AddMethod
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetMergeMethod() *MethodProto {
	if x != nil {
		return x.MergeMethod
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetResultMethod() *MethodProto {
	if x != nil {
		return x.ResultMethod
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetParameters() []*FunctionParameterProto {
	if x != nil {
		return x.Parameters
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetAccumulatorType() *ClassProto {
	if x != nil {
		return x.AccumulatorType
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetResultType() *ClassProto {
	if x != nil {
		return x.ResultType
	}
	return nil
}

func (x *AggregateFunctionImplProto) GetDeclaringClass() *ClassProto {
	if x != nil {
		return x.DeclaringClass
	}
	return nil
}

// Java Class: org.apache.calcite.sql.fun.SqlExtractFunction
type SqlExtractFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlExtractFunctionProto) Reset() {
	*x = SqlExtractFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[150]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlExtractFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlExtractFunctionProto) ProtoMessage() {}

func (x *SqlExtractFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[150]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlExtractFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlExtractFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{150}
}

func (x *SqlExtractFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlExtractFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlExtractFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlExtractFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlExtractFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlExtractFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlExtractFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlExtractFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlExtractFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlExtractFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlTranslate3Function
type SqlTranslate3FunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTranslate3FunctionProto) Reset() {
	*x = SqlTranslate3FunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[151]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTranslate3FunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTranslate3FunctionProto) ProtoMessage() {}

func (x *SqlTranslate3FunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[151]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTranslate3FunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTranslate3FunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{151}
}

func (x *SqlTranslate3FunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTranslate3FunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTranslate3FunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTranslate3FunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTranslate3FunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTranslate3FunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTranslate3FunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTranslate3FunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTranslate3FunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTranslate3FunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlTrimFunction
type SqlTrimFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTrimFunctionProto) Reset() {
	*x = SqlTrimFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[152]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTrimFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTrimFunctionProto) ProtoMessage() {}

func (x *SqlTrimFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[152]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTrimFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTrimFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{152}
}

func (x *SqlTrimFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTrimFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTrimFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTrimFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTrimFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTrimFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTrimFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTrimFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTrimFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTrimFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSubstringFunction
type SqlSubstringFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSubstringFunctionProto) Reset() {
	*x = SqlSubstringFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[153]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSubstringFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSubstringFunctionProto) ProtoMessage() {}

func (x *SqlSubstringFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[153]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSubstringFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlSubstringFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{153}
}

func (x *SqlSubstringFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlSubstringFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlSubstringFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSubstringFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSubstringFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSubstringFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSubstringFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSubstringFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSubstringFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSubstringFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonDepthFunction
type SqlJsonDepthFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonDepthFunctionProto) Reset() {
	*x = SqlJsonDepthFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[154]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonDepthFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonDepthFunctionProto) ProtoMessage() {}

func (x *SqlJsonDepthFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[154]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonDepthFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonDepthFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{154}
}

func (x *SqlJsonDepthFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonDepthFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonDepthFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonDepthFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonDepthFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonDepthFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonDepthFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonDepthFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonDepthFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonDepthFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlAbstractTimeFunction
type SqlAbstractTimeFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeName             SqlTypeNameProto              `protobuf:"varint,1,opt,name=typeName,proto3,enum=rill.sql.v1.SqlTypeNameProto" json:"typeName,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAbstractTimeFunctionProto) Reset() {
	*x = SqlAbstractTimeFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[155]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAbstractTimeFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAbstractTimeFunctionProto) ProtoMessage() {}

func (x *SqlAbstractTimeFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[155]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAbstractTimeFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlAbstractTimeFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{155}
}

func (x *SqlAbstractTimeFunctionProto) GetTypeName() SqlTypeNameProto {
	if x != nil {
		return x.TypeName
	}
	return SqlTypeNameProto_SqlTypeNameProto_BOOLEAN_
}

func (x *SqlAbstractTimeFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlAbstractTimeFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlAbstractTimeFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAbstractTimeFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAbstractTimeFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAbstractTimeFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAbstractTimeFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAbstractTimeFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAbstractTimeFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAbstractTimeFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlRandFunction
type SqlRandFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRandFunctionProto) Reset() {
	*x = SqlRandFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[156]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRandFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRandFunctionProto) ProtoMessage() {}

func (x *SqlRandFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[156]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRandFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlRandFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{156}
}

func (x *SqlRandFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlRandFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlRandFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRandFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRandFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRandFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRandFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRandFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRandFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRandFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCoalesceFunction
type SqlCoalesceFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCoalesceFunctionProto) Reset() {
	*x = SqlCoalesceFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[157]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCoalesceFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCoalesceFunctionProto) ProtoMessage() {}

func (x *SqlCoalesceFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[157]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCoalesceFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCoalesceFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{157}
}

func (x *SqlCoalesceFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlCoalesceFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlCoalesceFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCoalesceFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCoalesceFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCoalesceFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCoalesceFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCoalesceFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCoalesceFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCoalesceFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonTypeFunction
type SqlJsonTypeFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonTypeFunctionProto) Reset() {
	*x = SqlJsonTypeFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[158]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonTypeFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonTypeFunctionProto) ProtoMessage() {}

func (x *SqlJsonTypeFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[158]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonTypeFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonTypeFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{158}
}

func (x *SqlJsonTypeFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonTypeFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonTypeFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonTypeFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonTypeFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonTypeFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonTypeFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonTypeFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonTypeFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonTypeFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonValueFunction
type SqlJsonValueFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonValueFunctionProto) Reset() {
	*x = SqlJsonValueFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[159]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonValueFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonValueFunctionProto) ProtoMessage() {}

func (x *SqlJsonValueFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[159]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonValueFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonValueFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{159}
}

func (x *SqlJsonValueFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonValueFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonValueFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonValueFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonValueFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonValueFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonValueFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonValueFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonValueFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonValueFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlDatePartFunction
type SqlDatePartFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeUnit             TimeUnitProto                 `protobuf:"varint,1,opt,name=timeUnit,proto3,enum=rill.sql.v1.TimeUnitProto" json:"timeUnit,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDatePartFunctionProto) Reset() {
	*x = SqlDatePartFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[160]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatePartFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatePartFunctionProto) ProtoMessage() {}

func (x *SqlDatePartFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[160]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatePartFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlDatePartFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{160}
}

func (x *SqlDatePartFunctionProto) GetTimeUnit() TimeUnitProto {
	if x != nil {
		return x.TimeUnit
	}
	return TimeUnitProto_TimeUnitProto_YEAR_
}

func (x *SqlDatePartFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlDatePartFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlDatePartFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDatePartFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDatePartFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDatePartFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDatePartFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDatePartFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDatePartFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDatePartFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonObjectFunction
type SqlJsonObjectFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonObjectFunctionProto) Reset() {
	*x = SqlJsonObjectFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[161]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonObjectFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonObjectFunctionProto) ProtoMessage() {}

func (x *SqlJsonObjectFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[161]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonObjectFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonObjectFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{161}
}

func (x *SqlJsonObjectFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonObjectFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonObjectFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonObjectFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonObjectFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonObjectFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonObjectFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonObjectFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonObjectFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonObjectFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlNullifFunction
type SqlNullifFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlNullifFunctionProto) Reset() {
	*x = SqlNullifFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[162]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNullifFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNullifFunctionProto) ProtoMessage() {}

func (x *SqlNullifFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[162]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNullifFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlNullifFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{162}
}

func (x *SqlNullifFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlNullifFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlNullifFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlNullifFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlNullifFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlNullifFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlNullifFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlNullifFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlNullifFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlNullifFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlTimestampAddFunction
type SqlTimestampAddFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTimestampAddFunctionProto) Reset() {
	*x = SqlTimestampAddFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[163]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimestampAddFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimestampAddFunctionProto) ProtoMessage() {}

func (x *SqlTimestampAddFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[163]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimestampAddFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTimestampAddFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{163}
}

func (x *SqlTimestampAddFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTimestampAddFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTimestampAddFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTimestampAddFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTimestampAddFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTimestampAddFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTimestampAddFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTimestampAddFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTimestampAddFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTimestampAddFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonPrettyFunction
type SqlJsonPrettyFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonPrettyFunctionProto) Reset() {
	*x = SqlJsonPrettyFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[164]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonPrettyFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonPrettyFunctionProto) ProtoMessage() {}

func (x *SqlJsonPrettyFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[164]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonPrettyFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonPrettyFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{164}
}

func (x *SqlJsonPrettyFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonPrettyFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonPrettyFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonPrettyFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonPrettyFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonPrettyFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonPrettyFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonPrettyFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonPrettyFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonPrettyFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlBaseContextVariable
type SqlBaseContextVariableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlBaseContextVariableProto:
	//
	//	*SqlBaseContextVariableProto_SqlStringContextVariableProto
	SqlBaseContextVariableProto isSqlBaseContextVariableProto_SqlBaseContextVariableProto `protobuf_oneof:"sqlBaseContextVariableProto"`
	Category                    SqlFunctionCategoryProto                                  `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier               *SqlIdentifierProto                                       `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                        string                                                    `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                        SqlKindProto                                              `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                    int32                                                     `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                   int32                                                     `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference         *SqlReturnTypeInferenceProto                              `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference        *SqlOperandTypeInferenceProto                             `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker          *SqlOperandTypeCheckerProto                               `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures           string                                                    `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlBaseContextVariableProto) Reset() {
	*x = SqlBaseContextVariableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[165]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBaseContextVariableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBaseContextVariableProto) ProtoMessage() {}

func (x *SqlBaseContextVariableProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[165]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBaseContextVariableProto.ProtoReflect.Descriptor instead.
func (*SqlBaseContextVariableProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{165}
}

func (m *SqlBaseContextVariableProto) GetSqlBaseContextVariableProto() isSqlBaseContextVariableProto_SqlBaseContextVariableProto {
	if m != nil {
		return m.SqlBaseContextVariableProto
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetSqlStringContextVariableProto() *SqlStringContextVariableProto {
	if x, ok := x.GetSqlBaseContextVariableProto().(*SqlBaseContextVariableProto_SqlStringContextVariableProto); ok {
		return x.SqlStringContextVariableProto
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlBaseContextVariableProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlBaseContextVariableProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlBaseContextVariableProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlBaseContextVariableProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlBaseContextVariableProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlBaseContextVariableProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlBaseContextVariableProto_SqlBaseContextVariableProto interface {
	isSqlBaseContextVariableProto_SqlBaseContextVariableProto()
}

type SqlBaseContextVariableProto_SqlStringContextVariableProto struct {
	SqlStringContextVariableProto *SqlStringContextVariableProto `protobuf:"bytes,1,opt,name=sqlStringContextVariableProto,proto3,oneof"`
}

func (*SqlBaseContextVariableProto_SqlStringContextVariableProto) isSqlBaseContextVariableProto_SqlBaseContextVariableProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlStringContextVariable
type SqlStringContextVariableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlStringContextVariableProto) Reset() {
	*x = SqlStringContextVariableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[166]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlStringContextVariableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlStringContextVariableProto) ProtoMessage() {}

func (x *SqlStringContextVariableProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[166]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlStringContextVariableProto.ProtoReflect.Descriptor instead.
func (*SqlStringContextVariableProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{166}
}

func (x *SqlStringContextVariableProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlStringContextVariableProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlStringContextVariableProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlStringContextVariableProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlStringContextVariableProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlStringContextVariableProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlStringContextVariableProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlStringContextVariableProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlStringContextVariableProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlStringContextVariableProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlConvertFunction
type SqlConvertFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlConvertFunctionProto) Reset() {
	*x = SqlConvertFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[167]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlConvertFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlConvertFunctionProto) ProtoMessage() {}

func (x *SqlConvertFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[167]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlConvertFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlConvertFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{167}
}

func (x *SqlConvertFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlConvertFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlConvertFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlConvertFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlConvertFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlConvertFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlConvertFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlConvertFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlConvertFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlConvertFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlGroupedWindowFunction
type SqlGroupedWindowFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GroupFunction        *SqlGroupedWindowFunctionProto `protobuf:"bytes,1,opt,name=groupFunction,proto3" json:"groupFunction,omitempty"`
	Category             SqlFunctionCategoryProto       `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto            `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                         `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                   `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                          `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                          `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto   `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto  `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto    `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                         `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlGroupedWindowFunctionProto) Reset() {
	*x = SqlGroupedWindowFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[168]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlGroupedWindowFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlGroupedWindowFunctionProto) ProtoMessage() {}

func (x *SqlGroupedWindowFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[168]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlGroupedWindowFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlGroupedWindowFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{168}
}

func (x *SqlGroupedWindowFunctionProto) GetGroupFunction() *SqlGroupedWindowFunctionProto {
	if x != nil {
		return x.GroupFunction
	}
	return nil
}

func (x *SqlGroupedWindowFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlGroupedWindowFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlGroupedWindowFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlGroupedWindowFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlGroupedWindowFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlGroupedWindowFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlGroupedWindowFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlGroupedWindowFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlGroupedWindowFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlGroupedWindowFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlTypeConstructorFunction
type SqlTypeConstructorFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *RelDataTypeProto             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTypeConstructorFunctionProto) Reset() {
	*x = SqlTypeConstructorFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[169]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTypeConstructorFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTypeConstructorFunctionProto) ProtoMessage() {}

func (x *SqlTypeConstructorFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[169]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTypeConstructorFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTypeConstructorFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{169}
}

func (x *SqlTypeConstructorFunctionProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SqlTypeConstructorFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTypeConstructorFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTypeConstructorFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTypeConstructorFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTypeConstructorFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTypeConstructorFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTypeConstructorFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTypeConstructorFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTypeConstructorFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTypeConstructorFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlTimestampDiffFunction
type SqlTimestampDiffFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTimestampDiffFunctionProto) Reset() {
	*x = SqlTimestampDiffFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[170]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTimestampDiffFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTimestampDiffFunctionProto) ProtoMessage() {}

func (x *SqlTimestampDiffFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[170]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTimestampDiffFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTimestampDiffFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{170}
}

func (x *SqlTimestampDiffFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTimestampDiffFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTimestampDiffFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTimestampDiffFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTimestampDiffFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTimestampDiffFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTimestampDiffFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTimestampDiffFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTimestampDiffFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTimestampDiffFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonKeysFunction
type SqlJsonKeysFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonKeysFunctionProto) Reset() {
	*x = SqlJsonKeysFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[171]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonKeysFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonKeysFunctionProto) ProtoMessage() {}

func (x *SqlJsonKeysFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[171]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonKeysFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonKeysFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{171}
}

func (x *SqlJsonKeysFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonKeysFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonKeysFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonKeysFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonKeysFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonKeysFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonKeysFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonKeysFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonKeysFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonKeysFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonLengthFunction
type SqlJsonLengthFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonLengthFunctionProto) Reset() {
	*x = SqlJsonLengthFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[172]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonLengthFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonLengthFunctionProto) ProtoMessage() {}

func (x *SqlJsonLengthFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[172]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonLengthFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonLengthFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{172}
}

func (x *SqlJsonLengthFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonLengthFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonLengthFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonLengthFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonLengthFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonLengthFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonLengthFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonLengthFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonLengthFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonLengthFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCastFunction
type SqlCastFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NonMonotonicCasts    *SetMultimapProto             `protobuf:"bytes,1,opt,name=nonMonotonicCasts,proto3" json:"nonMonotonicCasts,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCastFunctionProto) Reset() {
	*x = SqlCastFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[173]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCastFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCastFunctionProto) ProtoMessage() {}

func (x *SqlCastFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[173]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCastFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCastFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{173}
}

func (x *SqlCastFunctionProto) GetNonMonotonicCasts() *SetMultimapProto {
	if x != nil {
		return x.NonMonotonicCasts
	}
	return nil
}

func (x *SqlCastFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlCastFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlCastFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCastFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCastFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCastFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCastFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCastFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCastFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCastFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: com.google.common.collect.SetMultimap
type SetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SetMultimapProto:
	//
	//	*SetMultimapProto_AbstractSetMultimapProto
	//	*SetMultimapProto_SortedSetMultimapProto
	//	*SetMultimapProto_ForwardingSetMultimapProto
	//	*SetMultimapProto_FilteredSetMultimapProto
	//	*SetMultimapProto_ImmutableSetMultimapProto
	//	*SetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto
	//	*SetMultimapProto_HashMultimapGwtSerializationDependenciesProto
	//	*SetMultimapProto_AbstractSortedSetMultimapProto
	//	*SetMultimapProto_ForwardingSortedSetMultimapProto
	//	*SetMultimapProto_FilteredEntrySetMultimapProto
	//	*SetMultimapProto_FilteredKeySetMultimapProto
	//	*SetMultimapProto_EmptyImmutableSetMultimapProto
	//	*SetMultimapProto_LinkedHashMultimapProto
	//	*SetMultimapProto_HashMultimapProto
	//	*SetMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*SetMultimapProto_TreeMultimapProto
	SetMultimapProto isSetMultimapProto_SetMultimapProto `protobuf_oneof:"setMultimapProto"`
}

func (x *SetMultimapProto) Reset() {
	*x = SetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[174]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMultimapProto) ProtoMessage() {}

func (x *SetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[174]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMultimapProto.ProtoReflect.Descriptor instead.
func (*SetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{174}
}

func (m *SetMultimapProto) GetSetMultimapProto() isSetMultimapProto_SetMultimapProto {
	if m != nil {
		return m.SetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetAbstractSetMultimapProto() *AbstractSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_AbstractSetMultimapProto); ok {
		return x.AbstractSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetSortedSetMultimapProto() *SortedSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_SortedSetMultimapProto); ok {
		return x.SortedSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetForwardingSetMultimapProto() *ForwardingSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_ForwardingSetMultimapProto); ok {
		return x.ForwardingSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetFilteredSetMultimapProto() *FilteredSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_FilteredSetMultimapProto); ok {
		return x.FilteredSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetImmutableSetMultimapProto() *ImmutableSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_ImmutableSetMultimapProto); ok {
		return x.ImmutableSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() *LinkedHashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto); ok {
		return x.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *SetMultimapProto) GetHashMultimapGwtSerializationDependenciesProto() *HashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_HashMultimapGwtSerializationDependenciesProto); ok {
		return x.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *SetMultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetForwardingSortedSetMultimapProto() *ForwardingSortedSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_ForwardingSortedSetMultimapProto); ok {
		return x.ForwardingSortedSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *SetMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetSetMultimapProto().(*SetMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isSetMultimapProto_SetMultimapProto interface {
	isSetMultimapProto_SetMultimapProto()
}

type SetMultimapProto_AbstractSetMultimapProto struct {
	AbstractSetMultimapProto *AbstractSetMultimapProto `protobuf:"bytes,1,opt,name=abstractSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_SortedSetMultimapProto struct {
	SortedSetMultimapProto *SortedSetMultimapProto `protobuf:"bytes,2,opt,name=sortedSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_ForwardingSetMultimapProto struct {
	ForwardingSetMultimapProto *ForwardingSetMultimapProto `protobuf:"bytes,3,opt,name=forwardingSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_FilteredSetMultimapProto struct {
	FilteredSetMultimapProto *FilteredSetMultimapProto `protobuf:"bytes,4,opt,name=filteredSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_ImmutableSetMultimapProto struct {
	ImmutableSetMultimapProto *ImmutableSetMultimapProto `protobuf:"bytes,5,opt,name=immutableSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto struct {
	LinkedHashMultimapGwtSerializationDependenciesProto *LinkedHashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,6,opt,name=linkedHashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type SetMultimapProto_HashMultimapGwtSerializationDependenciesProto struct {
	HashMultimapGwtSerializationDependenciesProto *HashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,7,opt,name=hashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type SetMultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,8,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_ForwardingSortedSetMultimapProto struct {
	ForwardingSortedSetMultimapProto *ForwardingSortedSetMultimapProto `protobuf:"bytes,9,opt,name=forwardingSortedSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,10,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,11,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,12,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,13,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

type SetMultimapProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,14,opt,name=hashMultimapProto,proto3,oneof"`
}

type SetMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,15,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type SetMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,16,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*SetMultimapProto_AbstractSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_SortedSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_ForwardingSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_FilteredSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_ImmutableSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto) isSetMultimapProto_SetMultimapProto() {
}

func (*SetMultimapProto_HashMultimapGwtSerializationDependenciesProto) isSetMultimapProto_SetMultimapProto() {
}

func (*SetMultimapProto_AbstractSortedSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_ForwardingSortedSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_FilteredEntrySetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_FilteredKeySetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_EmptyImmutableSetMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_LinkedHashMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_HashMultimapProto) isSetMultimapProto_SetMultimapProto() {}

func (*SetMultimapProto_AbstractSortedKeySortedSetMultimapProto) isSetMultimapProto_SetMultimapProto() {
}

func (*SetMultimapProto_TreeMultimapProto) isSetMultimapProto_SetMultimapProto() {}

// Java Class: com.google.common.collect.AbstractSetMultimap
type AbstractSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractSetMultimapProto:
	//
	//	*AbstractSetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto
	//	*AbstractSetMultimapProto_HashMultimapGwtSerializationDependenciesProto
	//	*AbstractSetMultimapProto_AbstractSortedSetMultimapProto
	//	*AbstractSetMultimapProto_LinkedHashMultimapProto
	//	*AbstractSetMultimapProto_HashMultimapProto
	//	*AbstractSetMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*AbstractSetMultimapProto_TreeMultimapProto
	AbstractSetMultimapProto isAbstractSetMultimapProto_AbstractSetMultimapProto `protobuf_oneof:"abstractSetMultimapProto"`
}

func (x *AbstractSetMultimapProto) Reset() {
	*x = AbstractSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[175]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractSetMultimapProto) ProtoMessage() {}

func (x *AbstractSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[175]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractSetMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{175}
}

func (m *AbstractSetMultimapProto) GetAbstractSetMultimapProto() isAbstractSetMultimapProto_AbstractSetMultimapProto {
	if m != nil {
		return m.AbstractSetMultimapProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() *LinkedHashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto); ok {
		return x.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetHashMultimapGwtSerializationDependenciesProto() *HashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_HashMultimapGwtSerializationDependenciesProto); ok {
		return x.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *AbstractSetMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetAbstractSetMultimapProto().(*AbstractSetMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isAbstractSetMultimapProto_AbstractSetMultimapProto interface {
	isAbstractSetMultimapProto_AbstractSetMultimapProto()
}

type AbstractSetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto struct {
	LinkedHashMultimapGwtSerializationDependenciesProto *LinkedHashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,1,opt,name=linkedHashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractSetMultimapProto_HashMultimapGwtSerializationDependenciesProto struct {
	HashMultimapGwtSerializationDependenciesProto *HashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,2,opt,name=hashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractSetMultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,3,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type AbstractSetMultimapProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,4,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

type AbstractSetMultimapProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,5,opt,name=hashMultimapProto,proto3,oneof"`
}

type AbstractSetMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,6,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type AbstractSetMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,7,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*AbstractSetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_HashMultimapGwtSerializationDependenciesProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_AbstractSortedSetMultimapProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_LinkedHashMultimapProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_HashMultimapProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_AbstractSortedKeySortedSetMultimapProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

func (*AbstractSetMultimapProto_TreeMultimapProto) isAbstractSetMultimapProto_AbstractSetMultimapProto() {
}

// Java Class: com.google.common.collect.LinkedHashMultimapGwtSerializationDependencies
type LinkedHashMultimapGwtSerializationDependenciesProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to LinkedHashMultimapGwtSerializationDependenciesProto:
	//
	//	*LinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapProto
	LinkedHashMultimapGwtSerializationDependenciesProto isLinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapGwtSerializationDependenciesProto `protobuf_oneof:"linkedHashMultimapGwtSerializationDependenciesProto"`
}

func (x *LinkedHashMultimapGwtSerializationDependenciesProto) Reset() {
	*x = LinkedHashMultimapGwtSerializationDependenciesProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[176]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedHashMultimapGwtSerializationDependenciesProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedHashMultimapGwtSerializationDependenciesProto) ProtoMessage() {}

func (x *LinkedHashMultimapGwtSerializationDependenciesProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[176]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedHashMultimapGwtSerializationDependenciesProto.ProtoReflect.Descriptor instead.
func (*LinkedHashMultimapGwtSerializationDependenciesProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{176}
}

func (m *LinkedHashMultimapGwtSerializationDependenciesProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() isLinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapGwtSerializationDependenciesProto {
	if m != nil {
		return m.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *LinkedHashMultimapGwtSerializationDependenciesProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetLinkedHashMultimapGwtSerializationDependenciesProto().(*LinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

type isLinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapGwtSerializationDependenciesProto interface {
	isLinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapGwtSerializationDependenciesProto()
}

type LinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,1,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

func (*LinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapProto) isLinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapGwtSerializationDependenciesProto() {
}

// Java Class: com.google.common.collect.LinkedHashMultimap
type LinkedHashMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkedHashMultimapProto) Reset() {
	*x = LinkedHashMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[177]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedHashMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedHashMultimapProto) ProtoMessage() {}

func (x *LinkedHashMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[177]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedHashMultimapProto.ProtoReflect.Descriptor instead.
func (*LinkedHashMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{177}
}

// Java Class: com.google.common.collect.HashMultimapGwtSerializationDependencies
type HashMultimapGwtSerializationDependenciesProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to HashMultimapGwtSerializationDependenciesProto:
	//
	//	*HashMultimapGwtSerializationDependenciesProto_HashMultimapProto
	HashMultimapGwtSerializationDependenciesProto isHashMultimapGwtSerializationDependenciesProto_HashMultimapGwtSerializationDependenciesProto `protobuf_oneof:"hashMultimapGwtSerializationDependenciesProto"`
}

func (x *HashMultimapGwtSerializationDependenciesProto) Reset() {
	*x = HashMultimapGwtSerializationDependenciesProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[178]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashMultimapGwtSerializationDependenciesProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashMultimapGwtSerializationDependenciesProto) ProtoMessage() {}

func (x *HashMultimapGwtSerializationDependenciesProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[178]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashMultimapGwtSerializationDependenciesProto.ProtoReflect.Descriptor instead.
func (*HashMultimapGwtSerializationDependenciesProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{178}
}

func (m *HashMultimapGwtSerializationDependenciesProto) GetHashMultimapGwtSerializationDependenciesProto() isHashMultimapGwtSerializationDependenciesProto_HashMultimapGwtSerializationDependenciesProto {
	if m != nil {
		return m.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *HashMultimapGwtSerializationDependenciesProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetHashMultimapGwtSerializationDependenciesProto().(*HashMultimapGwtSerializationDependenciesProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

type isHashMultimapGwtSerializationDependenciesProto_HashMultimapGwtSerializationDependenciesProto interface {
	isHashMultimapGwtSerializationDependenciesProto_HashMultimapGwtSerializationDependenciesProto()
}

type HashMultimapGwtSerializationDependenciesProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,1,opt,name=hashMultimapProto,proto3,oneof"`
}

func (*HashMultimapGwtSerializationDependenciesProto_HashMultimapProto) isHashMultimapGwtSerializationDependenciesProto_HashMultimapGwtSerializationDependenciesProto() {
}

// Java Class: com.google.common.collect.HashMultimap
type HashMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *HashMultimapProto) Reset() {
	*x = HashMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[179]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HashMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HashMultimapProto) ProtoMessage() {}

func (x *HashMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[179]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HashMultimapProto.ProtoReflect.Descriptor instead.
func (*HashMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{179}
}

// Java Class: com.google.common.collect.AbstractSortedSetMultimap
type AbstractSortedSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractSortedSetMultimapProto:
	//
	//	*AbstractSortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*AbstractSortedSetMultimapProto_TreeMultimapProto
	AbstractSortedSetMultimapProto isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto `protobuf_oneof:"abstractSortedSetMultimapProto"`
}

func (x *AbstractSortedSetMultimapProto) Reset() {
	*x = AbstractSortedSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[180]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractSortedSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractSortedSetMultimapProto) ProtoMessage() {}

func (x *AbstractSortedSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[180]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractSortedSetMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractSortedSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{180}
}

func (m *AbstractSortedSetMultimapProto) GetAbstractSortedSetMultimapProto() isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto {
	if m != nil {
		return m.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *AbstractSortedSetMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetAbstractSortedSetMultimapProto().(*AbstractSortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *AbstractSortedSetMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetAbstractSortedSetMultimapProto().(*AbstractSortedSetMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto interface {
	isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto()
}

type AbstractSortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,1,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type AbstractSortedSetMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,2,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*AbstractSortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto) isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto() {
}

func (*AbstractSortedSetMultimapProto_TreeMultimapProto) isAbstractSortedSetMultimapProto_AbstractSortedSetMultimapProto() {
}

// Java Class: com.google.common.collect.AbstractSortedKeySortedSetMultimap
type AbstractSortedKeySortedSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractSortedKeySortedSetMultimapProto:
	//
	//	*AbstractSortedKeySortedSetMultimapProto_TreeMultimapProto
	AbstractSortedKeySortedSetMultimapProto isAbstractSortedKeySortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto `protobuf_oneof:"abstractSortedKeySortedSetMultimapProto"`
}

func (x *AbstractSortedKeySortedSetMultimapProto) Reset() {
	*x = AbstractSortedKeySortedSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[181]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractSortedKeySortedSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractSortedKeySortedSetMultimapProto) ProtoMessage() {}

func (x *AbstractSortedKeySortedSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[181]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractSortedKeySortedSetMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractSortedKeySortedSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{181}
}

func (m *AbstractSortedKeySortedSetMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() isAbstractSortedKeySortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto {
	if m != nil {
		return m.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *AbstractSortedKeySortedSetMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetAbstractSortedKeySortedSetMultimapProto().(*AbstractSortedKeySortedSetMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isAbstractSortedKeySortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto interface {
	isAbstractSortedKeySortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto()
}

type AbstractSortedKeySortedSetMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,1,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*AbstractSortedKeySortedSetMultimapProto_TreeMultimapProto) isAbstractSortedKeySortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto() {
}

// Java Class: com.google.common.collect.TreeMultimap
type TreeMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *TreeMultimapProto) Reset() {
	*x = TreeMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[182]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TreeMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TreeMultimapProto) ProtoMessage() {}

func (x *TreeMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[182]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TreeMultimapProto.ProtoReflect.Descriptor instead.
func (*TreeMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{182}
}

// Java Class: com.google.common.collect.SortedSetMultimap
type SortedSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SortedSetMultimapProto:
	//
	//	*SortedSetMultimapProto_ForwardingSortedSetMultimapProto
	//	*SortedSetMultimapProto_AbstractSortedSetMultimapProto
	//	*SortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*SortedSetMultimapProto_TreeMultimapProto
	SortedSetMultimapProto isSortedSetMultimapProto_SortedSetMultimapProto `protobuf_oneof:"sortedSetMultimapProto"`
}

func (x *SortedSetMultimapProto) Reset() {
	*x = SortedSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[183]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SortedSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SortedSetMultimapProto) ProtoMessage() {}

func (x *SortedSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[183]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SortedSetMultimapProto.ProtoReflect.Descriptor instead.
func (*SortedSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{183}
}

func (m *SortedSetMultimapProto) GetSortedSetMultimapProto() isSortedSetMultimapProto_SortedSetMultimapProto {
	if m != nil {
		return m.SortedSetMultimapProto
	}
	return nil
}

func (x *SortedSetMultimapProto) GetForwardingSortedSetMultimapProto() *ForwardingSortedSetMultimapProto {
	if x, ok := x.GetSortedSetMultimapProto().(*SortedSetMultimapProto_ForwardingSortedSetMultimapProto); ok {
		return x.ForwardingSortedSetMultimapProto
	}
	return nil
}

func (x *SortedSetMultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetSortedSetMultimapProto().(*SortedSetMultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *SortedSetMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetSortedSetMultimapProto().(*SortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *SortedSetMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetSortedSetMultimapProto().(*SortedSetMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isSortedSetMultimapProto_SortedSetMultimapProto interface {
	isSortedSetMultimapProto_SortedSetMultimapProto()
}

type SortedSetMultimapProto_ForwardingSortedSetMultimapProto struct {
	ForwardingSortedSetMultimapProto *ForwardingSortedSetMultimapProto `protobuf:"bytes,1,opt,name=forwardingSortedSetMultimapProto,proto3,oneof"`
}

type SortedSetMultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,2,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type SortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,3,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type SortedSetMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,4,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*SortedSetMultimapProto_ForwardingSortedSetMultimapProto) isSortedSetMultimapProto_SortedSetMultimapProto() {
}

func (*SortedSetMultimapProto_AbstractSortedSetMultimapProto) isSortedSetMultimapProto_SortedSetMultimapProto() {
}

func (*SortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto) isSortedSetMultimapProto_SortedSetMultimapProto() {
}

func (*SortedSetMultimapProto_TreeMultimapProto) isSortedSetMultimapProto_SortedSetMultimapProto() {}

// Java Class: com.google.common.collect.ForwardingSortedSetMultimap
type ForwardingSortedSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForwardingSortedSetMultimapProto) Reset() {
	*x = ForwardingSortedSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[184]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingSortedSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingSortedSetMultimapProto) ProtoMessage() {}

func (x *ForwardingSortedSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[184]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingSortedSetMultimapProto.ProtoReflect.Descriptor instead.
func (*ForwardingSortedSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{184}
}

// Java Class: com.google.common.collect.ForwardingSetMultimap
type ForwardingSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ForwardingSetMultimapProto:
	//
	//	*ForwardingSetMultimapProto_ForwardingSortedSetMultimapProto
	ForwardingSetMultimapProto isForwardingSetMultimapProto_ForwardingSetMultimapProto `protobuf_oneof:"forwardingSetMultimapProto"`
}

func (x *ForwardingSetMultimapProto) Reset() {
	*x = ForwardingSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[185]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingSetMultimapProto) ProtoMessage() {}

func (x *ForwardingSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[185]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingSetMultimapProto.ProtoReflect.Descriptor instead.
func (*ForwardingSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{185}
}

func (m *ForwardingSetMultimapProto) GetForwardingSetMultimapProto() isForwardingSetMultimapProto_ForwardingSetMultimapProto {
	if m != nil {
		return m.ForwardingSetMultimapProto
	}
	return nil
}

func (x *ForwardingSetMultimapProto) GetForwardingSortedSetMultimapProto() *ForwardingSortedSetMultimapProto {
	if x, ok := x.GetForwardingSetMultimapProto().(*ForwardingSetMultimapProto_ForwardingSortedSetMultimapProto); ok {
		return x.ForwardingSortedSetMultimapProto
	}
	return nil
}

type isForwardingSetMultimapProto_ForwardingSetMultimapProto interface {
	isForwardingSetMultimapProto_ForwardingSetMultimapProto()
}

type ForwardingSetMultimapProto_ForwardingSortedSetMultimapProto struct {
	ForwardingSortedSetMultimapProto *ForwardingSortedSetMultimapProto `protobuf:"bytes,1,opt,name=forwardingSortedSetMultimapProto,proto3,oneof"`
}

func (*ForwardingSetMultimapProto_ForwardingSortedSetMultimapProto) isForwardingSetMultimapProto_ForwardingSetMultimapProto() {
}

// Java Class: com.google.common.collect.FilteredSetMultimap
type FilteredSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FilteredSetMultimapProto:
	//
	//	*FilteredSetMultimapProto_FilteredEntrySetMultimapProto
	//	*FilteredSetMultimapProto_FilteredKeySetMultimapProto
	FilteredSetMultimapProto isFilteredSetMultimapProto_FilteredSetMultimapProto `protobuf_oneof:"filteredSetMultimapProto"`
}

func (x *FilteredSetMultimapProto) Reset() {
	*x = FilteredSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[186]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredSetMultimapProto) ProtoMessage() {}

func (x *FilteredSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[186]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredSetMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{186}
}

func (m *FilteredSetMultimapProto) GetFilteredSetMultimapProto() isFilteredSetMultimapProto_FilteredSetMultimapProto {
	if m != nil {
		return m.FilteredSetMultimapProto
	}
	return nil
}

func (x *FilteredSetMultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetFilteredSetMultimapProto().(*FilteredSetMultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *FilteredSetMultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetFilteredSetMultimapProto().(*FilteredSetMultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

type isFilteredSetMultimapProto_FilteredSetMultimapProto interface {
	isFilteredSetMultimapProto_FilteredSetMultimapProto()
}

type FilteredSetMultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,1,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

type FilteredSetMultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,2,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

func (*FilteredSetMultimapProto_FilteredEntrySetMultimapProto) isFilteredSetMultimapProto_FilteredSetMultimapProto() {
}

func (*FilteredSetMultimapProto_FilteredKeySetMultimapProto) isFilteredSetMultimapProto_FilteredSetMultimapProto() {
}

// Java Class: com.google.common.collect.FilteredEntrySetMultimap
type FilteredEntrySetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unfiltered *MultimapProto                      `protobuf:"bytes,1,opt,name=unfiltered,proto3" json:"unfiltered,omitempty"`
	Predicate  *ComGoogleCommonBase_PredicateProto `protobuf:"bytes,2,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *FilteredEntrySetMultimapProto) Reset() {
	*x = FilteredEntrySetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[187]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredEntrySetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredEntrySetMultimapProto) ProtoMessage() {}

func (x *FilteredEntrySetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[187]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredEntrySetMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredEntrySetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{187}
}

func (x *FilteredEntrySetMultimapProto) GetUnfiltered() *MultimapProto {
	if x != nil {
		return x.Unfiltered
	}
	return nil
}

func (x *FilteredEntrySetMultimapProto) GetPredicate() *ComGoogleCommonBase_PredicateProto {
	if x != nil {
		return x.Predicate
	}
	return nil
}

// Java Class: com.google.common.collect.Multimap
type MultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MultimapProto:
	//
	//	*MultimapProto_ForwardingMultimapProto
	//	*MultimapProto_ListMultimapProto
	//	*MultimapProto_AbstractMultimapProto
	//	*MultimapProto_FilteredMultimapProto
	//	*MultimapProto_SetMultimapProto
	//	*MultimapProto_ForwardingListMultimapProto
	//	*MultimapProto_ForwardingSetMultimapProto
	//	*MultimapProto_LinkedListMultimapProto
	//	*MultimapProto_AbstractListMultimapProto
	//	*MultimapProto_FilteredKeyListMultimapProto
	//	*MultimapProto_ImmutableListMultimapProto
	//	*MultimapProto_AbstractMapBasedMultimapProto
	//	*MultimapProto_FilteredEntryMultimapProto
	//	*MultimapProto_BaseImmutableMultimapProto
	//	*MultimapProto_FilteredKeyMultimapProto
	//	*MultimapProto_FilteredSetMultimapProto
	//	*MultimapProto_AbstractSetMultimapProto
	//	*MultimapProto_SortedSetMultimapProto
	//	*MultimapProto_ImmutableSetMultimapProto
	//	*MultimapProto_ForwardingSortedSetMultimapProto
	//	*MultimapProto_ArrayListMultimapGwtSerializationDependenciesProto
	//	*MultimapProto_EmptyImmutableListMultimapProto
	//	*MultimapProto_FilteredEntrySetMultimapProto
	//	*MultimapProto_ImmutableMultimapProto
	//	*MultimapProto_FilteredKeySetMultimapProto
	//	*MultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto
	//	*MultimapProto_HashMultimapGwtSerializationDependenciesProto
	//	*MultimapProto_AbstractSortedSetMultimapProto
	//	*MultimapProto_EmptyImmutableSetMultimapProto
	//	*MultimapProto_ArrayListMultimapProto
	//	*MultimapProto_LinkedHashMultimapProto
	//	*MultimapProto_HashMultimapProto
	//	*MultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*MultimapProto_TreeMultimapProto
	MultimapProto isMultimapProto_MultimapProto `protobuf_oneof:"multimapProto"`
}

func (x *MultimapProto) Reset() {
	*x = MultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[188]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultimapProto) ProtoMessage() {}

func (x *MultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[188]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultimapProto.ProtoReflect.Descriptor instead.
func (*MultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{188}
}

func (m *MultimapProto) GetMultimapProto() isMultimapProto_MultimapProto {
	if m != nil {
		return m.MultimapProto
	}
	return nil
}

func (x *MultimapProto) GetForwardingMultimapProto() *ForwardingMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ForwardingMultimapProto); ok {
		return x.ForwardingMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetListMultimapProto() *ListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ListMultimapProto); ok {
		return x.ListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractMultimapProto() *AbstractMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractMultimapProto); ok {
		return x.AbstractMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredMultimapProto() *FilteredMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredMultimapProto); ok {
		return x.FilteredMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetSetMultimapProto() *SetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_SetMultimapProto); ok {
		return x.SetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetForwardingListMultimapProto() *ForwardingListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ForwardingListMultimapProto); ok {
		return x.ForwardingListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetForwardingSetMultimapProto() *ForwardingSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ForwardingSetMultimapProto); ok {
		return x.ForwardingSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetLinkedListMultimapProto() *LinkedListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_LinkedListMultimapProto); ok {
		return x.LinkedListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractListMultimapProto() *AbstractListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractListMultimapProto); ok {
		return x.AbstractListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredKeyListMultimapProto() *FilteredKeyListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredKeyListMultimapProto); ok {
		return x.FilteredKeyListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetImmutableListMultimapProto() *ImmutableListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ImmutableListMultimapProto); ok {
		return x.ImmutableListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractMapBasedMultimapProto() *AbstractMapBasedMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractMapBasedMultimapProto); ok {
		return x.AbstractMapBasedMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredEntryMultimapProto() *FilteredEntryMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredEntryMultimapProto); ok {
		return x.FilteredEntryMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetBaseImmutableMultimapProto() *BaseImmutableMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_BaseImmutableMultimapProto); ok {
		return x.BaseImmutableMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredKeyMultimapProto() *FilteredKeyMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredKeyMultimapProto); ok {
		return x.FilteredKeyMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredSetMultimapProto() *FilteredSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredSetMultimapProto); ok {
		return x.FilteredSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractSetMultimapProto() *AbstractSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractSetMultimapProto); ok {
		return x.AbstractSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetSortedSetMultimapProto() *SortedSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_SortedSetMultimapProto); ok {
		return x.SortedSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetImmutableSetMultimapProto() *ImmutableSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ImmutableSetMultimapProto); ok {
		return x.ImmutableSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetForwardingSortedSetMultimapProto() *ForwardingSortedSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ForwardingSortedSetMultimapProto); ok {
		return x.ForwardingSortedSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetArrayListMultimapGwtSerializationDependenciesProto() *ArrayListMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ArrayListMultimapGwtSerializationDependenciesProto); ok {
		return x.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *MultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetImmutableMultimapProto() *ImmutableMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ImmutableMultimapProto); ok {
		return x.ImmutableMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() *LinkedHashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto); ok {
		return x.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *MultimapProto) GetHashMultimapGwtSerializationDependenciesProto() *HashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_HashMultimapGwtSerializationDependenciesProto); ok {
		return x.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *MultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetMultimapProto().(*MultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isMultimapProto_MultimapProto interface {
	isMultimapProto_MultimapProto()
}

type MultimapProto_ForwardingMultimapProto struct {
	ForwardingMultimapProto *ForwardingMultimapProto `protobuf:"bytes,1,opt,name=forwardingMultimapProto,proto3,oneof"`
}

type MultimapProto_ListMultimapProto struct {
	ListMultimapProto *ListMultimapProto `protobuf:"bytes,2,opt,name=listMultimapProto,proto3,oneof"`
}

type MultimapProto_AbstractMultimapProto struct {
	AbstractMultimapProto *AbstractMultimapProto `protobuf:"bytes,3,opt,name=abstractMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredMultimapProto struct {
	FilteredMultimapProto *FilteredMultimapProto `protobuf:"bytes,4,opt,name=filteredMultimapProto,proto3,oneof"`
}

type MultimapProto_SetMultimapProto struct {
	SetMultimapProto *SetMultimapProto `protobuf:"bytes,5,opt,name=setMultimapProto,proto3,oneof"`
}

type MultimapProto_ForwardingListMultimapProto struct {
	ForwardingListMultimapProto *ForwardingListMultimapProto `protobuf:"bytes,6,opt,name=forwardingListMultimapProto,proto3,oneof"`
}

type MultimapProto_ForwardingSetMultimapProto struct {
	ForwardingSetMultimapProto *ForwardingSetMultimapProto `protobuf:"bytes,7,opt,name=forwardingSetMultimapProto,proto3,oneof"`
}

type MultimapProto_LinkedListMultimapProto struct {
	LinkedListMultimapProto *LinkedListMultimapProto `protobuf:"bytes,8,opt,name=linkedListMultimapProto,proto3,oneof"`
}

type MultimapProto_AbstractListMultimapProto struct {
	AbstractListMultimapProto *AbstractListMultimapProto `protobuf:"bytes,9,opt,name=abstractListMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredKeyListMultimapProto struct {
	FilteredKeyListMultimapProto *FilteredKeyListMultimapProto `protobuf:"bytes,10,opt,name=filteredKeyListMultimapProto,proto3,oneof"`
}

type MultimapProto_ImmutableListMultimapProto struct {
	ImmutableListMultimapProto *ImmutableListMultimapProto `protobuf:"bytes,11,opt,name=immutableListMultimapProto,proto3,oneof"`
}

type MultimapProto_AbstractMapBasedMultimapProto struct {
	AbstractMapBasedMultimapProto *AbstractMapBasedMultimapProto `protobuf:"bytes,12,opt,name=abstractMapBasedMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredEntryMultimapProto struct {
	FilteredEntryMultimapProto *FilteredEntryMultimapProto `protobuf:"bytes,13,opt,name=filteredEntryMultimapProto,proto3,oneof"`
}

type MultimapProto_BaseImmutableMultimapProto struct {
	BaseImmutableMultimapProto *BaseImmutableMultimapProto `protobuf:"bytes,14,opt,name=baseImmutableMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredKeyMultimapProto struct {
	FilteredKeyMultimapProto *FilteredKeyMultimapProto `protobuf:"bytes,15,opt,name=filteredKeyMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredSetMultimapProto struct {
	FilteredSetMultimapProto *FilteredSetMultimapProto `protobuf:"bytes,16,opt,name=filteredSetMultimapProto,proto3,oneof"`
}

type MultimapProto_AbstractSetMultimapProto struct {
	AbstractSetMultimapProto *AbstractSetMultimapProto `protobuf:"bytes,17,opt,name=abstractSetMultimapProto,proto3,oneof"`
}

type MultimapProto_SortedSetMultimapProto struct {
	SortedSetMultimapProto *SortedSetMultimapProto `protobuf:"bytes,18,opt,name=sortedSetMultimapProto,proto3,oneof"`
}

type MultimapProto_ImmutableSetMultimapProto struct {
	ImmutableSetMultimapProto *ImmutableSetMultimapProto `protobuf:"bytes,19,opt,name=immutableSetMultimapProto,proto3,oneof"`
}

type MultimapProto_ForwardingSortedSetMultimapProto struct {
	ForwardingSortedSetMultimapProto *ForwardingSortedSetMultimapProto `protobuf:"bytes,20,opt,name=forwardingSortedSetMultimapProto,proto3,oneof"`
}

type MultimapProto_ArrayListMultimapGwtSerializationDependenciesProto struct {
	ArrayListMultimapGwtSerializationDependenciesProto *ArrayListMultimapGwtSerializationDependenciesProto `protobuf:"bytes,21,opt,name=arrayListMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type MultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,22,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,23,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

type MultimapProto_ImmutableMultimapProto struct {
	ImmutableMultimapProto *ImmutableMultimapProto `protobuf:"bytes,24,opt,name=immutableMultimapProto,proto3,oneof"`
}

type MultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,25,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

type MultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto struct {
	LinkedHashMultimapGwtSerializationDependenciesProto *LinkedHashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,26,opt,name=linkedHashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type MultimapProto_HashMultimapGwtSerializationDependenciesProto struct {
	HashMultimapGwtSerializationDependenciesProto *HashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,27,opt,name=hashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type MultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,28,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type MultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,29,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

type MultimapProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,30,opt,name=arrayListMultimapProto,proto3,oneof"`
}

type MultimapProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,31,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

type MultimapProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,32,opt,name=hashMultimapProto,proto3,oneof"`
}

type MultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,33,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type MultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,34,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*MultimapProto_ForwardingMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_SetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ForwardingListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ForwardingSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_LinkedListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredKeyListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ImmutableListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractMapBasedMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredEntryMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_BaseImmutableMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredKeyMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_SortedSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ImmutableSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ForwardingSortedSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ArrayListMultimapGwtSerializationDependenciesProto) isMultimapProto_MultimapProto() {
}

func (*MultimapProto_EmptyImmutableListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredEntrySetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ImmutableMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_FilteredKeySetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto) isMultimapProto_MultimapProto() {
}

func (*MultimapProto_HashMultimapGwtSerializationDependenciesProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractSortedSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_EmptyImmutableSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_ArrayListMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_LinkedHashMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_HashMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_AbstractSortedKeySortedSetMultimapProto) isMultimapProto_MultimapProto() {}

func (*MultimapProto_TreeMultimapProto) isMultimapProto_MultimapProto() {}

// Java Class: com.google.common.collect.ForwardingMultimap
type ForwardingMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ForwardingMultimapProto:
	//
	//	*ForwardingMultimapProto_ForwardingListMultimapProto
	//	*ForwardingMultimapProto_ForwardingSetMultimapProto
	//	*ForwardingMultimapProto_ForwardingSortedSetMultimapProto
	ForwardingMultimapProto isForwardingMultimapProto_ForwardingMultimapProto `protobuf_oneof:"forwardingMultimapProto"`
}

func (x *ForwardingMultimapProto) Reset() {
	*x = ForwardingMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[189]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingMultimapProto) ProtoMessage() {}

func (x *ForwardingMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[189]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingMultimapProto.ProtoReflect.Descriptor instead.
func (*ForwardingMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{189}
}

func (m *ForwardingMultimapProto) GetForwardingMultimapProto() isForwardingMultimapProto_ForwardingMultimapProto {
	if m != nil {
		return m.ForwardingMultimapProto
	}
	return nil
}

func (x *ForwardingMultimapProto) GetForwardingListMultimapProto() *ForwardingListMultimapProto {
	if x, ok := x.GetForwardingMultimapProto().(*ForwardingMultimapProto_ForwardingListMultimapProto); ok {
		return x.ForwardingListMultimapProto
	}
	return nil
}

func (x *ForwardingMultimapProto) GetForwardingSetMultimapProto() *ForwardingSetMultimapProto {
	if x, ok := x.GetForwardingMultimapProto().(*ForwardingMultimapProto_ForwardingSetMultimapProto); ok {
		return x.ForwardingSetMultimapProto
	}
	return nil
}

func (x *ForwardingMultimapProto) GetForwardingSortedSetMultimapProto() *ForwardingSortedSetMultimapProto {
	if x, ok := x.GetForwardingMultimapProto().(*ForwardingMultimapProto_ForwardingSortedSetMultimapProto); ok {
		return x.ForwardingSortedSetMultimapProto
	}
	return nil
}

type isForwardingMultimapProto_ForwardingMultimapProto interface {
	isForwardingMultimapProto_ForwardingMultimapProto()
}

type ForwardingMultimapProto_ForwardingListMultimapProto struct {
	ForwardingListMultimapProto *ForwardingListMultimapProto `protobuf:"bytes,1,opt,name=forwardingListMultimapProto,proto3,oneof"`
}

type ForwardingMultimapProto_ForwardingSetMultimapProto struct {
	ForwardingSetMultimapProto *ForwardingSetMultimapProto `protobuf:"bytes,2,opt,name=forwardingSetMultimapProto,proto3,oneof"`
}

type ForwardingMultimapProto_ForwardingSortedSetMultimapProto struct {
	ForwardingSortedSetMultimapProto *ForwardingSortedSetMultimapProto `protobuf:"bytes,3,opt,name=forwardingSortedSetMultimapProto,proto3,oneof"`
}

func (*ForwardingMultimapProto_ForwardingListMultimapProto) isForwardingMultimapProto_ForwardingMultimapProto() {
}

func (*ForwardingMultimapProto_ForwardingSetMultimapProto) isForwardingMultimapProto_ForwardingMultimapProto() {
}

func (*ForwardingMultimapProto_ForwardingSortedSetMultimapProto) isForwardingMultimapProto_ForwardingMultimapProto() {
}

// Java Class: com.google.common.collect.ForwardingListMultimap
type ForwardingListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ForwardingListMultimapProto) Reset() {
	*x = ForwardingListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[190]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ForwardingListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ForwardingListMultimapProto) ProtoMessage() {}

func (x *ForwardingListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[190]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ForwardingListMultimapProto.ProtoReflect.Descriptor instead.
func (*ForwardingListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{190}
}

// Java Class: com.google.common.collect.ListMultimap
type ListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ListMultimapProto:
	//
	//	*ListMultimapProto_LinkedListMultimapProto
	//	*ListMultimapProto_AbstractListMultimapProto
	//	*ListMultimapProto_FilteredKeyListMultimapProto
	//	*ListMultimapProto_ForwardingListMultimapProto
	//	*ListMultimapProto_ImmutableListMultimapProto
	//	*ListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto
	//	*ListMultimapProto_EmptyImmutableListMultimapProto
	//	*ListMultimapProto_ArrayListMultimapProto
	ListMultimapProto isListMultimapProto_ListMultimapProto `protobuf_oneof:"listMultimapProto"`
}

func (x *ListMultimapProto) Reset() {
	*x = ListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[191]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListMultimapProto) ProtoMessage() {}

func (x *ListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[191]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListMultimapProto.ProtoReflect.Descriptor instead.
func (*ListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{191}
}

func (m *ListMultimapProto) GetListMultimapProto() isListMultimapProto_ListMultimapProto {
	if m != nil {
		return m.ListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetLinkedListMultimapProto() *LinkedListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_LinkedListMultimapProto); ok {
		return x.LinkedListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetAbstractListMultimapProto() *AbstractListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_AbstractListMultimapProto); ok {
		return x.AbstractListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetFilteredKeyListMultimapProto() *FilteredKeyListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_FilteredKeyListMultimapProto); ok {
		return x.FilteredKeyListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetForwardingListMultimapProto() *ForwardingListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_ForwardingListMultimapProto); ok {
		return x.ForwardingListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetImmutableListMultimapProto() *ImmutableListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_ImmutableListMultimapProto); ok {
		return x.ImmutableListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetArrayListMultimapGwtSerializationDependenciesProto() *ArrayListMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto); ok {
		return x.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *ListMultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

func (x *ListMultimapProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetListMultimapProto().(*ListMultimapProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

type isListMultimapProto_ListMultimapProto interface {
	isListMultimapProto_ListMultimapProto()
}

type ListMultimapProto_LinkedListMultimapProto struct {
	LinkedListMultimapProto *LinkedListMultimapProto `protobuf:"bytes,1,opt,name=linkedListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_AbstractListMultimapProto struct {
	AbstractListMultimapProto *AbstractListMultimapProto `protobuf:"bytes,2,opt,name=abstractListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_FilteredKeyListMultimapProto struct {
	FilteredKeyListMultimapProto *FilteredKeyListMultimapProto `protobuf:"bytes,3,opt,name=filteredKeyListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_ForwardingListMultimapProto struct {
	ForwardingListMultimapProto *ForwardingListMultimapProto `protobuf:"bytes,4,opt,name=forwardingListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_ImmutableListMultimapProto struct {
	ImmutableListMultimapProto *ImmutableListMultimapProto `protobuf:"bytes,5,opt,name=immutableListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto struct {
	ArrayListMultimapGwtSerializationDependenciesProto *ArrayListMultimapGwtSerializationDependenciesProto `protobuf:"bytes,6,opt,name=arrayListMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type ListMultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,7,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

type ListMultimapProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,8,opt,name=arrayListMultimapProto,proto3,oneof"`
}

func (*ListMultimapProto_LinkedListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_AbstractListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_FilteredKeyListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_ForwardingListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_ImmutableListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto) isListMultimapProto_ListMultimapProto() {
}

func (*ListMultimapProto_EmptyImmutableListMultimapProto) isListMultimapProto_ListMultimapProto() {}

func (*ListMultimapProto_ArrayListMultimapProto) isListMultimapProto_ListMultimapProto() {}

// Java Class: com.google.common.collect.LinkedListMultimap
type LinkedListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *LinkedListMultimapProto) Reset() {
	*x = LinkedListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[192]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LinkedListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkedListMultimapProto) ProtoMessage() {}

func (x *LinkedListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[192]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkedListMultimapProto.ProtoReflect.Descriptor instead.
func (*LinkedListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{192}
}

// Java Class: com.google.common.collect.AbstractListMultimap
type AbstractListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractListMultimapProto:
	//
	//	*AbstractListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto
	//	*AbstractListMultimapProto_ArrayListMultimapProto
	AbstractListMultimapProto isAbstractListMultimapProto_AbstractListMultimapProto `protobuf_oneof:"abstractListMultimapProto"`
}

func (x *AbstractListMultimapProto) Reset() {
	*x = AbstractListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[193]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractListMultimapProto) ProtoMessage() {}

func (x *AbstractListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[193]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractListMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{193}
}

func (m *AbstractListMultimapProto) GetAbstractListMultimapProto() isAbstractListMultimapProto_AbstractListMultimapProto {
	if m != nil {
		return m.AbstractListMultimapProto
	}
	return nil
}

func (x *AbstractListMultimapProto) GetArrayListMultimapGwtSerializationDependenciesProto() *ArrayListMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractListMultimapProto().(*AbstractListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto); ok {
		return x.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractListMultimapProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetAbstractListMultimapProto().(*AbstractListMultimapProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

type isAbstractListMultimapProto_AbstractListMultimapProto interface {
	isAbstractListMultimapProto_AbstractListMultimapProto()
}

type AbstractListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto struct {
	ArrayListMultimapGwtSerializationDependenciesProto *ArrayListMultimapGwtSerializationDependenciesProto `protobuf:"bytes,1,opt,name=arrayListMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractListMultimapProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,2,opt,name=arrayListMultimapProto,proto3,oneof"`
}

func (*AbstractListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto) isAbstractListMultimapProto_AbstractListMultimapProto() {
}

func (*AbstractListMultimapProto_ArrayListMultimapProto) isAbstractListMultimapProto_AbstractListMultimapProto() {
}

// Java Class: com.google.common.collect.ArrayListMultimapGwtSerializationDependencies
type ArrayListMultimapGwtSerializationDependenciesProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ArrayListMultimapGwtSerializationDependenciesProto:
	//
	//	*ArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapProto
	ArrayListMultimapGwtSerializationDependenciesProto isArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapGwtSerializationDependenciesProto `protobuf_oneof:"arrayListMultimapGwtSerializationDependenciesProto"`
}

func (x *ArrayListMultimapGwtSerializationDependenciesProto) Reset() {
	*x = ArrayListMultimapGwtSerializationDependenciesProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[194]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayListMultimapGwtSerializationDependenciesProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayListMultimapGwtSerializationDependenciesProto) ProtoMessage() {}

func (x *ArrayListMultimapGwtSerializationDependenciesProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[194]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayListMultimapGwtSerializationDependenciesProto.ProtoReflect.Descriptor instead.
func (*ArrayListMultimapGwtSerializationDependenciesProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{194}
}

func (m *ArrayListMultimapGwtSerializationDependenciesProto) GetArrayListMultimapGwtSerializationDependenciesProto() isArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapGwtSerializationDependenciesProto {
	if m != nil {
		return m.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *ArrayListMultimapGwtSerializationDependenciesProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetArrayListMultimapGwtSerializationDependenciesProto().(*ArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

type isArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapGwtSerializationDependenciesProto interface {
	isArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapGwtSerializationDependenciesProto()
}

type ArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,1,opt,name=arrayListMultimapProto,proto3,oneof"`
}

func (*ArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapProto) isArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapGwtSerializationDependenciesProto() {
}

// Java Class: com.google.common.collect.ArrayListMultimap
type ArrayListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *ArrayListMultimapProto) Reset() {
	*x = ArrayListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[195]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ArrayListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArrayListMultimapProto) ProtoMessage() {}

func (x *ArrayListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[195]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArrayListMultimapProto.ProtoReflect.Descriptor instead.
func (*ArrayListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{195}
}

// Java Class: com.google.common.collect.FilteredKeyListMultimap
type FilteredKeyListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unfiltered   *MultimapProto                      `protobuf:"bytes,1,opt,name=unfiltered,proto3" json:"unfiltered,omitempty"`
	KeyPredicate *ComGoogleCommonBase_PredicateProto `protobuf:"bytes,2,opt,name=keyPredicate,proto3" json:"keyPredicate,omitempty"`
}

func (x *FilteredKeyListMultimapProto) Reset() {
	*x = FilteredKeyListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[196]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredKeyListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredKeyListMultimapProto) ProtoMessage() {}

func (x *FilteredKeyListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[196]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredKeyListMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredKeyListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{196}
}

func (x *FilteredKeyListMultimapProto) GetUnfiltered() *MultimapProto {
	if x != nil {
		return x.Unfiltered
	}
	return nil
}

func (x *FilteredKeyListMultimapProto) GetKeyPredicate() *ComGoogleCommonBase_PredicateProto {
	if x != nil {
		return x.KeyPredicate
	}
	return nil
}

// Java Class: com.google.common.base.Predicate
type ComGoogleCommonBase_PredicateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ComGoogleCommonBase_PredicateProto:
	//
	//	*ComGoogleCommonBase_PredicateProto_ObjectPredicateProto
	//	*ComGoogleCommonBase_PredicateProto_CharMatcherProto
	//	*ComGoogleCommonBase_PredicateProto_SmallCharMatcherProto
	ComGoogleCommonBase_PredicateProto isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto `protobuf_oneof:"com_google_common_base_PredicateProto"`
}

func (x *ComGoogleCommonBase_PredicateProto) Reset() {
	*x = ComGoogleCommonBase_PredicateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[197]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ComGoogleCommonBase_PredicateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ComGoogleCommonBase_PredicateProto) ProtoMessage() {}

func (x *ComGoogleCommonBase_PredicateProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[197]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ComGoogleCommonBase_PredicateProto.ProtoReflect.Descriptor instead.
func (*ComGoogleCommonBase_PredicateProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{197}
}

func (m *ComGoogleCommonBase_PredicateProto) GetComGoogleCommonBase_PredicateProto() isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto {
	if m != nil {
		return m.ComGoogleCommonBase_PredicateProto
	}
	return nil
}

func (x *ComGoogleCommonBase_PredicateProto) GetObjectPredicateProto() ObjectPredicateProto {
	if x, ok := x.GetComGoogleCommonBase_PredicateProto().(*ComGoogleCommonBase_PredicateProto_ObjectPredicateProto); ok {
		return x.ObjectPredicateProto
	}
	return ObjectPredicateProto_ObjectPredicateProto_ALWAYS_TRUE_
}

func (x *ComGoogleCommonBase_PredicateProto) GetCharMatcherProto() *CharMatcherProto {
	if x, ok := x.GetComGoogleCommonBase_PredicateProto().(*ComGoogleCommonBase_PredicateProto_CharMatcherProto); ok {
		return x.CharMatcherProto
	}
	return nil
}

func (x *ComGoogleCommonBase_PredicateProto) GetSmallCharMatcherProto() *SmallCharMatcherProto {
	if x, ok := x.GetComGoogleCommonBase_PredicateProto().(*ComGoogleCommonBase_PredicateProto_SmallCharMatcherProto); ok {
		return x.SmallCharMatcherProto
	}
	return nil
}

type isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto interface {
	isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto()
}

type ComGoogleCommonBase_PredicateProto_ObjectPredicateProto struct {
	ObjectPredicateProto ObjectPredicateProto `protobuf:"varint,1,opt,name=objectPredicateProto,proto3,enum=rill.sql.v1.ObjectPredicateProto,oneof"`
}

type ComGoogleCommonBase_PredicateProto_CharMatcherProto struct {
	CharMatcherProto *CharMatcherProto `protobuf:"bytes,2,opt,name=charMatcherProto,proto3,oneof"`
}

type ComGoogleCommonBase_PredicateProto_SmallCharMatcherProto struct {
	SmallCharMatcherProto *SmallCharMatcherProto `protobuf:"bytes,3,opt,name=smallCharMatcherProto,proto3,oneof"`
}

func (*ComGoogleCommonBase_PredicateProto_ObjectPredicateProto) isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto() {
}

func (*ComGoogleCommonBase_PredicateProto_CharMatcherProto) isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto() {
}

func (*ComGoogleCommonBase_PredicateProto_SmallCharMatcherProto) isComGoogleCommonBase_PredicateProto_ComGoogleCommonBase_PredicateProto() {
}

// Java Class: com.google.common.base.CharMatcher
type CharMatcherProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to CharMatcherProto:
	//
	//	*CharMatcherProto_SmallCharMatcherProto
	CharMatcherProto isCharMatcherProto_CharMatcherProto `protobuf_oneof:"charMatcherProto"`
}

func (x *CharMatcherProto) Reset() {
	*x = CharMatcherProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[198]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CharMatcherProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CharMatcherProto) ProtoMessage() {}

func (x *CharMatcherProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[198]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CharMatcherProto.ProtoReflect.Descriptor instead.
func (*CharMatcherProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{198}
}

func (m *CharMatcherProto) GetCharMatcherProto() isCharMatcherProto_CharMatcherProto {
	if m != nil {
		return m.CharMatcherProto
	}
	return nil
}

func (x *CharMatcherProto) GetSmallCharMatcherProto() *SmallCharMatcherProto {
	if x, ok := x.GetCharMatcherProto().(*CharMatcherProto_SmallCharMatcherProto); ok {
		return x.SmallCharMatcherProto
	}
	return nil
}

type isCharMatcherProto_CharMatcherProto interface {
	isCharMatcherProto_CharMatcherProto()
}

type CharMatcherProto_SmallCharMatcherProto struct {
	SmallCharMatcherProto *SmallCharMatcherProto `protobuf:"bytes,1,opt,name=smallCharMatcherProto,proto3,oneof"`
}

func (*CharMatcherProto_SmallCharMatcherProto) isCharMatcherProto_CharMatcherProto() {}

// Java Class: com.google.common.base.SmallCharMatcher
type SmallCharMatcherProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table        []int32 `protobuf:"zigzag32,1,rep,packed,name=table,proto3" json:"table,omitempty"`
	ContainsZero bool    `protobuf:"varint,2,opt,name=containsZero,proto3" json:"containsZero,omitempty"`
	Filter       int64   `protobuf:"zigzag64,3,opt,name=filter,proto3" json:"filter,omitempty"`
	Description  string  `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty"`
}

func (x *SmallCharMatcherProto) Reset() {
	*x = SmallCharMatcherProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[199]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SmallCharMatcherProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SmallCharMatcherProto) ProtoMessage() {}

func (x *SmallCharMatcherProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[199]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SmallCharMatcherProto.ProtoReflect.Descriptor instead.
func (*SmallCharMatcherProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{199}
}

func (x *SmallCharMatcherProto) GetTable() []int32 {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *SmallCharMatcherProto) GetContainsZero() bool {
	if x != nil {
		return x.ContainsZero
	}
	return false
}

func (x *SmallCharMatcherProto) GetFilter() int64 {
	if x != nil {
		return x.Filter
	}
	return 0
}

func (x *SmallCharMatcherProto) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

// Java Class: com.google.common.collect.ImmutableListMultimap
type ImmutableListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImmutableListMultimapProto:
	//
	//	*ImmutableListMultimapProto_EmptyImmutableListMultimapProto
	ImmutableListMultimapProto isImmutableListMultimapProto_ImmutableListMultimapProto `protobuf_oneof:"immutableListMultimapProto"`
}

func (x *ImmutableListMultimapProto) Reset() {
	*x = ImmutableListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[200]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmutableListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmutableListMultimapProto) ProtoMessage() {}

func (x *ImmutableListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[200]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmutableListMultimapProto.ProtoReflect.Descriptor instead.
func (*ImmutableListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{200}
}

func (m *ImmutableListMultimapProto) GetImmutableListMultimapProto() isImmutableListMultimapProto_ImmutableListMultimapProto {
	if m != nil {
		return m.ImmutableListMultimapProto
	}
	return nil
}

func (x *ImmutableListMultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetImmutableListMultimapProto().(*ImmutableListMultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

type isImmutableListMultimapProto_ImmutableListMultimapProto interface {
	isImmutableListMultimapProto_ImmutableListMultimapProto()
}

type ImmutableListMultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,1,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

func (*ImmutableListMultimapProto_EmptyImmutableListMultimapProto) isImmutableListMultimapProto_ImmutableListMultimapProto() {
}

// Java Class: com.google.common.collect.EmptyImmutableListMultimap
type EmptyImmutableListMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyImmutableListMultimapProto) Reset() {
	*x = EmptyImmutableListMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[201]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyImmutableListMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyImmutableListMultimapProto) ProtoMessage() {}

func (x *EmptyImmutableListMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[201]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyImmutableListMultimapProto.ProtoReflect.Descriptor instead.
func (*EmptyImmutableListMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{201}
}

// Java Class: com.google.common.collect.AbstractMultimap
type AbstractMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractMultimapProto:
	//
	//	*AbstractMultimapProto_LinkedListMultimapProto
	//	*AbstractMultimapProto_AbstractMapBasedMultimapProto
	//	*AbstractMultimapProto_FilteredEntryMultimapProto
	//	*AbstractMultimapProto_BaseImmutableMultimapProto
	//	*AbstractMultimapProto_FilteredKeyMultimapProto
	//	*AbstractMultimapProto_AbstractListMultimapProto
	//	*AbstractMultimapProto_AbstractSetMultimapProto
	//	*AbstractMultimapProto_FilteredEntrySetMultimapProto
	//	*AbstractMultimapProto_ImmutableMultimapProto
	//	*AbstractMultimapProto_FilteredKeyListMultimapProto
	//	*AbstractMultimapProto_FilteredKeySetMultimapProto
	//	*AbstractMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto
	//	*AbstractMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto
	//	*AbstractMultimapProto_HashMultimapGwtSerializationDependenciesProto
	//	*AbstractMultimapProto_AbstractSortedSetMultimapProto
	//	*AbstractMultimapProto_ImmutableListMultimapProto
	//	*AbstractMultimapProto_ImmutableSetMultimapProto
	//	*AbstractMultimapProto_ArrayListMultimapProto
	//	*AbstractMultimapProto_LinkedHashMultimapProto
	//	*AbstractMultimapProto_HashMultimapProto
	//	*AbstractMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*AbstractMultimapProto_EmptyImmutableListMultimapProto
	//	*AbstractMultimapProto_EmptyImmutableSetMultimapProto
	//	*AbstractMultimapProto_TreeMultimapProto
	AbstractMultimapProto isAbstractMultimapProto_AbstractMultimapProto `protobuf_oneof:"abstractMultimapProto"`
}

func (x *AbstractMultimapProto) Reset() {
	*x = AbstractMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[202]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractMultimapProto) ProtoMessage() {}

func (x *AbstractMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[202]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{202}
}

func (m *AbstractMultimapProto) GetAbstractMultimapProto() isAbstractMultimapProto_AbstractMultimapProto {
	if m != nil {
		return m.AbstractMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetLinkedListMultimapProto() *LinkedListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_LinkedListMultimapProto); ok {
		return x.LinkedListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetAbstractMapBasedMultimapProto() *AbstractMapBasedMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_AbstractMapBasedMultimapProto); ok {
		return x.AbstractMapBasedMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetFilteredEntryMultimapProto() *FilteredEntryMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_FilteredEntryMultimapProto); ok {
		return x.FilteredEntryMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetBaseImmutableMultimapProto() *BaseImmutableMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_BaseImmutableMultimapProto); ok {
		return x.BaseImmutableMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetFilteredKeyMultimapProto() *FilteredKeyMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_FilteredKeyMultimapProto); ok {
		return x.FilteredKeyMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetAbstractListMultimapProto() *AbstractListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_AbstractListMultimapProto); ok {
		return x.AbstractListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetAbstractSetMultimapProto() *AbstractSetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_AbstractSetMultimapProto); ok {
		return x.AbstractSetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetImmutableMultimapProto() *ImmutableMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_ImmutableMultimapProto); ok {
		return x.ImmutableMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetFilteredKeyListMultimapProto() *FilteredKeyListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_FilteredKeyListMultimapProto); ok {
		return x.FilteredKeyListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetArrayListMultimapGwtSerializationDependenciesProto() *ArrayListMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto); ok {
		return x.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() *LinkedHashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto); ok {
		return x.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetHashMultimapGwtSerializationDependenciesProto() *HashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_HashMultimapGwtSerializationDependenciesProto); ok {
		return x.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetImmutableListMultimapProto() *ImmutableListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_ImmutableListMultimapProto); ok {
		return x.ImmutableListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetImmutableSetMultimapProto() *ImmutableSetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_ImmutableSetMultimapProto); ok {
		return x.ImmutableSetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

func (x *AbstractMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetAbstractMultimapProto().(*AbstractMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isAbstractMultimapProto_AbstractMultimapProto interface {
	isAbstractMultimapProto_AbstractMultimapProto()
}

type AbstractMultimapProto_LinkedListMultimapProto struct {
	LinkedListMultimapProto *LinkedListMultimapProto `protobuf:"bytes,1,opt,name=linkedListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_AbstractMapBasedMultimapProto struct {
	AbstractMapBasedMultimapProto *AbstractMapBasedMultimapProto `protobuf:"bytes,2,opt,name=abstractMapBasedMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_FilteredEntryMultimapProto struct {
	FilteredEntryMultimapProto *FilteredEntryMultimapProto `protobuf:"bytes,3,opt,name=filteredEntryMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_BaseImmutableMultimapProto struct {
	BaseImmutableMultimapProto *BaseImmutableMultimapProto `protobuf:"bytes,4,opt,name=baseImmutableMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_FilteredKeyMultimapProto struct {
	FilteredKeyMultimapProto *FilteredKeyMultimapProto `protobuf:"bytes,5,opt,name=filteredKeyMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_AbstractListMultimapProto struct {
	AbstractListMultimapProto *AbstractListMultimapProto `protobuf:"bytes,6,opt,name=abstractListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_AbstractSetMultimapProto struct {
	AbstractSetMultimapProto *AbstractSetMultimapProto `protobuf:"bytes,7,opt,name=abstractSetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,8,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_ImmutableMultimapProto struct {
	ImmutableMultimapProto *ImmutableMultimapProto `protobuf:"bytes,9,opt,name=immutableMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_FilteredKeyListMultimapProto struct {
	FilteredKeyListMultimapProto *FilteredKeyListMultimapProto `protobuf:"bytes,10,opt,name=filteredKeyListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,11,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto struct {
	ArrayListMultimapGwtSerializationDependenciesProto *ArrayListMultimapGwtSerializationDependenciesProto `protobuf:"bytes,12,opt,name=arrayListMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto struct {
	LinkedHashMultimapGwtSerializationDependenciesProto *LinkedHashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,13,opt,name=linkedHashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMultimapProto_HashMultimapGwtSerializationDependenciesProto struct {
	HashMultimapGwtSerializationDependenciesProto *HashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,14,opt,name=hashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,15,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_ImmutableListMultimapProto struct {
	ImmutableListMultimapProto *ImmutableListMultimapProto `protobuf:"bytes,16,opt,name=immutableListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_ImmutableSetMultimapProto struct {
	ImmutableSetMultimapProto *ImmutableSetMultimapProto `protobuf:"bytes,17,opt,name=immutableSetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,18,opt,name=arrayListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,19,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,20,opt,name=hashMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,21,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,22,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,23,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

type AbstractMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,24,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*AbstractMultimapProto_LinkedListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_AbstractMapBasedMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_FilteredEntryMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_BaseImmutableMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_FilteredKeyMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_AbstractListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_AbstractSetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_FilteredEntrySetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_ImmutableMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_FilteredKeyListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_FilteredKeySetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_HashMultimapGwtSerializationDependenciesProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_AbstractSortedSetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_ImmutableListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_ImmutableSetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_ArrayListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_LinkedHashMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_HashMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {}

func (*AbstractMultimapProto_AbstractSortedKeySortedSetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_EmptyImmutableListMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_EmptyImmutableSetMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {
}

func (*AbstractMultimapProto_TreeMultimapProto) isAbstractMultimapProto_AbstractMultimapProto() {}

// Java Class: com.google.common.collect.AbstractMapBasedMultimap
type AbstractMapBasedMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to AbstractMapBasedMultimapProto:
	//
	//	*AbstractMapBasedMultimapProto_AbstractListMultimapProto
	//	*AbstractMapBasedMultimapProto_AbstractSetMultimapProto
	//	*AbstractMapBasedMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto
	//	*AbstractMapBasedMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto
	//	*AbstractMapBasedMultimapProto_HashMultimapGwtSerializationDependenciesProto
	//	*AbstractMapBasedMultimapProto_AbstractSortedSetMultimapProto
	//	*AbstractMapBasedMultimapProto_ArrayListMultimapProto
	//	*AbstractMapBasedMultimapProto_LinkedHashMultimapProto
	//	*AbstractMapBasedMultimapProto_HashMultimapProto
	//	*AbstractMapBasedMultimapProto_AbstractSortedKeySortedSetMultimapProto
	//	*AbstractMapBasedMultimapProto_TreeMultimapProto
	AbstractMapBasedMultimapProto isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto `protobuf_oneof:"abstractMapBasedMultimapProto"`
}

func (x *AbstractMapBasedMultimapProto) Reset() {
	*x = AbstractMapBasedMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[203]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AbstractMapBasedMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AbstractMapBasedMultimapProto) ProtoMessage() {}

func (x *AbstractMapBasedMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[203]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AbstractMapBasedMultimapProto.ProtoReflect.Descriptor instead.
func (*AbstractMapBasedMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{203}
}

func (m *AbstractMapBasedMultimapProto) GetAbstractMapBasedMultimapProto() isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto {
	if m != nil {
		return m.AbstractMapBasedMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetAbstractListMultimapProto() *AbstractListMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_AbstractListMultimapProto); ok {
		return x.AbstractListMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetAbstractSetMultimapProto() *AbstractSetMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_AbstractSetMultimapProto); ok {
		return x.AbstractSetMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetArrayListMultimapGwtSerializationDependenciesProto() *ArrayListMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto); ok {
		return x.ArrayListMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetLinkedHashMultimapGwtSerializationDependenciesProto() *LinkedHashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto); ok {
		return x.LinkedHashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetHashMultimapGwtSerializationDependenciesProto() *HashMultimapGwtSerializationDependenciesProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_HashMultimapGwtSerializationDependenciesProto); ok {
		return x.HashMultimapGwtSerializationDependenciesProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetAbstractSortedSetMultimapProto() *AbstractSortedSetMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_AbstractSortedSetMultimapProto); ok {
		return x.AbstractSortedSetMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetArrayListMultimapProto() *ArrayListMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_ArrayListMultimapProto); ok {
		return x.ArrayListMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetLinkedHashMultimapProto() *LinkedHashMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_LinkedHashMultimapProto); ok {
		return x.LinkedHashMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetHashMultimapProto() *HashMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_HashMultimapProto); ok {
		return x.HashMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetAbstractSortedKeySortedSetMultimapProto() *AbstractSortedKeySortedSetMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_AbstractSortedKeySortedSetMultimapProto); ok {
		return x.AbstractSortedKeySortedSetMultimapProto
	}
	return nil
}

func (x *AbstractMapBasedMultimapProto) GetTreeMultimapProto() *TreeMultimapProto {
	if x, ok := x.GetAbstractMapBasedMultimapProto().(*AbstractMapBasedMultimapProto_TreeMultimapProto); ok {
		return x.TreeMultimapProto
	}
	return nil
}

type isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto interface {
	isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto()
}

type AbstractMapBasedMultimapProto_AbstractListMultimapProto struct {
	AbstractListMultimapProto *AbstractListMultimapProto `protobuf:"bytes,1,opt,name=abstractListMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_AbstractSetMultimapProto struct {
	AbstractSetMultimapProto *AbstractSetMultimapProto `protobuf:"bytes,2,opt,name=abstractSetMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto struct {
	ArrayListMultimapGwtSerializationDependenciesProto *ArrayListMultimapGwtSerializationDependenciesProto `protobuf:"bytes,3,opt,name=arrayListMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto struct {
	LinkedHashMultimapGwtSerializationDependenciesProto *LinkedHashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,4,opt,name=linkedHashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_HashMultimapGwtSerializationDependenciesProto struct {
	HashMultimapGwtSerializationDependenciesProto *HashMultimapGwtSerializationDependenciesProto `protobuf:"bytes,5,opt,name=hashMultimapGwtSerializationDependenciesProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_AbstractSortedSetMultimapProto struct {
	AbstractSortedSetMultimapProto *AbstractSortedSetMultimapProto `protobuf:"bytes,6,opt,name=abstractSortedSetMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_ArrayListMultimapProto struct {
	ArrayListMultimapProto *ArrayListMultimapProto `protobuf:"bytes,7,opt,name=arrayListMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_LinkedHashMultimapProto struct {
	LinkedHashMultimapProto *LinkedHashMultimapProto `protobuf:"bytes,8,opt,name=linkedHashMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_HashMultimapProto struct {
	HashMultimapProto *HashMultimapProto `protobuf:"bytes,9,opt,name=hashMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_AbstractSortedKeySortedSetMultimapProto struct {
	AbstractSortedKeySortedSetMultimapProto *AbstractSortedKeySortedSetMultimapProto `protobuf:"bytes,10,opt,name=abstractSortedKeySortedSetMultimapProto,proto3,oneof"`
}

type AbstractMapBasedMultimapProto_TreeMultimapProto struct {
	TreeMultimapProto *TreeMultimapProto `protobuf:"bytes,11,opt,name=treeMultimapProto,proto3,oneof"`
}

func (*AbstractMapBasedMultimapProto_AbstractListMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_AbstractSetMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_HashMultimapGwtSerializationDependenciesProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_AbstractSortedSetMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_ArrayListMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_LinkedHashMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_HashMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_AbstractSortedKeySortedSetMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

func (*AbstractMapBasedMultimapProto_TreeMultimapProto) isAbstractMapBasedMultimapProto_AbstractMapBasedMultimapProto() {
}

// Java Class: com.google.common.collect.FilteredEntryMultimap
type FilteredEntryMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FilteredEntryMultimapProto:
	//
	//	*FilteredEntryMultimapProto_FilteredEntrySetMultimapProto
	FilteredEntryMultimapProto isFilteredEntryMultimapProto_FilteredEntryMultimapProto `protobuf_oneof:"filteredEntryMultimapProto"`
	Unfiltered                 *MultimapProto                                          `protobuf:"bytes,2,opt,name=unfiltered,proto3" json:"unfiltered,omitempty"`
	Predicate                  *ComGoogleCommonBase_PredicateProto                     `protobuf:"bytes,3,opt,name=predicate,proto3" json:"predicate,omitempty"`
}

func (x *FilteredEntryMultimapProto) Reset() {
	*x = FilteredEntryMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[204]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredEntryMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredEntryMultimapProto) ProtoMessage() {}

func (x *FilteredEntryMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[204]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredEntryMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredEntryMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{204}
}

func (m *FilteredEntryMultimapProto) GetFilteredEntryMultimapProto() isFilteredEntryMultimapProto_FilteredEntryMultimapProto {
	if m != nil {
		return m.FilteredEntryMultimapProto
	}
	return nil
}

func (x *FilteredEntryMultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetFilteredEntryMultimapProto().(*FilteredEntryMultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *FilteredEntryMultimapProto) GetUnfiltered() *MultimapProto {
	if x != nil {
		return x.Unfiltered
	}
	return nil
}

func (x *FilteredEntryMultimapProto) GetPredicate() *ComGoogleCommonBase_PredicateProto {
	if x != nil {
		return x.Predicate
	}
	return nil
}

type isFilteredEntryMultimapProto_FilteredEntryMultimapProto interface {
	isFilteredEntryMultimapProto_FilteredEntryMultimapProto()
}

type FilteredEntryMultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,1,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

func (*FilteredEntryMultimapProto_FilteredEntrySetMultimapProto) isFilteredEntryMultimapProto_FilteredEntryMultimapProto() {
}

// Java Class: com.google.common.collect.BaseImmutableMultimap
type BaseImmutableMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to BaseImmutableMultimapProto:
	//
	//	*BaseImmutableMultimapProto_ImmutableMultimapProto
	//	*BaseImmutableMultimapProto_ImmutableListMultimapProto
	//	*BaseImmutableMultimapProto_ImmutableSetMultimapProto
	//	*BaseImmutableMultimapProto_EmptyImmutableListMultimapProto
	//	*BaseImmutableMultimapProto_EmptyImmutableSetMultimapProto
	BaseImmutableMultimapProto isBaseImmutableMultimapProto_BaseImmutableMultimapProto `protobuf_oneof:"baseImmutableMultimapProto"`
}

func (x *BaseImmutableMultimapProto) Reset() {
	*x = BaseImmutableMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[205]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BaseImmutableMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BaseImmutableMultimapProto) ProtoMessage() {}

func (x *BaseImmutableMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[205]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BaseImmutableMultimapProto.ProtoReflect.Descriptor instead.
func (*BaseImmutableMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{205}
}

func (m *BaseImmutableMultimapProto) GetBaseImmutableMultimapProto() isBaseImmutableMultimapProto_BaseImmutableMultimapProto {
	if m != nil {
		return m.BaseImmutableMultimapProto
	}
	return nil
}

func (x *BaseImmutableMultimapProto) GetImmutableMultimapProto() *ImmutableMultimapProto {
	if x, ok := x.GetBaseImmutableMultimapProto().(*BaseImmutableMultimapProto_ImmutableMultimapProto); ok {
		return x.ImmutableMultimapProto
	}
	return nil
}

func (x *BaseImmutableMultimapProto) GetImmutableListMultimapProto() *ImmutableListMultimapProto {
	if x, ok := x.GetBaseImmutableMultimapProto().(*BaseImmutableMultimapProto_ImmutableListMultimapProto); ok {
		return x.ImmutableListMultimapProto
	}
	return nil
}

func (x *BaseImmutableMultimapProto) GetImmutableSetMultimapProto() *ImmutableSetMultimapProto {
	if x, ok := x.GetBaseImmutableMultimapProto().(*BaseImmutableMultimapProto_ImmutableSetMultimapProto); ok {
		return x.ImmutableSetMultimapProto
	}
	return nil
}

func (x *BaseImmutableMultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetBaseImmutableMultimapProto().(*BaseImmutableMultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

func (x *BaseImmutableMultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetBaseImmutableMultimapProto().(*BaseImmutableMultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

type isBaseImmutableMultimapProto_BaseImmutableMultimapProto interface {
	isBaseImmutableMultimapProto_BaseImmutableMultimapProto()
}

type BaseImmutableMultimapProto_ImmutableMultimapProto struct {
	ImmutableMultimapProto *ImmutableMultimapProto `protobuf:"bytes,1,opt,name=immutableMultimapProto,proto3,oneof"`
}

type BaseImmutableMultimapProto_ImmutableListMultimapProto struct {
	ImmutableListMultimapProto *ImmutableListMultimapProto `protobuf:"bytes,2,opt,name=immutableListMultimapProto,proto3,oneof"`
}

type BaseImmutableMultimapProto_ImmutableSetMultimapProto struct {
	ImmutableSetMultimapProto *ImmutableSetMultimapProto `protobuf:"bytes,3,opt,name=immutableSetMultimapProto,proto3,oneof"`
}

type BaseImmutableMultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,4,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

type BaseImmutableMultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,5,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

func (*BaseImmutableMultimapProto_ImmutableMultimapProto) isBaseImmutableMultimapProto_BaseImmutableMultimapProto() {
}

func (*BaseImmutableMultimapProto_ImmutableListMultimapProto) isBaseImmutableMultimapProto_BaseImmutableMultimapProto() {
}

func (*BaseImmutableMultimapProto_ImmutableSetMultimapProto) isBaseImmutableMultimapProto_BaseImmutableMultimapProto() {
}

func (*BaseImmutableMultimapProto_EmptyImmutableListMultimapProto) isBaseImmutableMultimapProto_BaseImmutableMultimapProto() {
}

func (*BaseImmutableMultimapProto_EmptyImmutableSetMultimapProto) isBaseImmutableMultimapProto_BaseImmutableMultimapProto() {
}

// Java Class: com.google.common.collect.ImmutableMultimap
type ImmutableMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImmutableMultimapProto:
	//
	//	*ImmutableMultimapProto_ImmutableListMultimapProto
	//	*ImmutableMultimapProto_ImmutableSetMultimapProto
	//	*ImmutableMultimapProto_EmptyImmutableListMultimapProto
	//	*ImmutableMultimapProto_EmptyImmutableSetMultimapProto
	ImmutableMultimapProto isImmutableMultimapProto_ImmutableMultimapProto `protobuf_oneof:"immutableMultimapProto"`
}

func (x *ImmutableMultimapProto) Reset() {
	*x = ImmutableMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[206]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmutableMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmutableMultimapProto) ProtoMessage() {}

func (x *ImmutableMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[206]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmutableMultimapProto.ProtoReflect.Descriptor instead.
func (*ImmutableMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{206}
}

func (m *ImmutableMultimapProto) GetImmutableMultimapProto() isImmutableMultimapProto_ImmutableMultimapProto {
	if m != nil {
		return m.ImmutableMultimapProto
	}
	return nil
}

func (x *ImmutableMultimapProto) GetImmutableListMultimapProto() *ImmutableListMultimapProto {
	if x, ok := x.GetImmutableMultimapProto().(*ImmutableMultimapProto_ImmutableListMultimapProto); ok {
		return x.ImmutableListMultimapProto
	}
	return nil
}

func (x *ImmutableMultimapProto) GetImmutableSetMultimapProto() *ImmutableSetMultimapProto {
	if x, ok := x.GetImmutableMultimapProto().(*ImmutableMultimapProto_ImmutableSetMultimapProto); ok {
		return x.ImmutableSetMultimapProto
	}
	return nil
}

func (x *ImmutableMultimapProto) GetEmptyImmutableListMultimapProto() *EmptyImmutableListMultimapProto {
	if x, ok := x.GetImmutableMultimapProto().(*ImmutableMultimapProto_EmptyImmutableListMultimapProto); ok {
		return x.EmptyImmutableListMultimapProto
	}
	return nil
}

func (x *ImmutableMultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetImmutableMultimapProto().(*ImmutableMultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

type isImmutableMultimapProto_ImmutableMultimapProto interface {
	isImmutableMultimapProto_ImmutableMultimapProto()
}

type ImmutableMultimapProto_ImmutableListMultimapProto struct {
	ImmutableListMultimapProto *ImmutableListMultimapProto `protobuf:"bytes,1,opt,name=immutableListMultimapProto,proto3,oneof"`
}

type ImmutableMultimapProto_ImmutableSetMultimapProto struct {
	ImmutableSetMultimapProto *ImmutableSetMultimapProto `protobuf:"bytes,2,opt,name=immutableSetMultimapProto,proto3,oneof"`
}

type ImmutableMultimapProto_EmptyImmutableListMultimapProto struct {
	EmptyImmutableListMultimapProto *EmptyImmutableListMultimapProto `protobuf:"bytes,3,opt,name=emptyImmutableListMultimapProto,proto3,oneof"`
}

type ImmutableMultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,4,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

func (*ImmutableMultimapProto_ImmutableListMultimapProto) isImmutableMultimapProto_ImmutableMultimapProto() {
}

func (*ImmutableMultimapProto_ImmutableSetMultimapProto) isImmutableMultimapProto_ImmutableMultimapProto() {
}

func (*ImmutableMultimapProto_EmptyImmutableListMultimapProto) isImmutableMultimapProto_ImmutableMultimapProto() {
}

func (*ImmutableMultimapProto_EmptyImmutableSetMultimapProto) isImmutableMultimapProto_ImmutableMultimapProto() {
}

// Java Class: com.google.common.collect.ImmutableSetMultimap
type ImmutableSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to ImmutableSetMultimapProto:
	//
	//	*ImmutableSetMultimapProto_EmptyImmutableSetMultimapProto
	ImmutableSetMultimapProto isImmutableSetMultimapProto_ImmutableSetMultimapProto `protobuf_oneof:"immutableSetMultimapProto"`
}

func (x *ImmutableSetMultimapProto) Reset() {
	*x = ImmutableSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[207]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ImmutableSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ImmutableSetMultimapProto) ProtoMessage() {}

func (x *ImmutableSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[207]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ImmutableSetMultimapProto.ProtoReflect.Descriptor instead.
func (*ImmutableSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{207}
}

func (m *ImmutableSetMultimapProto) GetImmutableSetMultimapProto() isImmutableSetMultimapProto_ImmutableSetMultimapProto {
	if m != nil {
		return m.ImmutableSetMultimapProto
	}
	return nil
}

func (x *ImmutableSetMultimapProto) GetEmptyImmutableSetMultimapProto() *EmptyImmutableSetMultimapProto {
	if x, ok := x.GetImmutableSetMultimapProto().(*ImmutableSetMultimapProto_EmptyImmutableSetMultimapProto); ok {
		return x.EmptyImmutableSetMultimapProto
	}
	return nil
}

type isImmutableSetMultimapProto_ImmutableSetMultimapProto interface {
	isImmutableSetMultimapProto_ImmutableSetMultimapProto()
}

type ImmutableSetMultimapProto_EmptyImmutableSetMultimapProto struct {
	EmptyImmutableSetMultimapProto *EmptyImmutableSetMultimapProto `protobuf:"bytes,1,opt,name=emptyImmutableSetMultimapProto,proto3,oneof"`
}

func (*ImmutableSetMultimapProto_EmptyImmutableSetMultimapProto) isImmutableSetMultimapProto_ImmutableSetMultimapProto() {
}

// Java Class: com.google.common.collect.EmptyImmutableSetMultimap
type EmptyImmutableSetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *EmptyImmutableSetMultimapProto) Reset() {
	*x = EmptyImmutableSetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[208]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmptyImmutableSetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmptyImmutableSetMultimapProto) ProtoMessage() {}

func (x *EmptyImmutableSetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[208]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmptyImmutableSetMultimapProto.ProtoReflect.Descriptor instead.
func (*EmptyImmutableSetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{208}
}

// Java Class: com.google.common.collect.FilteredKeyMultimap
type FilteredKeyMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FilteredKeyMultimapProto:
	//
	//	*FilteredKeyMultimapProto_FilteredKeyListMultimapProto
	//	*FilteredKeyMultimapProto_FilteredKeySetMultimapProto
	FilteredKeyMultimapProto isFilteredKeyMultimapProto_FilteredKeyMultimapProto `protobuf_oneof:"filteredKeyMultimapProto"`
	Unfiltered               *MultimapProto                                      `protobuf:"bytes,3,opt,name=unfiltered,proto3" json:"unfiltered,omitempty"`
	KeyPredicate             *ComGoogleCommonBase_PredicateProto                 `protobuf:"bytes,4,opt,name=keyPredicate,proto3" json:"keyPredicate,omitempty"`
}

func (x *FilteredKeyMultimapProto) Reset() {
	*x = FilteredKeyMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[209]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredKeyMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredKeyMultimapProto) ProtoMessage() {}

func (x *FilteredKeyMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[209]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredKeyMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredKeyMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{209}
}

func (m *FilteredKeyMultimapProto) GetFilteredKeyMultimapProto() isFilteredKeyMultimapProto_FilteredKeyMultimapProto {
	if m != nil {
		return m.FilteredKeyMultimapProto
	}
	return nil
}

func (x *FilteredKeyMultimapProto) GetFilteredKeyListMultimapProto() *FilteredKeyListMultimapProto {
	if x, ok := x.GetFilteredKeyMultimapProto().(*FilteredKeyMultimapProto_FilteredKeyListMultimapProto); ok {
		return x.FilteredKeyListMultimapProto
	}
	return nil
}

func (x *FilteredKeyMultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetFilteredKeyMultimapProto().(*FilteredKeyMultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

func (x *FilteredKeyMultimapProto) GetUnfiltered() *MultimapProto {
	if x != nil {
		return x.Unfiltered
	}
	return nil
}

func (x *FilteredKeyMultimapProto) GetKeyPredicate() *ComGoogleCommonBase_PredicateProto {
	if x != nil {
		return x.KeyPredicate
	}
	return nil
}

type isFilteredKeyMultimapProto_FilteredKeyMultimapProto interface {
	isFilteredKeyMultimapProto_FilteredKeyMultimapProto()
}

type FilteredKeyMultimapProto_FilteredKeyListMultimapProto struct {
	FilteredKeyListMultimapProto *FilteredKeyListMultimapProto `protobuf:"bytes,1,opt,name=filteredKeyListMultimapProto,proto3,oneof"`
}

type FilteredKeyMultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,2,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

func (*FilteredKeyMultimapProto_FilteredKeyListMultimapProto) isFilteredKeyMultimapProto_FilteredKeyMultimapProto() {
}

func (*FilteredKeyMultimapProto_FilteredKeySetMultimapProto) isFilteredKeyMultimapProto_FilteredKeyMultimapProto() {
}

// Java Class: com.google.common.collect.FilteredKeySetMultimap
type FilteredKeySetMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Unfiltered   *MultimapProto                      `protobuf:"bytes,1,opt,name=unfiltered,proto3" json:"unfiltered,omitempty"`
	KeyPredicate *ComGoogleCommonBase_PredicateProto `protobuf:"bytes,2,opt,name=keyPredicate,proto3" json:"keyPredicate,omitempty"`
}

func (x *FilteredKeySetMultimapProto) Reset() {
	*x = FilteredKeySetMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[210]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredKeySetMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredKeySetMultimapProto) ProtoMessage() {}

func (x *FilteredKeySetMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[210]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredKeySetMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredKeySetMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{210}
}

func (x *FilteredKeySetMultimapProto) GetUnfiltered() *MultimapProto {
	if x != nil {
		return x.Unfiltered
	}
	return nil
}

func (x *FilteredKeySetMultimapProto) GetKeyPredicate() *ComGoogleCommonBase_PredicateProto {
	if x != nil {
		return x.KeyPredicate
	}
	return nil
}

// Java Class: com.google.common.collect.FilteredMultimap
type FilteredMultimapProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to FilteredMultimapProto:
	//
	//	*FilteredMultimapProto_FilteredEntryMultimapProto
	//	*FilteredMultimapProto_FilteredKeyMultimapProto
	//	*FilteredMultimapProto_FilteredSetMultimapProto
	//	*FilteredMultimapProto_FilteredEntrySetMultimapProto
	//	*FilteredMultimapProto_FilteredKeyListMultimapProto
	//	*FilteredMultimapProto_FilteredKeySetMultimapProto
	FilteredMultimapProto isFilteredMultimapProto_FilteredMultimapProto `protobuf_oneof:"filteredMultimapProto"`
}

func (x *FilteredMultimapProto) Reset() {
	*x = FilteredMultimapProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[211]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FilteredMultimapProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FilteredMultimapProto) ProtoMessage() {}

func (x *FilteredMultimapProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[211]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FilteredMultimapProto.ProtoReflect.Descriptor instead.
func (*FilteredMultimapProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{211}
}

func (m *FilteredMultimapProto) GetFilteredMultimapProto() isFilteredMultimapProto_FilteredMultimapProto {
	if m != nil {
		return m.FilteredMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredEntryMultimapProto() *FilteredEntryMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredEntryMultimapProto); ok {
		return x.FilteredEntryMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredKeyMultimapProto() *FilteredKeyMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredKeyMultimapProto); ok {
		return x.FilteredKeyMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredSetMultimapProto() *FilteredSetMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredSetMultimapProto); ok {
		return x.FilteredSetMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredEntrySetMultimapProto() *FilteredEntrySetMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredEntrySetMultimapProto); ok {
		return x.FilteredEntrySetMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredKeyListMultimapProto() *FilteredKeyListMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredKeyListMultimapProto); ok {
		return x.FilteredKeyListMultimapProto
	}
	return nil
}

func (x *FilteredMultimapProto) GetFilteredKeySetMultimapProto() *FilteredKeySetMultimapProto {
	if x, ok := x.GetFilteredMultimapProto().(*FilteredMultimapProto_FilteredKeySetMultimapProto); ok {
		return x.FilteredKeySetMultimapProto
	}
	return nil
}

type isFilteredMultimapProto_FilteredMultimapProto interface {
	isFilteredMultimapProto_FilteredMultimapProto()
}

type FilteredMultimapProto_FilteredEntryMultimapProto struct {
	FilteredEntryMultimapProto *FilteredEntryMultimapProto `protobuf:"bytes,1,opt,name=filteredEntryMultimapProto,proto3,oneof"`
}

type FilteredMultimapProto_FilteredKeyMultimapProto struct {
	FilteredKeyMultimapProto *FilteredKeyMultimapProto `protobuf:"bytes,2,opt,name=filteredKeyMultimapProto,proto3,oneof"`
}

type FilteredMultimapProto_FilteredSetMultimapProto struct {
	FilteredSetMultimapProto *FilteredSetMultimapProto `protobuf:"bytes,3,opt,name=filteredSetMultimapProto,proto3,oneof"`
}

type FilteredMultimapProto_FilteredEntrySetMultimapProto struct {
	FilteredEntrySetMultimapProto *FilteredEntrySetMultimapProto `protobuf:"bytes,4,opt,name=filteredEntrySetMultimapProto,proto3,oneof"`
}

type FilteredMultimapProto_FilteredKeyListMultimapProto struct {
	FilteredKeyListMultimapProto *FilteredKeyListMultimapProto `protobuf:"bytes,5,opt,name=filteredKeyListMultimapProto,proto3,oneof"`
}

type FilteredMultimapProto_FilteredKeySetMultimapProto struct {
	FilteredKeySetMultimapProto *FilteredKeySetMultimapProto `protobuf:"bytes,6,opt,name=filteredKeySetMultimapProto,proto3,oneof"`
}

func (*FilteredMultimapProto_FilteredEntryMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

func (*FilteredMultimapProto_FilteredKeyMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

func (*FilteredMultimapProto_FilteredSetMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

func (*FilteredMultimapProto_FilteredEntrySetMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

func (*FilteredMultimapProto_FilteredKeyListMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

func (*FilteredMultimapProto_FilteredKeySetMultimapProto) isFilteredMultimapProto_FilteredMultimapProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlPositionFunction
type SqlPositionFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlPositionFunctionProto) Reset() {
	*x = SqlPositionFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[212]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlPositionFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlPositionFunctionProto) ProtoMessage() {}

func (x *SqlPositionFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[212]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlPositionFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlPositionFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{212}
}

func (x *SqlPositionFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlPositionFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlPositionFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlPositionFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlPositionFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlPositionFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlPositionFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlPositionFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlPositionFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlPositionFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonRemoveFunction
type SqlJsonRemoveFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonRemoveFunctionProto) Reset() {
	*x = SqlJsonRemoveFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[213]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonRemoveFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonRemoveFunctionProto) ProtoMessage() {}

func (x *SqlJsonRemoveFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[213]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonRemoveFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonRemoveFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{213}
}

func (x *SqlJsonRemoveFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonRemoveFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonRemoveFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonRemoveFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonRemoveFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonRemoveFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonRemoveFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonRemoveFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonRemoveFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonRemoveFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlMatchFunction
type SqlMatchFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMatchFunctionProto) Reset() {
	*x = SqlMatchFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[214]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMatchFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMatchFunctionProto) ProtoMessage() {}

func (x *SqlMatchFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[214]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMatchFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlMatchFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{214}
}

func (x *SqlMatchFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlMatchFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlMatchFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMatchFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMatchFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMatchFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMatchFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMatchFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMatchFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMatchFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlOverlayFunction
type SqlOverlayFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlOverlayFunctionProto) Reset() {
	*x = SqlOverlayFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[215]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOverlayFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOverlayFunctionProto) ProtoMessage() {}

func (x *SqlOverlayFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[215]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOverlayFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlOverlayFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{215}
}

func (x *SqlOverlayFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlOverlayFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlOverlayFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlOverlayFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlOverlayFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlOverlayFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlOverlayFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlOverlayFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlOverlayFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlOverlayFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonArrayFunction
type SqlJsonArrayFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonArrayFunctionProto) Reset() {
	*x = SqlJsonArrayFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[216]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonArrayFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonArrayFunctionProto) ProtoMessage() {}

func (x *SqlJsonArrayFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[216]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonArrayFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonArrayFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{216}
}

func (x *SqlJsonArrayFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonArrayFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonArrayFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonArrayFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonArrayFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonArrayFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonArrayFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonArrayFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonArrayFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonArrayFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlRandIntegerFunction
type SqlRandIntegerFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRandIntegerFunctionProto) Reset() {
	*x = SqlRandIntegerFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[217]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRandIntegerFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRandIntegerFunctionProto) ProtoMessage() {}

func (x *SqlRandIntegerFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[217]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRandIntegerFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlRandIntegerFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{217}
}

func (x *SqlRandIntegerFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlRandIntegerFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlRandIntegerFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRandIntegerFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRandIntegerFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRandIntegerFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRandIntegerFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRandIntegerFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRandIntegerFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRandIntegerFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCurrentDateFunction
type SqlCurrentDateFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCurrentDateFunctionProto) Reset() {
	*x = SqlCurrentDateFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[218]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCurrentDateFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCurrentDateFunctionProto) ProtoMessage() {}

func (x *SqlCurrentDateFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[218]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCurrentDateFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCurrentDateFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{218}
}

func (x *SqlCurrentDateFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlCurrentDateFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlCurrentDateFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCurrentDateFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCurrentDateFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCurrentDateFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCurrentDateFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCurrentDateFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCurrentDateFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCurrentDateFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlAggFunction
type SqlAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAggFunctionProto:
	//
	//	*SqlAggFunctionProto_SqlUserDefinedAggFunctionProto
	//	*SqlAggFunctionProto_SqlCovarAggFunctionProto
	//	*SqlAggFunctionProto_SqlJsonArrayAggAggFunctionProto
	//	*SqlAggFunctionProto_SqlSumAggFunctionProto
	//	*SqlAggFunctionProto_SqlMinMaxAggFunctionProto
	//	*SqlAggFunctionProto_SqlCountAggFunctionProto
	//	*SqlAggFunctionProto_SqlAnyValueAggFunctionProto
	//	*SqlAggFunctionProto_SqlAvgAggFunctionProto
	//	*SqlAggFunctionProto_SqlNthValueAggFunctionProto
	//	*SqlAggFunctionProto_SqlBasicAggFunctionProto
	//	*SqlAggFunctionProto_SqlSingleValueAggFunctionProto
	//	*SqlAggFunctionProto_SqlSumEmptyIsZeroAggFunctionProto
	//	*SqlAggFunctionProto_SqlListaggAggFunctionProto
	//	*SqlAggFunctionProto_SqlNtileAggFunctionProto
	//	*SqlAggFunctionProto_SqlJsonObjectAggAggFunctionProto
	//	*SqlAggFunctionProto_SqlFirstLastValueAggFunctionProto
	//	*SqlAggFunctionProto_SqlAbstractGroupFunctionProto
	//	*SqlAggFunctionProto_SqlHistogramAggFunctionProto
	//	*SqlAggFunctionProto_SqlRankFunctionProto
	//	*SqlAggFunctionProto_SqlLeadLagAggFunctionProto
	//	*SqlAggFunctionProto_SqlBitOpAggFunctionProto
	//	*SqlAggFunctionProto_SqlRegrCountAggFunctionProto
	//	*SqlAggFunctionProto_SqlGroupIdFunctionProto
	//	*SqlAggFunctionProto_SqlGroupingIdFunctionProto
	//	*SqlAggFunctionProto_SqlGroupingFunctionProto
	SqlAggFunctionProto  isSqlAggFunctionProto_SqlAggFunctionProto `protobuf_oneof:"sqlAggFunctionProto"`
	RequiresOrder        bool                                      `protobuf:"varint,26,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                                      `protobuf:"varint,27,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto                          `protobuf:"varint,28,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto                  `protobuf:"varint,29,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto                       `protobuf:"bytes,30,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                                    `protobuf:"bytes,31,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                              `protobuf:"varint,32,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                                     `protobuf:"zigzag32,33,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                                     `protobuf:"zigzag32,34,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto              `protobuf:"bytes,35,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto             `protobuf:"bytes,36,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto               `protobuf:"bytes,37,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                                    `protobuf:"bytes,38,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAggFunctionProto) Reset() {
	*x = SqlAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[219]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAggFunctionProto) ProtoMessage() {}

func (x *SqlAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[219]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{219}
}

func (m *SqlAggFunctionProto) GetSqlAggFunctionProto() isSqlAggFunctionProto_SqlAggFunctionProto {
	if m != nil {
		return m.SqlAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlUserDefinedAggFunctionProto() *SqlUserDefinedAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlUserDefinedAggFunctionProto); ok {
		return x.SqlUserDefinedAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlCovarAggFunctionProto() *SqlCovarAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlCovarAggFunctionProto); ok {
		return x.SqlCovarAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlJsonArrayAggAggFunctionProto() *SqlJsonArrayAggAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlJsonArrayAggAggFunctionProto); ok {
		return x.SqlJsonArrayAggAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlSumAggFunctionProto() *SqlSumAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlSumAggFunctionProto); ok {
		return x.SqlSumAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlMinMaxAggFunctionProto() *SqlMinMaxAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlMinMaxAggFunctionProto); ok {
		return x.SqlMinMaxAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlCountAggFunctionProto() *SqlCountAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlCountAggFunctionProto); ok {
		return x.SqlCountAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlAnyValueAggFunctionProto() *SqlAnyValueAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlAnyValueAggFunctionProto); ok {
		return x.SqlAnyValueAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlAvgAggFunctionProto() *SqlAvgAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlAvgAggFunctionProto); ok {
		return x.SqlAvgAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlNthValueAggFunctionProto() *SqlNthValueAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlNthValueAggFunctionProto); ok {
		return x.SqlNthValueAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlBasicAggFunctionProto() *SqlBasicAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlBasicAggFunctionProto); ok {
		return x.SqlBasicAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlSingleValueAggFunctionProto() *SqlSingleValueAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlSingleValueAggFunctionProto); ok {
		return x.SqlSingleValueAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlSumEmptyIsZeroAggFunctionProto() *SqlSumEmptyIsZeroAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlSumEmptyIsZeroAggFunctionProto); ok {
		return x.SqlSumEmptyIsZeroAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlListaggAggFunctionProto() *SqlListaggAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlListaggAggFunctionProto); ok {
		return x.SqlListaggAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlNtileAggFunctionProto() *SqlNtileAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlNtileAggFunctionProto); ok {
		return x.SqlNtileAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlJsonObjectAggAggFunctionProto() *SqlJsonObjectAggAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlJsonObjectAggAggFunctionProto); ok {
		return x.SqlJsonObjectAggAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlFirstLastValueAggFunctionProto() *SqlFirstLastValueAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlFirstLastValueAggFunctionProto); ok {
		return x.SqlFirstLastValueAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlAbstractGroupFunctionProto() *SqlAbstractGroupFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlAbstractGroupFunctionProto); ok {
		return x.SqlAbstractGroupFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlHistogramAggFunctionProto() *SqlHistogramAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlHistogramAggFunctionProto); ok {
		return x.SqlHistogramAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlRankFunctionProto() *SqlRankFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlRankFunctionProto); ok {
		return x.SqlRankFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlLeadLagAggFunctionProto() *SqlLeadLagAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlLeadLagAggFunctionProto); ok {
		return x.SqlLeadLagAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlBitOpAggFunctionProto() *SqlBitOpAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlBitOpAggFunctionProto); ok {
		return x.SqlBitOpAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlRegrCountAggFunctionProto() *SqlRegrCountAggFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlRegrCountAggFunctionProto); ok {
		return x.SqlRegrCountAggFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlGroupIdFunctionProto() *SqlGroupIdFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlGroupIdFunctionProto); ok {
		return x.SqlGroupIdFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlGroupingIdFunctionProto() *SqlGroupingIdFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlGroupingIdFunctionProto); ok {
		return x.SqlGroupingIdFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetSqlGroupingFunctionProto() *SqlGroupingFunctionProto {
	if x, ok := x.GetSqlAggFunctionProto().(*SqlAggFunctionProto_SqlGroupingFunctionProto); ok {
		return x.SqlGroupingFunctionProto
	}
	return nil
}

func (x *SqlAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlAggFunctionProto_SqlAggFunctionProto interface {
	isSqlAggFunctionProto_SqlAggFunctionProto()
}

type SqlAggFunctionProto_SqlUserDefinedAggFunctionProto struct {
	SqlUserDefinedAggFunctionProto *SqlUserDefinedAggFunctionProto `protobuf:"bytes,1,opt,name=sqlUserDefinedAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlCovarAggFunctionProto struct {
	SqlCovarAggFunctionProto *SqlCovarAggFunctionProto `protobuf:"bytes,2,opt,name=sqlCovarAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlJsonArrayAggAggFunctionProto struct {
	SqlJsonArrayAggAggFunctionProto *SqlJsonArrayAggAggFunctionProto `protobuf:"bytes,3,opt,name=sqlJsonArrayAggAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlSumAggFunctionProto struct {
	SqlSumAggFunctionProto *SqlSumAggFunctionProto `protobuf:"bytes,4,opt,name=sqlSumAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlMinMaxAggFunctionProto struct {
	SqlMinMaxAggFunctionProto *SqlMinMaxAggFunctionProto `protobuf:"bytes,5,opt,name=sqlMinMaxAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlCountAggFunctionProto struct {
	SqlCountAggFunctionProto *SqlCountAggFunctionProto `protobuf:"bytes,6,opt,name=sqlCountAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlAnyValueAggFunctionProto struct {
	SqlAnyValueAggFunctionProto *SqlAnyValueAggFunctionProto `protobuf:"bytes,7,opt,name=sqlAnyValueAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlAvgAggFunctionProto struct {
	SqlAvgAggFunctionProto *SqlAvgAggFunctionProto `protobuf:"bytes,8,opt,name=sqlAvgAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlNthValueAggFunctionProto struct {
	SqlNthValueAggFunctionProto *SqlNthValueAggFunctionProto `protobuf:"bytes,9,opt,name=sqlNthValueAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlBasicAggFunctionProto struct {
	SqlBasicAggFunctionProto *SqlBasicAggFunctionProto `protobuf:"bytes,10,opt,name=sqlBasicAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlSingleValueAggFunctionProto struct {
	SqlSingleValueAggFunctionProto *SqlSingleValueAggFunctionProto `protobuf:"bytes,11,opt,name=sqlSingleValueAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlSumEmptyIsZeroAggFunctionProto struct {
	SqlSumEmptyIsZeroAggFunctionProto *SqlSumEmptyIsZeroAggFunctionProto `protobuf:"bytes,12,opt,name=sqlSumEmptyIsZeroAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlListaggAggFunctionProto struct {
	SqlListaggAggFunctionProto *SqlListaggAggFunctionProto `protobuf:"bytes,13,opt,name=sqlListaggAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlNtileAggFunctionProto struct {
	SqlNtileAggFunctionProto *SqlNtileAggFunctionProto `protobuf:"bytes,14,opt,name=sqlNtileAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlJsonObjectAggAggFunctionProto struct {
	SqlJsonObjectAggAggFunctionProto *SqlJsonObjectAggAggFunctionProto `protobuf:"bytes,15,opt,name=sqlJsonObjectAggAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlFirstLastValueAggFunctionProto struct {
	SqlFirstLastValueAggFunctionProto *SqlFirstLastValueAggFunctionProto `protobuf:"bytes,16,opt,name=sqlFirstLastValueAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlAbstractGroupFunctionProto struct {
	SqlAbstractGroupFunctionProto *SqlAbstractGroupFunctionProto `protobuf:"bytes,17,opt,name=sqlAbstractGroupFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlHistogramAggFunctionProto struct {
	SqlHistogramAggFunctionProto *SqlHistogramAggFunctionProto `protobuf:"bytes,18,opt,name=sqlHistogramAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlRankFunctionProto struct {
	SqlRankFunctionProto *SqlRankFunctionProto `protobuf:"bytes,19,opt,name=sqlRankFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlLeadLagAggFunctionProto struct {
	SqlLeadLagAggFunctionProto *SqlLeadLagAggFunctionProto `protobuf:"bytes,20,opt,name=sqlLeadLagAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlBitOpAggFunctionProto struct {
	SqlBitOpAggFunctionProto *SqlBitOpAggFunctionProto `protobuf:"bytes,21,opt,name=sqlBitOpAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlRegrCountAggFunctionProto struct {
	SqlRegrCountAggFunctionProto *SqlRegrCountAggFunctionProto `protobuf:"bytes,22,opt,name=sqlRegrCountAggFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlGroupIdFunctionProto struct {
	SqlGroupIdFunctionProto *SqlGroupIdFunctionProto `protobuf:"bytes,23,opt,name=sqlGroupIdFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlGroupingIdFunctionProto struct {
	SqlGroupingIdFunctionProto *SqlGroupingIdFunctionProto `protobuf:"bytes,24,opt,name=sqlGroupingIdFunctionProto,proto3,oneof"`
}

type SqlAggFunctionProto_SqlGroupingFunctionProto struct {
	SqlGroupingFunctionProto *SqlGroupingFunctionProto `protobuf:"bytes,25,opt,name=sqlGroupingFunctionProto,proto3,oneof"`
}

func (*SqlAggFunctionProto_SqlUserDefinedAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlCovarAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlJsonArrayAggAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlSumAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlMinMaxAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlCountAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlAnyValueAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlAvgAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlNthValueAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlBasicAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlSingleValueAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlSumEmptyIsZeroAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlListaggAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlNtileAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlJsonObjectAggAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlFirstLastValueAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlAbstractGroupFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlHistogramAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlRankFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlLeadLagAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlBitOpAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlRegrCountAggFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {
}

func (*SqlAggFunctionProto_SqlGroupIdFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlGroupingIdFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

func (*SqlAggFunctionProto_SqlGroupingFunctionProto) isSqlAggFunctionProto_SqlAggFunctionProto() {}

// Java Class: org.apache.calcite.sql.validate.SqlUserDefinedAggFunction
type SqlUserDefinedAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Function             *AggregateFunctionProto       `protobuf:"bytes,1,opt,name=function,proto3" json:"function,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUserDefinedAggFunctionProto) Reset() {
	*x = SqlUserDefinedAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[220]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUserDefinedAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUserDefinedAggFunctionProto) ProtoMessage() {}

func (x *SqlUserDefinedAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[220]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUserDefinedAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlUserDefinedAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{220}
}

func (x *SqlUserDefinedAggFunctionProto) GetFunction() *AggregateFunctionProto {
	if x != nil {
		return x.Function
	}
	return nil
}

func (x *SqlUserDefinedAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlUserDefinedAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlUserDefinedAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlUserDefinedAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlUserDefinedAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlUserDefinedAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUserDefinedAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUserDefinedAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUserDefinedAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUserDefinedAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUserDefinedAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUserDefinedAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUserDefinedAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCovarAggFunction
type SqlCovarAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCovarAggFunctionProto) Reset() {
	*x = SqlCovarAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[221]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCovarAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCovarAggFunctionProto) ProtoMessage() {}

func (x *SqlCovarAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[221]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCovarAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCovarAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{221}
}

func (x *SqlCovarAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlCovarAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlCovarAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlCovarAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlCovarAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlCovarAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCovarAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCovarAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCovarAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCovarAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCovarAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCovarAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCovarAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonArrayAggAggFunction
type SqlJsonArrayAggAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NullClause           SqlJsonConstructorNullClauseProto `protobuf:"varint,1,opt,name=nullClause,proto3,enum=rill.sql.v1.SqlJsonConstructorNullClauseProto" json:"nullClause,omitempty"`
	RequiresOrder        bool                              `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                              `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto                  `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto          `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto               `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                      `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                             `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                             `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto      `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto     `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto       `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                            `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonArrayAggAggFunctionProto) Reset() {
	*x = SqlJsonArrayAggAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[222]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonArrayAggAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonArrayAggAggFunctionProto) ProtoMessage() {}

func (x *SqlJsonArrayAggAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[222]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonArrayAggAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonArrayAggAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{222}
}

func (x *SqlJsonArrayAggAggFunctionProto) GetNullClause() SqlJsonConstructorNullClauseProto {
	if x != nil {
		return x.NullClause
	}
	return SqlJsonConstructorNullClauseProto_SqlJsonConstructorNullClauseProto_NULL_ON_NULL_
}

func (x *SqlJsonArrayAggAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlJsonArrayAggAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlJsonArrayAggAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlJsonArrayAggAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonArrayAggAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonArrayAggAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonArrayAggAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonArrayAggAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonArrayAggAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonArrayAggAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonArrayAggAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonArrayAggAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonArrayAggAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSumAggFunction
type SqlSumAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *RelDataTypeProto             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSumAggFunctionProto) Reset() {
	*x = SqlSumAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[223]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSumAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSumAggFunctionProto) ProtoMessage() {}

func (x *SqlSumAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[223]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSumAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlSumAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{223}
}

func (x *SqlSumAggFunctionProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SqlSumAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlSumAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlSumAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlSumAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlSumAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlSumAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSumAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSumAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSumAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSumAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSumAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSumAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSumAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMinMaxAggFunction
type SqlMinMaxAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ArgTypes             []*RelDataTypeProto           `protobuf:"bytes,1,rep,name=argTypes,proto3" json:"argTypes,omitempty"`
	MinMaxKind           int32                         `protobuf:"zigzag32,2,opt,name=minMaxKind,proto3" json:"minMaxKind,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,3,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,4,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,5,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,6,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,7,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,8,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,9,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,10,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,11,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,12,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,13,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,14,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,15,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMinMaxAggFunctionProto) Reset() {
	*x = SqlMinMaxAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[224]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMinMaxAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMinMaxAggFunctionProto) ProtoMessage() {}

func (x *SqlMinMaxAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[224]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMinMaxAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlMinMaxAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{224}
}

func (x *SqlMinMaxAggFunctionProto) GetArgTypes() []*RelDataTypeProto {
	if x != nil {
		return x.ArgTypes
	}
	return nil
}

func (x *SqlMinMaxAggFunctionProto) GetMinMaxKind() int32 {
	if x != nil {
		return x.MinMaxKind
	}
	return 0
}

func (x *SqlMinMaxAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlMinMaxAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlMinMaxAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlMinMaxAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlMinMaxAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlMinMaxAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMinMaxAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMinMaxAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMinMaxAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMinMaxAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMinMaxAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMinMaxAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMinMaxAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCountAggFunction
type SqlCountAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlCountAggFunctionProto:
	//
	//	*SqlCountAggFunctionProto_SqlRegrCountAggFunctionProto
	SqlCountAggFunctionProto isSqlCountAggFunctionProto_SqlCountAggFunctionProto `protobuf_oneof:"sqlCountAggFunctionProto"`
	RequiresOrder            bool                                                `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver             bool                                                `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder       OptionalityProto                                    `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category                 SqlFunctionCategoryProto                            `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier            *SqlIdentifierProto                                 `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                     string                                              `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                     SqlKindProto                                        `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                 int32                                               `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                int32                                               `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference      *SqlReturnTypeInferenceProto                        `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference     *SqlOperandTypeInferenceProto                       `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker       *SqlOperandTypeCheckerProto                         `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures        string                                              `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCountAggFunctionProto) Reset() {
	*x = SqlCountAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[225]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCountAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCountAggFunctionProto) ProtoMessage() {}

func (x *SqlCountAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[225]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCountAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCountAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{225}
}

func (m *SqlCountAggFunctionProto) GetSqlCountAggFunctionProto() isSqlCountAggFunctionProto_SqlCountAggFunctionProto {
	if m != nil {
		return m.SqlCountAggFunctionProto
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetSqlRegrCountAggFunctionProto() *SqlRegrCountAggFunctionProto {
	if x, ok := x.GetSqlCountAggFunctionProto().(*SqlCountAggFunctionProto_SqlRegrCountAggFunctionProto); ok {
		return x.SqlRegrCountAggFunctionProto
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlCountAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlCountAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlCountAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlCountAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCountAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCountAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCountAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCountAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCountAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlCountAggFunctionProto_SqlCountAggFunctionProto interface {
	isSqlCountAggFunctionProto_SqlCountAggFunctionProto()
}

type SqlCountAggFunctionProto_SqlRegrCountAggFunctionProto struct {
	SqlRegrCountAggFunctionProto *SqlRegrCountAggFunctionProto `protobuf:"bytes,1,opt,name=sqlRegrCountAggFunctionProto,proto3,oneof"`
}

func (*SqlCountAggFunctionProto_SqlRegrCountAggFunctionProto) isSqlCountAggFunctionProto_SqlCountAggFunctionProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlRegrCountAggFunction
type SqlRegrCountAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRegrCountAggFunctionProto) Reset() {
	*x = SqlRegrCountAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[226]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRegrCountAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRegrCountAggFunctionProto) ProtoMessage() {}

func (x *SqlRegrCountAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[226]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRegrCountAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlRegrCountAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{226}
}

func (x *SqlRegrCountAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlRegrCountAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlRegrCountAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlRegrCountAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlRegrCountAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlRegrCountAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRegrCountAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRegrCountAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRegrCountAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRegrCountAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRegrCountAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRegrCountAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRegrCountAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlAnyValueAggFunction
type SqlAnyValueAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAnyValueAggFunctionProto) Reset() {
	*x = SqlAnyValueAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[227]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAnyValueAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAnyValueAggFunctionProto) ProtoMessage() {}

func (x *SqlAnyValueAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[227]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAnyValueAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlAnyValueAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{227}
}

func (x *SqlAnyValueAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlAnyValueAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlAnyValueAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlAnyValueAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlAnyValueAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlAnyValueAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAnyValueAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAnyValueAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAnyValueAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAnyValueAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAnyValueAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAnyValueAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAnyValueAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlAvgAggFunction
type SqlAvgAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAvgAggFunctionProto) Reset() {
	*x = SqlAvgAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[228]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAvgAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAvgAggFunctionProto) ProtoMessage() {}

func (x *SqlAvgAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[228]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAvgAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlAvgAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{228}
}

func (x *SqlAvgAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlAvgAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlAvgAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlAvgAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlAvgAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlAvgAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAvgAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAvgAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAvgAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAvgAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAvgAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAvgAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAvgAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlNthValueAggFunction
type SqlNthValueAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlNthValueAggFunctionProto) Reset() {
	*x = SqlNthValueAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[229]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNthValueAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNthValueAggFunctionProto) ProtoMessage() {}

func (x *SqlNthValueAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[229]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNthValueAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlNthValueAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{229}
}

func (x *SqlNthValueAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlNthValueAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlNthValueAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlNthValueAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlNthValueAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlNthValueAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlNthValueAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlNthValueAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlNthValueAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlNthValueAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlNthValueAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlNthValueAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlNthValueAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlBasicAggFunction
type SqlBasicAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DistinctOptionality  OptionalityProto              `protobuf:"varint,1,opt,name=distinctOptionality,proto3,enum=rill.sql.v1.OptionalityProto" json:"distinctOptionality,omitempty"`
	Syntax               SqlSyntaxProto                `protobuf:"varint,2,opt,name=syntax,proto3,enum=rill.sql.v1.SqlSyntaxProto" json:"syntax,omitempty"`
	AllowsNullTreatment  bool                          `protobuf:"varint,3,opt,name=allowsNullTreatment,proto3" json:"allowsNullTreatment,omitempty"`
	AllowsSeparator      bool                          `protobuf:"varint,4,opt,name=allowsSeparator,proto3" json:"allowsSeparator,omitempty"`
	Percentile           bool                          `protobuf:"varint,5,opt,name=percentile,proto3" json:"percentile,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,6,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,7,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,8,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,9,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,10,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,11,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,12,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,13,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,14,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,15,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,16,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,17,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,18,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlBasicAggFunctionProto) Reset() {
	*x = SqlBasicAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[230]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBasicAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBasicAggFunctionProto) ProtoMessage() {}

func (x *SqlBasicAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[230]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBasicAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlBasicAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{230}
}

func (x *SqlBasicAggFunctionProto) GetDistinctOptionality() OptionalityProto {
	if x != nil {
		return x.DistinctOptionality
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlBasicAggFunctionProto) GetSyntax() SqlSyntaxProto {
	if x != nil {
		return x.Syntax
	}
	return SqlSyntaxProto_SqlSyntaxProto_FUNCTION_
}

func (x *SqlBasicAggFunctionProto) GetAllowsNullTreatment() bool {
	if x != nil {
		return x.AllowsNullTreatment
	}
	return false
}

func (x *SqlBasicAggFunctionProto) GetAllowsSeparator() bool {
	if x != nil {
		return x.AllowsSeparator
	}
	return false
}

func (x *SqlBasicAggFunctionProto) GetPercentile() bool {
	if x != nil {
		return x.Percentile
	}
	return false
}

func (x *SqlBasicAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlBasicAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlBasicAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlBasicAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlBasicAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlBasicAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlBasicAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlBasicAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlBasicAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlBasicAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlBasicAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlBasicAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlBasicAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSingleValueAggFunction
type SqlSingleValueAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *RelDataTypeProto             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSingleValueAggFunctionProto) Reset() {
	*x = SqlSingleValueAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[231]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSingleValueAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSingleValueAggFunctionProto) ProtoMessage() {}

func (x *SqlSingleValueAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[231]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSingleValueAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlSingleValueAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{231}
}

func (x *SqlSingleValueAggFunctionProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SqlSingleValueAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlSingleValueAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlSingleValueAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlSingleValueAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlSingleValueAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlSingleValueAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSingleValueAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSingleValueAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSingleValueAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSingleValueAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSingleValueAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSingleValueAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSingleValueAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSumEmptyIsZeroAggFunction
type SqlSumEmptyIsZeroAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) Reset() {
	*x = SqlSumEmptyIsZeroAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[232]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSumEmptyIsZeroAggFunctionProto) ProtoMessage() {}

func (x *SqlSumEmptyIsZeroAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[232]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSumEmptyIsZeroAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlSumEmptyIsZeroAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{232}
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSumEmptyIsZeroAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlListaggAggFunction
type SqlListaggAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlListaggAggFunctionProto) Reset() {
	*x = SqlListaggAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[233]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlListaggAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlListaggAggFunctionProto) ProtoMessage() {}

func (x *SqlListaggAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[233]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlListaggAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlListaggAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{233}
}

func (x *SqlListaggAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlListaggAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlListaggAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlListaggAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlListaggAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlListaggAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlListaggAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlListaggAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlListaggAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlListaggAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlListaggAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlListaggAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlListaggAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlNtileAggFunction
type SqlNtileAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlNtileAggFunctionProto) Reset() {
	*x = SqlNtileAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[234]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNtileAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNtileAggFunctionProto) ProtoMessage() {}

func (x *SqlNtileAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[234]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNtileAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlNtileAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{234}
}

func (x *SqlNtileAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlNtileAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlNtileAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlNtileAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlNtileAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlNtileAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlNtileAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlNtileAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlNtileAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlNtileAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlNtileAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlNtileAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlNtileAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonObjectAggAggFunction
type SqlJsonObjectAggAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NullClause           SqlJsonConstructorNullClauseProto `protobuf:"varint,1,opt,name=nullClause,proto3,enum=rill.sql.v1.SqlJsonConstructorNullClauseProto" json:"nullClause,omitempty"`
	RequiresOrder        bool                              `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                              `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto                  `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto          `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto               `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                            `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                      `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                             `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                             `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto      `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto     `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto       `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                            `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonObjectAggAggFunctionProto) Reset() {
	*x = SqlJsonObjectAggAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[235]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonObjectAggAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonObjectAggAggFunctionProto) ProtoMessage() {}

func (x *SqlJsonObjectAggAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[235]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonObjectAggAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonObjectAggAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{235}
}

func (x *SqlJsonObjectAggAggFunctionProto) GetNullClause() SqlJsonConstructorNullClauseProto {
	if x != nil {
		return x.NullClause
	}
	return SqlJsonConstructorNullClauseProto_SqlJsonConstructorNullClauseProto_NULL_ON_NULL_
}

func (x *SqlJsonObjectAggAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlJsonObjectAggAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlJsonObjectAggAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlJsonObjectAggAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonObjectAggAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonObjectAggAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonObjectAggAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonObjectAggAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonObjectAggAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonObjectAggAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonObjectAggAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonObjectAggAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonObjectAggAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlFirstLastValueAggFunction
type SqlFirstLastValueAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlFirstLastValueAggFunctionProto) Reset() {
	*x = SqlFirstLastValueAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[236]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFirstLastValueAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFirstLastValueAggFunctionProto) ProtoMessage() {}

func (x *SqlFirstLastValueAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[236]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFirstLastValueAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlFirstLastValueAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{236}
}

func (x *SqlFirstLastValueAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlFirstLastValueAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlFirstLastValueAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlFirstLastValueAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlFirstLastValueAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlFirstLastValueAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlFirstLastValueAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlFirstLastValueAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlFirstLastValueAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlFirstLastValueAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlFirstLastValueAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlFirstLastValueAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlFirstLastValueAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlAbstractGroupFunction
type SqlAbstractGroupFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAbstractGroupFunctionProto:
	//
	//	*SqlAbstractGroupFunctionProto_SqlGroupIdFunctionProto
	//	*SqlAbstractGroupFunctionProto_SqlGroupingIdFunctionProto
	//	*SqlAbstractGroupFunctionProto_SqlGroupingFunctionProto
	SqlAbstractGroupFunctionProto isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto `protobuf_oneof:"sqlAbstractGroupFunctionProto"`
	RequiresOrder                 bool                                                          `protobuf:"varint,4,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver                  bool                                                          `protobuf:"varint,5,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder            OptionalityProto                                              `protobuf:"varint,6,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category                      SqlFunctionCategoryProto                                      `protobuf:"varint,7,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier                 *SqlIdentifierProto                                           `protobuf:"bytes,8,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                          string                                                        `protobuf:"bytes,9,opt,name=name,proto3" json:"name,omitempty"`
	Kind                          SqlKindProto                                                  `protobuf:"varint,10,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                      int32                                                         `protobuf:"zigzag32,11,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                     int32                                                         `protobuf:"zigzag32,12,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference           *SqlReturnTypeInferenceProto                                  `protobuf:"bytes,13,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference          *SqlOperandTypeInferenceProto                                 `protobuf:"bytes,14,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker            *SqlOperandTypeCheckerProto                                   `protobuf:"bytes,15,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures             string                                                        `protobuf:"bytes,16,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAbstractGroupFunctionProto) Reset() {
	*x = SqlAbstractGroupFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[237]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAbstractGroupFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAbstractGroupFunctionProto) ProtoMessage() {}

func (x *SqlAbstractGroupFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[237]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAbstractGroupFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlAbstractGroupFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{237}
}

func (m *SqlAbstractGroupFunctionProto) GetSqlAbstractGroupFunctionProto() isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto {
	if m != nil {
		return m.SqlAbstractGroupFunctionProto
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetSqlGroupIdFunctionProto() *SqlGroupIdFunctionProto {
	if x, ok := x.GetSqlAbstractGroupFunctionProto().(*SqlAbstractGroupFunctionProto_SqlGroupIdFunctionProto); ok {
		return x.SqlGroupIdFunctionProto
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetSqlGroupingIdFunctionProto() *SqlGroupingIdFunctionProto {
	if x, ok := x.GetSqlAbstractGroupFunctionProto().(*SqlAbstractGroupFunctionProto_SqlGroupingIdFunctionProto); ok {
		return x.SqlGroupingIdFunctionProto
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetSqlGroupingFunctionProto() *SqlGroupingFunctionProto {
	if x, ok := x.GetSqlAbstractGroupFunctionProto().(*SqlAbstractGroupFunctionProto_SqlGroupingFunctionProto); ok {
		return x.SqlGroupingFunctionProto
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlAbstractGroupFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlAbstractGroupFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlAbstractGroupFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlAbstractGroupFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAbstractGroupFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAbstractGroupFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAbstractGroupFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAbstractGroupFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAbstractGroupFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto interface {
	isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto()
}

type SqlAbstractGroupFunctionProto_SqlGroupIdFunctionProto struct {
	SqlGroupIdFunctionProto *SqlGroupIdFunctionProto `protobuf:"bytes,1,opt,name=sqlGroupIdFunctionProto,proto3,oneof"`
}

type SqlAbstractGroupFunctionProto_SqlGroupingIdFunctionProto struct {
	SqlGroupingIdFunctionProto *SqlGroupingIdFunctionProto `protobuf:"bytes,2,opt,name=sqlGroupingIdFunctionProto,proto3,oneof"`
}

type SqlAbstractGroupFunctionProto_SqlGroupingFunctionProto struct {
	SqlGroupingFunctionProto *SqlGroupingFunctionProto `protobuf:"bytes,3,opt,name=sqlGroupingFunctionProto,proto3,oneof"`
}

func (*SqlAbstractGroupFunctionProto_SqlGroupIdFunctionProto) isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto() {
}

func (*SqlAbstractGroupFunctionProto_SqlGroupingIdFunctionProto) isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto() {
}

func (*SqlAbstractGroupFunctionProto_SqlGroupingFunctionProto) isSqlAbstractGroupFunctionProto_SqlAbstractGroupFunctionProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlGroupIdFunction
type SqlGroupIdFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlGroupIdFunctionProto) Reset() {
	*x = SqlGroupIdFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[238]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlGroupIdFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlGroupIdFunctionProto) ProtoMessage() {}

func (x *SqlGroupIdFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[238]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlGroupIdFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlGroupIdFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{238}
}

func (x *SqlGroupIdFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlGroupIdFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlGroupIdFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlGroupIdFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlGroupIdFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlGroupIdFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlGroupIdFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlGroupIdFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlGroupIdFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlGroupIdFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlGroupIdFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlGroupIdFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlGroupIdFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlGroupingIdFunction
type SqlGroupingIdFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlGroupingIdFunctionProto) Reset() {
	*x = SqlGroupingIdFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[239]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlGroupingIdFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlGroupingIdFunctionProto) ProtoMessage() {}

func (x *SqlGroupingIdFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[239]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlGroupingIdFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlGroupingIdFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{239}
}

func (x *SqlGroupingIdFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlGroupingIdFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlGroupingIdFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlGroupingIdFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlGroupingIdFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlGroupingIdFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlGroupingIdFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlGroupingIdFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlGroupingIdFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlGroupingIdFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlGroupingIdFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlGroupingIdFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlGroupingIdFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlGroupingFunction
type SqlGroupingFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlGroupingFunctionProto) Reset() {
	*x = SqlGroupingFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[240]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlGroupingFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlGroupingFunctionProto) ProtoMessage() {}

func (x *SqlGroupingFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[240]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlGroupingFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlGroupingFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{240}
}

func (x *SqlGroupingFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlGroupingFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlGroupingFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlGroupingFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlGroupingFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlGroupingFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlGroupingFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlGroupingFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlGroupingFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlGroupingFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlGroupingFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlGroupingFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlGroupingFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlHistogramAggFunction
type SqlHistogramAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type                 *RelDataTypeProto             `protobuf:"bytes,1,opt,name=type,proto3" json:"type,omitempty"`
	RequiresOrder        bool                          `protobuf:"varint,2,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,3,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,4,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,5,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,6,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,7,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,8,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,9,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,10,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,11,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,12,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,13,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,14,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlHistogramAggFunctionProto) Reset() {
	*x = SqlHistogramAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[241]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlHistogramAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlHistogramAggFunctionProto) ProtoMessage() {}

func (x *SqlHistogramAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[241]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlHistogramAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlHistogramAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{241}
}

func (x *SqlHistogramAggFunctionProto) GetType() *RelDataTypeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SqlHistogramAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlHistogramAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlHistogramAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlHistogramAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlHistogramAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlHistogramAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlHistogramAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlHistogramAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlHistogramAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlHistogramAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlHistogramAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlHistogramAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlHistogramAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlRankFunction
type SqlRankFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRankFunctionProto) Reset() {
	*x = SqlRankFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[242]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRankFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRankFunctionProto) ProtoMessage() {}

func (x *SqlRankFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[242]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRankFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlRankFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{242}
}

func (x *SqlRankFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlRankFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlRankFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlRankFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlRankFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlRankFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRankFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRankFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRankFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRankFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRankFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRankFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRankFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlLeadLagAggFunction
type SqlLeadLagAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlLeadLagAggFunctionProto) Reset() {
	*x = SqlLeadLagAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[243]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlLeadLagAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlLeadLagAggFunctionProto) ProtoMessage() {}

func (x *SqlLeadLagAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[243]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlLeadLagAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlLeadLagAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{243}
}

func (x *SqlLeadLagAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlLeadLagAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlLeadLagAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlLeadLagAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlLeadLagAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlLeadLagAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlLeadLagAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlLeadLagAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlLeadLagAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlLeadLagAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlLeadLagAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlLeadLagAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlLeadLagAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlBitOpAggFunction
type SqlBitOpAggFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequiresOrder        bool                          `protobuf:"varint,1,opt,name=requiresOrder,proto3" json:"requiresOrder,omitempty"`
	RequiresOver         bool                          `protobuf:"varint,2,opt,name=requiresOver,proto3" json:"requiresOver,omitempty"`
	RequiresGroupOrder   OptionalityProto              `protobuf:"varint,3,opt,name=requiresGroupOrder,proto3,enum=rill.sql.v1.OptionalityProto" json:"requiresGroupOrder,omitempty"`
	Category             SqlFunctionCategoryProto      `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlBitOpAggFunctionProto) Reset() {
	*x = SqlBitOpAggFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[244]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBitOpAggFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBitOpAggFunctionProto) ProtoMessage() {}

func (x *SqlBitOpAggFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[244]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBitOpAggFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlBitOpAggFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{244}
}

func (x *SqlBitOpAggFunctionProto) GetRequiresOrder() bool {
	if x != nil {
		return x.RequiresOrder
	}
	return false
}

func (x *SqlBitOpAggFunctionProto) GetRequiresOver() bool {
	if x != nil {
		return x.RequiresOver
	}
	return false
}

func (x *SqlBitOpAggFunctionProto) GetRequiresGroupOrder() OptionalityProto {
	if x != nil {
		return x.RequiresGroupOrder
	}
	return OptionalityProto_OptionalityProto_MANDATORY_
}

func (x *SqlBitOpAggFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlBitOpAggFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlBitOpAggFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlBitOpAggFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlBitOpAggFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlBitOpAggFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlBitOpAggFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlBitOpAggFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlBitOpAggFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlBitOpAggFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlWindowTableFunction
type SqlWindowTableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlWindowTableFunctionProto:
	//
	//	*SqlWindowTableFunctionProto_SqlTumbleTableFunctionProto
	//	*SqlWindowTableFunctionProto_SqlSessionTableFunctionProto
	//	*SqlWindowTableFunctionProto_SqlHopTableFunctionProto
	SqlWindowTableFunctionProto isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto `protobuf_oneof:"sqlWindowTableFunctionProto"`
	Category                    SqlFunctionCategoryProto                                  `protobuf:"varint,4,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier               *SqlIdentifierProto                                       `protobuf:"bytes,5,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                        string                                                    `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	Kind                        SqlKindProto                                              `protobuf:"varint,7,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                    int32                                                     `protobuf:"zigzag32,8,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                   int32                                                     `protobuf:"zigzag32,9,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference         *SqlReturnTypeInferenceProto                              `protobuf:"bytes,10,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference        *SqlOperandTypeInferenceProto                             `protobuf:"bytes,11,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker          *SqlOperandTypeCheckerProto                               `protobuf:"bytes,12,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures           string                                                    `protobuf:"bytes,13,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlWindowTableFunctionProto) Reset() {
	*x = SqlWindowTableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[245]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWindowTableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWindowTableFunctionProto) ProtoMessage() {}

func (x *SqlWindowTableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[245]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWindowTableFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlWindowTableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{245}
}

func (m *SqlWindowTableFunctionProto) GetSqlWindowTableFunctionProto() isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto {
	if m != nil {
		return m.SqlWindowTableFunctionProto
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetSqlTumbleTableFunctionProto() *SqlTumbleTableFunctionProto {
	if x, ok := x.GetSqlWindowTableFunctionProto().(*SqlWindowTableFunctionProto_SqlTumbleTableFunctionProto); ok {
		return x.SqlTumbleTableFunctionProto
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetSqlSessionTableFunctionProto() *SqlSessionTableFunctionProto {
	if x, ok := x.GetSqlWindowTableFunctionProto().(*SqlWindowTableFunctionProto_SqlSessionTableFunctionProto); ok {
		return x.SqlSessionTableFunctionProto
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetSqlHopTableFunctionProto() *SqlHopTableFunctionProto {
	if x, ok := x.GetSqlWindowTableFunctionProto().(*SqlWindowTableFunctionProto_SqlHopTableFunctionProto); ok {
		return x.SqlHopTableFunctionProto
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlWindowTableFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlWindowTableFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlWindowTableFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlWindowTableFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlWindowTableFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlWindowTableFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto interface {
	isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto()
}

type SqlWindowTableFunctionProto_SqlTumbleTableFunctionProto struct {
	SqlTumbleTableFunctionProto *SqlTumbleTableFunctionProto `protobuf:"bytes,1,opt,name=sqlTumbleTableFunctionProto,proto3,oneof"`
}

type SqlWindowTableFunctionProto_SqlSessionTableFunctionProto struct {
	SqlSessionTableFunctionProto *SqlSessionTableFunctionProto `protobuf:"bytes,2,opt,name=sqlSessionTableFunctionProto,proto3,oneof"`
}

type SqlWindowTableFunctionProto_SqlHopTableFunctionProto struct {
	SqlHopTableFunctionProto *SqlHopTableFunctionProto `protobuf:"bytes,3,opt,name=sqlHopTableFunctionProto,proto3,oneof"`
}

func (*SqlWindowTableFunctionProto_SqlTumbleTableFunctionProto) isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto() {
}

func (*SqlWindowTableFunctionProto_SqlSessionTableFunctionProto) isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto() {
}

func (*SqlWindowTableFunctionProto_SqlHopTableFunctionProto) isSqlWindowTableFunctionProto_SqlWindowTableFunctionProto() {
}

// Java Class: org.apache.calcite.sql.SqlTumbleTableFunction
type SqlTumbleTableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlTumbleTableFunctionProto) Reset() {
	*x = SqlTumbleTableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[246]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlTumbleTableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlTumbleTableFunctionProto) ProtoMessage() {}

func (x *SqlTumbleTableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[246]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlTumbleTableFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlTumbleTableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{246}
}

func (x *SqlTumbleTableFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlTumbleTableFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlTumbleTableFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlTumbleTableFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlTumbleTableFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlTumbleTableFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlTumbleTableFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlTumbleTableFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlTumbleTableFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlTumbleTableFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlSessionTableFunction
type SqlSessionTableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSessionTableFunctionProto) Reset() {
	*x = SqlSessionTableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[247]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSessionTableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSessionTableFunctionProto) ProtoMessage() {}

func (x *SqlSessionTableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[247]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSessionTableFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlSessionTableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{247}
}

func (x *SqlSessionTableFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlSessionTableFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlSessionTableFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSessionTableFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSessionTableFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSessionTableFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSessionTableFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSessionTableFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSessionTableFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSessionTableFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlHopTableFunction
type SqlHopTableFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlHopTableFunctionProto) Reset() {
	*x = SqlHopTableFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[248]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlHopTableFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlHopTableFunctionProto) ProtoMessage() {}

func (x *SqlHopTableFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[248]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlHopTableFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlHopTableFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{248}
}

func (x *SqlHopTableFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlHopTableFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlHopTableFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlHopTableFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlHopTableFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlHopTableFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlHopTableFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlHopTableFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlHopTableFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlHopTableFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlRegexpReplaceFunction
type SqlRegexpReplaceFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRegexpReplaceFunctionProto) Reset() {
	*x = SqlRegexpReplaceFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[249]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRegexpReplaceFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRegexpReplaceFunctionProto) ProtoMessage() {}

func (x *SqlRegexpReplaceFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[249]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRegexpReplaceFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlRegexpReplaceFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{249}
}

func (x *SqlRegexpReplaceFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlRegexpReplaceFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlRegexpReplaceFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRegexpReplaceFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRegexpReplaceFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRegexpReplaceFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRegexpReplaceFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRegexpReplaceFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRegexpReplaceFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRegexpReplaceFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMonotonicUnaryFunction
type SqlMonotonicUnaryFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlMonotonicUnaryFunctionProto:
	//
	//	*SqlMonotonicUnaryFunctionProto_SqlFloorFunctionProto
	SqlMonotonicUnaryFunctionProto isSqlMonotonicUnaryFunctionProto_SqlMonotonicUnaryFunctionProto `protobuf_oneof:"sqlMonotonicUnaryFunctionProto"`
	Category                       SqlFunctionCategoryProto                                        `protobuf:"varint,2,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier                  *SqlIdentifierProto                                             `protobuf:"bytes,3,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                           string                                                          `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                           SqlKindProto                                                    `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                       int32                                                           `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                      int32                                                           `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference            *SqlReturnTypeInferenceProto                                    `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference           *SqlOperandTypeInferenceProto                                   `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker             *SqlOperandTypeCheckerProto                                     `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures              string                                                          `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMonotonicUnaryFunctionProto) Reset() {
	*x = SqlMonotonicUnaryFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[250]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMonotonicUnaryFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMonotonicUnaryFunctionProto) ProtoMessage() {}

func (x *SqlMonotonicUnaryFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[250]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMonotonicUnaryFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlMonotonicUnaryFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{250}
}

func (m *SqlMonotonicUnaryFunctionProto) GetSqlMonotonicUnaryFunctionProto() isSqlMonotonicUnaryFunctionProto_SqlMonotonicUnaryFunctionProto {
	if m != nil {
		return m.SqlMonotonicUnaryFunctionProto
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetSqlFloorFunctionProto() *SqlFloorFunctionProto {
	if x, ok := x.GetSqlMonotonicUnaryFunctionProto().(*SqlMonotonicUnaryFunctionProto_SqlFloorFunctionProto); ok {
		return x.SqlFloorFunctionProto
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlMonotonicUnaryFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMonotonicUnaryFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMonotonicUnaryFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMonotonicUnaryFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMonotonicUnaryFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMonotonicUnaryFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlMonotonicUnaryFunctionProto_SqlMonotonicUnaryFunctionProto interface {
	isSqlMonotonicUnaryFunctionProto_SqlMonotonicUnaryFunctionProto()
}

type SqlMonotonicUnaryFunctionProto_SqlFloorFunctionProto struct {
	SqlFloorFunctionProto *SqlFloorFunctionProto `protobuf:"bytes,1,opt,name=sqlFloorFunctionProto,proto3,oneof"`
}

func (*SqlMonotonicUnaryFunctionProto_SqlFloorFunctionProto) isSqlMonotonicUnaryFunctionProto_SqlMonotonicUnaryFunctionProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlFloorFunction
type SqlFloorFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlFloorFunctionProto) Reset() {
	*x = SqlFloorFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[251]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFloorFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFloorFunctionProto) ProtoMessage() {}

func (x *SqlFloorFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[251]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFloorFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlFloorFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{251}
}

func (x *SqlFloorFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlFloorFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlFloorFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlFloorFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlFloorFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlFloorFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlFloorFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlFloorFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlFloorFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlFloorFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonStorageSizeFunction
type SqlJsonStorageSizeFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonStorageSizeFunctionProto) Reset() {
	*x = SqlJsonStorageSizeFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[252]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonStorageSizeFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonStorageSizeFunctionProto) ProtoMessage() {}

func (x *SqlJsonStorageSizeFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[252]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonStorageSizeFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonStorageSizeFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{252}
}

func (x *SqlJsonStorageSizeFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonStorageSizeFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonStorageSizeFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonStorageSizeFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonStorageSizeFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonStorageSizeFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonStorageSizeFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonStorageSizeFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonStorageSizeFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonStorageSizeFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonQueryFunction
type SqlJsonQueryFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonQueryFunctionProto) Reset() {
	*x = SqlJsonQueryFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[253]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonQueryFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonQueryFunctionProto) ProtoMessage() {}

func (x *SqlJsonQueryFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[253]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonQueryFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonQueryFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{253}
}

func (x *SqlJsonQueryFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonQueryFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonQueryFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonQueryFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonQueryFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonQueryFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonQueryFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonQueryFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonQueryFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonQueryFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlJsonExistsFunction
type SqlJsonExistsFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Category             SqlFunctionCategoryProto      `protobuf:"varint,1,opt,name=category,proto3,enum=rill.sql.v1.SqlFunctionCategoryProto" json:"category,omitempty"`
	SqlIdentifier        *SqlIdentifierProto           `protobuf:"bytes,2,opt,name=sqlIdentifier,proto3" json:"sqlIdentifier,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlJsonExistsFunctionProto) Reset() {
	*x = SqlJsonExistsFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[254]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJsonExistsFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJsonExistsFunctionProto) ProtoMessage() {}

func (x *SqlJsonExistsFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[254]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJsonExistsFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlJsonExistsFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{254}
}

func (x *SqlJsonExistsFunctionProto) GetCategory() SqlFunctionCategoryProto {
	if x != nil {
		return x.Category
	}
	return SqlFunctionCategoryProto_SqlFunctionCategoryProto_STRING_
}

func (x *SqlJsonExistsFunctionProto) GetSqlIdentifier() *SqlIdentifierProto {
	if x != nil {
		return x.SqlIdentifier
	}
	return nil
}

func (x *SqlJsonExistsFunctionProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlJsonExistsFunctionProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlJsonExistsFunctionProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlJsonExistsFunctionProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlJsonExistsFunctionProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlJsonExistsFunctionProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlJsonExistsFunctionProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlJsonExistsFunctionProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCaseOperator
type SqlCaseOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCaseOperatorProto) Reset() {
	*x = SqlCaseOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[255]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCaseOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCaseOperatorProto) ProtoMessage() {}

func (x *SqlCaseOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[255]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCaseOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlCaseOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{255}
}

func (x *SqlCaseOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCaseOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCaseOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCaseOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCaseOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCaseOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCaseOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCaseOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlBinaryOperator
type SqlBinaryOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlBinaryOperatorProto:
	//
	//	*SqlBinaryOperatorProto_SqlSetOperatorProto
	//	*SqlBinaryOperatorProto_SqlOverlapsOperatorProto
	//	*SqlBinaryOperatorProto_SqlCastOperatorProto
	//	*SqlBinaryOperatorProto_SqlMonotonicBinaryOperatorProto
	//	*SqlBinaryOperatorProto_SqlMultisetMemberOfOperatorProto
	//	*SqlBinaryOperatorProto_SqlMultisetSetOperatorProto
	//	*SqlBinaryOperatorProto_SqlWithinGroupOperatorProto
	//	*SqlBinaryOperatorProto_SqlFilterOperatorProto
	//	*SqlBinaryOperatorProto_SqlOverOperatorProto
	//	*SqlBinaryOperatorProto_SqlInOperatorProto
	//	*SqlBinaryOperatorProto_SqlPosixRegexOperatorProto
	//	*SqlBinaryOperatorProto_SqlWithinDistinctOperatorProto
	//	*SqlBinaryOperatorProto_SqlQuantifyOperatorProto
	SqlBinaryOperatorProto isSqlBinaryOperatorProto_SqlBinaryOperatorProto `protobuf_oneof:"sqlBinaryOperatorProto"`
	Name                   string                                          `protobuf:"bytes,14,opt,name=name,proto3" json:"name,omitempty"`
	Kind                   SqlKindProto                                    `protobuf:"varint,15,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec               int32                                           `protobuf:"zigzag32,16,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec              int32                                           `protobuf:"zigzag32,17,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference    *SqlReturnTypeInferenceProto                    `protobuf:"bytes,18,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference   *SqlOperandTypeInferenceProto                   `protobuf:"bytes,19,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker     *SqlOperandTypeCheckerProto                     `protobuf:"bytes,20,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures      string                                          `protobuf:"bytes,21,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlBinaryOperatorProto) Reset() {
	*x = SqlBinaryOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[256]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBinaryOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBinaryOperatorProto) ProtoMessage() {}

func (x *SqlBinaryOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[256]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBinaryOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlBinaryOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{256}
}

func (m *SqlBinaryOperatorProto) GetSqlBinaryOperatorProto() isSqlBinaryOperatorProto_SqlBinaryOperatorProto {
	if m != nil {
		return m.SqlBinaryOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlSetOperatorProto() *SqlSetOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlSetOperatorProto); ok {
		return x.SqlSetOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlOverlapsOperatorProto() *SqlOverlapsOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlOverlapsOperatorProto); ok {
		return x.SqlOverlapsOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlCastOperatorProto() *SqlCastOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlCastOperatorProto); ok {
		return x.SqlCastOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlMonotonicBinaryOperatorProto() *SqlMonotonicBinaryOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlMonotonicBinaryOperatorProto); ok {
		return x.SqlMonotonicBinaryOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlMultisetMemberOfOperatorProto() *SqlMultisetMemberOfOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlMultisetMemberOfOperatorProto); ok {
		return x.SqlMultisetMemberOfOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlMultisetSetOperatorProto() *SqlMultisetSetOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlMultisetSetOperatorProto); ok {
		return x.SqlMultisetSetOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlWithinGroupOperatorProto() *SqlWithinGroupOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlWithinGroupOperatorProto); ok {
		return x.SqlWithinGroupOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlFilterOperatorProto() *SqlFilterOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlFilterOperatorProto); ok {
		return x.SqlFilterOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlOverOperatorProto() *SqlOverOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlOverOperatorProto); ok {
		return x.SqlOverOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlInOperatorProto() *SqlInOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlInOperatorProto); ok {
		return x.SqlInOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlPosixRegexOperatorProto() *SqlPosixRegexOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlPosixRegexOperatorProto); ok {
		return x.SqlPosixRegexOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlWithinDistinctOperatorProto() *SqlWithinDistinctOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlWithinDistinctOperatorProto); ok {
		return x.SqlWithinDistinctOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetSqlQuantifyOperatorProto() *SqlQuantifyOperatorProto {
	if x, ok := x.GetSqlBinaryOperatorProto().(*SqlBinaryOperatorProto_SqlQuantifyOperatorProto); ok {
		return x.SqlQuantifyOperatorProto
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlBinaryOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlBinaryOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlBinaryOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlBinaryOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlBinaryOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlBinaryOperatorProto_SqlBinaryOperatorProto interface {
	isSqlBinaryOperatorProto_SqlBinaryOperatorProto()
}

type SqlBinaryOperatorProto_SqlSetOperatorProto struct {
	SqlSetOperatorProto *SqlSetOperatorProto `protobuf:"bytes,1,opt,name=sqlSetOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlOverlapsOperatorProto struct {
	SqlOverlapsOperatorProto *SqlOverlapsOperatorProto `protobuf:"bytes,2,opt,name=sqlOverlapsOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlCastOperatorProto struct {
	SqlCastOperatorProto *SqlCastOperatorProto `protobuf:"bytes,3,opt,name=sqlCastOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlMonotonicBinaryOperatorProto struct {
	SqlMonotonicBinaryOperatorProto *SqlMonotonicBinaryOperatorProto `protobuf:"bytes,4,opt,name=sqlMonotonicBinaryOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlMultisetMemberOfOperatorProto struct {
	SqlMultisetMemberOfOperatorProto *SqlMultisetMemberOfOperatorProto `protobuf:"bytes,5,opt,name=sqlMultisetMemberOfOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlMultisetSetOperatorProto struct {
	SqlMultisetSetOperatorProto *SqlMultisetSetOperatorProto `protobuf:"bytes,6,opt,name=sqlMultisetSetOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlWithinGroupOperatorProto struct {
	SqlWithinGroupOperatorProto *SqlWithinGroupOperatorProto `protobuf:"bytes,7,opt,name=sqlWithinGroupOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlFilterOperatorProto struct {
	SqlFilterOperatorProto *SqlFilterOperatorProto `protobuf:"bytes,8,opt,name=sqlFilterOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlOverOperatorProto struct {
	SqlOverOperatorProto *SqlOverOperatorProto `protobuf:"bytes,9,opt,name=sqlOverOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlInOperatorProto struct {
	SqlInOperatorProto *SqlInOperatorProto `protobuf:"bytes,10,opt,name=sqlInOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlPosixRegexOperatorProto struct {
	SqlPosixRegexOperatorProto *SqlPosixRegexOperatorProto `protobuf:"bytes,11,opt,name=sqlPosixRegexOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlWithinDistinctOperatorProto struct {
	SqlWithinDistinctOperatorProto *SqlWithinDistinctOperatorProto `protobuf:"bytes,12,opt,name=sqlWithinDistinctOperatorProto,proto3,oneof"`
}

type SqlBinaryOperatorProto_SqlQuantifyOperatorProto struct {
	SqlQuantifyOperatorProto *SqlQuantifyOperatorProto `protobuf:"bytes,13,opt,name=sqlQuantifyOperatorProto,proto3,oneof"`
}

func (*SqlBinaryOperatorProto_SqlSetOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlOverlapsOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlCastOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlMonotonicBinaryOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlMultisetMemberOfOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlMultisetSetOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlWithinGroupOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlFilterOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlOverOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlInOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {}

func (*SqlBinaryOperatorProto_SqlPosixRegexOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlWithinDistinctOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

func (*SqlBinaryOperatorProto_SqlQuantifyOperatorProto) isSqlBinaryOperatorProto_SqlBinaryOperatorProto() {
}

// Java Class: org.apache.calcite.sql.SqlSetOperator
type SqlSetOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All                  bool                          `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSetOperatorProto) Reset() {
	*x = SqlSetOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[257]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSetOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSetOperatorProto) ProtoMessage() {}

func (x *SqlSetOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[257]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSetOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlSetOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{257}
}

func (x *SqlSetOperatorProto) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SqlSetOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSetOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSetOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSetOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSetOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSetOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSetOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSetOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlOverlapsOperator
type SqlOverlapsOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlOverlapsOperatorProto) Reset() {
	*x = SqlOverlapsOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[258]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOverlapsOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOverlapsOperatorProto) ProtoMessage() {}

func (x *SqlOverlapsOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[258]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOverlapsOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlOverlapsOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{258}
}

func (x *SqlOverlapsOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlOverlapsOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlOverlapsOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlOverlapsOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlOverlapsOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlOverlapsOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlOverlapsOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlOverlapsOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCastOperator
type SqlCastOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCastOperatorProto) Reset() {
	*x = SqlCastOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[259]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCastOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCastOperatorProto) ProtoMessage() {}

func (x *SqlCastOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[259]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCastOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlCastOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{259}
}

func (x *SqlCastOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCastOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCastOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCastOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCastOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCastOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCastOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCastOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMonotonicBinaryOperator
type SqlMonotonicBinaryOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMonotonicBinaryOperatorProto) Reset() {
	*x = SqlMonotonicBinaryOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[260]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMonotonicBinaryOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMonotonicBinaryOperatorProto) ProtoMessage() {}

func (x *SqlMonotonicBinaryOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[260]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMonotonicBinaryOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlMonotonicBinaryOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{260}
}

func (x *SqlMonotonicBinaryOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMonotonicBinaryOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMonotonicBinaryOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMonotonicBinaryOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMonotonicBinaryOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMonotonicBinaryOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMonotonicBinaryOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMonotonicBinaryOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMultisetMemberOfOperator
type SqlMultisetMemberOfOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMultisetMemberOfOperatorProto) Reset() {
	*x = SqlMultisetMemberOfOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[261]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMultisetMemberOfOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMultisetMemberOfOperatorProto) ProtoMessage() {}

func (x *SqlMultisetMemberOfOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[261]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMultisetMemberOfOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlMultisetMemberOfOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{261}
}

func (x *SqlMultisetMemberOfOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMultisetMemberOfOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMultisetMemberOfOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMultisetMemberOfOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMultisetMemberOfOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMultisetMemberOfOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMultisetMemberOfOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMultisetMemberOfOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMultisetSetOperator
type SqlMultisetSetOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	All                  bool                          `protobuf:"varint,1,opt,name=all,proto3" json:"all,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMultisetSetOperatorProto) Reset() {
	*x = SqlMultisetSetOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[262]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMultisetSetOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMultisetSetOperatorProto) ProtoMessage() {}

func (x *SqlMultisetSetOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[262]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMultisetSetOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlMultisetSetOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{262}
}

func (x *SqlMultisetSetOperatorProto) GetAll() bool {
	if x != nil {
		return x.All
	}
	return false
}

func (x *SqlMultisetSetOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMultisetSetOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMultisetSetOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMultisetSetOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMultisetSetOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMultisetSetOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMultisetSetOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMultisetSetOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlWithinGroupOperator
type SqlWithinGroupOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlWithinGroupOperatorProto) Reset() {
	*x = SqlWithinGroupOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[263]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWithinGroupOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWithinGroupOperatorProto) ProtoMessage() {}

func (x *SqlWithinGroupOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[263]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWithinGroupOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlWithinGroupOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{263}
}

func (x *SqlWithinGroupOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlWithinGroupOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlWithinGroupOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlWithinGroupOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlWithinGroupOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlWithinGroupOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlWithinGroupOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlWithinGroupOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlFilterOperator
type SqlFilterOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlFilterOperatorProto) Reset() {
	*x = SqlFilterOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[264]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFilterOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFilterOperatorProto) ProtoMessage() {}

func (x *SqlFilterOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[264]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFilterOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlFilterOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{264}
}

func (x *SqlFilterOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlFilterOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlFilterOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlFilterOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlFilterOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlFilterOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlFilterOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlFilterOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlOverOperator
type SqlOverOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlOverOperatorProto) Reset() {
	*x = SqlOverOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[265]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlOverOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlOverOperatorProto) ProtoMessage() {}

func (x *SqlOverOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[265]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlOverOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlOverOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{265}
}

func (x *SqlOverOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlOverOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlOverOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlOverOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlOverOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlOverOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlOverOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlOverOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlInOperator
type SqlInOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlInOperatorProto:
	//
	//	*SqlInOperatorProto_SqlQuantifyOperatorProto
	SqlInOperatorProto   isSqlInOperatorProto_SqlInOperatorProto `protobuf_oneof:"sqlInOperatorProto"`
	Name                 string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                            `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                                   `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                                   `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto            `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto           `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto             `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                                  `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlInOperatorProto) Reset() {
	*x = SqlInOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[266]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInOperatorProto) ProtoMessage() {}

func (x *SqlInOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[266]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlInOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{266}
}

func (m *SqlInOperatorProto) GetSqlInOperatorProto() isSqlInOperatorProto_SqlInOperatorProto {
	if m != nil {
		return m.SqlInOperatorProto
	}
	return nil
}

func (x *SqlInOperatorProto) GetSqlQuantifyOperatorProto() *SqlQuantifyOperatorProto {
	if x, ok := x.GetSqlInOperatorProto().(*SqlInOperatorProto_SqlQuantifyOperatorProto); ok {
		return x.SqlQuantifyOperatorProto
	}
	return nil
}

func (x *SqlInOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlInOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlInOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlInOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlInOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlInOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlInOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlInOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlInOperatorProto_SqlInOperatorProto interface {
	isSqlInOperatorProto_SqlInOperatorProto()
}

type SqlInOperatorProto_SqlQuantifyOperatorProto struct {
	SqlQuantifyOperatorProto *SqlQuantifyOperatorProto `protobuf:"bytes,1,opt,name=sqlQuantifyOperatorProto,proto3,oneof"`
}

func (*SqlInOperatorProto_SqlQuantifyOperatorProto) isSqlInOperatorProto_SqlInOperatorProto() {}

// Java Class: org.apache.calcite.sql.fun.SqlQuantifyOperator
type SqlQuantifyOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ComparisonKind       SqlKindProto                  `protobuf:"varint,1,opt,name=comparisonKind,proto3,enum=rill.sql.v1.SqlKindProto" json:"comparisonKind,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlQuantifyOperatorProto) Reset() {
	*x = SqlQuantifyOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[267]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlQuantifyOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlQuantifyOperatorProto) ProtoMessage() {}

func (x *SqlQuantifyOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[267]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlQuantifyOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlQuantifyOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{267}
}

func (x *SqlQuantifyOperatorProto) GetComparisonKind() SqlKindProto {
	if x != nil {
		return x.ComparisonKind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlQuantifyOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlQuantifyOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlQuantifyOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlQuantifyOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlQuantifyOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlQuantifyOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlQuantifyOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlQuantifyOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlPosixRegexOperator
type SqlPosixRegexOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CaseSensitive        bool                          `protobuf:"varint,1,opt,name=caseSensitive,proto3" json:"caseSensitive,omitempty"`
	Negated              bool                          `protobuf:"varint,2,opt,name=negated,proto3" json:"negated,omitempty"`
	OperatorString       string                        `protobuf:"bytes,3,opt,name=operatorString,proto3" json:"operatorString,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlPosixRegexOperatorProto) Reset() {
	*x = SqlPosixRegexOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[268]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlPosixRegexOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlPosixRegexOperatorProto) ProtoMessage() {}

func (x *SqlPosixRegexOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[268]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlPosixRegexOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlPosixRegexOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{268}
}

func (x *SqlPosixRegexOperatorProto) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *SqlPosixRegexOperatorProto) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *SqlPosixRegexOperatorProto) GetOperatorString() string {
	if x != nil {
		return x.OperatorString
	}
	return ""
}

func (x *SqlPosixRegexOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlPosixRegexOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlPosixRegexOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlPosixRegexOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlPosixRegexOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlPosixRegexOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlPosixRegexOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlPosixRegexOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlWithinDistinctOperator
type SqlWithinDistinctOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlWithinDistinctOperatorProto) Reset() {
	*x = SqlWithinDistinctOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[269]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlWithinDistinctOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlWithinDistinctOperatorProto) ProtoMessage() {}

func (x *SqlWithinDistinctOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[269]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlWithinDistinctOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlWithinDistinctOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{269}
}

func (x *SqlWithinDistinctOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlWithinDistinctOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlWithinDistinctOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlWithinDistinctOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlWithinDistinctOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlWithinDistinctOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlWithinDistinctOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlWithinDistinctOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlSelectOperator
type SqlSelectOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSelectOperatorProto) Reset() {
	*x = SqlSelectOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[270]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSelectOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSelectOperatorProto) ProtoMessage() {}

func (x *SqlSelectOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[270]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSelectOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlSelectOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{270}
}

func (x *SqlSelectOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSelectOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSelectOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSelectOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSelectOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSelectOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSelectOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSelectOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlSpecialOperator
type SqlSpecialOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlSpecialOperatorProto:
	//
	//	*SqlSpecialOperatorProto_SqlLateralOperatorProto
	//	*SqlSpecialOperatorProto_SqlMultisetValueConstructorProto
	//	*SqlSpecialOperatorProto_SqlDefaultOperatorProto
	//	*SqlSpecialOperatorProto_SqlLiteralChainOperatorProto
	//	*SqlSpecialOperatorProto_SqlDatetimePlusOperatorProto
	//	*SqlSpecialOperatorProto_SqlSequenceValueOperatorProto
	//	*SqlSpecialOperatorProto_SqlFunctionalOperatorProto
	//	*SqlSpecialOperatorProto_SqlLikeOperatorProto
	//	*SqlSpecialOperatorProto_SqlInternalOperatorProto
	//	*SqlSpecialOperatorProto_SqlDotOperatorProto
	//	*SqlSpecialOperatorProto_SqlThrowOperatorProto
	//	*SqlSpecialOperatorProto_SqlItemOperatorProto
	//	*SqlSpecialOperatorProto_SqlInfixOperatorProto
	//	*SqlSpecialOperatorProto_SqlAsOperatorProto
	//	*SqlSpecialOperatorProto_SqlValuesOperatorProto
	//	*SqlSpecialOperatorProto_SqlColumnListConstructorProto
	//	*SqlSpecialOperatorProto_SqlMultisetQueryConstructorProto
	//	*SqlSpecialOperatorProto_SqlCursorConstructorProto
	//	*SqlSpecialOperatorProto_SqlRowOperatorProto
	//	*SqlSpecialOperatorProto_SqlDatetimeSubtractionOperatorProto
	//	*SqlSpecialOperatorProto_SqlNullTreatmentOperatorProto
	//	*SqlSpecialOperatorProto_SqlArrayValueConstructorProto
	//	*SqlSpecialOperatorProto_SqlMapValueConstructorProto
	//	*SqlSpecialOperatorProto_SqlCollectionTableOperatorProto
	//	*SqlSpecialOperatorProto_SqlUnnestOperatorProto
	//	*SqlSpecialOperatorProto_SqlExtendOperatorProto
	//	*SqlSpecialOperatorProto_SqlRollupOperatorProto
	//	*SqlSpecialOperatorProto_SqlIntervalOperatorProto
	//	*SqlSpecialOperatorProto_SqlSearchOperatorProto
	//	*SqlSpecialOperatorProto_SqlBetweenOperatorProto
	//	*SqlSpecialOperatorProto_SqlArgumentAssignmentOperatorProto
	//	*SqlSpecialOperatorProto_SqlArrayQueryConstructorProto
	//	*SqlSpecialOperatorProto_SqlMapQueryConstructorProto
	SqlSpecialOperatorProto isSqlSpecialOperatorProto_SqlSpecialOperatorProto `protobuf_oneof:"sqlSpecialOperatorProto"`
	Name                    string                                            `protobuf:"bytes,34,opt,name=name,proto3" json:"name,omitempty"`
	Kind                    SqlKindProto                                      `protobuf:"varint,35,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                int32                                             `protobuf:"zigzag32,36,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec               int32                                             `protobuf:"zigzag32,37,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference     *SqlReturnTypeInferenceProto                      `protobuf:"bytes,38,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference    *SqlOperandTypeInferenceProto                     `protobuf:"bytes,39,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker      *SqlOperandTypeCheckerProto                       `protobuf:"bytes,40,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures       string                                            `protobuf:"bytes,41,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSpecialOperatorProto) Reset() {
	*x = SqlSpecialOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[271]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSpecialOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSpecialOperatorProto) ProtoMessage() {}

func (x *SqlSpecialOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[271]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSpecialOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlSpecialOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{271}
}

func (m *SqlSpecialOperatorProto) GetSqlSpecialOperatorProto() isSqlSpecialOperatorProto_SqlSpecialOperatorProto {
	if m != nil {
		return m.SqlSpecialOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlLateralOperatorProto() *SqlLateralOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlLateralOperatorProto); ok {
		return x.SqlLateralOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlMultisetValueConstructorProto() *SqlMultisetValueConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlMultisetValueConstructorProto); ok {
		return x.SqlMultisetValueConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlDefaultOperatorProto() *SqlDefaultOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlDefaultOperatorProto); ok {
		return x.SqlDefaultOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlLiteralChainOperatorProto() *SqlLiteralChainOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlLiteralChainOperatorProto); ok {
		return x.SqlLiteralChainOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlDatetimePlusOperatorProto() *SqlDatetimePlusOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlDatetimePlusOperatorProto); ok {
		return x.SqlDatetimePlusOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlSequenceValueOperatorProto() *SqlSequenceValueOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlSequenceValueOperatorProto); ok {
		return x.SqlSequenceValueOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlFunctionalOperatorProto() *SqlFunctionalOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlFunctionalOperatorProto); ok {
		return x.SqlFunctionalOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlLikeOperatorProto() *SqlLikeOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlLikeOperatorProto); ok {
		return x.SqlLikeOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlInternalOperatorProto() *SqlInternalOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlInternalOperatorProto); ok {
		return x.SqlInternalOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlDotOperatorProto() *SqlDotOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlDotOperatorProto); ok {
		return x.SqlDotOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlThrowOperatorProto() *SqlThrowOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlThrowOperatorProto); ok {
		return x.SqlThrowOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlItemOperatorProto() *SqlItemOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlItemOperatorProto); ok {
		return x.SqlItemOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlInfixOperatorProto() *SqlInfixOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlInfixOperatorProto); ok {
		return x.SqlInfixOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlAsOperatorProto() *SqlAsOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlAsOperatorProto); ok {
		return x.SqlAsOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlValuesOperatorProto() *SqlValuesOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlValuesOperatorProto); ok {
		return x.SqlValuesOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlColumnListConstructorProto() *SqlColumnListConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlColumnListConstructorProto); ok {
		return x.SqlColumnListConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlMultisetQueryConstructorProto() *SqlMultisetQueryConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlMultisetQueryConstructorProto); ok {
		return x.SqlMultisetQueryConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlCursorConstructorProto() *SqlCursorConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlCursorConstructorProto); ok {
		return x.SqlCursorConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlRowOperatorProto() *SqlRowOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlRowOperatorProto); ok {
		return x.SqlRowOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlDatetimeSubtractionOperatorProto() *SqlDatetimeSubtractionOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlDatetimeSubtractionOperatorProto); ok {
		return x.SqlDatetimeSubtractionOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlNullTreatmentOperatorProto() *SqlNullTreatmentOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlNullTreatmentOperatorProto); ok {
		return x.SqlNullTreatmentOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlArrayValueConstructorProto() *SqlArrayValueConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlArrayValueConstructorProto); ok {
		return x.SqlArrayValueConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlMapValueConstructorProto() *SqlMapValueConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlMapValueConstructorProto); ok {
		return x.SqlMapValueConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlCollectionTableOperatorProto() *SqlCollectionTableOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlCollectionTableOperatorProto); ok {
		return x.SqlCollectionTableOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlUnnestOperatorProto() *SqlUnnestOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlUnnestOperatorProto); ok {
		return x.SqlUnnestOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlExtendOperatorProto() *SqlExtendOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlExtendOperatorProto); ok {
		return x.SqlExtendOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlRollupOperatorProto() *SqlRollupOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlRollupOperatorProto); ok {
		return x.SqlRollupOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlIntervalOperatorProto() *SqlIntervalOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlIntervalOperatorProto); ok {
		return x.SqlIntervalOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlSearchOperatorProto() *SqlSearchOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlSearchOperatorProto); ok {
		return x.SqlSearchOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlBetweenOperatorProto() *SqlBetweenOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlBetweenOperatorProto); ok {
		return x.SqlBetweenOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlArgumentAssignmentOperatorProto() *SqlArgumentAssignmentOperatorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlArgumentAssignmentOperatorProto); ok {
		return x.SqlArgumentAssignmentOperatorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlArrayQueryConstructorProto() *SqlArrayQueryConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlArrayQueryConstructorProto); ok {
		return x.SqlArrayQueryConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetSqlMapQueryConstructorProto() *SqlMapQueryConstructorProto {
	if x, ok := x.GetSqlSpecialOperatorProto().(*SqlSpecialOperatorProto_SqlMapQueryConstructorProto); ok {
		return x.SqlMapQueryConstructorProto
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSpecialOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSpecialOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSpecialOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSpecialOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSpecialOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlSpecialOperatorProto_SqlSpecialOperatorProto interface {
	isSqlSpecialOperatorProto_SqlSpecialOperatorProto()
}

type SqlSpecialOperatorProto_SqlLateralOperatorProto struct {
	SqlLateralOperatorProto *SqlLateralOperatorProto `protobuf:"bytes,1,opt,name=sqlLateralOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlMultisetValueConstructorProto struct {
	SqlMultisetValueConstructorProto *SqlMultisetValueConstructorProto `protobuf:"bytes,2,opt,name=sqlMultisetValueConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlDefaultOperatorProto struct {
	SqlDefaultOperatorProto *SqlDefaultOperatorProto `protobuf:"bytes,3,opt,name=sqlDefaultOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlLiteralChainOperatorProto struct {
	SqlLiteralChainOperatorProto *SqlLiteralChainOperatorProto `protobuf:"bytes,4,opt,name=sqlLiteralChainOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlDatetimePlusOperatorProto struct {
	SqlDatetimePlusOperatorProto *SqlDatetimePlusOperatorProto `protobuf:"bytes,5,opt,name=sqlDatetimePlusOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlSequenceValueOperatorProto struct {
	SqlSequenceValueOperatorProto *SqlSequenceValueOperatorProto `protobuf:"bytes,6,opt,name=sqlSequenceValueOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlFunctionalOperatorProto struct {
	SqlFunctionalOperatorProto *SqlFunctionalOperatorProto `protobuf:"bytes,7,opt,name=sqlFunctionalOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlLikeOperatorProto struct {
	SqlLikeOperatorProto *SqlLikeOperatorProto `protobuf:"bytes,8,opt,name=sqlLikeOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlInternalOperatorProto struct {
	SqlInternalOperatorProto *SqlInternalOperatorProto `protobuf:"bytes,9,opt,name=sqlInternalOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlDotOperatorProto struct {
	SqlDotOperatorProto *SqlDotOperatorProto `protobuf:"bytes,10,opt,name=sqlDotOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlThrowOperatorProto struct {
	SqlThrowOperatorProto *SqlThrowOperatorProto `protobuf:"bytes,11,opt,name=sqlThrowOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlItemOperatorProto struct {
	SqlItemOperatorProto *SqlItemOperatorProto `protobuf:"bytes,12,opt,name=sqlItemOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlInfixOperatorProto struct {
	SqlInfixOperatorProto *SqlInfixOperatorProto `protobuf:"bytes,13,opt,name=sqlInfixOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlAsOperatorProto struct {
	SqlAsOperatorProto *SqlAsOperatorProto `protobuf:"bytes,14,opt,name=sqlAsOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlValuesOperatorProto struct {
	SqlValuesOperatorProto *SqlValuesOperatorProto `protobuf:"bytes,15,opt,name=sqlValuesOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlColumnListConstructorProto struct {
	SqlColumnListConstructorProto *SqlColumnListConstructorProto `protobuf:"bytes,16,opt,name=sqlColumnListConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlMultisetQueryConstructorProto struct {
	SqlMultisetQueryConstructorProto *SqlMultisetQueryConstructorProto `protobuf:"bytes,17,opt,name=sqlMultisetQueryConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlCursorConstructorProto struct {
	SqlCursorConstructorProto *SqlCursorConstructorProto `protobuf:"bytes,18,opt,name=sqlCursorConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlRowOperatorProto struct {
	SqlRowOperatorProto *SqlRowOperatorProto `protobuf:"bytes,19,opt,name=sqlRowOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlDatetimeSubtractionOperatorProto struct {
	SqlDatetimeSubtractionOperatorProto *SqlDatetimeSubtractionOperatorProto `protobuf:"bytes,20,opt,name=sqlDatetimeSubtractionOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlNullTreatmentOperatorProto struct {
	SqlNullTreatmentOperatorProto *SqlNullTreatmentOperatorProto `protobuf:"bytes,21,opt,name=sqlNullTreatmentOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlArrayValueConstructorProto struct {
	SqlArrayValueConstructorProto *SqlArrayValueConstructorProto `protobuf:"bytes,22,opt,name=sqlArrayValueConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlMapValueConstructorProto struct {
	SqlMapValueConstructorProto *SqlMapValueConstructorProto `protobuf:"bytes,23,opt,name=sqlMapValueConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlCollectionTableOperatorProto struct {
	SqlCollectionTableOperatorProto *SqlCollectionTableOperatorProto `protobuf:"bytes,24,opt,name=sqlCollectionTableOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlUnnestOperatorProto struct {
	SqlUnnestOperatorProto *SqlUnnestOperatorProto `protobuf:"bytes,25,opt,name=sqlUnnestOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlExtendOperatorProto struct {
	SqlExtendOperatorProto *SqlExtendOperatorProto `protobuf:"bytes,26,opt,name=sqlExtendOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlRollupOperatorProto struct {
	SqlRollupOperatorProto *SqlRollupOperatorProto `protobuf:"bytes,27,opt,name=sqlRollupOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlIntervalOperatorProto struct {
	SqlIntervalOperatorProto *SqlIntervalOperatorProto `protobuf:"bytes,28,opt,name=sqlIntervalOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlSearchOperatorProto struct {
	SqlSearchOperatorProto *SqlSearchOperatorProto `protobuf:"bytes,29,opt,name=sqlSearchOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlBetweenOperatorProto struct {
	SqlBetweenOperatorProto *SqlBetweenOperatorProto `protobuf:"bytes,30,opt,name=sqlBetweenOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlArgumentAssignmentOperatorProto struct {
	SqlArgumentAssignmentOperatorProto *SqlArgumentAssignmentOperatorProto `protobuf:"bytes,31,opt,name=sqlArgumentAssignmentOperatorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlArrayQueryConstructorProto struct {
	SqlArrayQueryConstructorProto *SqlArrayQueryConstructorProto `protobuf:"bytes,32,opt,name=sqlArrayQueryConstructorProto,proto3,oneof"`
}

type SqlSpecialOperatorProto_SqlMapQueryConstructorProto struct {
	SqlMapQueryConstructorProto *SqlMapQueryConstructorProto `protobuf:"bytes,33,opt,name=sqlMapQueryConstructorProto,proto3,oneof"`
}

func (*SqlSpecialOperatorProto_SqlLateralOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlMultisetValueConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlDefaultOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlLiteralChainOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlDatetimePlusOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlSequenceValueOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlFunctionalOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlLikeOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlInternalOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlDotOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlThrowOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlItemOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlInfixOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlAsOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlValuesOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlColumnListConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlMultisetQueryConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlCursorConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlRowOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlDatetimeSubtractionOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlNullTreatmentOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlArrayValueConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlMapValueConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlCollectionTableOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlUnnestOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlExtendOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlRollupOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlIntervalOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlSearchOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlBetweenOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlArgumentAssignmentOperatorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlArrayQueryConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

func (*SqlSpecialOperatorProto_SqlMapQueryConstructorProto) isSqlSpecialOperatorProto_SqlSpecialOperatorProto() {
}

// Java Class: org.apache.calcite.sql.SqlLateralOperator
type SqlLateralOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlLateralOperatorProto) Reset() {
	*x = SqlLateralOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[272]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlLateralOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlLateralOperatorProto) ProtoMessage() {}

func (x *SqlLateralOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[272]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlLateralOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlLateralOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{272}
}

func (x *SqlLateralOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlLateralOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlLateralOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlLateralOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlLateralOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlLateralOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlLateralOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlLateralOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMultisetValueConstructor
type SqlMultisetValueConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlMultisetValueConstructorProto:
	//
	//	*SqlMultisetValueConstructorProto_SqlArrayValueConstructorProto
	//	*SqlMultisetValueConstructorProto_SqlMapValueConstructorProto
	SqlMultisetValueConstructorProto isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto `protobuf_oneof:"sqlMultisetValueConstructorProto"`
	Name                             string                                                              `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                             SqlKindProto                                                        `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                         int32                                                               `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                        int32                                                               `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference              *SqlReturnTypeInferenceProto                                        `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference             *SqlOperandTypeInferenceProto                                       `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker               *SqlOperandTypeCheckerProto                                         `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures                string                                                              `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMultisetValueConstructorProto) Reset() {
	*x = SqlMultisetValueConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[273]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMultisetValueConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMultisetValueConstructorProto) ProtoMessage() {}

func (x *SqlMultisetValueConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[273]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMultisetValueConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlMultisetValueConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{273}
}

func (m *SqlMultisetValueConstructorProto) GetSqlMultisetValueConstructorProto() isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto {
	if m != nil {
		return m.SqlMultisetValueConstructorProto
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetSqlArrayValueConstructorProto() *SqlArrayValueConstructorProto {
	if x, ok := x.GetSqlMultisetValueConstructorProto().(*SqlMultisetValueConstructorProto_SqlArrayValueConstructorProto); ok {
		return x.SqlArrayValueConstructorProto
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetSqlMapValueConstructorProto() *SqlMapValueConstructorProto {
	if x, ok := x.GetSqlMultisetValueConstructorProto().(*SqlMultisetValueConstructorProto_SqlMapValueConstructorProto); ok {
		return x.SqlMapValueConstructorProto
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMultisetValueConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMultisetValueConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMultisetValueConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMultisetValueConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMultisetValueConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto interface {
	isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto()
}

type SqlMultisetValueConstructorProto_SqlArrayValueConstructorProto struct {
	SqlArrayValueConstructorProto *SqlArrayValueConstructorProto `protobuf:"bytes,1,opt,name=sqlArrayValueConstructorProto,proto3,oneof"`
}

type SqlMultisetValueConstructorProto_SqlMapValueConstructorProto struct {
	SqlMapValueConstructorProto *SqlMapValueConstructorProto `protobuf:"bytes,2,opt,name=sqlMapValueConstructorProto,proto3,oneof"`
}

func (*SqlMultisetValueConstructorProto_SqlArrayValueConstructorProto) isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto() {
}

func (*SqlMultisetValueConstructorProto_SqlMapValueConstructorProto) isSqlMultisetValueConstructorProto_SqlMultisetValueConstructorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlArrayValueConstructor
type SqlArrayValueConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlArrayValueConstructorProto) Reset() {
	*x = SqlArrayValueConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[274]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlArrayValueConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlArrayValueConstructorProto) ProtoMessage() {}

func (x *SqlArrayValueConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[274]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlArrayValueConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlArrayValueConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{274}
}

func (x *SqlArrayValueConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlArrayValueConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlArrayValueConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlArrayValueConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlArrayValueConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlArrayValueConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlArrayValueConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlArrayValueConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMapValueConstructor
type SqlMapValueConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMapValueConstructorProto) Reset() {
	*x = SqlMapValueConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[275]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMapValueConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMapValueConstructorProto) ProtoMessage() {}

func (x *SqlMapValueConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[275]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMapValueConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlMapValueConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{275}
}

func (x *SqlMapValueConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMapValueConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMapValueConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMapValueConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMapValueConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMapValueConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMapValueConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMapValueConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlDefaultOperator
type SqlDefaultOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDefaultOperatorProto) Reset() {
	*x = SqlDefaultOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[276]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDefaultOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDefaultOperatorProto) ProtoMessage() {}

func (x *SqlDefaultOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[276]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDefaultOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlDefaultOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{276}
}

func (x *SqlDefaultOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDefaultOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDefaultOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDefaultOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDefaultOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDefaultOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDefaultOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDefaultOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlLiteralChainOperator
type SqlLiteralChainOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlLiteralChainOperatorProto) Reset() {
	*x = SqlLiteralChainOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[277]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlLiteralChainOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlLiteralChainOperatorProto) ProtoMessage() {}

func (x *SqlLiteralChainOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[277]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlLiteralChainOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlLiteralChainOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{277}
}

func (x *SqlLiteralChainOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlLiteralChainOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlLiteralChainOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlLiteralChainOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlLiteralChainOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlLiteralChainOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlLiteralChainOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlLiteralChainOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlDatetimePlusOperator
type SqlDatetimePlusOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDatetimePlusOperatorProto) Reset() {
	*x = SqlDatetimePlusOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[278]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatetimePlusOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatetimePlusOperatorProto) ProtoMessage() {}

func (x *SqlDatetimePlusOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[278]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatetimePlusOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlDatetimePlusOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{278}
}

func (x *SqlDatetimePlusOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDatetimePlusOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDatetimePlusOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDatetimePlusOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDatetimePlusOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDatetimePlusOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDatetimePlusOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDatetimePlusOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSequenceValueOperator
type SqlSequenceValueOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSequenceValueOperatorProto) Reset() {
	*x = SqlSequenceValueOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[279]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSequenceValueOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSequenceValueOperatorProto) ProtoMessage() {}

func (x *SqlSequenceValueOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[279]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSequenceValueOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlSequenceValueOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{279}
}

func (x *SqlSequenceValueOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSequenceValueOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSequenceValueOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSequenceValueOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSequenceValueOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSequenceValueOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSequenceValueOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSequenceValueOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlFunctionalOperator
type SqlFunctionalOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlFunctionalOperatorProto:
	//
	//	*SqlFunctionalOperatorProto_SqlCollectionTableOperatorProto
	//	*SqlFunctionalOperatorProto_SqlUnnestOperatorProto
	SqlFunctionalOperatorProto isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto `protobuf_oneof:"sqlFunctionalOperatorProto"`
	Name                       string                                                  `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                       SqlKindProto                                            `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                   int32                                                   `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                  int32                                                   `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference        *SqlReturnTypeInferenceProto                            `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference       *SqlOperandTypeInferenceProto                           `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker         *SqlOperandTypeCheckerProto                             `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures          string                                                  `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlFunctionalOperatorProto) Reset() {
	*x = SqlFunctionalOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[280]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlFunctionalOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlFunctionalOperatorProto) ProtoMessage() {}

func (x *SqlFunctionalOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[280]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlFunctionalOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlFunctionalOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{280}
}

func (m *SqlFunctionalOperatorProto) GetSqlFunctionalOperatorProto() isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto {
	if m != nil {
		return m.SqlFunctionalOperatorProto
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetSqlCollectionTableOperatorProto() *SqlCollectionTableOperatorProto {
	if x, ok := x.GetSqlFunctionalOperatorProto().(*SqlFunctionalOperatorProto_SqlCollectionTableOperatorProto); ok {
		return x.SqlCollectionTableOperatorProto
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetSqlUnnestOperatorProto() *SqlUnnestOperatorProto {
	if x, ok := x.GetSqlFunctionalOperatorProto().(*SqlFunctionalOperatorProto_SqlUnnestOperatorProto); ok {
		return x.SqlUnnestOperatorProto
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlFunctionalOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlFunctionalOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlFunctionalOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlFunctionalOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlFunctionalOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto interface {
	isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto()
}

type SqlFunctionalOperatorProto_SqlCollectionTableOperatorProto struct {
	SqlCollectionTableOperatorProto *SqlCollectionTableOperatorProto `protobuf:"bytes,1,opt,name=sqlCollectionTableOperatorProto,proto3,oneof"`
}

type SqlFunctionalOperatorProto_SqlUnnestOperatorProto struct {
	SqlUnnestOperatorProto *SqlUnnestOperatorProto `protobuf:"bytes,2,opt,name=sqlUnnestOperatorProto,proto3,oneof"`
}

func (*SqlFunctionalOperatorProto_SqlCollectionTableOperatorProto) isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto() {
}

func (*SqlFunctionalOperatorProto_SqlUnnestOperatorProto) isSqlFunctionalOperatorProto_SqlFunctionalOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlCollectionTableOperator
type SqlCollectionTableOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Modality             SqlModalityProto              `protobuf:"varint,1,opt,name=modality,proto3,enum=rill.sql.v1.SqlModalityProto" json:"modality,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCollectionTableOperatorProto) Reset() {
	*x = SqlCollectionTableOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[281]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCollectionTableOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCollectionTableOperatorProto) ProtoMessage() {}

func (x *SqlCollectionTableOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[281]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCollectionTableOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlCollectionTableOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{281}
}

func (x *SqlCollectionTableOperatorProto) GetModality() SqlModalityProto {
	if x != nil {
		return x.Modality
	}
	return SqlModalityProto_SqlModalityProto_RELATION_
}

func (x *SqlCollectionTableOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCollectionTableOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCollectionTableOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCollectionTableOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCollectionTableOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCollectionTableOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCollectionTableOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCollectionTableOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlUnnestOperator
type SqlUnnestOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	WithOrdinality       bool                          `protobuf:"varint,1,opt,name=withOrdinality,proto3" json:"withOrdinality,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlUnnestOperatorProto) Reset() {
	*x = SqlUnnestOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[282]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlUnnestOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlUnnestOperatorProto) ProtoMessage() {}

func (x *SqlUnnestOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[282]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlUnnestOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlUnnestOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{282}
}

func (x *SqlUnnestOperatorProto) GetWithOrdinality() bool {
	if x != nil {
		return x.WithOrdinality
	}
	return false
}

func (x *SqlUnnestOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlUnnestOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlUnnestOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlUnnestOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlUnnestOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlUnnestOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlUnnestOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlUnnestOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlLikeOperator
type SqlLikeOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Negated              bool                          `protobuf:"varint,1,opt,name=negated,proto3" json:"negated,omitempty"`
	CaseSensitive        bool                          `protobuf:"varint,2,opt,name=caseSensitive,proto3" json:"caseSensitive,omitempty"`
	Name                 string                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlLikeOperatorProto) Reset() {
	*x = SqlLikeOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[283]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlLikeOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlLikeOperatorProto) ProtoMessage() {}

func (x *SqlLikeOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[283]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlLikeOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlLikeOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{283}
}

func (x *SqlLikeOperatorProto) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *SqlLikeOperatorProto) GetCaseSensitive() bool {
	if x != nil {
		return x.CaseSensitive
	}
	return false
}

func (x *SqlLikeOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlLikeOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlLikeOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlLikeOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlLikeOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlLikeOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlLikeOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlLikeOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlInternalOperator
type SqlInternalOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlInternalOperatorProto:
	//
	//	*SqlInternalOperatorProto_SqlExtendOperatorProto
	//	*SqlInternalOperatorProto_SqlRollupOperatorProto
	//	*SqlInternalOperatorProto_SqlIntervalOperatorProto
	//	*SqlInternalOperatorProto_SqlSearchOperatorProto
	SqlInternalOperatorProto isSqlInternalOperatorProto_SqlInternalOperatorProto `protobuf_oneof:"sqlInternalOperatorProto"`
	Name                     string                                              `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty"`
	Kind                     SqlKindProto                                        `protobuf:"varint,6,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                 int32                                               `protobuf:"zigzag32,7,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                int32                                               `protobuf:"zigzag32,8,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference      *SqlReturnTypeInferenceProto                        `protobuf:"bytes,9,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference     *SqlOperandTypeInferenceProto                       `protobuf:"bytes,10,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker       *SqlOperandTypeCheckerProto                         `protobuf:"bytes,11,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures        string                                              `protobuf:"bytes,12,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlInternalOperatorProto) Reset() {
	*x = SqlInternalOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[284]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInternalOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInternalOperatorProto) ProtoMessage() {}

func (x *SqlInternalOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[284]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInternalOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlInternalOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{284}
}

func (m *SqlInternalOperatorProto) GetSqlInternalOperatorProto() isSqlInternalOperatorProto_SqlInternalOperatorProto {
	if m != nil {
		return m.SqlInternalOperatorProto
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetSqlExtendOperatorProto() *SqlExtendOperatorProto {
	if x, ok := x.GetSqlInternalOperatorProto().(*SqlInternalOperatorProto_SqlExtendOperatorProto); ok {
		return x.SqlExtendOperatorProto
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetSqlRollupOperatorProto() *SqlRollupOperatorProto {
	if x, ok := x.GetSqlInternalOperatorProto().(*SqlInternalOperatorProto_SqlRollupOperatorProto); ok {
		return x.SqlRollupOperatorProto
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetSqlIntervalOperatorProto() *SqlIntervalOperatorProto {
	if x, ok := x.GetSqlInternalOperatorProto().(*SqlInternalOperatorProto_SqlIntervalOperatorProto); ok {
		return x.SqlIntervalOperatorProto
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetSqlSearchOperatorProto() *SqlSearchOperatorProto {
	if x, ok := x.GetSqlInternalOperatorProto().(*SqlInternalOperatorProto_SqlSearchOperatorProto); ok {
		return x.SqlSearchOperatorProto
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlInternalOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlInternalOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlInternalOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlInternalOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlInternalOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlInternalOperatorProto_SqlInternalOperatorProto interface {
	isSqlInternalOperatorProto_SqlInternalOperatorProto()
}

type SqlInternalOperatorProto_SqlExtendOperatorProto struct {
	SqlExtendOperatorProto *SqlExtendOperatorProto `protobuf:"bytes,1,opt,name=sqlExtendOperatorProto,proto3,oneof"`
}

type SqlInternalOperatorProto_SqlRollupOperatorProto struct {
	SqlRollupOperatorProto *SqlRollupOperatorProto `protobuf:"bytes,2,opt,name=sqlRollupOperatorProto,proto3,oneof"`
}

type SqlInternalOperatorProto_SqlIntervalOperatorProto struct {
	SqlIntervalOperatorProto *SqlIntervalOperatorProto `protobuf:"bytes,3,opt,name=sqlIntervalOperatorProto,proto3,oneof"`
}

type SqlInternalOperatorProto_SqlSearchOperatorProto struct {
	SqlSearchOperatorProto *SqlSearchOperatorProto `protobuf:"bytes,4,opt,name=sqlSearchOperatorProto,proto3,oneof"`
}

func (*SqlInternalOperatorProto_SqlExtendOperatorProto) isSqlInternalOperatorProto_SqlInternalOperatorProto() {
}

func (*SqlInternalOperatorProto_SqlRollupOperatorProto) isSqlInternalOperatorProto_SqlInternalOperatorProto() {
}

func (*SqlInternalOperatorProto_SqlIntervalOperatorProto) isSqlInternalOperatorProto_SqlInternalOperatorProto() {
}

func (*SqlInternalOperatorProto_SqlSearchOperatorProto) isSqlInternalOperatorProto_SqlInternalOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlExtendOperator
type SqlExtendOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlExtendOperatorProto) Reset() {
	*x = SqlExtendOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[285]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlExtendOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlExtendOperatorProto) ProtoMessage() {}

func (x *SqlExtendOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[285]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlExtendOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlExtendOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{285}
}

func (x *SqlExtendOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlExtendOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlExtendOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlExtendOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlExtendOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlExtendOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlExtendOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlExtendOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlRollupOperator
type SqlRollupOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRollupOperatorProto) Reset() {
	*x = SqlRollupOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[286]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRollupOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRollupOperatorProto) ProtoMessage() {}

func (x *SqlRollupOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[286]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRollupOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlRollupOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{286}
}

func (x *SqlRollupOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRollupOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRollupOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRollupOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRollupOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRollupOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRollupOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRollupOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlIntervalOperator
type SqlIntervalOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlIntervalOperatorProto) Reset() {
	*x = SqlIntervalOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[287]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlIntervalOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlIntervalOperatorProto) ProtoMessage() {}

func (x *SqlIntervalOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[287]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlIntervalOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlIntervalOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{287}
}

func (x *SqlIntervalOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlIntervalOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlIntervalOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlIntervalOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlIntervalOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlIntervalOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlIntervalOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlIntervalOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlSearchOperator
type SqlSearchOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlSearchOperatorProto) Reset() {
	*x = SqlSearchOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[288]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSearchOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSearchOperatorProto) ProtoMessage() {}

func (x *SqlSearchOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[288]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSearchOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlSearchOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{288}
}

func (x *SqlSearchOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlSearchOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlSearchOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlSearchOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlSearchOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlSearchOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlSearchOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlSearchOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlDotOperator
type SqlDotOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDotOperatorProto) Reset() {
	*x = SqlDotOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[289]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDotOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDotOperatorProto) ProtoMessage() {}

func (x *SqlDotOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[289]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDotOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlDotOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{289}
}

func (x *SqlDotOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDotOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDotOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDotOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDotOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDotOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDotOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDotOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlThrowOperator
type SqlThrowOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlThrowOperatorProto) Reset() {
	*x = SqlThrowOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[290]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlThrowOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlThrowOperatorProto) ProtoMessage() {}

func (x *SqlThrowOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[290]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlThrowOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlThrowOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{290}
}

func (x *SqlThrowOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlThrowOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlThrowOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlThrowOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlThrowOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlThrowOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlThrowOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlThrowOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlItemOperator
type SqlItemOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlItemOperatorProto) Reset() {
	*x = SqlItemOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[291]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlItemOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlItemOperatorProto) ProtoMessage() {}

func (x *SqlItemOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[291]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlItemOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlItemOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{291}
}

func (x *SqlItemOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlItemOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlItemOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlItemOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlItemOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlItemOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlItemOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlItemOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlInfixOperator
type SqlInfixOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlInfixOperatorProto:
	//
	//	*SqlInfixOperatorProto_SqlBetweenOperatorProto
	SqlInfixOperatorProto isSqlInfixOperatorProto_SqlInfixOperatorProto `protobuf_oneof:"sqlInfixOperatorProto"`
	Names                 []string                                      `protobuf:"bytes,2,rep,name=names,proto3" json:"names,omitempty"`
	Name                  string                                        `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Kind                  SqlKindProto                                  `protobuf:"varint,4,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec              int32                                         `protobuf:"zigzag32,5,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec             int32                                         `protobuf:"zigzag32,6,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference   *SqlReturnTypeInferenceProto                  `protobuf:"bytes,7,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference  *SqlOperandTypeInferenceProto                 `protobuf:"bytes,8,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker    *SqlOperandTypeCheckerProto                   `protobuf:"bytes,9,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures     string                                        `protobuf:"bytes,10,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlInfixOperatorProto) Reset() {
	*x = SqlInfixOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[292]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlInfixOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlInfixOperatorProto) ProtoMessage() {}

func (x *SqlInfixOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[292]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlInfixOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlInfixOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{292}
}

func (m *SqlInfixOperatorProto) GetSqlInfixOperatorProto() isSqlInfixOperatorProto_SqlInfixOperatorProto {
	if m != nil {
		return m.SqlInfixOperatorProto
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetSqlBetweenOperatorProto() *SqlBetweenOperatorProto {
	if x, ok := x.GetSqlInfixOperatorProto().(*SqlInfixOperatorProto_SqlBetweenOperatorProto); ok {
		return x.SqlBetweenOperatorProto
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlInfixOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlInfixOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlInfixOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlInfixOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlInfixOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlInfixOperatorProto_SqlInfixOperatorProto interface {
	isSqlInfixOperatorProto_SqlInfixOperatorProto()
}

type SqlInfixOperatorProto_SqlBetweenOperatorProto struct {
	SqlBetweenOperatorProto *SqlBetweenOperatorProto `protobuf:"bytes,1,opt,name=sqlBetweenOperatorProto,proto3,oneof"`
}

func (*SqlInfixOperatorProto_SqlBetweenOperatorProto) isSqlInfixOperatorProto_SqlInfixOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlBetweenOperator
type SqlBetweenOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flag                 FlagProto                     `protobuf:"varint,1,opt,name=flag,proto3,enum=rill.sql.v1.FlagProto" json:"flag,omitempty"`
	Negated              bool                          `protobuf:"varint,2,opt,name=negated,proto3" json:"negated,omitempty"`
	Names                []string                      `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Name                 string                        `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlBetweenOperatorProto) Reset() {
	*x = SqlBetweenOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[293]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlBetweenOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlBetweenOperatorProto) ProtoMessage() {}

func (x *SqlBetweenOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[293]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlBetweenOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlBetweenOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{293}
}

func (x *SqlBetweenOperatorProto) GetFlag() FlagProto {
	if x != nil {
		return x.Flag
	}
	return FlagProto_FlagProto_ASYMMETRIC_
}

func (x *SqlBetweenOperatorProto) GetNegated() bool {
	if x != nil {
		return x.Negated
	}
	return false
}

func (x *SqlBetweenOperatorProto) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *SqlBetweenOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlBetweenOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlBetweenOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlBetweenOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlBetweenOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlBetweenOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlBetweenOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlBetweenOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlAsOperator
type SqlAsOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAsOperatorProto:
	//
	//	*SqlAsOperatorProto_SqlArgumentAssignmentOperatorProto
	SqlAsOperatorProto   isSqlAsOperatorProto_SqlAsOperatorProto `protobuf_oneof:"sqlAsOperatorProto"`
	Name                 string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                            `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                                   `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                                   `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto            `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto           `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto             `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                                  `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlAsOperatorProto) Reset() {
	*x = SqlAsOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[294]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAsOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAsOperatorProto) ProtoMessage() {}

func (x *SqlAsOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[294]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAsOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlAsOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{294}
}

func (m *SqlAsOperatorProto) GetSqlAsOperatorProto() isSqlAsOperatorProto_SqlAsOperatorProto {
	if m != nil {
		return m.SqlAsOperatorProto
	}
	return nil
}

func (x *SqlAsOperatorProto) GetSqlArgumentAssignmentOperatorProto() *SqlArgumentAssignmentOperatorProto {
	if x, ok := x.GetSqlAsOperatorProto().(*SqlAsOperatorProto_SqlArgumentAssignmentOperatorProto); ok {
		return x.SqlArgumentAssignmentOperatorProto
	}
	return nil
}

func (x *SqlAsOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlAsOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlAsOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlAsOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlAsOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlAsOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlAsOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlAsOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlAsOperatorProto_SqlAsOperatorProto interface {
	isSqlAsOperatorProto_SqlAsOperatorProto()
}

type SqlAsOperatorProto_SqlArgumentAssignmentOperatorProto struct {
	SqlArgumentAssignmentOperatorProto *SqlArgumentAssignmentOperatorProto `protobuf:"bytes,1,opt,name=sqlArgumentAssignmentOperatorProto,proto3,oneof"`
}

func (*SqlAsOperatorProto_SqlArgumentAssignmentOperatorProto) isSqlAsOperatorProto_SqlAsOperatorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlArgumentAssignmentOperator
type SqlArgumentAssignmentOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlArgumentAssignmentOperatorProto) Reset() {
	*x = SqlArgumentAssignmentOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[295]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlArgumentAssignmentOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlArgumentAssignmentOperatorProto) ProtoMessage() {}

func (x *SqlArgumentAssignmentOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[295]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlArgumentAssignmentOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlArgumentAssignmentOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{295}
}

func (x *SqlArgumentAssignmentOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlArgumentAssignmentOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlArgumentAssignmentOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlArgumentAssignmentOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlArgumentAssignmentOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlArgumentAssignmentOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlArgumentAssignmentOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlArgumentAssignmentOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlValuesOperator
type SqlValuesOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlValuesOperatorProto) Reset() {
	*x = SqlValuesOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[296]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlValuesOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlValuesOperatorProto) ProtoMessage() {}

func (x *SqlValuesOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[296]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlValuesOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlValuesOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{296}
}

func (x *SqlValuesOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlValuesOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlValuesOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlValuesOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlValuesOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlValuesOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlValuesOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlValuesOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlColumnListConstructor
type SqlColumnListConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlColumnListConstructorProto) Reset() {
	*x = SqlColumnListConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[297]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnListConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnListConstructorProto) ProtoMessage() {}

func (x *SqlColumnListConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[297]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnListConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlColumnListConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{297}
}

func (x *SqlColumnListConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlColumnListConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlColumnListConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlColumnListConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlColumnListConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlColumnListConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlColumnListConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlColumnListConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMultisetQueryConstructor
type SqlMultisetQueryConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlMultisetQueryConstructorProto:
	//
	//	*SqlMultisetQueryConstructorProto_SqlArrayQueryConstructorProto
	//	*SqlMultisetQueryConstructorProto_SqlMapQueryConstructorProto
	SqlMultisetQueryConstructorProto isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto `protobuf_oneof:"sqlMultisetQueryConstructorProto"`
	TypeTransform                    *SqlTypeTransformProto                                              `protobuf:"bytes,3,opt,name=typeTransform,proto3" json:"typeTransform,omitempty"`
	Name                             string                                                              `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Kind                             SqlKindProto                                                        `protobuf:"varint,5,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec                         int32                                                               `protobuf:"zigzag32,6,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec                        int32                                                               `protobuf:"zigzag32,7,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference              *SqlReturnTypeInferenceProto                                        `protobuf:"bytes,8,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference             *SqlOperandTypeInferenceProto                                       `protobuf:"bytes,9,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker               *SqlOperandTypeCheckerProto                                         `protobuf:"bytes,10,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures                string                                                              `protobuf:"bytes,11,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMultisetQueryConstructorProto) Reset() {
	*x = SqlMultisetQueryConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[298]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMultisetQueryConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMultisetQueryConstructorProto) ProtoMessage() {}

func (x *SqlMultisetQueryConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[298]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMultisetQueryConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlMultisetQueryConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{298}
}

func (m *SqlMultisetQueryConstructorProto) GetSqlMultisetQueryConstructorProto() isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto {
	if m != nil {
		return m.SqlMultisetQueryConstructorProto
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetSqlArrayQueryConstructorProto() *SqlArrayQueryConstructorProto {
	if x, ok := x.GetSqlMultisetQueryConstructorProto().(*SqlMultisetQueryConstructorProto_SqlArrayQueryConstructorProto); ok {
		return x.SqlArrayQueryConstructorProto
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetSqlMapQueryConstructorProto() *SqlMapQueryConstructorProto {
	if x, ok := x.GetSqlMultisetQueryConstructorProto().(*SqlMultisetQueryConstructorProto_SqlMapQueryConstructorProto); ok {
		return x.SqlMapQueryConstructorProto
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetTypeTransform() *SqlTypeTransformProto {
	if x != nil {
		return x.TypeTransform
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMultisetQueryConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMultisetQueryConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMultisetQueryConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMultisetQueryConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMultisetQueryConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

type isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto interface {
	isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto()
}

type SqlMultisetQueryConstructorProto_SqlArrayQueryConstructorProto struct {
	SqlArrayQueryConstructorProto *SqlArrayQueryConstructorProto `protobuf:"bytes,1,opt,name=sqlArrayQueryConstructorProto,proto3,oneof"`
}

type SqlMultisetQueryConstructorProto_SqlMapQueryConstructorProto struct {
	SqlMapQueryConstructorProto *SqlMapQueryConstructorProto `protobuf:"bytes,2,opt,name=sqlMapQueryConstructorProto,proto3,oneof"`
}

func (*SqlMultisetQueryConstructorProto_SqlArrayQueryConstructorProto) isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto() {
}

func (*SqlMultisetQueryConstructorProto_SqlMapQueryConstructorProto) isSqlMultisetQueryConstructorProto_SqlMultisetQueryConstructorProto() {
}

// Java Class: org.apache.calcite.sql.fun.SqlArrayQueryConstructor
type SqlArrayQueryConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeTransform        *SqlTypeTransformProto        `protobuf:"bytes,1,opt,name=typeTransform,proto3" json:"typeTransform,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlArrayQueryConstructorProto) Reset() {
	*x = SqlArrayQueryConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[299]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlArrayQueryConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlArrayQueryConstructorProto) ProtoMessage() {}

func (x *SqlArrayQueryConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[299]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlArrayQueryConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlArrayQueryConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{299}
}

func (x *SqlArrayQueryConstructorProto) GetTypeTransform() *SqlTypeTransformProto {
	if x != nil {
		return x.TypeTransform
	}
	return nil
}

func (x *SqlArrayQueryConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlArrayQueryConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlArrayQueryConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlArrayQueryConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlArrayQueryConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlArrayQueryConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlArrayQueryConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlArrayQueryConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlMapQueryConstructor
type SqlMapQueryConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TypeTransform        *SqlTypeTransformProto        `protobuf:"bytes,1,opt,name=typeTransform,proto3" json:"typeTransform,omitempty"`
	Name                 string                        `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,3,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,4,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,5,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,6,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,7,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,8,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,9,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlMapQueryConstructorProto) Reset() {
	*x = SqlMapQueryConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[300]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMapQueryConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMapQueryConstructorProto) ProtoMessage() {}

func (x *SqlMapQueryConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[300]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMapQueryConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlMapQueryConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{300}
}

func (x *SqlMapQueryConstructorProto) GetTypeTransform() *SqlTypeTransformProto {
	if x != nil {
		return x.TypeTransform
	}
	return nil
}

func (x *SqlMapQueryConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlMapQueryConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlMapQueryConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlMapQueryConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlMapQueryConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlMapQueryConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlMapQueryConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlMapQueryConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlCursorConstructor
type SqlCursorConstructorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlCursorConstructorProto) Reset() {
	*x = SqlCursorConstructorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[301]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCursorConstructorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCursorConstructorProto) ProtoMessage() {}

func (x *SqlCursorConstructorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[301]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCursorConstructorProto.ProtoReflect.Descriptor instead.
func (*SqlCursorConstructorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{301}
}

func (x *SqlCursorConstructorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlCursorConstructorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlCursorConstructorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlCursorConstructorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlCursorConstructorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlCursorConstructorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlCursorConstructorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlCursorConstructorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlRowOperator
type SqlRowOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlRowOperatorProto) Reset() {
	*x = SqlRowOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[302]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlRowOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlRowOperatorProto) ProtoMessage() {}

func (x *SqlRowOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[302]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlRowOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlRowOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{302}
}

func (x *SqlRowOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlRowOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlRowOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlRowOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlRowOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlRowOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlRowOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlRowOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.fun.SqlDatetimeSubtractionOperator
type SqlDatetimeSubtractionOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlDatetimeSubtractionOperatorProto) Reset() {
	*x = SqlDatetimeSubtractionOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[303]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDatetimeSubtractionOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDatetimeSubtractionOperatorProto) ProtoMessage() {}

func (x *SqlDatetimeSubtractionOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[303]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDatetimeSubtractionOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlDatetimeSubtractionOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{303}
}

func (x *SqlDatetimeSubtractionOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlDatetimeSubtractionOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlDatetimeSubtractionOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlDatetimeSubtractionOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlDatetimeSubtractionOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlDatetimeSubtractionOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlDatetimeSubtractionOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlDatetimeSubtractionOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlNullTreatmentOperator
type SqlNullTreatmentOperatorProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name                 string                        `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Kind                 SqlKindProto                  `protobuf:"varint,2,opt,name=kind,proto3,enum=rill.sql.v1.SqlKindProto" json:"kind,omitempty"`
	LeftPrec             int32                         `protobuf:"zigzag32,3,opt,name=leftPrec,proto3" json:"leftPrec,omitempty"`
	RightPrec            int32                         `protobuf:"zigzag32,4,opt,name=rightPrec,proto3" json:"rightPrec,omitempty"`
	ReturnTypeInference  *SqlReturnTypeInferenceProto  `protobuf:"bytes,5,opt,name=returnTypeInference,proto3" json:"returnTypeInference,omitempty"`
	OperandTypeInference *SqlOperandTypeInferenceProto `protobuf:"bytes,6,opt,name=operandTypeInference,proto3" json:"operandTypeInference,omitempty"`
	OperandTypeChecker   *SqlOperandTypeCheckerProto   `protobuf:"bytes,7,opt,name=operandTypeChecker,proto3" json:"operandTypeChecker,omitempty"`
	AllowedSignatures    string                        `protobuf:"bytes,8,opt,name=allowedSignatures,proto3" json:"allowedSignatures,omitempty"`
}

func (x *SqlNullTreatmentOperatorProto) Reset() {
	*x = SqlNullTreatmentOperatorProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[304]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlNullTreatmentOperatorProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlNullTreatmentOperatorProto) ProtoMessage() {}

func (x *SqlNullTreatmentOperatorProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[304]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlNullTreatmentOperatorProto.ProtoReflect.Descriptor instead.
func (*SqlNullTreatmentOperatorProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{304}
}

func (x *SqlNullTreatmentOperatorProto) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *SqlNullTreatmentOperatorProto) GetKind() SqlKindProto {
	if x != nil {
		return x.Kind
	}
	return SqlKindProto_SqlKindProto_OTHER_
}

func (x *SqlNullTreatmentOperatorProto) GetLeftPrec() int32 {
	if x != nil {
		return x.LeftPrec
	}
	return 0
}

func (x *SqlNullTreatmentOperatorProto) GetRightPrec() int32 {
	if x != nil {
		return x.RightPrec
	}
	return 0
}

func (x *SqlNullTreatmentOperatorProto) GetReturnTypeInference() *SqlReturnTypeInferenceProto {
	if x != nil {
		return x.ReturnTypeInference
	}
	return nil
}

func (x *SqlNullTreatmentOperatorProto) GetOperandTypeInference() *SqlOperandTypeInferenceProto {
	if x != nil {
		return x.OperandTypeInference
	}
	return nil
}

func (x *SqlNullTreatmentOperatorProto) GetOperandTypeChecker() *SqlOperandTypeCheckerProto {
	if x != nil {
		return x.OperandTypeChecker
	}
	return nil
}

func (x *SqlNullTreatmentOperatorProto) GetAllowedSignatures() string {
	if x != nil {
		return x.AllowedSignatures
	}
	return ""
}

// Java Class: org.apache.calcite.sql.SqlMatchRecognize
type SqlMatchRecognizeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TableRef        *SqlNodeProto      `protobuf:"bytes,1,opt,name=tableRef,proto3" json:"tableRef,omitempty"`
	Pattern         *SqlNodeProto      `protobuf:"bytes,2,opt,name=pattern,proto3" json:"pattern,omitempty"`
	StrictStart     *SqlLiteralProto   `protobuf:"bytes,3,opt,name=strictStart,proto3" json:"strictStart,omitempty"`
	StrictEnd       *SqlLiteralProto   `protobuf:"bytes,4,opt,name=strictEnd,proto3" json:"strictEnd,omitempty"`
	PatternDefList  *SqlNodeListProto  `protobuf:"bytes,5,opt,name=patternDefList,proto3" json:"patternDefList,omitempty"`
	MeasureList     *SqlNodeListProto  `protobuf:"bytes,6,opt,name=measureList,proto3" json:"measureList,omitempty"`
	After           *SqlNodeProto      `protobuf:"bytes,7,opt,name=after,proto3" json:"after,omitempty"`
	SubsetList      *SqlNodeListProto  `protobuf:"bytes,8,opt,name=subsetList,proto3" json:"subsetList,omitempty"`
	RowsPerMatch    *SqlLiteralProto   `protobuf:"bytes,9,opt,name=rowsPerMatch,proto3" json:"rowsPerMatch,omitempty"`
	PartitionList   *SqlNodeListProto  `protobuf:"bytes,10,opt,name=partitionList,proto3" json:"partitionList,omitempty"`
	OrderList       *SqlNodeListProto  `protobuf:"bytes,11,opt,name=orderList,proto3" json:"orderList,omitempty"`
	Interval        *SqlLiteralProto   `protobuf:"bytes,12,opt,name=interval,proto3" json:"interval,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,13,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,14,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlMatchRecognizeProto) Reset() {
	*x = SqlMatchRecognizeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[305]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlMatchRecognizeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlMatchRecognizeProto) ProtoMessage() {}

func (x *SqlMatchRecognizeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[305]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlMatchRecognizeProto.ProtoReflect.Descriptor instead.
func (*SqlMatchRecognizeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{305}
}

func (x *SqlMatchRecognizeProto) GetTableRef() *SqlNodeProto {
	if x != nil {
		return x.TableRef
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetPattern() *SqlNodeProto {
	if x != nil {
		return x.Pattern
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetStrictStart() *SqlLiteralProto {
	if x != nil {
		return x.StrictStart
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetStrictEnd() *SqlLiteralProto {
	if x != nil {
		return x.StrictEnd
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetPatternDefList() *SqlNodeListProto {
	if x != nil {
		return x.PatternDefList
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetMeasureList() *SqlNodeListProto {
	if x != nil {
		return x.MeasureList
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetAfter() *SqlNodeProto {
	if x != nil {
		return x.After
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetSubsetList() *SqlNodeListProto {
	if x != nil {
		return x.SubsetList
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetRowsPerMatch() *SqlLiteralProto {
	if x != nil {
		return x.RowsPerMatch
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetPartitionList() *SqlNodeListProto {
	if x != nil {
		return x.PartitionList
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetOrderList() *SqlNodeListProto {
	if x != nil {
		return x.OrderList
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetInterval() *SqlLiteralProto {
	if x != nil {
		return x.Interval
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlMatchRecognizeProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlAlter
type SqlAlterProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlAlterProto:
	//
	//	*SqlAlterProto_SqlSetOptionProto
	SqlAlterProto   isSqlAlterProto_SqlAlterProto `protobuf_oneof:"sqlAlterProto"`
	Scope           string                        `protobuf:"bytes,2,opt,name=scope,proto3" json:"scope,omitempty"`
	Pos             *SqlParserPosProto            `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto             `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlAlterProto) Reset() {
	*x = SqlAlterProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[306]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlAlterProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlAlterProto) ProtoMessage() {}

func (x *SqlAlterProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[306]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlAlterProto.ProtoReflect.Descriptor instead.
func (*SqlAlterProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{306}
}

func (m *SqlAlterProto) GetSqlAlterProto() isSqlAlterProto_SqlAlterProto {
	if m != nil {
		return m.SqlAlterProto
	}
	return nil
}

func (x *SqlAlterProto) GetSqlSetOptionProto() *SqlSetOptionProto {
	if x, ok := x.GetSqlAlterProto().(*SqlAlterProto_SqlSetOptionProto); ok {
		return x.SqlSetOptionProto
	}
	return nil
}

func (x *SqlAlterProto) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SqlAlterProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlAlterProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlAlterProto_SqlAlterProto interface {
	isSqlAlterProto_SqlAlterProto()
}

type SqlAlterProto_SqlSetOptionProto struct {
	SqlSetOptionProto *SqlSetOptionProto `protobuf:"bytes,1,opt,name=sqlSetOptionProto,proto3,oneof"`
}

func (*SqlAlterProto_SqlSetOptionProto) isSqlAlterProto_SqlAlterProto() {}

// Java Class: org.apache.calcite.sql.SqlSetOption
type SqlSetOptionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value           *SqlNodeProto       `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	Scope           string              `protobuf:"bytes,3,opt,name=scope,proto3" json:"scope,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlSetOptionProto) Reset() {
	*x = SqlSetOptionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[307]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlSetOptionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlSetOptionProto) ProtoMessage() {}

func (x *SqlSetOptionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[307]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlSetOptionProto.ProtoReflect.Descriptor instead.
func (*SqlSetOptionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{307}
}

func (x *SqlSetOptionProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlSetOptionProto) GetValue() *SqlNodeProto {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *SqlSetOptionProto) GetScope() string {
	if x != nil {
		return x.Scope
	}
	return ""
}

func (x *SqlSetOptionProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlSetOptionProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDdl
type SqlDdlProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlDdlProto:
	//
	//	*SqlDdlProto_SqlDropProto
	//	*SqlDdlProto_SqlCreateProto
	//	*SqlDdlProto_SqlDropSchemaProto
	//	*SqlDdlProto_SqlDropObjectProto
	//	*SqlDdlProto_SqlCreateTypeProto
	//	*SqlDdlProto_SqlCreateTableProto
	//	*SqlDdlProto_SqlCreateViewProto
	//	*SqlDdlProto_SqlCreateFunctionProto
	//	*SqlDdlProto_SqlCreateForeignSchemaProto
	//	*SqlDdlProto_SqlCreateSchemaProto
	//	*SqlDdlProto_SqlCreateMaterializedViewProto
	//	*SqlDdlProto_SqlDropTableProto
	//	*SqlDdlProto_SqlDropMaterializedViewProto
	//	*SqlDdlProto_SqlDropViewProto
	//	*SqlDdlProto_SqlDropFunctionProto
	//	*SqlDdlProto_SqlDropTypeProto
	SqlDdlProto     isSqlDdlProto_SqlDdlProto `protobuf_oneof:"sqlDdlProto"`
	Operator        *SqlOperatorProto         `protobuf:"bytes,17,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto        `protobuf:"bytes,18,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto         `protobuf:"bytes,19,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDdlProto) Reset() {
	*x = SqlDdlProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[308]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDdlProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDdlProto) ProtoMessage() {}

func (x *SqlDdlProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[308]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDdlProto.ProtoReflect.Descriptor instead.
func (*SqlDdlProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{308}
}

func (m *SqlDdlProto) GetSqlDdlProto() isSqlDdlProto_SqlDdlProto {
	if m != nil {
		return m.SqlDdlProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropProto() *SqlDropProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropProto); ok {
		return x.SqlDropProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateProto() *SqlCreateProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateProto); ok {
		return x.SqlCreateProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropSchemaProto() *SqlDropSchemaProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropSchemaProto); ok {
		return x.SqlDropSchemaProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropObjectProto() *SqlDropObjectProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropObjectProto); ok {
		return x.SqlDropObjectProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateTypeProto() *SqlCreateTypeProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateTypeProto); ok {
		return x.SqlCreateTypeProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateTableProto() *SqlCreateTableProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateTableProto); ok {
		return x.SqlCreateTableProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateViewProto() *SqlCreateViewProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateViewProto); ok {
		return x.SqlCreateViewProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateFunctionProto() *SqlCreateFunctionProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateFunctionProto); ok {
		return x.SqlCreateFunctionProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateForeignSchemaProto() *SqlCreateForeignSchemaProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateForeignSchemaProto); ok {
		return x.SqlCreateForeignSchemaProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateSchemaProto() *SqlCreateSchemaProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateSchemaProto); ok {
		return x.SqlCreateSchemaProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlCreateMaterializedViewProto() *SqlCreateMaterializedViewProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlCreateMaterializedViewProto); ok {
		return x.SqlCreateMaterializedViewProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropTableProto() *SqlDropTableProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropTableProto); ok {
		return x.SqlDropTableProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropMaterializedViewProto() *SqlDropMaterializedViewProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropMaterializedViewProto); ok {
		return x.SqlDropMaterializedViewProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropViewProto() *SqlDropViewProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropViewProto); ok {
		return x.SqlDropViewProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropFunctionProto() *SqlDropFunctionProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropFunctionProto); ok {
		return x.SqlDropFunctionProto
	}
	return nil
}

func (x *SqlDdlProto) GetSqlDropTypeProto() *SqlDropTypeProto {
	if x, ok := x.GetSqlDdlProto().(*SqlDdlProto_SqlDropTypeProto); ok {
		return x.SqlDropTypeProto
	}
	return nil
}

func (x *SqlDdlProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDdlProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDdlProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlDdlProto_SqlDdlProto interface {
	isSqlDdlProto_SqlDdlProto()
}

type SqlDdlProto_SqlDropProto struct {
	SqlDropProto *SqlDropProto `protobuf:"bytes,1,opt,name=sqlDropProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateProto struct {
	SqlCreateProto *SqlCreateProto `protobuf:"bytes,2,opt,name=sqlCreateProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropSchemaProto struct {
	SqlDropSchemaProto *SqlDropSchemaProto `protobuf:"bytes,3,opt,name=sqlDropSchemaProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropObjectProto struct {
	SqlDropObjectProto *SqlDropObjectProto `protobuf:"bytes,4,opt,name=sqlDropObjectProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateTypeProto struct {
	SqlCreateTypeProto *SqlCreateTypeProto `protobuf:"bytes,5,opt,name=sqlCreateTypeProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateTableProto struct {
	SqlCreateTableProto *SqlCreateTableProto `protobuf:"bytes,6,opt,name=sqlCreateTableProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateViewProto struct {
	SqlCreateViewProto *SqlCreateViewProto `protobuf:"bytes,7,opt,name=sqlCreateViewProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateFunctionProto struct {
	SqlCreateFunctionProto *SqlCreateFunctionProto `protobuf:"bytes,8,opt,name=sqlCreateFunctionProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateForeignSchemaProto struct {
	SqlCreateForeignSchemaProto *SqlCreateForeignSchemaProto `protobuf:"bytes,9,opt,name=sqlCreateForeignSchemaProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateSchemaProto struct {
	SqlCreateSchemaProto *SqlCreateSchemaProto `protobuf:"bytes,10,opt,name=sqlCreateSchemaProto,proto3,oneof"`
}

type SqlDdlProto_SqlCreateMaterializedViewProto struct {
	SqlCreateMaterializedViewProto *SqlCreateMaterializedViewProto `protobuf:"bytes,11,opt,name=sqlCreateMaterializedViewProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropTableProto struct {
	SqlDropTableProto *SqlDropTableProto `protobuf:"bytes,12,opt,name=sqlDropTableProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropMaterializedViewProto struct {
	SqlDropMaterializedViewProto *SqlDropMaterializedViewProto `protobuf:"bytes,13,opt,name=sqlDropMaterializedViewProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropViewProto struct {
	SqlDropViewProto *SqlDropViewProto `protobuf:"bytes,14,opt,name=sqlDropViewProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropFunctionProto struct {
	SqlDropFunctionProto *SqlDropFunctionProto `protobuf:"bytes,15,opt,name=sqlDropFunctionProto,proto3,oneof"`
}

type SqlDdlProto_SqlDropTypeProto struct {
	SqlDropTypeProto *SqlDropTypeProto `protobuf:"bytes,16,opt,name=sqlDropTypeProto,proto3,oneof"`
}

func (*SqlDdlProto_SqlDropProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropSchemaProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropObjectProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateTypeProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateTableProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateViewProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateFunctionProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateForeignSchemaProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateSchemaProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlCreateMaterializedViewProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropTableProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropMaterializedViewProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropViewProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropFunctionProto) isSqlDdlProto_SqlDdlProto() {}

func (*SqlDdlProto_SqlDropTypeProto) isSqlDdlProto_SqlDdlProto() {}

// Java Class: org.apache.calcite.sql.SqlDrop
type SqlDropProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlDropProto:
	//
	//	*SqlDropProto_SqlDropSchemaProto
	//	*SqlDropProto_SqlDropObjectProto
	//	*SqlDropProto_SqlDropTableProto
	//	*SqlDropProto_SqlDropMaterializedViewProto
	//	*SqlDropProto_SqlDropViewProto
	//	*SqlDropProto_SqlDropFunctionProto
	//	*SqlDropProto_SqlDropTypeProto
	SqlDropProto    isSqlDropProto_SqlDropProto `protobuf_oneof:"sqlDropProto"`
	IfExists        bool                        `protobuf:"varint,8,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto           `protobuf:"bytes,9,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto          `protobuf:"bytes,10,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto           `protobuf:"bytes,11,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropProto) Reset() {
	*x = SqlDropProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[309]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropProto) ProtoMessage() {}

func (x *SqlDropProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[309]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropProto.ProtoReflect.Descriptor instead.
func (*SqlDropProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{309}
}

func (m *SqlDropProto) GetSqlDropProto() isSqlDropProto_SqlDropProto {
	if m != nil {
		return m.SqlDropProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropSchemaProto() *SqlDropSchemaProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropSchemaProto); ok {
		return x.SqlDropSchemaProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropObjectProto() *SqlDropObjectProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropObjectProto); ok {
		return x.SqlDropObjectProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropTableProto() *SqlDropTableProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropTableProto); ok {
		return x.SqlDropTableProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropMaterializedViewProto() *SqlDropMaterializedViewProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropMaterializedViewProto); ok {
		return x.SqlDropMaterializedViewProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropViewProto() *SqlDropViewProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropViewProto); ok {
		return x.SqlDropViewProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropFunctionProto() *SqlDropFunctionProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropFunctionProto); ok {
		return x.SqlDropFunctionProto
	}
	return nil
}

func (x *SqlDropProto) GetSqlDropTypeProto() *SqlDropTypeProto {
	if x, ok := x.GetSqlDropProto().(*SqlDropProto_SqlDropTypeProto); ok {
		return x.SqlDropTypeProto
	}
	return nil
}

func (x *SqlDropProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlDropProto_SqlDropProto interface {
	isSqlDropProto_SqlDropProto()
}

type SqlDropProto_SqlDropSchemaProto struct {
	SqlDropSchemaProto *SqlDropSchemaProto `protobuf:"bytes,1,opt,name=sqlDropSchemaProto,proto3,oneof"`
}

type SqlDropProto_SqlDropObjectProto struct {
	SqlDropObjectProto *SqlDropObjectProto `protobuf:"bytes,2,opt,name=sqlDropObjectProto,proto3,oneof"`
}

type SqlDropProto_SqlDropTableProto struct {
	SqlDropTableProto *SqlDropTableProto `protobuf:"bytes,3,opt,name=sqlDropTableProto,proto3,oneof"`
}

type SqlDropProto_SqlDropMaterializedViewProto struct {
	SqlDropMaterializedViewProto *SqlDropMaterializedViewProto `protobuf:"bytes,4,opt,name=sqlDropMaterializedViewProto,proto3,oneof"`
}

type SqlDropProto_SqlDropViewProto struct {
	SqlDropViewProto *SqlDropViewProto `protobuf:"bytes,5,opt,name=sqlDropViewProto,proto3,oneof"`
}

type SqlDropProto_SqlDropFunctionProto struct {
	SqlDropFunctionProto *SqlDropFunctionProto `protobuf:"bytes,6,opt,name=sqlDropFunctionProto,proto3,oneof"`
}

type SqlDropProto_SqlDropTypeProto struct {
	SqlDropTypeProto *SqlDropTypeProto `protobuf:"bytes,7,opt,name=sqlDropTypeProto,proto3,oneof"`
}

func (*SqlDropProto_SqlDropSchemaProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropObjectProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropTableProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropMaterializedViewProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropViewProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropFunctionProto) isSqlDropProto_SqlDropProto() {}

func (*SqlDropProto_SqlDropTypeProto) isSqlDropProto_SqlDropProto() {}

// Java Class: org.apache.calcite.sql.ddl.SqlDropSchema
type SqlDropSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Foreign         bool                `protobuf:"varint,1,opt,name=foreign,proto3" json:"foreign,omitempty"`
	Name            *SqlIdentifierProto `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,3,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropSchemaProto) Reset() {
	*x = SqlDropSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[310]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropSchemaProto) ProtoMessage() {}

func (x *SqlDropSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[310]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropSchemaProto.ProtoReflect.Descriptor instead.
func (*SqlDropSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{310}
}

func (x *SqlDropSchemaProto) GetForeign() bool {
	if x != nil {
		return x.Foreign
	}
	return false
}

func (x *SqlDropSchemaProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropSchemaProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropSchemaProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropSchemaProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropSchemaProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlDropObject
type SqlDropObjectProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlDropObjectProto:
	//
	//	*SqlDropObjectProto_SqlDropTableProto
	//	*SqlDropObjectProto_SqlDropMaterializedViewProto
	//	*SqlDropObjectProto_SqlDropViewProto
	//	*SqlDropObjectProto_SqlDropFunctionProto
	//	*SqlDropObjectProto_SqlDropTypeProto
	SqlDropObjectProto isSqlDropObjectProto_SqlDropObjectProto `protobuf_oneof:"sqlDropObjectProto"`
	Name               *SqlIdentifierProto                     `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	IfExists           bool                                    `protobuf:"varint,7,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator           *SqlOperatorProto                       `protobuf:"bytes,8,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos                *SqlParserPosProto                      `protobuf:"bytes,9,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation    *RelDataTypeProto                       `protobuf:"bytes,10,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropObjectProto) Reset() {
	*x = SqlDropObjectProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[311]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropObjectProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropObjectProto) ProtoMessage() {}

func (x *SqlDropObjectProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[311]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropObjectProto.ProtoReflect.Descriptor instead.
func (*SqlDropObjectProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{311}
}

func (m *SqlDropObjectProto) GetSqlDropObjectProto() isSqlDropObjectProto_SqlDropObjectProto {
	if m != nil {
		return m.SqlDropObjectProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetSqlDropTableProto() *SqlDropTableProto {
	if x, ok := x.GetSqlDropObjectProto().(*SqlDropObjectProto_SqlDropTableProto); ok {
		return x.SqlDropTableProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetSqlDropMaterializedViewProto() *SqlDropMaterializedViewProto {
	if x, ok := x.GetSqlDropObjectProto().(*SqlDropObjectProto_SqlDropMaterializedViewProto); ok {
		return x.SqlDropMaterializedViewProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetSqlDropViewProto() *SqlDropViewProto {
	if x, ok := x.GetSqlDropObjectProto().(*SqlDropObjectProto_SqlDropViewProto); ok {
		return x.SqlDropViewProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetSqlDropFunctionProto() *SqlDropFunctionProto {
	if x, ok := x.GetSqlDropObjectProto().(*SqlDropObjectProto_SqlDropFunctionProto); ok {
		return x.SqlDropFunctionProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetSqlDropTypeProto() *SqlDropTypeProto {
	if x, ok := x.GetSqlDropObjectProto().(*SqlDropObjectProto_SqlDropTypeProto); ok {
		return x.SqlDropTypeProto
	}
	return nil
}

func (x *SqlDropObjectProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropObjectProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropObjectProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropObjectProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropObjectProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlDropObjectProto_SqlDropObjectProto interface {
	isSqlDropObjectProto_SqlDropObjectProto()
}

type SqlDropObjectProto_SqlDropTableProto struct {
	SqlDropTableProto *SqlDropTableProto `protobuf:"bytes,1,opt,name=sqlDropTableProto,proto3,oneof"`
}

type SqlDropObjectProto_SqlDropMaterializedViewProto struct {
	SqlDropMaterializedViewProto *SqlDropMaterializedViewProto `protobuf:"bytes,2,opt,name=sqlDropMaterializedViewProto,proto3,oneof"`
}

type SqlDropObjectProto_SqlDropViewProto struct {
	SqlDropViewProto *SqlDropViewProto `protobuf:"bytes,3,opt,name=sqlDropViewProto,proto3,oneof"`
}

type SqlDropObjectProto_SqlDropFunctionProto struct {
	SqlDropFunctionProto *SqlDropFunctionProto `protobuf:"bytes,4,opt,name=sqlDropFunctionProto,proto3,oneof"`
}

type SqlDropObjectProto_SqlDropTypeProto struct {
	SqlDropTypeProto *SqlDropTypeProto `protobuf:"bytes,5,opt,name=sqlDropTypeProto,proto3,oneof"`
}

func (*SqlDropObjectProto_SqlDropTableProto) isSqlDropObjectProto_SqlDropObjectProto() {}

func (*SqlDropObjectProto_SqlDropMaterializedViewProto) isSqlDropObjectProto_SqlDropObjectProto() {}

func (*SqlDropObjectProto_SqlDropViewProto) isSqlDropObjectProto_SqlDropObjectProto() {}

func (*SqlDropObjectProto_SqlDropFunctionProto) isSqlDropObjectProto_SqlDropObjectProto() {}

func (*SqlDropObjectProto_SqlDropTypeProto) isSqlDropObjectProto_SqlDropObjectProto() {}

// Java Class: org.apache.calcite.sql.ddl.SqlDropTable
type SqlDropTableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,2,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropTableProto) Reset() {
	*x = SqlDropTableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[312]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropTableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropTableProto) ProtoMessage() {}

func (x *SqlDropTableProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[312]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropTableProto.ProtoReflect.Descriptor instead.
func (*SqlDropTableProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{312}
}

func (x *SqlDropTableProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropTableProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropTableProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropTableProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropTableProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlDropMaterializedView
type SqlDropMaterializedViewProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,2,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropMaterializedViewProto) Reset() {
	*x = SqlDropMaterializedViewProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[313]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropMaterializedViewProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropMaterializedViewProto) ProtoMessage() {}

func (x *SqlDropMaterializedViewProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[313]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropMaterializedViewProto.ProtoReflect.Descriptor instead.
func (*SqlDropMaterializedViewProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{313}
}

func (x *SqlDropMaterializedViewProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropMaterializedViewProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropMaterializedViewProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropMaterializedViewProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropMaterializedViewProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlDropView
type SqlDropViewProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,2,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropViewProto) Reset() {
	*x = SqlDropViewProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[314]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropViewProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropViewProto) ProtoMessage() {}

func (x *SqlDropViewProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[314]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropViewProto.ProtoReflect.Descriptor instead.
func (*SqlDropViewProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{314}
}

func (x *SqlDropViewProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropViewProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropViewProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropViewProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropViewProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlDropFunction
type SqlDropFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,2,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropFunctionProto) Reset() {
	*x = SqlDropFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[315]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropFunctionProto) ProtoMessage() {}

func (x *SqlDropFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[315]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlDropFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{315}
}

func (x *SqlDropFunctionProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropFunctionProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropFunctionProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropFunctionProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropFunctionProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlDropType
type SqlDropTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IfExists        bool                `protobuf:"varint,2,opt,name=ifExists,proto3" json:"ifExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,3,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,4,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,5,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDropTypeProto) Reset() {
	*x = SqlDropTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[316]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDropTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDropTypeProto) ProtoMessage() {}

func (x *SqlDropTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[316]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDropTypeProto.ProtoReflect.Descriptor instead.
func (*SqlDropTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{316}
}

func (x *SqlDropTypeProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlDropTypeProto) GetIfExists() bool {
	if x != nil {
		return x.IfExists
	}
	return false
}

func (x *SqlDropTypeProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlDropTypeProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDropTypeProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlCreate
type SqlCreateProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to SqlCreateProto:
	//
	//	*SqlCreateProto_SqlCreateTypeProto
	//	*SqlCreateProto_SqlCreateTableProto
	//	*SqlCreateProto_SqlCreateViewProto
	//	*SqlCreateProto_SqlCreateFunctionProto
	//	*SqlCreateProto_SqlCreateForeignSchemaProto
	//	*SqlCreateProto_SqlCreateSchemaProto
	//	*SqlCreateProto_SqlCreateMaterializedViewProto
	SqlCreateProto  isSqlCreateProto_SqlCreateProto `protobuf_oneof:"sqlCreateProto"`
	Replace         bool                            `protobuf:"varint,8,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                            `protobuf:"varint,9,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto               `protobuf:"bytes,10,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto              `protobuf:"bytes,11,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto               `protobuf:"bytes,12,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateProto) Reset() {
	*x = SqlCreateProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[317]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateProto) ProtoMessage() {}

func (x *SqlCreateProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[317]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateProto.ProtoReflect.Descriptor instead.
func (*SqlCreateProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{317}
}

func (m *SqlCreateProto) GetSqlCreateProto() isSqlCreateProto_SqlCreateProto {
	if m != nil {
		return m.SqlCreateProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateTypeProto() *SqlCreateTypeProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateTypeProto); ok {
		return x.SqlCreateTypeProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateTableProto() *SqlCreateTableProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateTableProto); ok {
		return x.SqlCreateTableProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateViewProto() *SqlCreateViewProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateViewProto); ok {
		return x.SqlCreateViewProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateFunctionProto() *SqlCreateFunctionProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateFunctionProto); ok {
		return x.SqlCreateFunctionProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateForeignSchemaProto() *SqlCreateForeignSchemaProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateForeignSchemaProto); ok {
		return x.SqlCreateForeignSchemaProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateSchemaProto() *SqlCreateSchemaProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateSchemaProto); ok {
		return x.SqlCreateSchemaProto
	}
	return nil
}

func (x *SqlCreateProto) GetSqlCreateMaterializedViewProto() *SqlCreateMaterializedViewProto {
	if x, ok := x.GetSqlCreateProto().(*SqlCreateProto_SqlCreateMaterializedViewProto); ok {
		return x.SqlCreateMaterializedViewProto
	}
	return nil
}

func (x *SqlCreateProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

type isSqlCreateProto_SqlCreateProto interface {
	isSqlCreateProto_SqlCreateProto()
}

type SqlCreateProto_SqlCreateTypeProto struct {
	SqlCreateTypeProto *SqlCreateTypeProto `protobuf:"bytes,1,opt,name=sqlCreateTypeProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateTableProto struct {
	SqlCreateTableProto *SqlCreateTableProto `protobuf:"bytes,2,opt,name=sqlCreateTableProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateViewProto struct {
	SqlCreateViewProto *SqlCreateViewProto `protobuf:"bytes,3,opt,name=sqlCreateViewProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateFunctionProto struct {
	SqlCreateFunctionProto *SqlCreateFunctionProto `protobuf:"bytes,4,opt,name=sqlCreateFunctionProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateForeignSchemaProto struct {
	SqlCreateForeignSchemaProto *SqlCreateForeignSchemaProto `protobuf:"bytes,5,opt,name=sqlCreateForeignSchemaProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateSchemaProto struct {
	SqlCreateSchemaProto *SqlCreateSchemaProto `protobuf:"bytes,6,opt,name=sqlCreateSchemaProto,proto3,oneof"`
}

type SqlCreateProto_SqlCreateMaterializedViewProto struct {
	SqlCreateMaterializedViewProto *SqlCreateMaterializedViewProto `protobuf:"bytes,7,opt,name=sqlCreateMaterializedViewProto,proto3,oneof"`
}

func (*SqlCreateProto_SqlCreateTypeProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateTableProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateViewProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateFunctionProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateForeignSchemaProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateSchemaProto) isSqlCreateProto_SqlCreateProto() {}

func (*SqlCreateProto_SqlCreateMaterializedViewProto) isSqlCreateProto_SqlCreateProto() {}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateType
type SqlCreateTypeProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	AttributeDefs   *SqlNodeListProto     `protobuf:"bytes,2,opt,name=attributeDefs,proto3" json:"attributeDefs,omitempty"`
	DataType        *SqlDataTypeSpecProto `protobuf:"bytes,3,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Replace         bool                  `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                  `protobuf:"varint,5,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto     `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto    `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto     `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateTypeProto) Reset() {
	*x = SqlCreateTypeProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[318]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateTypeProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateTypeProto) ProtoMessage() {}

func (x *SqlCreateTypeProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[318]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateTypeProto.ProtoReflect.Descriptor instead.
func (*SqlCreateTypeProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{318}
}

func (x *SqlCreateTypeProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateTypeProto) GetAttributeDefs() *SqlNodeListProto {
	if x != nil {
		return x.AttributeDefs
	}
	return nil
}

func (x *SqlCreateTypeProto) GetDataType() *SqlDataTypeSpecProto {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *SqlCreateTypeProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateTypeProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateTypeProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateTypeProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateTypeProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateTable
type SqlCreateTableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnList      *SqlNodeListProto   `protobuf:"bytes,2,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Query           *SqlNodeProto       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Replace         bool                `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,5,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateTableProto) Reset() {
	*x = SqlCreateTableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[319]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateTableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateTableProto) ProtoMessage() {}

func (x *SqlCreateTableProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[319]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateTableProto.ProtoReflect.Descriptor instead.
func (*SqlCreateTableProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{319}
}

func (x *SqlCreateTableProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateTableProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlCreateTableProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlCreateTableProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateTableProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateTableProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateTableProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateTableProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateView
type SqlCreateViewProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnList      *SqlNodeListProto   `protobuf:"bytes,2,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Query           *SqlNodeProto       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Replace         bool                `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,5,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateViewProto) Reset() {
	*x = SqlCreateViewProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[320]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateViewProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateViewProto) ProtoMessage() {}

func (x *SqlCreateViewProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[320]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateViewProto.ProtoReflect.Descriptor instead.
func (*SqlCreateViewProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{320}
}

func (x *SqlCreateViewProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateViewProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlCreateViewProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlCreateViewProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateViewProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateViewProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateViewProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateViewProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateFunction
type SqlCreateFunctionProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ClassName       *SqlNodeProto       `protobuf:"bytes,2,opt,name=className,proto3" json:"className,omitempty"`
	UsingList       *SqlNodeListProto   `protobuf:"bytes,3,opt,name=usingList,proto3" json:"usingList,omitempty"`
	Replace         bool                `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,5,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateFunctionProto) Reset() {
	*x = SqlCreateFunctionProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[321]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateFunctionProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateFunctionProto) ProtoMessage() {}

func (x *SqlCreateFunctionProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[321]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateFunctionProto.ProtoReflect.Descriptor instead.
func (*SqlCreateFunctionProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{321}
}

func (x *SqlCreateFunctionProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateFunctionProto) GetClassName() *SqlNodeProto {
	if x != nil {
		return x.ClassName
	}
	return nil
}

func (x *SqlCreateFunctionProto) GetUsingList() *SqlNodeListProto {
	if x != nil {
		return x.UsingList
	}
	return nil
}

func (x *SqlCreateFunctionProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateFunctionProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateFunctionProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateFunctionProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateFunctionProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateForeignSchema
type SqlCreateForeignSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type            *SqlNodeProto       `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Library         *SqlNodeProto       `protobuf:"bytes,3,opt,name=library,proto3" json:"library,omitempty"`
	OptionList      *SqlNodeListProto   `protobuf:"bytes,4,opt,name=optionList,proto3" json:"optionList,omitempty"`
	Replace         bool                `protobuf:"varint,5,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,6,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,7,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,8,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,9,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateForeignSchemaProto) Reset() {
	*x = SqlCreateForeignSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[322]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateForeignSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateForeignSchemaProto) ProtoMessage() {}

func (x *SqlCreateForeignSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[322]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateForeignSchemaProto.ProtoReflect.Descriptor instead.
func (*SqlCreateForeignSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{322}
}

func (x *SqlCreateForeignSchemaProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetType() *SqlNodeProto {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetLibrary() *SqlNodeProto {
	if x != nil {
		return x.Library
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetOptionList() *SqlNodeListProto {
	if x != nil {
		return x.OptionList
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateForeignSchemaProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateForeignSchemaProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateForeignSchemaProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateSchema
type SqlCreateSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Replace         bool                `protobuf:"varint,2,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,3,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,4,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateSchemaProto) Reset() {
	*x = SqlCreateSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[323]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateSchemaProto) ProtoMessage() {}

func (x *SqlCreateSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[323]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateSchemaProto.ProtoReflect.Descriptor instead.
func (*SqlCreateSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{323}
}

func (x *SqlCreateSchemaProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateSchemaProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateSchemaProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateSchemaProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateSchemaProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateSchemaProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlCreateMaterializedView
type SqlCreateMaterializedViewProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	ColumnList      *SqlNodeListProto   `protobuf:"bytes,2,opt,name=columnList,proto3" json:"columnList,omitempty"`
	Query           *SqlNodeProto       `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	Replace         bool                `protobuf:"varint,4,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,5,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,6,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateMaterializedViewProto) Reset() {
	*x = SqlCreateMaterializedViewProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[324]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateMaterializedViewProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateMaterializedViewProto) ProtoMessage() {}

func (x *SqlCreateMaterializedViewProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[324]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateMaterializedViewProto.ProtoReflect.Descriptor instead.
func (*SqlCreateMaterializedViewProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{324}
}

func (x *SqlCreateMaterializedViewProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateMaterializedViewProto) GetColumnList() *SqlNodeListProto {
	if x != nil {
		return x.ColumnList
	}
	return nil
}

func (x *SqlCreateMaterializedViewProto) GetQuery() *SqlNodeProto {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SqlCreateMaterializedViewProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateMaterializedViewProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateMaterializedViewProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateMaterializedViewProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateMaterializedViewProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDescribeSchema
type SqlDescribeSchemaProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Schema          *SqlIdentifierProto `protobuf:"bytes,1,opt,name=schema,proto3" json:"schema,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,3,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDescribeSchemaProto) Reset() {
	*x = SqlDescribeSchemaProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[325]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDescribeSchemaProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDescribeSchemaProto) ProtoMessage() {}

func (x *SqlDescribeSchemaProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[325]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDescribeSchemaProto.ProtoReflect.Descriptor instead.
func (*SqlDescribeSchemaProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{325}
}

func (x *SqlDescribeSchemaProto) GetSchema() *SqlIdentifierProto {
	if x != nil {
		return x.Schema
	}
	return nil
}

func (x *SqlDescribeSchemaProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDescribeSchemaProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlJoin
type SqlJoinProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Left            *SqlNodeProto      `protobuf:"bytes,1,opt,name=left,proto3" json:"left,omitempty"`
	Natural         *SqlLiteralProto   `protobuf:"bytes,2,opt,name=natural,proto3" json:"natural,omitempty"`
	JoinType        *SqlLiteralProto   `protobuf:"bytes,3,opt,name=joinType,proto3" json:"joinType,omitempty"`
	Right           *SqlNodeProto      `protobuf:"bytes,4,opt,name=right,proto3" json:"right,omitempty"`
	ConditionType   *SqlLiteralProto   `protobuf:"bytes,5,opt,name=conditionType,proto3" json:"conditionType,omitempty"`
	Condition       *SqlNodeProto      `protobuf:"bytes,6,opt,name=condition,proto3" json:"condition,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,7,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,8,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlJoinProto) Reset() {
	*x = SqlJoinProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[326]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlJoinProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlJoinProto) ProtoMessage() {}

func (x *SqlJoinProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[326]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlJoinProto.ProtoReflect.Descriptor instead.
func (*SqlJoinProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{326}
}

func (x *SqlJoinProto) GetLeft() *SqlNodeProto {
	if x != nil {
		return x.Left
	}
	return nil
}

func (x *SqlJoinProto) GetNatural() *SqlLiteralProto {
	if x != nil {
		return x.Natural
	}
	return nil
}

func (x *SqlJoinProto) GetJoinType() *SqlLiteralProto {
	if x != nil {
		return x.JoinType
	}
	return nil
}

func (x *SqlJoinProto) GetRight() *SqlNodeProto {
	if x != nil {
		return x.Right
	}
	return nil
}

func (x *SqlJoinProto) GetConditionType() *SqlLiteralProto {
	if x != nil {
		return x.ConditionType
	}
	return nil
}

func (x *SqlJoinProto) GetCondition() *SqlNodeProto {
	if x != nil {
		return x.Condition
	}
	return nil
}

func (x *SqlJoinProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlJoinProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDescribeTable
type SqlDescribeTableProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Table           *SqlIdentifierProto `protobuf:"bytes,1,opt,name=table,proto3" json:"table,omitempty"`
	Column          *SqlIdentifierProto `protobuf:"bytes,2,opt,name=column,proto3" json:"column,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,3,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,4,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDescribeTableProto) Reset() {
	*x = SqlDescribeTableProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[327]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDescribeTableProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDescribeTableProto) ProtoMessage() {}

func (x *SqlDescribeTableProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[327]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDescribeTableProto.ProtoReflect.Descriptor instead.
func (*SqlDescribeTableProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{327}
}

func (x *SqlDescribeTableProto) GetTable() *SqlIdentifierProto {
	if x != nil {
		return x.Table
	}
	return nil
}

func (x *SqlDescribeTableProto) GetColumn() *SqlIdentifierProto {
	if x != nil {
		return x.Column
	}
	return nil
}

func (x *SqlDescribeTableProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDescribeTableProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.ddl.SqlColumnDeclaration
type SqlColumnDeclarationProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	DataType        *SqlDataTypeSpecProto `protobuf:"bytes,2,opt,name=dataType,proto3" json:"dataType,omitempty"`
	Expression      *SqlNodeProto         `protobuf:"bytes,3,opt,name=expression,proto3" json:"expression,omitempty"`
	Strategy        ColumnStrategyProto   `protobuf:"varint,4,opt,name=strategy,proto3,enum=rill.sql.v1.ColumnStrategyProto" json:"strategy,omitempty"`
	Pos             *SqlParserPosProto    `protobuf:"bytes,5,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto     `protobuf:"bytes,6,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlColumnDeclarationProto) Reset() {
	*x = SqlColumnDeclarationProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[328]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlColumnDeclarationProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlColumnDeclarationProto) ProtoMessage() {}

func (x *SqlColumnDeclarationProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[328]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlColumnDeclarationProto.ProtoReflect.Descriptor instead.
func (*SqlColumnDeclarationProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{328}
}

func (x *SqlColumnDeclarationProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlColumnDeclarationProto) GetDataType() *SqlDataTypeSpecProto {
	if x != nil {
		return x.DataType
	}
	return nil
}

func (x *SqlColumnDeclarationProto) GetExpression() *SqlNodeProto {
	if x != nil {
		return x.Expression
	}
	return nil
}

func (x *SqlColumnDeclarationProto) GetStrategy() ColumnStrategyProto {
	if x != nil {
		return x.Strategy
	}
	return ColumnStrategyProto_ColumnStrategyProto_NULLABLE_
}

func (x *SqlColumnDeclarationProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlColumnDeclarationProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: org.apache.calcite.sql.SqlDynamicParam
type SqlDynamicParamProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Index           int32              `protobuf:"zigzag32,1,opt,name=index,proto3" json:"index,omitempty"`
	Pos             *SqlParserPosProto `protobuf:"bytes,2,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto  `protobuf:"bytes,3,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlDynamicParamProto) Reset() {
	*x = SqlDynamicParamProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[329]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlDynamicParamProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlDynamicParamProto) ProtoMessage() {}

func (x *SqlDynamicParamProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[329]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlDynamicParamProto.ProtoReflect.Descriptor instead.
func (*SqlDynamicParamProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{329}
}

func (x *SqlDynamicParamProto) GetIndex() int32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *SqlDynamicParamProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlDynamicParamProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: com.rilldata.calcite.extensions.SqlCreateMetricsView
type SqlCreateMetricsViewProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto      `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Dimensions      *SqlNodeListProto        `protobuf:"bytes,2,opt,name=dimensions,proto3" json:"dimensions,omitempty"`
	Measures        *SqlNodeListProto        `protobuf:"bytes,3,opt,name=measures,proto3" json:"measures,omitempty"`
	From            *SqlNodeProto            `protobuf:"bytes,4,opt,name=from,proto3" json:"from,omitempty"`
	DimensionsMap   map[string]*SqlNodeProto `protobuf:"bytes,5,rep,name=dimensionsMap,proto3" json:"dimensionsMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	MeasuresMap     map[string]*SqlNodeProto `protobuf:"bytes,6,rep,name=measuresMap,proto3" json:"measuresMap,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Replace         bool                     `protobuf:"varint,7,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                     `protobuf:"varint,8,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto        `protobuf:"bytes,9,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto       `protobuf:"bytes,10,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto        `protobuf:"bytes,11,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateMetricsViewProto) Reset() {
	*x = SqlCreateMetricsViewProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[330]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateMetricsViewProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateMetricsViewProto) ProtoMessage() {}

func (x *SqlCreateMetricsViewProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[330]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateMetricsViewProto.ProtoReflect.Descriptor instead.
func (*SqlCreateMetricsViewProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{330}
}

func (x *SqlCreateMetricsViewProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetDimensions() *SqlNodeListProto {
	if x != nil {
		return x.Dimensions
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetMeasures() *SqlNodeListProto {
	if x != nil {
		return x.Measures
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetFrom() *SqlNodeProto {
	if x != nil {
		return x.From
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetDimensionsMap() map[string]*SqlNodeProto {
	if x != nil {
		return x.DimensionsMap
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetMeasuresMap() map[string]*SqlNodeProto {
	if x != nil {
		return x.MeasuresMap
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateMetricsViewProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateMetricsViewProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateMetricsViewProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

// Java Class: com.rilldata.calcite.extensions.SqlCreateSource
type SqlCreateSourceProto struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name            *SqlIdentifierProto `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Properties      map[string]string   `protobuf:"bytes,2,rep,name=properties,proto3" json:"properties,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Replace         bool                `protobuf:"varint,3,opt,name=replace,proto3" json:"replace,omitempty"`
	IfNotExists     bool                `protobuf:"varint,4,opt,name=ifNotExists,proto3" json:"ifNotExists,omitempty"`
	Operator        *SqlOperatorProto   `protobuf:"bytes,5,opt,name=operator,proto3" json:"operator,omitempty"`
	Pos             *SqlParserPosProto  `protobuf:"bytes,6,opt,name=pos,proto3" json:"pos,omitempty"`
	TypeInformation *RelDataTypeProto   `protobuf:"bytes,7,opt,name=typeInformation,proto3" json:"typeInformation,omitempty"`
}

func (x *SqlCreateSourceProto) Reset() {
	*x = SqlCreateSourceProto{}
	if protoimpl.UnsafeEnabled {
		mi := &file_sql_src_main_proto_ast_proto_msgTypes[331]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SqlCreateSourceProto) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SqlCreateSourceProto) ProtoMessage() {}

func (x *SqlCreateSourceProto) ProtoReflect() protoreflect.Message {
	mi := &file_sql_src_main_proto_ast_proto_msgTypes[331]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SqlCreateSourceProto.ProtoReflect.Descriptor instead.
func (*SqlCreateSourceProto) Descriptor() ([]byte, []int) {
	return file_sql_src_main_proto_ast_proto_rawDescGZIP(), []int{331}
}

func (x *SqlCreateSourceProto) GetName() *SqlIdentifierProto {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *SqlCreateSourceProto) GetProperties() map[string]string {
	if x != nil {
		return x.Properties
	}
	return nil
}

func (x *SqlCreateSourceProto) GetReplace() bool {
	if x != nil {
		return x.Replace
	}
	return false
}

func (x *SqlCreateSourceProto) GetIfNotExists() bool {
	if x != nil {
		return x.IfNotExists
	}
	return false
}

func (x *SqlCreateSourceProto) GetOperator() *SqlOperatorProto {
	if x != nil {
		return x.Operator
	}
	return nil
}

func (x *SqlCreateSourceProto) GetPos() *SqlParserPosProto {
	if x != nil {
		return x.Pos
	}
	return nil
}

func (x *SqlCreateSourceProto) GetTypeInformation() *RelDataTypeProto {
	if x != nil {
		return x.TypeInformation
	}
	return nil
}

var File_sql_src_main_proto_ast_proto protoreflect.FileDescriptor

var file_sql_src_main_proto_ast_proto_rawDesc = []byte{
	0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x2f, 0x73, 0x72, 0x63, 0x2f, 0x6d, 0x61, 0x69, 0x6e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x61, 0x73, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x22, 0x8a, 0x09, 0x0a, 0x10,
	0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x61, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x43,
	0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x11, 0x72, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x72, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x64, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a,
	0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a,
	0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x51, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x93, 0x09, 0x0a, 0x14, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65,
	0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x72, 0x65,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4e, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x57, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x6a,
	0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61,
	0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x40, 0x0a, 0x09,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd2,
	0x05, 0x0a, 0x14, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x4e, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x69, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x69,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62,
	0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c,
	0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x16, 0x0a, 0x14, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8c, 0x02, 0x0a, 0x14, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0b,
	0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19,
	0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x72, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x49, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x17, 0x0a, 0x15, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x78, 0x0a,
	0x19, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x22, 0x89, 0x02, 0x0a, 0x11, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a,
	0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0b, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0xbc, 0x02, 0x0a, 0x0f, 0x4d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3b, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0xce, 0x03, 0x0a, 0x11, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x43, 0x0a, 0x0a,
	0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4d, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65,
	0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62,
	0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x39,
	0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69,
	0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x22, 0x85, 0x02, 0x0a, 0x16, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69,
	0x0a, 0x1a, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x72,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x64, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69,
	0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x18, 0x0a, 0x16, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1c, 0x0a, 0x1a, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x60, 0x0a, 0x19, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0x82, 0x03, 0x0a, 0x11,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x51, 0x0a, 0x12, 0x6a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61,
	0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x6a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c,
	0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x64, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x6f, 0x63,
	0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73,
	0x74, 0x72, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x65, 0x72,
	0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x63,
	0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x73,
	0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd3, 0x02, 0x0a, 0x12, 0x4a, 0x61, 0x76, 0x61, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64,
	0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x68, 0x61,
	0x72, 0x73, 0x65, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x74, 0x72, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x12, 0x42, 0x0a, 0x0c, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x63, 0x6f, 0x65, 0x72, 0x63, 0x69,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x22, 0x0f, 0x0a, 0x0d, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x71, 0x0a, 0x18, 0x53, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x61, 0x62, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72,
	0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x0e, 0x0a, 0x0c, 0x43, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0d, 0x0a, 0x0b, 0x4c, 0x6f,
	0x63, 0x61, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x02, 0x0a, 0x14, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x54, 0x0a, 0x11, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x69, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x39, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c,
	0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65,
	0x73, 0x74, 0x22, 0xc3, 0x02, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x26, 0x0a, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x45, 0x0a, 0x0d, 0x74, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0d, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x3c, 0x0a, 0x19, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65, 0x63,
	0x6f, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x19, 0x66, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x53, 0x65,
	0x63, 0x6f, 0x6e, 0x64, 0x50, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12,
	0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa7, 0x01, 0x0a, 0x11, 0x53, 0x71, 0x6c,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x22,
	0x0a, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0d, 0x65, 0x6e, 0x64, 0x4c, 0x69,
	0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x65, 0x6e, 0x64, 0x43,
	0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x0f, 0x65, 0x6e, 0x64, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x22, 0x9f, 0x03, 0x0a, 0x12, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x50, 0x0a, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x12, 0x3b, 0x0a, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x12,
	0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73,
	0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69,
	0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x22, 0xb3, 0x02, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x4e, 0x0a, 0x12, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x6e, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe9, 0x09, 0x0a, 0x16, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51,
	0x0a, 0x12, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x57, 0x0a, 0x14, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x72, 0x65,
	0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x72, 0x65, 0x6c, 0x43, 0x72, 0x6f, 0x73,
	0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x72, 0x65,
	0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61,
	0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x14, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x11, 0x61, 0x72, 0x72, 0x61, 0x79, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x61, 0x70,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f,
	0x6d, 0x61, 0x70, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4e, 0x0a, 0x11, 0x62, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x62, 0x61,
	0x73, 0x69, 0x63, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x57, 0x0a, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x14, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x6f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x6a,
	0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61,
	0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x18, 0x0a, 0x16,
	0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa2, 0x01, 0x0a, 0x11, 0x52, 0x65, 0x6c, 0x43, 0x72,
	0x6f, 0x73, 0x73, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x05,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0xe4, 0x03, 0x0a, 0x12,
	0x52, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61,
	0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x13, 0x6a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x55, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x69,
	0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x63, 0x0a, 0x11, 0x46, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x38,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x42, 0x14, 0x0a, 0x12,
	0x72, 0x65, 0x6c, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa9, 0x03, 0x0a, 0x13, 0x4a, 0x61, 0x76, 0x61, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x05, 0x63, 0x6c,
	0x61, 0x7a, 0x7a, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x7a, 0x7a, 0x12, 0x30, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x56, 0x0a, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x46, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0c, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x12,
	0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x1a, 0x63, 0x0a, 0x11, 0x46, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10,
	0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79,
	0x12, 0x38, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x0c,
	0x0a, 0x0a, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xf7, 0x01, 0x0a,
	0x16, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x42, 0x18, 0x0a, 0x16,
	0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x01, 0x0a, 0x1a, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48,
	0x6f, 0x6c, 0x64, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x68, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x12, 0x40, 0x0a, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x9c, 0x01, 0x0a,
	0x16, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x06, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x73, 0x12, 0x46, 0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x74, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x22, 0xc2, 0x03, 0x0a, 0x17,
	0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x6a, 0x61, 0x76, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x6a, 0x61, 0x76, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6c, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1b, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x93, 0x01, 0x0a, 0x14, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x6a, 0x61, 0x76,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x16,
	0x0a, 0x14, 0x6a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5f, 0x0a, 0x18, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x22, 0xc8, 0x02, 0x0a, 0x1b, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x6a, 0x61, 0x76,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a, 0x61, 0x76, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43,
	0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x42, 0x1d, 0x0a, 0x1b, 0x72, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xde, 0x01, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72,
	0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4a,
	0x61, 0x76, 0x61, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6a, 0x61, 0x76, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0a, 0x74, 0x79, 0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x79,
	0x70, 0x65, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x42, 0x19, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xeb, 0x29, 0x0a, 0x0c, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x51, 0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x51,
	0x75, 0x61, 0x6c, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x44, 0x79,
	0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x44,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c,
	0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65,
	0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x43, 0x61,
	0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x43,
	0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x0e, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f,
	0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f,
	0x73, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x70,
	0x6c, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c,
	0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10,
	0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x71, 0x6c,
	0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x4d, 0x65, 0x72,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x48, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52,
	0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69,
	0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71,
	0x6c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x73,
	0x71, 0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x71,
	0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x4a,
	0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c,
	0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x63,
	0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d,
	0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x24, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11,
	0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x28, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a,
	0x0e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x19, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x2f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51,
	0x0a, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x3a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57,
	0x0a, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d,
	0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x98, 0x1d, 0x0a, 0x0c, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c,
	0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x0e, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x6c,
	0x65, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71,
	0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x0d, 0x73, 0x71, 0x6c, 0x50, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b,
	0x0a, 0x10, 0x73, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73,
	0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x15, 0x73, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69,
	0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x53,
	0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73, 0x68, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f,
	0x73, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a,
	0x1b, 0x73, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x73,
	0x71, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x70,
	0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x71, 0x6c,
	0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x42, 0x0a, 0x0d,
	0x73, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x42, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x41, 0x6c, 0x74, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66,
	0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51,
	0x0a, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65,
	0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a,
	0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x25,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1b, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a,
	0x14, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a,
	0x11, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a,
	0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x29, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61,
	0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b,
	0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c,
	0x73, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x04, 0x0a,
	0x0e, 0x53, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x49, 0x0a, 0x10,
	0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x10, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x45, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f,
	0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbc, 0x01, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x6c,
	0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xea, 0x05, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x6b, 0x65, 0x79, 0x77,
	0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x6b, 0x65,
	0x79, 0x77, 0x6f, 0x72, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x0a, 0x73, 0x65, 0x6c,
	0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x2f, 0x0a, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x77, 0x68, 0x65, 0x72, 0x65, 0x12, 0x37, 0x0a, 0x07, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x42, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x42,
	0x79, 0x12, 0x31, 0x0a, 0x06, 0x68, 0x61, 0x76, 0x69, 0x6e, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x68, 0x61,
	0x76, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x44, 0x65,
	0x63, 0x6c, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x44, 0x65, 0x63, 0x6c, 0x73, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x12, 0x31,
	0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65,
	0x74, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65, 0x74,
	0x63, 0x68, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xf5, 0x02, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6b, 0x65, 0x79, 0x77, 0x6f, 0x72, 0x64, 0x73,
	0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x31, 0x0a,
	0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x02, 0x0a, 0x0c, 0x53,
	0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x39, 0x0a, 0x08,
	0x77, 0x68, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x77,
	0x68, 0x65, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x68, 0x65, 0x6e, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x68, 0x65, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x65, 0x6c, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x65, 0x6c, 0x73, 0x65, 0x45, 0x78, 0x70, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a,
	0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x35,
	0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x84, 0x02, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe6, 0x02, 0x0a, 0x0d, 0x53, 0x71, 0x6c, 0x50,
	0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x37, 0x0a, 0x07, 0x61, 0x67,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x61, 0x67, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x35,
	0x0a, 0x06, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x69,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x81, 0x02, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x0a, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x33, 0x0a, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x68, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x86, 0x02, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x65, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x61, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x01,
	0x0a, 0x0c, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39,
	0x0a, 0x08, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x77, 0x69, 0x74, 0x68, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2d, 0x0a, 0x04, 0x62, 0x6f, 0x64,
	0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x62, 0x6f, 0x64, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xf7, 0x01, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x53, 0x6e, 0x61, 0x70, 0x73,
	0x68, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x12,
	0x31, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xde, 0x02,
	0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65,
	0x72, 0x79, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x31, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x66, 0x65, 0x74, 0x63, 0x68, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x66, 0x65,
	0x74, 0x63, 0x68, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xae,
	0x05, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x3b, 0x0a, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x64, 0x65, 0x63, 0x6c, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x07, 0x72, 0x65, 0x66, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x70, 0x61, 0x72,
	0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3b,
	0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x69,
	0x73, 0x52, 0x6f, 0x77, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x69, 0x73, 0x52, 0x6f, 0x77,
	0x73, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0a, 0x6c, 0x6f, 0x77, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x39, 0x0a, 0x0a,
	0x75, 0x70, 0x70, 0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x75, 0x70, 0x70,
	0x65, 0x72, 0x42, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x12, 0x39, 0x0a, 0x0a, 0x77, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x6f, 0x77,
	0x43, 0x61, 0x6c, 0x6c, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0x86, 0x09, 0x0a, 0x0f, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69,
	0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x4e,
	0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1f, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73,
	0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x44,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x11, 0x0a, 0x0f, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa8, 0x02, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x4e, 0x75, 0x6d, 0x65, 0x72, 0x69, 0x63, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x72, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x04, 0x70, 0x72, 0x65, 0x63, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x69, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07,
	0x69, 0x73, 0x45, 0x78, 0x61, 0x63, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe2, 0x03, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72,
	0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1f, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x01, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x01, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe1,
	0x04, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a,
	0x13, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13,
	0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42,
	0x21, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xa1, 0x02, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xa6, 0x02, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x69, 0x6d,
	0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa1, 0x02, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x68, 0x61,
	0x73, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65,
	0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72,
	0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x01, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x39, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x03, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x41, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x3d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x39, 0x0a, 0x0a, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a,
	0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x09, 0x63, 0x6f,
	0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63,
	0x6f, 0x6c, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xac, 0x02, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0c,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x22, 0xd2, 0x05, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73,
	0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17,
	0x73, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69,
	0x63, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x6c, 0x69,
	0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1f, 0x73, 0x71, 0x6c, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x3b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a,
	0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73,
	0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x42,
	0x16, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x90, 0x01, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x8c, 0x02, 0x0a, 0x17, 0x53,
	0x71, 0x6c, 0x52, 0x6f, 0x77, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65,
	0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x66, 0x69, 0x65,
	0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a,
	0x66, 0x69, 0x65, 0x6c, 0x64, 0x54, 0x79, 0x70, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xb8, 0x03, 0x0a, 0x19, 0x53, 0x71,
	0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70,
	0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x6c,
	0x69, 0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1f, 0x73, 0x71, 0x6c, 0x41, 0x6c, 0x69, 0x65, 0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x53, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x63, 0x68, 0x61,
	0x72, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x74, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x42, 0x1b, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc5, 0x02, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x41, 0x6c, 0x69, 0x65,
	0x6e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x79, 0x70,
	0x65, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x73, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x63, 0x69,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x70, 0x72, 0x65, 0x63,
	0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x73, 0x63, 0x61, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x68, 0x61, 0x72, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x53, 0x65, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0xab, 0x02, 0x0a,
	0x1e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4b, 0x0a, 0x0f, 0x65, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x65, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x4d, 0x0a, 0x12,
	0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x63, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x08, 0x74,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x22, 0x0f, 0x0a, 0x0d, 0x54, 0x69,
	0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9, 0x03, 0x0a, 0x0f,
	0x53, 0x71, 0x6c, 0x45, 0x78, 0x70, 0x6c, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3b, 0x0a, 0x0b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x64, 0x75, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x6e, 0x64, 0x75, 0x6d, 0x12, 0x3e, 0x0a, 0x0b,
	0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x64, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x12, 0x32, 0x0a, 0x05,
	0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74,
	0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68,
	0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69,
	0x63, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x15, 0x64, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb2, 0x02, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x94, 0x03, 0x0a,
	0x0f, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x70, 0x69, 0x76, 0x6f, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x4e, 0x75, 0x6c, 0x6c,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x4e, 0x75, 0x6c, 0x6c, 0x73, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x61, 0x78, 0x69, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x35, 0x0a, 0x06, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x06, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0xa5, 0x04, 0x0a, 0x0d, 0x53, 0x71, 0x6c, 0x4d, 0x65, 0x72, 0x67, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x06, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x3b,
	0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3b, 0x0a, 0x0a, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x73, 0x6f, 0x75,
	0x72, 0x63, 0x65, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x35, 0x0a, 0x05, 0x61, 0x6c, 0x69,
	0x61, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73,
	0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50,
	0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70,
	0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xbf, 0x02, 0x0a, 0x0c,
	0x53, 0x71, 0x6c, 0x48, 0x69, 0x6e, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x37, 0x0a, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x46, 0x0a, 0x0c, 0x6f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd4, 0x02,
	0x0a, 0x11, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3b,
	0x0a, 0x0b, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4c, 0x0a, 0x12, 0x66,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x51,
	0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0xf3, 0x6d, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c,
	0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69,
	0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x71, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x44,
	0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x6f, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69,
	0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71,
	0x6c, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x10, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73,
	0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x6e,
	0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71,
	0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65,
	0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c,
	0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73,
	0x71, 0x6c, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71,
	0x6c, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72,
	0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64,
	0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65,
	0x64, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78,
	0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a,
	0x73, 0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c,
	0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x64,
	0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x64, 0x62, 0x63, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x64, 0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d,
	0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60,
	0x0a, 0x17, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65,
	0x33, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x33,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x33, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73,
	0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c,
	0x69, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41,
	0x64, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73,
	0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71,
	0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x76,
	0x65, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73,
	0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f,
	0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1d, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64,
	0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d,
	0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67,
	0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a,
	0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b,
	0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x2e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c,
	0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x30, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63,
	0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f,
	0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f,
	0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x32, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x53, 0x69, 0x7a, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x33,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x34, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61,
	0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x37, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x4d,
	0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x42,
	0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x39, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73,
	0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a,
	0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73,
	0x71, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73,
	0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69,
	0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x78, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x69,
	0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69,
	0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74,
	0x68, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x4c,
	0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71,
	0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x42,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x44, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x43, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c,
	0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x44, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71,
	0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73,
	0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x46, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1d, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x47, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a,
	0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x49, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x44,
	0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x44, 0x6f,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a,
	0x0a, 0x15, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54,
	0x68, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x4c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x4d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x66,
	0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x4e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12,
	0x73, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x4f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d,
	0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x51, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f,
	0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x52, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x19, 0x73, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71,
	0x6c, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x53, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c,
	0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x84, 0x01, 0x0a, 0x23, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x54, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x23, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53,
	0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x4e, 0x75,
	0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x55, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71,
	0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73,
	0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x56, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44,
	0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x57, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73,
	0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56,
	0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e,
	0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x58,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65,
	0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x59, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18,
	0x73, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41,
	0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x75,
	0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19,
	0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c,
	0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16,
	0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x5f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x76,
	0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73,
	0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x60, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71,
	0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x61, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75,
	0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x62, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x63, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x21, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74,
	0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x64, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x67,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x65, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x20, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x67, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x68, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x48, 0x69, 0x73,
	0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x69, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x48, 0x69,
	0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x52, 0x61,
	0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x6a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x52,
	0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x6b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73,
	0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x6c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42,
	0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x6d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f,
	0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x6e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x6f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x48,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x70, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x71, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x72, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x73, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d,
	0x61, 0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x74, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1f, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x75, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x6e,
	0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x76, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65,
	0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x77, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75,
	0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x78, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x79, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x53,
	0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c,
	0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e,
	0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7c, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73,
	0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b,
	0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73,
	0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x7f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6a, 0x0a,
	0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x80, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73,
	0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x64, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x81, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69,
	0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x13, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x82, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x83, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1b, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x84, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1d, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x85,
	0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5b, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x86, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5e, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x87, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x58, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x88, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2d, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x89, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbb, 0x05, 0x0a, 0x16, 0x53,
	0x71, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x4e, 0x65, 0x77, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x4e, 0x65, 0x77, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73,
	0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x61, 0x6c,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1d, 0x73, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x18,
	0x0a, 0x16, 0x73, 0x71, 0x6c, 0x50, 0x72, 0x65, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd4, 0x03, 0x0a, 0x13, 0x53, 0x71, 0x6c,
	0x4e, 0x65, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x99, 0x07, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f,
	0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63,
	0x69, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x63, 0x75, 0x72, 0x73, 0x6f, 0x72, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x63, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61,
	0x73, 0x63, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43,
	0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x6d,
	0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1d, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x8a, 0x01, 0x0a, 0x25, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x25, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1d, 0x0a, 0x1b,
	0x73, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x20, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x43, 0x68, 0x61, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3e, 0x0a, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72, 0x75, 0x6c, 0x65, 0x73, 0x22,
	0x3b, 0x0a, 0x1f, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x22, 0x95, 0x02, 0x0a,
	0x20, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x8a, 0x01, 0x0a, 0x25, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x25, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x40,
	0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65,
	0x42, 0x22, 0x0a, 0x20, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x01, 0x0a, 0x25, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x4a,
	0x0a, 0x0e, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x73,
	0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x69, 0x73, 0x50, 0x61, 0x73, 0x73, 0x74, 0x68, 0x72, 0x6f, 0x75, 0x67, 0x68,
	0x12, 0x40, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x54, 0x79,
	0x70, 0x65, 0x22, 0x99, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d,
	0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x0d, 0x69, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x6c,
	0x12, 0x22, 0x0a, 0x0c, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0c, 0x69, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x65, 0x72, 0x69, 0x76, 0x65, 0x64, 0x22, 0x17,
	0x0a, 0x15, 0x52, 0x65, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3a, 0x0a, 0x1e, 0x43, 0x75, 0x72, 0x73, 0x6f,
	0x72, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x6f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x07, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x61, 0x6c, 0x22, 0xa0, 0x01, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x43, 0x61, 0x73, 0x63, 0x61, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x04, 0x72, 0x75, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x72, 0x75,
	0x6c, 0x65, 0x12, 0x42, 0x0a, 0x0a, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x73, 0x22, 0x17, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x72, 0x0a, 0x1d, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x05, 0x73, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x22, 0xbe, 0x01, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x21, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1e, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x62, 0x0a, 0x21, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x22, 0xeb, 0x0d, 0x0a, 0x1a, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x65, 0x74,
	0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65,
	0x74, 0x6f, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x65, 0x78,
	0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x78, 0x70, 0x6c, 0x69, 0x63, 0x69, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x20, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x21,
	0x61, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x63,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a,
	0x1e, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x8d, 0x01, 0x0a, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x26,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x9f, 0x01, 0x0a, 0x2c, 0x73, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x2c, 0x73, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x99, 0x01, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9b, 0x02, 0x0a, 0x18, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x48, 0x0a, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x73, 0x46, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79, 0x70,
	0x65, 0x73, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x79, 0x12, 0x3f, 0x0a, 0x0b, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6e, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x70,
	0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x46, 0x6e, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66,
	0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x22, 0x0f, 0x0a, 0x0d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x12, 0x0a, 0x10, 0x49, 0x6e, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x10, 0x0a, 0x0e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1e, 0x0a, 0x1c, 0x53, 0x65, 0x74, 0x6f, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x54, 0x0a, 0x1f, 0x45, 0x78, 0x70, 0x6c, 0x69,
	0x63, 0x69, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0xb6, 0x07,
	0x0a, 0x20, 0x53, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x6c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x6c, 0x69, 0x74, 0x65, 0x72,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x8d, 0x01, 0x0a, 0x26,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f,
	0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x9f, 0x01, 0x0a, 0x2c,
	0x73, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x2c, 0x73, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a,
	0x21, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a,
	0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x22, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x1e, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x4e, 0x75, 0x6c, 0x6c, 0x22, 0xfc, 0x02, 0x0a, 0x1b, 0x53, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x9f, 0x01, 0x0a, 0x2c, 0x73, 0x61, 0x6d, 0x65, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x2c, 0x73, 0x61, 0x6d, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x4c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x63, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x6c,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x73, 0x61, 0x6d, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7e, 0x0a, 0x2c, 0x53, 0x61, 0x6d, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x4c, 0x61,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x13, 0x6c, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0xe4, 0x01, 0x0a, 0x21, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x15, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x15, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x3f, 0x0a,
	0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x22, 0x9b, 0x02, 0x0a,
	0x1d, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x3b, 0x0a, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66, 0x61, 0x6d, 0x69, 0x6c, 0x69, 0x65, 0x73,
	0x12, 0x37, 0x0a, 0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x42, 0x1f, 0x0a, 0x1d, 0x66, 0x61, 0x6d,
	0x69, 0x6c, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01, 0x0a, 0x26, 0x43,
	0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0x1b, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x82, 0x01, 0x0a, 0x21, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3d, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54, 0x79,
	0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x4e,
	0x61, 0x6d, 0x65, 0x73, 0x22, 0x21, 0x0a, 0x1f, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x83, 0x03, 0x0a, 0x20, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x8d, 0x01, 0x0a,
	0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x26, 0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x05,
	0x72, 0x61, 0x6e, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x3f, 0x0a, 0x0b, 0x63, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x63, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20, 0x63, 0x6f, 0x6d,
	0x70, 0x6f, 0x73, 0x69, 0x74, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x03,
	0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x64, 0x75, 0x72, 0x65, 0x43, 0x61,
	0x6c, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdb,
	0x03, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x6f, 0x72,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfa, 0x04, 0x0a,
	0x17, 0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x73, 0x71, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x19,
	0x0a, 0x17, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x74, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe4, 0x03, 0x0a, 0x23, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x45, 0x78, 0x70, 0x72, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xef, 0x40, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65,
	0x73, 0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73,
	0x6f, 0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f, 0x6c,
	0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x64, 0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x64, 0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x4a, 0x64, 0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x6c, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x45, 0x78,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x17, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x33, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x33, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x61,
	0x6e, 0x73, 0x6c, 0x61, 0x74, 0x65, 0x33, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a,
	0x19, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x53,
	0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x74, 0x68,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a,
	0x1c, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1c, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57,
	0x0a, 0x14, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61,
	0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x61, 0x6c, 0x65, 0x73, 0x63, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x50, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69,
	0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c,
	0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x69,
	0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c,
	0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65,
	0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73,
	0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61,
	0x73, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x50,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52,
	0x65, 0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f,
	0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73,
	0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a,
	0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64,
	0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x49,
	0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x44, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x24, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69,
	0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x65,
	0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x52,
	0x65, 0x67, 0x65, 0x78, 0x70, 0x52, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c,
	0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x26, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61, 0x72,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1e, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e,
	0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x53,
	0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69,
	0x73, 0x74, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73,
	0x74, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a,
	0x20, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66,
	0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71,
	0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61,
	0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74,
	0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1d, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75,
	0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x2c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61,
	0x72, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x2d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2e, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67,
	0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x2f,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c,
	0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x30, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x19, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73,
	0x71, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x31, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x32, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d,
	0x0a, 0x16, 0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x33, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a,
	0x1b, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x34, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73,
	0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x35, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42,
	0x61, 0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x36, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c, 0x53, 0x75,
	0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x37, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65,
	0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x69,
	0x73, 0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x38, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x61,
	0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x39,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74,
	0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x48,
	0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x3d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c,
	0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c,
	0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x3e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71,
	0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x3f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x40, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x74,
	0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x41, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x42, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x43, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71,
	0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x46, 0x6c, 0x6f,
	0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x44, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x45, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49,
	0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x46,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x48, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x4a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x4b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x4c, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x4d,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x4e, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x4f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x50, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x51, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x52, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x12,
	0x0a, 0x10, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x72, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xf9, 0x05, 0x0a, 0x18, 0x53,
	0x71, 0x6c, 0x4a, 0x64, 0x62, 0x63, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x6c, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x6a, 0x64, 0x62, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x6a, 0x64, 0x62, 0x63, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x6c,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x6c, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0a, 0x6c, 0x6f, 0x6f, 0x6b, 0x75, 0x70, 0x43, 0x61, 0x6c, 0x6c, 0x12, 0x3d,
	0x0a, 0x0c, 0x74, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0c, 0x74, 0x68, 0x69, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa6, 0x05, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3c, 0x0a, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xd0, 0x01, 0x0a, 0x0f, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72,
	0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x76, 0x69, 0x65,
	0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x11, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x8c, 0x01, 0x0a, 0x13, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72,
	0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0a,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x22, 0x0d, 0x0a, 0x0b, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0x18, 0x0a, 0x16, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x56,
	0x69, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x69, 0x65, 0x77, 0x53, 0x71, 0x6c, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x07, 0x76, 0x69, 0x65, 0x77, 0x53, 0x71, 0x6c, 0x12, 0x37, 0x0a, 0x06,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x69, 0x61,
	0x62, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x69, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x61, 0x74, 0x68, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x61, 0x74, 0x68, 0x12, 0x1a, 0x0a, 0x08, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x74,
	0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x76, 0x69, 0x65, 0x77, 0x50, 0x61, 0x74,
	0x68, 0x22, 0x89, 0x07, 0x0a, 0x12, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43,
	0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a,
	0x19, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x63, 0x61, 0x63, 0x68,
	0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65,
	0x52, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x63, 0x61,
	0x6c, 0x63, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61,
	0x70, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a,
	0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4d, 0x61, 0x70, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x42, 0x14, 0x0a, 0x12, 0x63, 0x61, 0x6c, 0x63, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x04,
	0x0a, 0x18, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x06, 0x70, 0x61,
	0x72, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70, 0x61, 0x72,
	0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70,
	0x12, 0x40, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07,
	0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61,
	0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6e, 0x75, 0x6c, 0x6c,
	0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x3d,
	0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x22, 0xf7, 0x02,
	0x0a, 0x0b, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a,
	0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x6c, 0x75, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x6c,
	0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x64, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x64, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x65, 0x6d,
	0x69, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6d, 0x69, 0x4d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x16, 0x73, 0x65, 0x6d, 0x69, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68,
	0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x11, 0x0a, 0x0f, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x6c, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x49, 0x0a, 0x15, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x22, 0x15, 0x0a, 0x13, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16,
	0x53, 0x65, 0x6d, 0x69, 0x4d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x0e, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x40, 0x0a, 0x11, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2b, 0x0a, 0x03, 0x6d,
	0x61, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x03, 0x6d, 0x61, 0x70, 0x22, 0x3f, 0x0a, 0x0c, 0x4e, 0x61, 0x6d, 0x65,
	0x53, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2f, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xe0, 0x05, 0x0a, 0x19, 0x43, 0x61,
	0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x63, 0x61, 0x6c, 0x63, 0x69,
	0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f,
	0x74, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16,
	0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63, 0x69,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x70,
	0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61, 0x74,
	0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65,
	0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69, 0x63,
	0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x65,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x72, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6e, 0x75,
	0x6c, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70,
	0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70, 0x42,
	0x1b, 0x0a, 0x19, 0x63, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x67, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe1, 0x04, 0x0a,
	0x16, 0x43, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x52, 0x6f, 0x6f, 0x74, 0x53, 0x63, 0x68, 0x65,
	0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x63, 0x61, 0x63, 0x68, 0x65, 0x12, 0x37, 0x0a,
	0x06, 0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c, 0x63,
	0x69, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06,
	0x70, 0x61, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x30, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a, 0x08,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x12, 0x40, 0x0a, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d,
	0x61, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x12, 0x33, 0x0a, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x07, 0x74, 0x79, 0x70, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x39, 0x0a, 0x0a, 0x6c, 0x61,
	0x74, 0x74, 0x69, 0x63, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d,
	0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6c, 0x61, 0x74, 0x74, 0x69,
	0x63, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x3f, 0x0a, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x53,
	0x65, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x12, 0x6e, 0x75, 0x6c, 0x6c, 0x61, 0x72,
	0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61, 0x70, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6e,
	0x75, 0x6c, 0x6c, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4d, 0x61,
	0x70, 0x12, 0x3d, 0x0a, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61,
	0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0c, 0x73, 0x75, 0x62, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x4d, 0x61, 0x70,
	0x22, 0xd4, 0x06, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c,
	0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x50, 0x0a,
	0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72,
	0x67, 0x5f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xbd, 0x05, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x50, 0x0a, 0x08,
	0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x6f, 0x72, 0x67,
	0x5f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x5f,
	0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xcb, 0x09, 0x0a, 0x27, 0x6f, 0x72, 0x67, 0x5f,
	0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65, 0x5f, 0x73,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x48, 0x0a, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72,
	0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x63, 0x61,
	0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x63, 0x61, 0x6c,
	0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d,
	0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a,
	0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61,
	0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x56, 0x69, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x76, 0x69, 0x65, 0x77, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x69,
	0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x69, 0x0a, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a,
	0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x29, 0x0a, 0x27, 0x6f, 0x72,
	0x67, 0x5f, 0x61, 0x70, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x63, 0x61, 0x6c, 0x63, 0x69, 0x74, 0x65,
	0x5f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x5f, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x89, 0x01, 0x0a, 0x12, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x14, 0x0a, 0x12, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xd4, 0x01, 0x0a, 0x16, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0b,
	0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x61, 0x6c, 0x6c, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0x16, 0x0a, 0x14, 0x43, 0x61, 0x6c, 0x6c,
	0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xca, 0x03, 0x0a, 0x1b, 0x52, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x54, 0x0a, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x13, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x61, 0x63, 0x72, 0x6f, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17,
	0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x30, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x42, 0x1d,
	0x0a, 0x1b, 0x72, 0x65, 0x66, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x76, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd5, 0x01,
	0x0a, 0x17, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x43, 0x0a, 0x0b, 0x69, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x61, 0x6c,
	0x6c, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0b, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x6f, 0x72, 0x12, 0x30,
	0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64,
	0x12, 0x43, 0x0a, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x73, 0x22, 0xfb, 0x01, 0x0a, 0x1a, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63,
	0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x8e, 0x01, 0x0a, 0x13, 0x53, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73,
	0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70,
	0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x63, 0x61, 0x6c, 0x61,
	0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x15, 0x0a,
	0x13, 0x73, 0x63, 0x61, 0x6c, 0x61, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x91, 0x02, 0x0a, 0x16, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x72, 0x0a, 0x1d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x18,
	0x0a, 0x16, 0x61, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xab, 0x01, 0x0a, 0x1d, 0x49, 0x6d, 0x70,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x61, 0x67,
	0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49,
	0x6d, 0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67,
	0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d,
	0x70, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1f, 0x0a, 0x1d, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x6d, 0x65,
	0x6e, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa6, 0x04, 0x0a, 0x1a, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x6d, 0x70, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x69, 0x6e, 0x69, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x36, 0x0a, 0x09, 0x61,
	0x64, 0x64, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x61, 0x64, 0x64, 0x4d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x3a, 0x0a, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0b, 0x6d, 0x65, 0x72, 0x67, 0x65, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12,
	0x3c, 0x0a, 0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0c, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x4d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x43, 0x0a,
	0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x12, 0x41, 0x0a, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x61, 0x63, 0x63, 0x75, 0x6d, 0x75, 0x6c, 0x61, 0x74, 0x6f,
	0x72, 0x54, 0x79, 0x70, 0x65, 0x12, 0x37, 0x0a, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0a, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3f,
	0x0a, 0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0e, 0x64, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x22,
	0xe2, 0x04, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x72, 0x61, 0x63, 0x74, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x6c, 0x61, 0x74, 0x65, 0x33, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdf, 0x04, 0x0a,
	0x14, 0x53, 0x71, 0x6c, 0x54, 0x72, 0x69, 0x6d, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe4,
	0x04, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x62, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe4, 0x04, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x44, 0x65, 0x70, 0x74, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa2, 0x05, 0x0a,
	0x1c, 0x53, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a,
	0x08, 0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x74, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xdf, 0x04, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a,
	0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x61, 0x6c, 0x65,
	0x73, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x18, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xe4, 0x04, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9b, 0x05, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x50, 0x61, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x36, 0x0a, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x74, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x12, 0x41, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe1, 0x04, 0x0a,
	0x16, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x69, 0x66, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xe7, 0x04, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x41, 0x64, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe5, 0x04, 0x0a, 0x1a, 0x53,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x50, 0x72, 0x65, 0x74, 0x74, 0x79, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0xf9, 0x05, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42,
	0x1d, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x78,
	0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe8,
	0x04, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x78, 0x74, 0x56, 0x61, 0x72, 0x69, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x17, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x74, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xba,
	0x05, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64, 0x57, 0x69, 0x6e,
	0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x50, 0x0a, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x65, 0x64,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x9d, 0x05, 0x0a, 0x1f,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe8, 0x04, 0x0a, 0x1d,
	0x53, 0x71, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x44, 0x69, 0x66, 0x66,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x73, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe5, 0x04, 0x0a,
	0x1a, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4c, 0x65, 0x6e, 0x67, 0x74, 0x68, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xac, 0x05, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a,
	0x11, 0x6e, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x61, 0x73,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x11, 0x6e, 0x6f, 0x6e, 0x4d, 0x6f, 0x6e, 0x6f,
	0x74, 0x6f, 0x6e, 0x69, 0x63, 0x43, 0x61, 0x73, 0x74, 0x73, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a,
	0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0xe0, 0x0e, 0x0a, 0x10, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb4, 0x01, 0x0a, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xa2, 0x01, 0x0a, 0x2d,
	0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47,
	0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a,
	0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4e, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x90, 0x01, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9e, 0x07, 0x0a, 0x18, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0xb4, 0x01, 0x0a, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xa2, 0x01, 0x0a, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74,
	0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x33, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x35, 0x0a, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x19, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xb0, 0x01, 0x0a, 0x2d, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48,
	0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x2f, 0x0a, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa5, 0x02, 0x0a, 0x1e,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x90,
	0x01, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11,
	0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x20, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xa4, 0x01, 0x0a, 0x27, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72,
	0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x29, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x13, 0x0a, 0x11, 0x54, 0x72,
	0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x89, 0x04, 0x0a, 0x16, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72,
	0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x90,
	0x01, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11,
	0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x18, 0x0a, 0x16, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x22, 0x0a, 0x20, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xb7, 0x01, 0x0a, 0x1a, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b,
	0x0a, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x98, 0x02, 0x0a, 0x18, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1a, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xad, 0x01, 0x0a, 0x1d, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63,
	0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x22, 0xc0, 0x1d, 0x0a, 0x0d, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x17, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x6c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x6c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x4b, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a,
	0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x66,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d,
	0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73,
	0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1d, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x61,
	0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x69, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x62,
	0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x42, 0x61,
	0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x62, 0x61, 0x73, 0x65,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x63, 0x0a, 0x18, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb1, 0x01, 0x0a, 0x32, 0x61, 0x72,
	0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47,
	0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69,
	0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a,
	0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x69,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x69, 0x6c,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb4, 0x01, 0x0a, 0x33, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47,
	0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44,
	0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63,
	0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x33, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0xa2, 0x01, 0x0a, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x22, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x0f, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x03, 0x0a, 0x17, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1a, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53,
	0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x19, 0x0a, 0x17, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1d, 0x0a, 0x1b, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x07, 0x0a, 0x11, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e,
	0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb1, 0x01,
	0x0a, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x32, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x61,
	0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x13, 0x0a, 0x11, 0x6c, 0x69,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0x19, 0x0a, 0x17, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcb, 0x02, 0x0a, 0x19, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb1, 0x01, 0x0a, 0x32, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1b, 0x0a, 0x19, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xc9, 0x01, 0x0a, 0x32, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x34,
	0x0a, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0x18, 0x0a, 0x16, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb2,
	0x01, 0x0a, 0x1c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c, 0x69,
	0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x3a, 0x0a, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x6b,
	0x65, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f,
	0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x22, 0xd2, 0x02, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x50,
	0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a,
	0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x14, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x63, 0x68, 0x61, 0x72, 0x4d, 0x61,
	0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x10, 0x63, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x27, 0x0a, 0x25, 0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x82, 0x01, 0x0a, 0x10, 0x43, 0x68, 0x61,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a,
	0x15, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6d, 0x61, 0x6c, 0x6c,
	0x43, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x15, 0x73, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74,
	0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x12, 0x0a, 0x10, 0x63, 0x68, 0x61,
	0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8b, 0x01,
	0x0a, 0x15, 0x53, 0x6d, 0x61, 0x6c, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x11, 0x52, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x74, 0x61, 0x69, 0x6e, 0x73, 0x5a, 0x65, 0x72,
	0x6f, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x12, 0x52, 0x06, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x64, 0x65, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb4, 0x01, 0x0a, 0x1a,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x21, 0x0a, 0x1f, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xff, 0x15, 0x0a, 0x15, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d,
	0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x69, 0x0a, 0x1a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x66, 0x0a, 0x19, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x61, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63,
	0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a,
	0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0xb1, 0x01, 0x0a, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0xb4, 0x01, 0x0a, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64,
	0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x40, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x33, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xa2, 0x01, 0x0a, 0x2d, 0x68,
	0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e,
	0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74,
	0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70,
	0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77,
	0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65,
	0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x6c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x68, 0x61,
	0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x90, 0x01, 0x0a, 0x27, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74,
	0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f,
	0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a,
	0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e,
	0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x74, 0x72, 0x65,
	0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42, 0x17,
	0x0a, 0x15, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x88, 0x0b, 0x0a, 0x1d, 0x41, 0x62, 0x73, 0x74,
	0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70, 0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x61, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72,
	0x61, 0x63, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x63, 0x0a, 0x18, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x61, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb1, 0x01, 0x0a, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65,
	0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x32, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0xb4, 0x01, 0x0a, 0x33, 0x6c,
	0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65,
	0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x33, 0x6c, 0x69,
	0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0xa2, 0x01, 0x0a, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x2d, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x47, 0x77, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x65, 0x70, 0x65, 0x6e, 0x64, 0x65, 0x6e, 0x63, 0x69, 0x65,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x61,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x61, 0x72, 0x72, 0x61, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17,
	0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x6e, 0x6b,
	0x65, 0x64, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x6c, 0x69, 0x6e, 0x6b, 0x65, 0x64, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e,
	0x0a, 0x11, 0x68, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x68, 0x61, 0x73,
	0x68, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x90,
	0x01, 0x0a, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x34, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x27, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61,
	0x63, 0x74, 0x53, 0x6f, 0x72, 0x74, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x6f, 0x72, 0x74, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x72, 0x65, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11,
	0x74, 0x72, 0x65, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x42, 0x1f, 0x0a, 0x1d, 0x61, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x4d, 0x61, 0x70,
	0x42, 0x61, 0x73, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xbc, 0x02, 0x0a, 0x1a, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x75, 0x6e, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x50, 0x0a, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f,
	0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73, 0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x70, 0x72, 0x65, 0x64, 0x69, 0x63,
	0x61, 0x74, 0x65, 0x42, 0x1c, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xdd, 0x04, 0x0a, 0x1a, 0x42, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x69, 0x0a, 0x1a, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6d,
	0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x42, 0x1c, 0x0a, 0x1a, 0x62, 0x61, 0x73, 0x65, 0x49, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xf6, 0x03, 0x0a, 0x16, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a,
	0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x69, 0x6d, 0x6d,
	0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d,
	0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x78, 0x0a, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x18, 0x0a, 0x16, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xaf, 0x01, 0x0a, 0x19, 0x49,
	0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1e, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53,
	0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x42,
	0x1b, 0x0a, 0x19, 0x69, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x20, 0x0a, 0x1e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x6d, 0x6d, 0x75, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xa9,
	0x03, 0x0a, 0x18, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75,
	0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x6e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x75, 0x6e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x42, 0x1a,
	0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb1, 0x01, 0x0a, 0x1b, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3a, 0x0a, 0x0a, 0x75, 0x6e,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x75, 0x6e, 0x66, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12, 0x56, 0x0a, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6d, 0x5f, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x5f, 0x62, 0x61, 0x73,
	0x65, 0x5f, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0c, 0x6b, 0x65, 0x79, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x22, 0xb8,
	0x05, 0x0a, 0x15, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b,
	0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18,
	0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x66, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x18, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x53, 0x65, 0x74,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a,
	0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x53, 0x65,
	0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1d, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x4c, 0x69, 0x73, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65,
	0x79, 0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1b, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4b, 0x65, 0x79,
	0x53, 0x65, 0x74, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x42, 0x17, 0x0a, 0x15, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x65, 0x64, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x6d, 0x61, 0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x04, 0x0a, 0x18, 0x53, 0x71,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xe5, 0x04, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe0, 0x04, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe2, 0x04, 0x0a, 0x17, 0x53,
	0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xe4, 0x04, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe6, 0x04, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x52, 0x61,
	0x6e, 0x64, 0x49, 0x6e, 0x74, 0x65, 0x67, 0x65, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xe6, 0x04, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x44, 0x61,
	0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa5, 0x1b, 0x0a, 0x13, 0x53, 0x71, 0x6c,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69, 0x6e,
	0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65,
	0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72,
	0x44, 0x65, 0x66, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f,
	0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73,
	0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d,
	0x61, 0x78, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x41, 0x6e, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x41, 0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x41, 0x76, 0x67, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a,
	0x18, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x42, 0x61, 0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x61, 0x73,
	0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c, 0x53, 0x69,
	0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c,
	0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49, 0x73,
	0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x21, 0x73, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x49, 0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x73,
	0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x18, 0x73, 0x71, 0x6c, 0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c,
	0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41,
	0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a,
	0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7e, 0x0a, 0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72,
	0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x21, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x62, 0x73,
	0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41,
	0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c,
	0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73,
	0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c,
	0x61, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61,
	0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41,
	0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x42,
	0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17,
	0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73,
	0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x1b, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x1d, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x21, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x22, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x24, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x25, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x26, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x15, 0x0a, 0x13, 0x73, 0x71, 0x6c,
	0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xc3, 0x06, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x44, 0x65, 0x66, 0x69,
	0x6e, 0x65, 0x64, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x08, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x66, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfc, 0x05, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x76, 0x61, 0x72, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd3, 0x06, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x41, 0x72, 0x72, 0x61, 0x79, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x0a, 0x6e, 0x75, 0x6c,
	0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75,
	0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x6e,
	0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xad, 0x06, 0x0a, 0x16,
	0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd8, 0x06, 0x0a, 0x19,
	0x53, 0x71, 0x6c, 0x4d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x61, 0x72, 0x67,
	0x54, 0x79, 0x70, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74,
	0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x61, 0x72, 0x67, 0x54,
	0x79, 0x70, 0x65, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x11, 0x52, 0x0a, 0x6d, 0x69, 0x6e, 0x4d, 0x61, 0x78,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x89, 0x07, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x80, 0x06, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x72, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xff, 0x05, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x41, 0x6e, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfa, 0x05, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x41,
	0x76, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69,
	0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xff, 0x05, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4e, 0x74, 0x68, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfe, 0x07, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4f, 0x0a, 0x13, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x64, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x12, 0x33, 0x0a, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x06, 0x73, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x12, 0x30, 0x0a, 0x13, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x73, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x4e, 0x75,
	0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x70, 0x61, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x53, 0x65, 0x70, 0x61,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65, 0x6e, 0x74,
	0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x63, 0x65,
	0x6e, 0x74, 0x69, 0x6c, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x12,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb5, 0x06, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0x85, 0x06, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x53, 0x75, 0x6d, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x49,
	0x73, 0x5a, 0x65, 0x72, 0x6f, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfe, 0x05, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x61, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfc, 0x05, 0x0a, 0x18, 0x53, 0x71, 0x6c,
	0x4e, 0x74, 0x69, 0x6c, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75,
	0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41,
	0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f,
	0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd4, 0x06, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x4a,
	0x73, 0x6f, 0x6e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x41, 0x67, 0x67, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x0a,
	0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0a, 0x6e, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x85,
	0x06, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x72, 0x73, 0x74, 0x4c, 0x61, 0x73, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d,
	0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61,
	0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd4, 0x08, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x41, 0x62,
	0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71,
	0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e,
	0x67, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x18, 0x73, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1f, 0x0a, 0x1d,
	0x73, 0x71, 0x6c, 0x41, 0x62, 0x73, 0x74, 0x72, 0x61, 0x63, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xfb, 0x05,
	0x0a, 0x17, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x49, 0x64, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfe, 0x05, 0x0a, 0x1a,
	0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x49, 0x64, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfc, 0x05, 0x0a,
	0x18, 0x53, 0x71, 0x6c, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x69, 0x6e, 0x67, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f,
	0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb3, 0x06, 0x0a, 0x1c,
	0x53, 0x71, 0x6c, 0x48, 0x69, 0x73, 0x74, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x41, 0x67, 0x67, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x31, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xf8, 0x05, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x52, 0x61, 0x6e, 0x6b, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfe, 0x05, 0x0a,
	0x1a, 0x53, 0x71, 0x6c, 0x4c, 0x65, 0x61, 0x64, 0x4c, 0x61, 0x67, 0x41, 0x67, 0x67, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65,
	0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xfc, 0x05,
	0x0a, 0x18, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x74, 0x4f, 0x70, 0x41, 0x67, 0x67, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0d, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x4f, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x4f, 0x76, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xc9, 0x07, 0x0a,
	0x1b, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b,
	0x73, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x71, 0x6c, 0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71,
	0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73,
	0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73,
	0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x48,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1d, 0x0a, 0x1b, 0x73, 0x71, 0x6c,
	0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x04, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x54, 0x75, 0x6d, 0x62, 0x6c, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xe7, 0x04, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe3, 0x04, 0x0a, 0x18,
	0x53, 0x71, 0x6c, 0x48, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73,
	0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xe8, 0x04, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x67, 0x65, 0x78, 0x70, 0x52,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe7, 0x05, 0x0a,
	0x1e, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61,
	0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x46, 0x6c, 0x6f, 0x6f, 0x72, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45,
	0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x42, 0x20, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74,
	0x6f, 0x6e, 0x69, 0x63, 0x55, 0x6e, 0x61, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe0, 0x04, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x46, 0x6c,
	0x6f, 0x6f, 0x72, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65,
	0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67,
	0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xea, 0x04, 0x0a, 0x1f, 0x53, 0x71,
	0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a,
	0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe4, 0x04, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4a, 0x73,
	0x6f, 0x6e, 0x51, 0x75, 0x65, 0x72, 0x79, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe5, 0x04,
	0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41, 0x0a, 0x08,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12,
	0x45, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x73, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73,
	0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12,
	0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xaa, 0x0e,
	0x0a, 0x16, 0x53, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x53,
	0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63,
	0x0a, 0x18, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x6c, 0x61, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f,
	0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x61,
	0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63,
	0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x4d, 0x6f, 0x6e, 0x6f, 0x74, 0x6f,
	0x6e, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73,
	0x65, 0x74, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65,
	0x74, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65,
	0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57,
	0x0a, 0x14, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x76,
	0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x49, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71,
	0x6c, 0x50, 0x6f, 0x73, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x50, 0x6f, 0x73, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x50, 0x6f,
	0x73, 0x69, 0x78, 0x52, 0x65, 0x67, 0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68,
	0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x57,
	0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71,
	0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18,
	0x73, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e,
	0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x10, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x42, 0x18, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe6, 0x03, 0x0a, 0x13, 0x53,
	0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x61, 0x6c, 0x6c, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x22, 0xd9, 0x03, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x6c,
	0x61, 0x70, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xd5, 0x03, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x43, 0x61, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c,
	0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe0, 0x03, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x4d,
	0x6f, 0x6e, 0x6f, 0x74, 0x6f, 0x6e, 0x69, 0x63, 0x42, 0x69, 0x6e, 0x61, 0x72, 0x79, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe1, 0x03, 0x0a, 0x20, 0x53,
	0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4f, 0x66, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xee,
	0x03, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x53, 0x65,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x0a, 0x03, 0x61, 0x6c, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x61, 0x6c, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xdc, 0x03, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x57, 0x69, 0x74, 0x68, 0x69, 0x6e, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd7,
	0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x14, 0x53, 0x71, 0x6c,
	0x4f, 0x76, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xce, 0x04, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c, 0x51, 0x75,
	0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x73,
	0x71, 0x6c, 0x49, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9c, 0x04, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x51, 0x75, 0x61, 0x6e, 0x74, 0x69, 0x66,
	0x79, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x41,
	0x0a, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0e, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x69, 0x73, 0x6f, 0x6e, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xc3, 0x04, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x50, 0x6f, 0x73, 0x69, 0x78, 0x52, 0x65, 0x67,
	0x65, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x24, 0x0a, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73,
	0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x26, 0x0a, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdf, 0x03, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x57, 0x69,
	0x74, 0x68, 0x69, 0x6e, 0x44, 0x69, 0x73, 0x74, 0x69, 0x6e, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0xfb, 0x1e, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60,
	0x0a, 0x17, 0x73, 0x71, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x4c, 0x61, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x7b, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a,
	0x17, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68, 0x61,
	0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43, 0x68,
	0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x50,
	0x6c, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e,
	0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x69, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1a, 0x73, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x4c, 0x69, 0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54,
	0x0a, 0x13, 0x73, 0x71, 0x6c, 0x44, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x6f, 0x74,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x13, 0x73, 0x71, 0x6c, 0x44, 0x6f, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x77,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15, 0x73, 0x71, 0x6c, 0x54, 0x68,
	0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5a, 0x0a, 0x15, 0x73, 0x71, 0x6c,
	0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x15,
	0x73, 0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x16, 0x73, 0x71, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72,
	0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x7b, 0x0a, 0x20, 0x73,
	0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43,
	0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x66, 0x0a, 0x19, 0x73, 0x71, 0x6c, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x19, 0x73, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x73, 0x6f, 0x72,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x84, 0x01, 0x0a, 0x23, 0x73, 0x71, 0x6c, 0x44, 0x61,
	0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75,
	0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x23, 0x73, 0x71, 0x6c, 0x44, 0x61, 0x74,
	0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a,
	0x1d, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x15,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a,
	0x16, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55,
	0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16,
	0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78,
	0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73,
	0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x6c,
	0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71,
	0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76,
	0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63,
	0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60,
	0x0a, 0x17, 0x73, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x81, 0x01, 0x0a, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74,
	0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x1f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41,
	0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e,
	0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00,
	0x52, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73,
	0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x20, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d,
	0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x21, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d,
	0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61,
	0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x22,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x23, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x24, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x25, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x26, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x27, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x28, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x29, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x19, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x53, 0x70, 0x65, 0x63,
	0x69, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xd8, 0x03, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4c, 0x61, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe7, 0x05, 0x0a, 0x20,
	0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x42, 0x22, 0x0a, 0x20, 0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xde, 0x03, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xdc, 0x03, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4d, 0x61,
	0x70, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd8, 0x03, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xdd, 0x03, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x43,
	0x68, 0x61, 0x69, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xdd, 0x03, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65,
	0x50, 0x6c, 0x75, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xde, 0x03, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xd2, 0x05, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x78, 0x0a, 0x1f, 0x73, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x6c, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1f, 0x73, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71,
	0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65, 0x73, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1c, 0x0a, 0x1a, 0x73, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x9b, 0x04, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x43, 0x6f,
	0x6c, 0x6c, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x08, 0x6d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x6f,
	0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x6f, 0x64,
	0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xff, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x55, 0x6e, 0x6e, 0x65,
	0x73, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x26, 0x0a, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x72, 0x64, 0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x77, 0x69, 0x74, 0x68, 0x4f, 0x72, 0x64,
	0x69, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65,
	0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0x95, 0x04, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4c, 0x69,
	0x6b, 0x65, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x18, 0x0a, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x61, 0x73,
	0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0d, 0x63, 0x61, 0x73, 0x65, 0x53, 0x65, 0x6e, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c,
	0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xf7,
	0x06, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73,
	0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x45, 0x78, 0x74,
	0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d, 0x0a, 0x16, 0x73, 0x71,
	0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c,
	0x75, 0x70, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x63, 0x0a, 0x18, 0x73, 0x71, 0x6c,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x18, 0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d,
	0x0a, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x61, 0x72, 0x63, 0x68,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x1a, 0x0a, 0x18,
	0x73, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x45, 0x78, 0x74, 0x65, 0x6e, 0x64, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x6c, 0x6c, 0x75, 0x70,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd9, 0x03, 0x0a,
	0x18, 0x53, 0x71, 0x6c, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x61, 0x72, 0x63, 0x68, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0xd4, 0x03, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x44, 0x6f, 0x74, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d,
	0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13,
	0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xd6, 0x03, 0x0a, 0x15, 0x53, 0x71,
	0x6c, 0x54, 0x68, 0x72, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x22, 0xd5, 0x03, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x49, 0x74, 0x65, 0x6d, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11,
	0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69,
	0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe7, 0x04, 0x0a, 0x15, 0x53,
	0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x60, 0x0a, 0x17, 0x73, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65,
	0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x17, 0x73,
	0x71, 0x6c, 0x42, 0x65, 0x74, 0x77, 0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x17, 0x0a, 0x15, 0x73,
	0x71, 0x6c, 0x49, 0x6e, 0x66, 0x69, 0x78, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb4, 0x04, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x42, 0x65, 0x74, 0x77,
	0x65, 0x65, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x2a, 0x0a, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x6c, 0x61,
	0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x66, 0x6c, 0x61, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6e, 0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x6e,
	0x65, 0x67, 0x61, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xed, 0x04, 0x0a, 0x12,
	0x53, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x81, 0x01, 0x0a, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65,
	0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x2f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d,
	0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x22, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41,
	0x73, 0x73, 0x69, 0x67, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50,
	0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57,
	0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x14, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x41, 0x73, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe3, 0x03, 0x0a, 0x22,
	0x53, 0x71, 0x6c, 0x41, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x41, 0x73, 0x73, 0x69, 0x67,
	0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xd7, 0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xde, 0x03, 0x0a, 0x1d,
	0x53, 0x71, 0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xb1, 0x06, 0x0a,
	0x20, 0x53, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72,
	0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x72, 0x0a, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1d, 0x73, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51,
	0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b, 0x73, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51, 0x75,
	0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73,
	0x66, 0x6f, 0x72, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d,
	0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x11, 0x52,
	0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c,
	0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77,
	0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x42, 0x22, 0x0a, 0x20,
	0x73, 0x71, 0x6c, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x65, 0x74, 0x51, 0x75, 0x65, 0x72, 0x79,
	0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xa8, 0x04, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x41, 0x72, 0x72, 0x61, 0x79, 0x51, 0x75, 0x65,
	0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09,
	0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a,
	0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xa6, 0x04, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x4d, 0x61, 0x70, 0x51, 0x75, 0x65, 0x72, 0x79, 0x43, 0x6f, 0x6e, 0x73, 0x74,
	0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x48, 0x0a, 0x0d, 0x74,
	0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x6f, 0x72,
	0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x54, 0x72, 0x61, 0x6e,
	0x73, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74,
	0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72,
	0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d,
	0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x22, 0xda, 0x03, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x43, 0x75, 0x72, 0x73,
	0x6f, 0x72, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65,
	0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65,
	0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65,
	0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xd4, 0x03, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x52, 0x6f, 0x77, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08,
	0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68,
	0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67,
	0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72,
	0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54,
	0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22, 0xe4, 0x03, 0x0a, 0x23, 0x53, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x53, 0x75, 0x62, 0x74, 0x72, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a, 0x0a,
	0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72,
	0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74, 0x75,
	0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63,
	0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64,
	0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70,
	0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65,
	0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x22,
	0xde, 0x03, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4e, 0x75, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x61, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x11, 0x52, 0x08, 0x6c, 0x65, 0x66, 0x74, 0x50, 0x72, 0x65, 0x63,
	0x12, 0x1c, 0x0a, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x11, 0x52, 0x09, 0x72, 0x69, 0x67, 0x68, 0x74, 0x50, 0x72, 0x65, 0x63, 0x12, 0x5a,
	0x0a, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65,
	0x72, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x52, 0x65, 0x74,
	0x75, 0x72, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x13, 0x72, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x5d, 0x0a, 0x14, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e,
	0x63, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e,
	0x64, 0x54, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x14, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x65, 0x72, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x57, 0x0a, 0x12, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79,
	0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x12,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x6e, 0x64, 0x54, 0x79, 0x70, 0x65, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x65, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x22, 0xf1, 0x06, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x7a, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35, 0x0a, 0x08, 0x74,
	0x61, 0x62, 0x6c, 0x65, 0x52, 0x65, 0x66, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52,
	0x65, 0x66, 0x12, 0x33, 0x0a, 0x07, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07,
	0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x12, 0x3e, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69,
	0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b, 0x73, 0x74, 0x72, 0x69,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x73, 0x74, 0x72, 0x69, 0x63,
	0x74, 0x45, 0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x73, 0x74, 0x72, 0x69, 0x63, 0x74,
	0x45, 0x6e, 0x64, 0x12, 0x45, 0x0a, 0x0e, 0x70, 0x61, 0x74, 0x74, 0x65, 0x72, 0x6e, 0x44, 0x65,
	0x66, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0e, 0x70, 0x61, 0x74, 0x74,
	0x65, 0x72, 0x6e, 0x44, 0x65, 0x66, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3f, 0x0a, 0x0b, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0b,
	0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x61,
	0x66, 0x74, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x61, 0x66, 0x74, 0x65, 0x72, 0x12, 0x3d, 0x0a, 0x0a,
	0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x73, 0x75, 0x62, 0x73, 0x65, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x0c, 0x72,
	0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0c, 0x72, 0x6f, 0x77, 0x73, 0x50, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x43, 0x0a,
	0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0d, 0x70, 0x61, 0x72, 0x74, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x3b, 0x0a, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x38, 0x0a, 0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x08, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02, 0x0a, 0x0d, 0x53, 0x71, 0x6c, 0x41, 0x6c, 0x74, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74,
	0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x73, 0x71, 0x6c, 0x41, 0x6c,
	0x74, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8a, 0x02, 0x0a, 0x11, 0x53, 0x71, 0x6c,
	0x53, 0x65, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x63, 0x6f, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f,
	0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50,
	0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcd, 0x0c, 0x0a, 0x0b, 0x53, 0x71, 0x6c, 0x44, 0x64, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x45, 0x0a, 0x0e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x0e, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a,
	0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53,
	0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x5d, 0x0a, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c,
	0x0a, 0x1b, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69,
	0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1b, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x14, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65,
	0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a,
	0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0d, 0x0a, 0x0b, 0x73, 0x71, 0x6c, 0x44, 0x64, 0x6c,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xca, 0x06, 0x0a, 0x0c, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c,
	0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4e, 0x0a, 0x11,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11, 0x73, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6f, 0x0a, 0x1c,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69,
	0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52,
	0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c,
	0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a,
	0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f,
	0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73, 0x71,
	0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79,
	0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x42, 0x0e, 0x0a, 0x0c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0xb5, 0x02, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x66, 0x6f, 0x72,
	0x65, 0x69, 0x67, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x66, 0x6f, 0x72, 0x65,
	0x69, 0x67, 0x6e, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe5, 0x05, 0x0a, 0x12, 0x53,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x4e, 0x0a, 0x11, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x11,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x6f, 0x0a, 0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74,
	0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72,
	0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x10, 0x73,
	0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x57, 0x0a, 0x14, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x48, 0x00, 0x52, 0x14, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x4b, 0x0a, 0x10, 0x73, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x48, 0x00, 0x52, 0x10, 0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x66,
	0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f,
	0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03,
	0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x14, 0x0a, 0x12,
	0x73, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x9a, 0x02, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54, 0x61,
	0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa5, 0x02, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x4d, 0x61, 0x74, 0x65, 0x72,
	0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03,
	0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65,
	0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47,
	0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x44,
	0x72, 0x6f, 0x70, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x9d, 0x02, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x22, 0x99, 0x02, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x44, 0x72, 0x6f, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69,
	0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x69, 0x66, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xad, 0x07, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x54, 0x0a, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x13, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x51, 0x0a, 0x12, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56,
	0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x12, 0x73, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x5d,
	0x0a, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x16, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x6c, 0x0a,
	0x1b, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x28, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67,
	0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1b,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e,
	0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x57, 0x0a, 0x14, 0x73,
	0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x14,
	0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x75, 0x0a, 0x1e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65,
	0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64,
	0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x48, 0x00, 0x52, 0x1e, 0x73, 0x71, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65,
	0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44,
	0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x10, 0x0a,
	0x0e, 0x73, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xbf, 0x03, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x61,
	0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x61, 0x74, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x44, 0x65, 0x66, 0x73,
	0x12, 0x3d, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b,
	0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f,
	0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x22, 0xac, 0x03, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d,
	0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a,
	0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xab, 0x03, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x71,
	0x75, 0x65, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xb5,
	0x03, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x37,
	0x0a, 0x09, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x63, 0x6c,
	0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x09, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73,
	0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70,
	0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72,
	0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xe7, 0x03, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x65, 0x69, 0x67, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x6d,
	0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x33, 0x0a, 0x07, 0x6c, 0x69,
	0x62, 0x72, 0x61, 0x72, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6c, 0x69, 0x62, 0x72, 0x61, 0x72, 0x79, 0x12,
	0x3d, 0x0a, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0a, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xbd, 0x02, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x63,
	0x68, 0x65, 0x6d, 0x61, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73,
	0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f,
	0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65,
	0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0xb7, 0x03, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x61,
	0x74, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a, 0x63, 0x6f, 0x6c, 0x75,
	0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f,
	0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x63, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x2f, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c,
	0x61, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61,
	0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78,
	0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12,
	0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61,
	0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f,
	0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xcc, 0x01, 0x0a, 0x16, 0x53,
	0x71, 0x6c, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x53, 0x63, 0x68, 0x65, 0x6d, 0x61,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x37, 0x0a, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x12, 0x30,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xd8, 0x03, 0x0a, 0x0c, 0x53, 0x71,
	0x6c, 0x4a, 0x6f, 0x69, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x2d, 0x0a, 0x04, 0x6c, 0x65,
	0x66, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6c, 0x65, 0x66, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65,
	0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x07, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x61,
	0x6c, 0x12, 0x38, 0x0a, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x6a, 0x6f, 0x69, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2f, 0x0a, 0x05, 0x72,
	0x69, 0x67, 0x68, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x72, 0x69, 0x67, 0x68, 0x74, 0x12, 0x42, 0x0a, 0x0d,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4c, 0x69, 0x74, 0x65, 0x72, 0x61, 0x6c, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x0d, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x37, 0x0a, 0x09, 0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x09,
	0x63, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71,
	0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f,
	0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x22, 0x82, 0x02, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x44, 0x65, 0x73, 0x63,
	0x72, 0x69, 0x62, 0x65, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x35,
	0x0a, 0x05, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05,
	0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x37, 0x0a, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x06, 0x63, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x12, 0x30,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x83, 0x03, 0x0a, 0x19, 0x53, 0x71,
	0x6c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x44, 0x65, 0x63, 0x6c, 0x61, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08,
	0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x53, 0x70, 0x65, 0x63, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x39, 0x0a, 0x0a, 0x65,
	0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0a, 0x65, 0x78, 0x70, 0x72,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3c, 0x0a, 0x08, 0x73, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e,
	0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x73, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65,
	0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f,
	0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22,
	0xa7, 0x01, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65,
	0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x11, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x30,
	0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72,
	0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73,
	0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c,
	0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54,
	0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0xdf, 0x06, 0x0a, 0x19, 0x53, 0x71,
	0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69,
	0x65, 0x77, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65,
	0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0a,
	0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x0a, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6d,
	0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e,
	0x6f, 0x64, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6d, 0x65,
	0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x5f, 0x0a, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x72,
	0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x4d,
	0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x64, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69,
	0x6f, 0x6e, 0x73, 0x4d, 0x61, 0x70, 0x12, 0x59, 0x0a, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72,
	0x65, 0x73, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x72, 0x69,
	0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x56, 0x69, 0x65, 0x77, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0b, 0x6d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x12, 0x18, 0x0a, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a,
	0x08, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71,
	0x6c, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08,
	0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79,
	0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76,
	0x31, 0x2e, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x52, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x1a, 0x5b, 0x0a, 0x12, 0x44, 0x69, 0x6d, 0x65, 0x6e, 0x73, 0x69, 0x6f, 0x6e,
	0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x59, 0x0a, 0x10, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c,
	0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4e, 0x6f, 0x64, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xcf, 0x03, 0x0a, 0x14,
	0x53, 0x71, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x71, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x0a, 0x70, 0x72, 0x6f,
	0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x43,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x2e, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x52, 0x0a, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x12, 0x18, 0x0a, 0x07,
	0x72, 0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x72,
	0x65, 0x70, 0x6c, 0x61, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x66, 0x4e, 0x6f, 0x74, 0x45,
	0x78, 0x69, 0x73, 0x74, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x66, 0x4e,
	0x6f, 0x74, 0x45, 0x78, 0x69, 0x73, 0x74, 0x73, 0x12, 0x39, 0x0a, 0x08, 0x6f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x72, 0x69, 0x6c,
	0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x71, 0x6c, 0x4f, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x6f, 0x72, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x6f, 0x72, 0x12, 0x30, 0x0a, 0x03, 0x70, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x71, 0x6c, 0x50, 0x61, 0x72, 0x73, 0x65, 0x72, 0x50, 0x6f, 0x73, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x52, 0x03, 0x70, 0x6f, 0x73, 0x12, 0x47, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x72, 0x69, 0x6c, 0x6c, 0x2e, 0x73, 0x71, 0x6c, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x6c,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x52, 0x0f, 0x74,
	0x79, 0x70, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3d,
	0x0a, 0x0f, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0xd6, 0x0c,
	0x0a, 0x10, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x4f, 0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4e, 0x59, 0x49, 0x4e, 0x54, 0x5f, 0x10, 0x01,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x4d, 0x41, 0x4c, 0x4c, 0x49, 0x4e, 0x54, 0x5f, 0x10, 0x02,
	0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x47, 0x45, 0x52, 0x5f, 0x10, 0x03, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x49, 0x47, 0x49, 0x4e, 0x54, 0x5f, 0x10, 0x04, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d, 0x41, 0x4c, 0x5f, 0x10, 0x05, 0x12, 0x1b, 0x0a, 0x17,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x46, 0x4c, 0x4f, 0x41, 0x54, 0x5f, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45,
	0x41, 0x4c, 0x5f, 0x10, 0x07, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x4f, 0x55, 0x42, 0x4c, 0x45,
	0x5f, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x10, 0x09, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x10, 0x0a, 0x12, 0x2f, 0x0a, 0x2b, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45, 0x5f, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x10, 0x0c, 0x12, 0x34, 0x0a,
	0x30, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x57, 0x49, 0x54, 0x48,
	0x5f, 0x4c, 0x4f, 0x43, 0x41, 0x4c, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x5a, 0x4f, 0x4e, 0x45,
	0x5f, 0x10, 0x0d, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48,
	0x5f, 0x10, 0x0f, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x10, 0x10, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x10, 0x11, 0x12, 0x27, 0x0a,
	0x23, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x5f, 0x10, 0x12, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52,
	0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x10,
	0x13, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44,
	0x41, 0x59, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x14, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x10,
	0x15, 0x12, 0x2a, 0x0a, 0x26, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x10, 0x16, 0x12, 0x2a, 0x0a,
	0x26, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f,
	0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x17, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x71, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e,
	0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x10, 0x18,
	0x12, 0x2c, 0x0a, 0x28, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4d, 0x49,
	0x4e, 0x55, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x19, 0x12, 0x25,
	0x0a, 0x21, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x10, 0x1a, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x10,
	0x1b, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x56, 0x41, 0x52, 0x43, 0x48, 0x41, 0x52, 0x5f, 0x10, 0x1c,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x10, 0x1d, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x56, 0x41, 0x52, 0x42, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x10, 0x1e, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x1f, 0x12, 0x1d, 0x0a, 0x19, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x10, 0x20, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41,
	0x4e, 0x59, 0x5f, 0x10, 0x21, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x59, 0x4d, 0x42, 0x4f, 0x4c,
	0x5f, 0x10, 0x22, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53, 0x45, 0x54,
	0x5f, 0x10, 0x23, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x10, 0x24,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x10, 0x25, 0x12, 0x1e, 0x0a, 0x1a, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x10, 0x26, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x55, 0x52, 0x45, 0x44, 0x5f, 0x10, 0x27, 0x12, 0x19, 0x0a,
	0x15, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x10, 0x28, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x54, 0x48,
	0x45, 0x52, 0x5f, 0x10, 0x29, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52,
	0x5f, 0x10, 0x2a, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c,
	0x49, 0x53, 0x54, 0x5f, 0x10, 0x2b, 0x12, 0x22, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d,
	0x49, 0x43, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x5f, 0x10, 0x2c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47,
	0x45, 0x4f, 0x4d, 0x45, 0x54, 0x52, 0x59, 0x5f, 0x10, 0x2d, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71,
	0x6c, 0x54, 0x79, 0x70, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53,
	0x41, 0x52, 0x47, 0x5f, 0x10, 0x2e, 0x2a, 0x94, 0x01, 0x0a, 0x11, 0x43, 0x6f, 0x65, 0x72, 0x63,
	0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1f, 0x0a, 0x1b,
	0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x10, 0x00, 0x12, 0x1f, 0x0a,
	0x1b, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x49, 0x4d, 0x50, 0x4c, 0x49, 0x43, 0x49, 0x54, 0x5f, 0x10, 0x01, 0x12, 0x20,
	0x0a, 0x1c, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x45, 0x52, 0x43, 0x49, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0x02,
	0x12, 0x1b, 0x0a, 0x17, 0x43, 0x6f, 0x65, 0x72, 0x63, 0x69, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x10, 0x03, 0x2a, 0x8c, 0x07,
	0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f,
	0x10, 0x00, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x54, 0x4f,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x10, 0x01, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44,
	0x41, 0x59, 0x5f, 0x10, 0x03, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x41, 0x59, 0x5f,
	0x54, 0x4f, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x10, 0x04, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x10,
	0x05, 0x12, 0x25, 0x0a, 0x21, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x4f, 0x5f, 0x53,
	0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x06, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48,
	0x4f, 0x55, 0x52, 0x5f, 0x10, 0x07, 0x12, 0x26, 0x0a, 0x22, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x4f, 0x55,
	0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x5f, 0x10, 0x08, 0x12, 0x26,
	0x0a, 0x22, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43,
	0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x5f, 0x10, 0x0a, 0x12, 0x28, 0x0a, 0x24, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4e,
	0x55, 0x54, 0x45, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x0b,
	0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x0c,
	0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x4f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x10,
	0x0d, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f,
	0x10, 0x0e, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61,
	0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x10, 0x0f,
	0x12, 0x23, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f,
	0x4e, 0x44, 0x5f, 0x10, 0x10, 0x12, 0x23, 0x0a, 0x1f, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x43, 0x52,
	0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x11, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x12, 0x12, 0x1b,
	0x0a, 0x17, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x4f, 0x57, 0x5f, 0x10, 0x13, 0x12, 0x1e, 0x0a, 0x1a, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x49, 0x53, 0x4f, 0x44, 0x4f, 0x57, 0x5f, 0x10, 0x14, 0x12, 0x1b, 0x0a, 0x17, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x44, 0x4f, 0x59, 0x5f, 0x10, 0x15, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45,
	0x50, 0x4f, 0x43, 0x48, 0x5f, 0x10, 0x16, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45,
	0x43, 0x41, 0x44, 0x45, 0x5f, 0x10, 0x17, 0x12, 0x1f, 0x0a, 0x1b, 0x54, 0x69, 0x6d, 0x65, 0x55,
	0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x45,
	0x4e, 0x54, 0x55, 0x52, 0x59, 0x5f, 0x10, 0x18, 0x12, 0x22, 0x0a, 0x1e, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d,
	0x49, 0x4c, 0x4c, 0x45, 0x4e, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x10, 0x19, 0x2a, 0x9e, 0x01, 0x0a,
	0x1d, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x27,
	0x0a, 0x23, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d,
	0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x10, 0x00, 0x12, 0x2c, 0x0a, 0x28, 0x52, 0x65, 0x6c, 0x44, 0x61,
	0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x4e, 0x4f, 0x52, 0x44, 0x45, 0x52,
	0x45, 0x44, 0x5f, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x52, 0x65, 0x6c, 0x44, 0x61, 0x74, 0x61,
	0x54, 0x79, 0x70, 0x65, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x10, 0x02, 0x2a, 0xee, 0x06,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x48, 0x41, 0x52, 0x41,
	0x43, 0x54, 0x45, 0x52, 0x5f, 0x10, 0x00, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x49,
	0x4e, 0x41, 0x52, 0x59, 0x5f, 0x10, 0x01, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55,
	0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x10, 0x02, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x5f, 0x10, 0x03, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x10, 0x04, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53,
	0x54, 0x41, 0x4d, 0x50, 0x5f, 0x10, 0x05, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x54, 0x79,
	0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x4f,
	0x4f, 0x4c, 0x45, 0x41, 0x4e, 0x5f, 0x10, 0x06, 0x12, 0x2b, 0x0a, 0x27, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x5f, 0x10, 0x07, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x52, 0x56, 0x41, 0x4c, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x10, 0x08,
	0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x10, 0x09,
	0x12, 0x2b, 0x0a, 0x27, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x58, 0x49, 0x4d, 0x41,
	0x54, 0x45, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49, 0x43, 0x5f, 0x10, 0x0a, 0x12, 0x25, 0x0a,
	0x21, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x41, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4d, 0x45, 0x52, 0x49,
	0x43, 0x5f, 0x10, 0x0b, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x43, 0x49, 0x4d,
	0x41, 0x4c, 0x5f, 0x10, 0x0c, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45,
	0x47, 0x45, 0x52, 0x5f, 0x10, 0x0d, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70,
	0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x41, 0x54,
	0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x10, 0x0e, 0x12, 0x29, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x54,
	0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44,
	0x41, 0x54, 0x45, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c,
	0x5f, 0x10, 0x0f, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61,
	0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x55, 0x4c, 0x54, 0x49, 0x53,
	0x45, 0x54, 0x5f, 0x10, 0x10, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65,
	0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41,
	0x59, 0x5f, 0x10, 0x11, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46,
	0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x10,
	0x12, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x13, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x10, 0x14, 0x12, 0x1e, 0x0a, 0x1a,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x5f, 0x10, 0x15, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x10,
	0x16, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69,
	0x6c, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x45, 0x4f, 0x5f, 0x10, 0x17, 0x12, 0x1e,
	0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x46, 0x61, 0x6d, 0x69, 0x6c, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x10, 0x18, 0x2a, 0xca,
	0x01, 0x0a, 0x0f, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x10, 0x00, 0x12, 0x24, 0x0a,
	0x20, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x46, 0x55, 0x4c, 0x4c, 0x59, 0x5f, 0x51, 0x55, 0x41, 0x4c, 0x49, 0x46, 0x49, 0x45, 0x44,
	0x5f, 0x10, 0x01, 0x12, 0x28, 0x0a, 0x24, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x45, 0x45, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c,
	0x44, 0x53, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x5f, 0x10, 0x02, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x50, 0x45, 0x45, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x10, 0x03, 0x12,
	0x2a, 0x0a, 0x26, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x50, 0x45, 0x45, 0x4b, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x53, 0x5f, 0x4e,
	0x4f, 0x5f, 0x45, 0x58, 0x50, 0x41, 0x4e, 0x44, 0x5f, 0x10, 0x04, 0x2a, 0xaa, 0x01, 0x0a, 0x15,
	0x48, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x20, 0x0a, 0x1c, 0x48, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45,
	0x4d, 0x50, 0x54, 0x59, 0x5f, 0x10, 0x00, 0x12, 0x27, 0x0a, 0x23, 0x48, 0x69, 0x6e, 0x74, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x10, 0x01,
	0x12, 0x22, 0x0a, 0x1e, 0x48, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x46, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x44, 0x5f, 0x4c, 0x49, 0x53,
	0x54, 0x5f, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x48, 0x69, 0x6e, 0x74, 0x4f, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4b, 0x56,
	0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x10, 0x03, 0x2a, 0x92, 0x3f, 0x0a, 0x0c, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f,
	0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x53, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x49, 0x4e,
	0x54, 0x5f, 0x10, 0x02, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x10,
	0x03, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4a, 0x4f, 0x49, 0x4e, 0x5f, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x44, 0x45, 0x4e, 0x54, 0x49,
	0x46, 0x49, 0x45, 0x52, 0x5f, 0x10, 0x05, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f,
	0x10, 0x06, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x51, 0x55, 0x41, 0x4c,
	0x49, 0x46, 0x49, 0x45, 0x52, 0x5f, 0x10, 0x07, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x09, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x41, 0x49, 0x4e, 0x5f, 0x10,
	0x0a, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d,
	0x41, 0x5f, 0x10, 0x0b, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x42, 0x45, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x5f, 0x10, 0x0c, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x52, 0x54, 0x5f, 0x10, 0x0d,
	0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x5f, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x50, 0x44, 0x41, 0x54,
	0x45, 0x5f, 0x10, 0x0f, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x54, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x10, 0x10, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x44, 0x59, 0x4e, 0x41, 0x4d, 0x49, 0x43, 0x5f, 0x50, 0x41, 0x52, 0x41, 0x4d,
	0x5f, 0x10, 0x11, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x5f, 0x42, 0x59, 0x5f, 0x10, 0x12, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x57, 0x49, 0x54, 0x48, 0x5f, 0x10, 0x13, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x5f, 0x49, 0x54, 0x45,
	0x4d, 0x5f, 0x10, 0x14, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x54, 0x45, 0x4d, 0x5f, 0x10, 0x15, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x4e, 0x49,
	0x4f, 0x4e, 0x5f, 0x10, 0x16, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x43, 0x45, 0x50, 0x54, 0x5f, 0x10, 0x17, 0x12,
	0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45, 0x43, 0x54, 0x5f, 0x10, 0x18, 0x12, 0x14, 0x0a, 0x10,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x53, 0x5f,
	0x10, 0x19, 0x12, 0x25, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x41, 0x52, 0x47, 0x55, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x53, 0x53, 0x49,
	0x47, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x5f, 0x10, 0x1a, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c,
	0x54, 0x5f, 0x10, 0x1b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x5f, 0x10, 0x1c, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x53,
	0x50, 0x45, 0x43, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x10, 0x1d, 0x12, 0x1e, 0x0a,
	0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x47,
	0x4e, 0x4f, 0x52, 0x45, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x10, 0x1e, 0x12, 0x18, 0x0a,
	0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x49,
	0x4c, 0x54, 0x45, 0x52, 0x5f, 0x10, 0x1f, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x47,
	0x52, 0x4f, 0x55, 0x50, 0x5f, 0x10, 0x20, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f, 0x44,
	0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x10, 0x21, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x49, 0x4e, 0x44, 0x4f,
	0x57, 0x5f, 0x10, 0x22, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x45, 0x52, 0x47, 0x45, 0x5f, 0x10, 0x23, 0x12, 0x1d, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x41,
	0x42, 0x4c, 0x45, 0x53, 0x41, 0x4d, 0x50, 0x4c, 0x45, 0x5f, 0x10, 0x24, 0x12, 0x17, 0x0a, 0x13,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x49, 0x56,
	0x4f, 0x54, 0x5f, 0x10, 0x25, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x4e, 0x50, 0x49, 0x56, 0x4f, 0x54, 0x5f, 0x10, 0x26,
	0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a, 0x45,
	0x5f, 0x10, 0x27, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x4e, 0x41, 0x50, 0x53, 0x48, 0x4f, 0x54, 0x5f, 0x10, 0x28, 0x12,
	0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x54, 0x49, 0x4d, 0x45, 0x53, 0x5f, 0x10, 0x29, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x49, 0x56, 0x49, 0x44, 0x45, 0x5f,
	0x10, 0x2a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4d, 0x4f, 0x44, 0x5f, 0x10, 0x2b, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x10,
	0x2c, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x10, 0x2d, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45,
	0x52, 0x4e, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x10, 0x2e, 0x12, 0x20, 0x0a, 0x1c, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x41, 0x54, 0x54,
	0x45, 0x52, 0x4e, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x5f, 0x10, 0x2f, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e,
	0x5f, 0x10, 0x30, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x10, 0x31, 0x12, 0x1a, 0x0a,
	0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52,
	0x55, 0x49, 0x44, 0x5f, 0x49, 0x4e, 0x5f, 0x10, 0x32, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52, 0x55, 0x49, 0x44, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x49, 0x4e, 0x5f, 0x10, 0x33, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x10, 0x34, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x52, 0x5f, 0x54,
	0x48, 0x41, 0x4e, 0x5f, 0x10, 0x35, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x45, 0x53, 0x53, 0x5f, 0x54, 0x48, 0x41, 0x4e,
	0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x5f, 0x10, 0x36, 0x12, 0x27, 0x0a, 0x23,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x45,
	0x41, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x4f, 0x52, 0x5f, 0x45, 0x51, 0x55,
	0x41, 0x4c, 0x5f, 0x10, 0x37, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x10, 0x38, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x45, 0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x10, 0x39, 0x12, 0x22, 0x0a,
	0x1e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53,
	0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43, 0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x10,
	0x3a, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x49, 0x4e, 0x43,
	0x54, 0x5f, 0x46, 0x52, 0x4f, 0x4d, 0x5f, 0x10, 0x3b, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x41, 0x52, 0x43, 0x48,
	0x5f, 0x10, 0x3c, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x52, 0x5f, 0x10, 0x3d, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4e, 0x44, 0x5f, 0x10, 0x3e,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x44, 0x4f, 0x54, 0x5f, 0x10, 0x3f, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x56, 0x45, 0x52, 0x4c, 0x41, 0x50, 0x53,
	0x5f, 0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x10, 0x41, 0x12,
	0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x53, 0x5f, 0x10, 0x42, 0x12, 0x26, 0x0a, 0x22, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4d, 0x4d, 0x45,
	0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x5f, 0x50, 0x52, 0x45, 0x43, 0x45, 0x44, 0x45, 0x53,
	0x5f, 0x10, 0x43, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x45, 0x44, 0x53, 0x5f, 0x10, 0x44, 0x12,
	0x26, 0x0a, 0x22, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x49, 0x4d, 0x4d, 0x45, 0x44, 0x49, 0x41, 0x54, 0x45, 0x4c, 0x59, 0x5f, 0x53, 0x55, 0x43, 0x43,
	0x45, 0x45, 0x44, 0x53, 0x5f, 0x10, 0x45, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x45,
	0x51, 0x55, 0x41, 0x4c, 0x53, 0x5f, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x10, 0x47,
	0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x52, 0x4c, 0x49, 0x4b, 0x45, 0x5f, 0x10, 0x48, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x49, 0x4d, 0x49, 0x4c, 0x41,
	0x52, 0x5f, 0x10, 0x49, 0x12, 0x2c, 0x0a, 0x28, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58,
	0x5f, 0x43, 0x41, 0x53, 0x45, 0x5f, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x10, 0x4a, 0x12, 0x2e, 0x0a, 0x2a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x50, 0x4f, 0x53, 0x49, 0x58, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x58, 0x5f, 0x43,
	0x41, 0x53, 0x45, 0x5f, 0x49, 0x4e, 0x53, 0x45, 0x4e, 0x53, 0x49, 0x54, 0x49, 0x56, 0x45, 0x5f,
	0x10, 0x4b, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x10, 0x4c, 0x12, 0x1f, 0x0a,
	0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52,
	0x55, 0x49, 0x44, 0x5f, 0x42, 0x45, 0x54, 0x57, 0x45, 0x45, 0x4e, 0x5f, 0x10, 0x4d, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43,
	0x41, 0x53, 0x45, 0x5f, 0x10, 0x4e, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f,
	0x10, 0x4f, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x53, 0x45, 0x50, 0x41, 0x52, 0x41, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0x50, 0x12,
	0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4e, 0x55, 0x4c, 0x4c, 0x49, 0x46, 0x5f, 0x10, 0x51, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x41, 0x4c, 0x45, 0x53,
	0x43, 0x45, 0x5f, 0x10, 0x52, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x43, 0x4f, 0x44, 0x45, 0x5f, 0x10, 0x53, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4e, 0x56, 0x4c, 0x5f, 0x10, 0x54, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x45, 0x41, 0x54, 0x45, 0x53, 0x54, 0x5f,
	0x10, 0x55, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x32, 0x5f, 0x10, 0x56, 0x12, 0x14, 0x0a,
	0x10, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x46,
	0x5f, 0x10, 0x57, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x10, 0x58, 0x12, 0x1f, 0x0a, 0x1b,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4d,
	0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x41, 0x44, 0x44, 0x5f, 0x10, 0x59, 0x12, 0x20, 0x0a,
	0x1c, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49,
	0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d, 0x50, 0x5f, 0x44, 0x49, 0x46, 0x46, 0x5f, 0x10, 0x5a, 0x12,
	0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4e, 0x4f, 0x54, 0x5f, 0x10, 0x5b, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x4c, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x10, 0x5c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x53, 0x5f, 0x50, 0x52, 0x45, 0x46,
	0x49, 0x58, 0x5f, 0x10, 0x5d, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x49, 0x53, 0x54, 0x53, 0x5f, 0x10, 0x5e, 0x12,
	0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x53, 0x4f, 0x4d, 0x45, 0x5f, 0x10, 0x5f, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x4c, 0x5f, 0x10, 0x60, 0x12, 0x18,
	0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x53, 0x5f, 0x10, 0x61, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x50, 0x4c, 0x49, 0x43, 0x49,
	0x54, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0x62, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x43, 0x41, 0x4c, 0x41,
	0x52, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x10, 0x63, 0x12, 0x20, 0x0a, 0x1c, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45,
	0x44, 0x55, 0x52, 0x45, 0x5f, 0x43, 0x41, 0x4c, 0x4c, 0x5f, 0x10, 0x64, 0x12, 0x23, 0x0a, 0x1f,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x45, 0x57,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10,
	0x65, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x46, 0x49, 0x4e, 0x41, 0x4c, 0x5f, 0x10, 0x66, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x55, 0x4e, 0x4e, 0x49,
	0x4e, 0x47, 0x5f, 0x10, 0x67, 0x12, 0x16, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x52, 0x45, 0x56, 0x5f, 0x10, 0x68, 0x12, 0x16, 0x0a,
	0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x45,
	0x58, 0x54, 0x5f, 0x10, 0x69, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f, 0x10, 0x6a, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x10, 0x6b, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4c, 0x41, 0x53, 0x53, 0x49, 0x46, 0x49, 0x45,
	0x52, 0x5f, 0x10, 0x6c, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45,
	0x52, 0x5f, 0x10, 0x6d, 0x12, 0x1f, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x46, 0x49, 0x52,
	0x53, 0x54, 0x5f, 0x10, 0x6e, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x4b, 0x49, 0x50, 0x5f, 0x54, 0x4f, 0x5f, 0x4c, 0x41,
	0x53, 0x54, 0x5f, 0x10, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47,
	0x5f, 0x10, 0x70, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54, 0x5f,
	0x10, 0x71, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x53, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x10, 0x72,
	0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x49, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x10, 0x73, 0x12, 0x1a, 0x0a, 0x16, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x46,
	0x41, 0x4c, 0x53, 0x45, 0x5f, 0x10, 0x74, 0x12, 0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x54,
	0x52, 0x55, 0x45, 0x5f, 0x10, 0x75, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x46, 0x41,
	0x4c, 0x53, 0x45, 0x5f, 0x10, 0x76, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57,
	0x4e, 0x5f, 0x10, 0x77, 0x12, 0x19, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x78, 0x12,
	0x1d, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x49, 0x53, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x79, 0x12, 0x1b,
	0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50,
	0x52, 0x45, 0x43, 0x45, 0x44, 0x49, 0x4e, 0x47, 0x5f, 0x10, 0x7a, 0x12, 0x1b, 0x0a, 0x17, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x4f, 0x4c, 0x4c,
	0x4f, 0x57, 0x49, 0x4e, 0x47, 0x5f, 0x10, 0x7b, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x41,
	0x43, 0x43, 0x45, 0x53, 0x53, 0x5f, 0x10, 0x7c, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52,
	0x45, 0x46, 0x5f, 0x10, 0x7d, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x49, 0x4e, 0x50, 0x55,
	0x54, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x10, 0x7e, 0x12, 0x23, 0x0a, 0x1f, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e,
	0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x10, 0x7f, 0x12, 0x1c, 0x0a,
	0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x4f,
	0x43, 0x41, 0x4c, 0x5f, 0x52, 0x45, 0x46, 0x5f, 0x10, 0x80, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x52, 0x52,
	0x45, 0x4c, 0x5f, 0x56, 0x41, 0x52, 0x49, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0x81, 0x01, 0x12,
	0x25, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x49, 0x46, 0x49,
	0x45, 0x52, 0x5f, 0x10, 0x82, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x4f, 0x57, 0x5f, 0x10, 0x83, 0x01, 0x12, 0x1e,
	0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43,
	0x4f, 0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x5f, 0x10, 0x84, 0x01, 0x12, 0x17,
	0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43,
	0x41, 0x53, 0x54, 0x5f, 0x10, 0x85, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x45, 0x58, 0x54, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x10, 0x86, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x55, 0x52, 0x52, 0x45, 0x4e, 0x54, 0x5f, 0x56,
	0x41, 0x4c, 0x55, 0x45, 0x5f, 0x10, 0x87, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x4c, 0x4f, 0x4f, 0x52, 0x5f, 0x10,
	0x88, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x45, 0x49, 0x4c, 0x5f, 0x10, 0x89, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x52, 0x49, 0x4d,
	0x5f, 0x10, 0x8a, 0x01, 0x12, 0x18, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x54, 0x52, 0x49, 0x4d, 0x5f, 0x10, 0x8b, 0x01, 0x12, 0x18,
	0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52,
	0x54, 0x52, 0x49, 0x4d, 0x5f, 0x10, 0x8c, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x54, 0x52, 0x41, 0x43, 0x54,
	0x5f, 0x10, 0x8d, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41,
	0x54, 0x5f, 0x10, 0x8e, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x52, 0x45, 0x56, 0x45,
	0x52, 0x53, 0x45, 0x5f, 0x10, 0x8f, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x56, 0x45, 0x52, 0x53, 0x45, 0x5f,
	0x10, 0x90, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x5f, 0x42, 0x49, 0x47, 0x5f, 0x51,
	0x55, 0x45, 0x52, 0x59, 0x5f, 0x10, 0x91, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52, 0x5f,
	0x4d, 0x59, 0x53, 0x51, 0x4c, 0x5f, 0x10, 0x92, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x54, 0x52,
	0x5f, 0x4f, 0x52, 0x41, 0x43, 0x4c, 0x45, 0x5f, 0x10, 0x93, 0x01, 0x12, 0x24, 0x0a, 0x1f, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x42, 0x53,
	0x54, 0x52, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45, 0x53, 0x51, 0x4c, 0x5f, 0x10, 0x94,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4a, 0x44, 0x42, 0x43, 0x5f, 0x46, 0x4e, 0x5f, 0x10, 0x95, 0x01, 0x12, 0x2d, 0x0a,
	0x28, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x55,
	0x4c, 0x54, 0x49, 0x53, 0x45, 0x54, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e,
	0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0x96, 0x01, 0x12, 0x2d, 0x0a, 0x28,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x55, 0x4c,
	0x54, 0x49, 0x53, 0x45, 0x54, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0x97, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x45, 0x58, 0x50, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x10, 0x98, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x41, 0x47, 0x47, 0x5f, 0x10, 0x99, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x4f, 0x42, 0x4a,
	0x45, 0x43, 0x54, 0x41, 0x47, 0x47, 0x5f, 0x10, 0x9a, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x4e, 0x4e, 0x45, 0x53,
	0x54, 0x5f, 0x10, 0x9b, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x41, 0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x10, 0x9c,
	0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x54, 0x41, 0x42,
	0x4c, 0x45, 0x5f, 0x10, 0x9d, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x56, 0x41, 0x4c,
	0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10,
	0x9e, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59, 0x5f, 0x51, 0x55, 0x45, 0x52, 0x59, 0x5f, 0x43,
	0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0x9f, 0x01, 0x12, 0x28,
	0x0a, 0x23, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d,
	0x41, 0x50, 0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55,
	0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0xa0, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x41, 0x50, 0x5f, 0x51, 0x55, 0x45,
	0x52, 0x59, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52, 0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10,
	0xa1, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x55, 0x52, 0x53, 0x4f, 0x52, 0x5f, 0x10, 0xa2, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x49,
	0x54, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x43, 0x48, 0x41, 0x49, 0x4e, 0x5f, 0x10, 0xa3, 0x01, 0x12,
	0x19, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x45, 0x53, 0x43, 0x41, 0x50, 0x45, 0x5f, 0x10, 0xa4, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x49, 0x4e, 0x54,
	0x45, 0x52, 0x50, 0x52, 0x45, 0x54, 0x5f, 0x10, 0xa5, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x58, 0x54, 0x45, 0x4e,
	0x44, 0x5f, 0x10, 0xa6, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x55, 0x42, 0x45, 0x5f, 0x10, 0xa7, 0x01, 0x12, 0x19,
	0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x55, 0x50, 0x5f, 0x10, 0xa8, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49,
	0x4e, 0x47, 0x5f, 0x53, 0x45, 0x54, 0x53, 0x5f, 0x10, 0xa9, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x4f, 0x55,
	0x50, 0x49, 0x4e, 0x47, 0x5f, 0x10, 0xaa, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x49, 0x4e,
	0x47, 0x5f, 0x49, 0x44, 0x5f, 0x10, 0xab, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x49,
	0x44, 0x5f, 0x10, 0xac, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52, 0x4e, 0x5f, 0x50, 0x45,
	0x52, 0x4d, 0x55, 0x54, 0x45, 0x5f, 0x10, 0xad, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x41, 0x54, 0x54, 0x45, 0x52,
	0x4e, 0x5f, 0x45, 0x58, 0x43, 0x4c, 0x55, 0x44, 0x45, 0x44, 0x5f, 0x10, 0xae, 0x01, 0x12, 0x18,
	0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43,
	0x4f, 0x55, 0x4e, 0x54, 0x5f, 0x10, 0xaf, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x55, 0x4d, 0x5f, 0x10, 0xb0, 0x01,
	0x12, 0x17, 0x0a, 0x12, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x53, 0x55, 0x4d, 0x30, 0x5f, 0x10, 0xb1, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4e, 0x5f, 0x10, 0xb2,
	0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4d, 0x41, 0x58, 0x5f, 0x10, 0xb3, 0x01, 0x12, 0x17, 0x0a, 0x12, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x45, 0x41, 0x44, 0x5f, 0x10,
	0xb4, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4c, 0x41, 0x47, 0x5f, 0x10, 0xb5, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x49, 0x52, 0x53, 0x54,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x10, 0xb6, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f,
	0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x10, 0xb7, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4e, 0x59, 0x5f, 0x56, 0x41,
	0x4c, 0x55, 0x45, 0x5f, 0x10, 0xb8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x56, 0x41, 0x52, 0x5f, 0x50, 0x4f,
	0x50, 0x5f, 0x10, 0xb9, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x50,
	0x5f, 0x10, 0xba, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x5f,
	0x10, 0xbb, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x53, 0x58, 0x58, 0x5f, 0x10, 0xbc, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x52, 0x45, 0x47, 0x52, 0x5f, 0x53, 0x59, 0x59, 0x5f, 0x10, 0xbd, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x56,
	0x47, 0x5f, 0x10, 0xbe, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x44, 0x44, 0x45, 0x56, 0x5f, 0x50, 0x4f, 0x50,
	0x5f, 0x10, 0xbf, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x44, 0x44, 0x45, 0x56, 0x5f, 0x53, 0x41, 0x4d, 0x50,
	0x5f, 0x10, 0xc0, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x56, 0x41, 0x52, 0x5f, 0x50, 0x4f, 0x50, 0x5f, 0x10, 0xc1, 0x01,
	0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x56, 0x41, 0x52, 0x5f, 0x53, 0x41, 0x4d, 0x50, 0x5f, 0x10, 0xc2, 0x01, 0x12, 0x18, 0x0a,
	0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x54,
	0x49, 0x4c, 0x45, 0x5f, 0x10, 0xc3, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x54, 0x48, 0x5f, 0x56, 0x41, 0x4c, 0x55,
	0x45, 0x5f, 0x10, 0xc4, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4c, 0x49, 0x53, 0x54, 0x41, 0x47, 0x47, 0x5f, 0x10, 0xc5,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x41, 0x47, 0x47, 0x5f, 0x10, 0xc6, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x43, 0x4f, 0x55, 0x4e, 0x54, 0x49, 0x46, 0x5f, 0x10, 0xc7, 0x01, 0x12, 0x1c, 0x0a, 0x17,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52,
	0x41, 0x59, 0x5f, 0x41, 0x47, 0x47, 0x5f, 0x10, 0xc8, 0x01, 0x12, 0x23, 0x0a, 0x1e, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x52, 0x52, 0x41, 0x59,
	0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x5f, 0x41, 0x47, 0x47, 0x5f, 0x10, 0xc9, 0x01, 0x12,
	0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x47, 0x52, 0x4f, 0x55, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x43, 0x41, 0x54, 0x5f, 0x10, 0xca, 0x01,
	0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x43, 0x4f, 0x4c, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x10, 0xcb, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x4f, 0x44,
	0x45, 0x5f, 0x10, 0xcc, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x49, 0x4c, 0x45,
	0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x5f, 0x10, 0xcd, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x49, 0x4c, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x43, 0x5f, 0x10, 0xce, 0x01, 0x12, 0x19, 0x0a,
	0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x55,
	0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0xcf, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b,
	0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x53, 0x45,
	0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0xd0, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x49, 0x4e, 0x47, 0x4c, 0x45,
	0x5f, 0x56, 0x41, 0x4c, 0x55, 0x45, 0x5f, 0x10, 0xd1, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71,
	0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x10, 0xd2, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x4f, 0x52, 0x5f, 0x10, 0xd3,
	0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x42, 0x49, 0x54, 0x5f, 0x58, 0x4f, 0x52, 0x5f, 0x10, 0xd4, 0x01, 0x12, 0x1d, 0x0a,
	0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x4f,
	0x57, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x5f, 0x10, 0xd5, 0x01, 0x12, 0x17, 0x0a, 0x12,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x10, 0xd6, 0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x41,
	0x4e, 0x4b, 0x5f, 0x10, 0xd7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x4e, 0x53, 0x45, 0x5f, 0x52, 0x41, 0x4e,
	0x4b, 0x5f, 0x10, 0xd8, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x55, 0x4d, 0x45, 0x5f, 0x44, 0x49, 0x53, 0x54, 0x5f,
	0x10, 0xd9, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x4f, 0x52, 0x5f, 0x10,
	0xda, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x54, 0x55, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0xdb, 0x01, 0x12, 0x1f, 0x0a,
	0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x55,
	0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x10, 0xdc, 0x01, 0x12, 0x1d,
	0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x54,
	0x55, 0x4d, 0x42, 0x4c, 0x45, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x10, 0xdd, 0x01, 0x12, 0x16, 0x0a,
	0x11, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x4f,
	0x50, 0x5f, 0x10, 0xde, 0x01, 0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f,
	0x10, 0xdf, 0x01, 0x12, 0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x48, 0x4f, 0x50, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x10, 0xe0, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x53, 0x45, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0xe1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x53, 0x53,
	0x49, 0x4f, 0x4e, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x10, 0xe2, 0x01, 0x12, 0x1e, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45,
	0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x45, 0x4e, 0x44, 0x5f, 0x10, 0xe3, 0x01, 0x12, 0x1e, 0x0a,
	0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f,
	0x4c, 0x55, 0x4d, 0x4e, 0x5f, 0x44, 0x45, 0x43, 0x4c, 0x5f, 0x10, 0xe4, 0x01, 0x12, 0x20, 0x0a,
	0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x54,
	0x54, 0x52, 0x49, 0x42, 0x55, 0x54, 0x45, 0x5f, 0x44, 0x45, 0x46, 0x5f, 0x10, 0xe5, 0x01, 0x12,
	0x18, 0x0a, 0x13, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x43, 0x48, 0x45, 0x43, 0x4b, 0x5f, 0x10, 0xe6, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x4e, 0x49, 0x51, 0x55, 0x45,
	0x5f, 0x10, 0xe7, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x52, 0x49, 0x4d, 0x41, 0x52, 0x59, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x10, 0xe8, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x4b, 0x45, 0x59,
	0x5f, 0x10, 0xe9, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x5f, 0x44, 0x57, 0x49, 0x54, 0x48, 0x49, 0x4e, 0x5f,
	0x10, 0xea, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x5f, 0x10, 0xeb, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x53, 0x54, 0x5f, 0x50, 0x4f, 0x49, 0x4e, 0x54, 0x33, 0x5f, 0x10, 0xec, 0x01, 0x12, 0x1f,
	0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53,
	0x54, 0x5f, 0x4d, 0x41, 0x4b, 0x45, 0x5f, 0x4c, 0x49, 0x4e, 0x45, 0x5f, 0x10, 0xed, 0x01, 0x12,
	0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x53, 0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x54, 0x41, 0x49, 0x4e, 0x53, 0x5f, 0x10, 0xee, 0x01, 0x12,
	0x1a, 0x0a, 0x15, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x48, 0x49, 0x4c, 0x42, 0x45, 0x52, 0x54, 0x5f, 0x10, 0xef, 0x01, 0x12, 0x19, 0x0a, 0x14, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x4f, 0x4d, 0x4d,
	0x49, 0x54, 0x5f, 0x10, 0xf0, 0x01, 0x12, 0x1b, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x42, 0x41, 0x43, 0x4b, 0x5f,
	0x10, 0xf1, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x53, 0x53, 0x49, 0x4f,
	0x4e, 0x5f, 0x10, 0xf2, 0x01, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x43, 0x48,
	0x45, 0x4d, 0x41, 0x5f, 0x10, 0xf3, 0x01, 0x12, 0x28, 0x0a, 0x23, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x46,
	0x4f, 0x52, 0x45, 0x49, 0x47, 0x4e, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x10, 0xf4,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x53, 0x43, 0x48, 0x45, 0x4d, 0x41, 0x5f, 0x10, 0xf5,
	0x01, 0x12, 0x1f, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10,
	0xf6, 0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10,
	0xf7, 0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0xf8,
	0x01, 0x12, 0x1e, 0x0a, 0x19, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x10, 0xf9,
	0x01, 0x12, 0x1d, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x10, 0xfa, 0x01,
	0x12, 0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x10, 0xfb, 0x01, 0x12, 0x2b,
	0x0a, 0x26, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43,
	0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a,
	0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x10, 0xfc, 0x01, 0x12, 0x2a, 0x0a, 0x25, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x54, 0x45,
	0x52, 0x5f, 0x4d, 0x41, 0x54, 0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x56,
	0x49, 0x45, 0x57, 0x5f, 0x10, 0xfd, 0x01, 0x12, 0x29, 0x0a, 0x24, 0x53, 0x71, 0x6c, 0x4b, 0x69,
	0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x4d, 0x41, 0x54,
	0x45, 0x52, 0x49, 0x41, 0x4c, 0x49, 0x5a, 0x45, 0x44, 0x5f, 0x56, 0x49, 0x45, 0x57, 0x5f, 0x10,
	0xfe, 0x01, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e,
	0x43, 0x45, 0x5f, 0x10, 0xff, 0x01, 0x12, 0x21, 0x0a, 0x1c, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e,
	0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x51,
	0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x10, 0x80, 0x02, 0x12, 0x20, 0x0a, 0x1b, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52, 0x4f, 0x50, 0x5f, 0x53,
	0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x10, 0x81, 0x02, 0x12, 0x1f, 0x0a, 0x1a, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x10, 0x82, 0x02, 0x12, 0x1e, 0x0a, 0x19,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x54,
	0x45, 0x52, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x10, 0x83, 0x02, 0x12, 0x1d, 0x0a, 0x18,
	0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52, 0x4f,
	0x50, 0x5f, 0x49, 0x4e, 0x44, 0x45, 0x58, 0x5f, 0x10, 0x84, 0x02, 0x12, 0x1e, 0x0a, 0x19, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41,
	0x54, 0x45, 0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x10, 0x85, 0x02, 0x12, 0x1c, 0x0a, 0x17, 0x53,
	0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52, 0x4f, 0x50,
	0x5f, 0x54, 0x59, 0x50, 0x45, 0x5f, 0x10, 0x86, 0x02, 0x12, 0x22, 0x0a, 0x1d, 0x53, 0x71, 0x6c,
	0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x43, 0x52, 0x45, 0x41, 0x54, 0x45,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x87, 0x02, 0x12, 0x20, 0x0a,
	0x1b, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x52,
	0x4f, 0x50, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x88, 0x02, 0x12,
	0x1c, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x4b, 0x69, 0x6e, 0x64, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f,
	0x4f, 0x54, 0x48, 0x45, 0x52, 0x5f, 0x44, 0x44, 0x4c, 0x5f, 0x10, 0x89, 0x02, 0x2a, 0x76, 0x0a,
	0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x4f, 0x4e, 0x45, 0x5f, 0x10, 0x00, 0x12, 0x1d, 0x0a,
	0x19, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x43, 0x4f, 0x4d, 0x50, 0x41, 0x52, 0x45, 0x5f, 0x10, 0x01, 0x12, 0x27, 0x0a, 0x23,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4c, 0x45, 0x41, 0x53, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x54, 0x52, 0x49, 0x43, 0x54, 0x49,
	0x56, 0x45, 0x5f, 0x10, 0x02, 0x2a, 0x85, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x6f,
	0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41,
	0x4e, 0x44, 0x5f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x52, 0x5f, 0x10, 0x01, 0x12,
	0x1e, 0x0a, 0x1a, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x51, 0x55, 0x45, 0x4e, 0x43, 0x45, 0x5f, 0x10, 0x02, 0x12,
	0x1c, 0x0a, 0x18, 0x43, 0x6f, 0x6d, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x50, 0x45, 0x41, 0x54, 0x5f, 0x10, 0x03, 0x2a, 0xc4, 0x04,
	0x0a, 0x18, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74,
	0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x5f, 0x10, 0x00,
	0x12, 0x25, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4d,
	0x45, 0x52, 0x49, 0x43, 0x5f, 0x10, 0x01, 0x12, 0x26, 0x0a, 0x22, 0x53, 0x71, 0x6c, 0x46, 0x75,
	0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x10, 0x02, 0x12,
	0x24, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61,
	0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x59, 0x53, 0x54,
	0x45, 0x4d, 0x5f, 0x10, 0x03, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x46,
	0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x04, 0x12, 0x34, 0x0a, 0x30, 0x53, 0x71,
	0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72,
	0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49,
	0x4e, 0x45, 0x44, 0x5f, 0x50, 0x52, 0x4f, 0x43, 0x45, 0x44, 0x55, 0x52, 0x45, 0x5f, 0x10, 0x05,
	0x12, 0x36, 0x0a, 0x32, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x53, 0x45,
	0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x53, 0x54, 0x52,
	0x55, 0x43, 0x54, 0x4f, 0x52, 0x5f, 0x10, 0x06, 0x12, 0x3c, 0x0a, 0x38, 0x53, 0x71, 0x6c, 0x46,
	0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45,
	0x44, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54,
	0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x07, 0x12, 0x39, 0x0a, 0x35, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x55, 0x53, 0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f,
	0x54, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10,
	0x08, 0x12, 0x42, 0x0a, 0x3e, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x55, 0x53,
	0x45, 0x52, 0x5f, 0x44, 0x45, 0x46, 0x49, 0x4e, 0x45, 0x44, 0x5f, 0x54, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x43, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49,
	0x4f, 0x4e, 0x5f, 0x10, 0x09, 0x12, 0x2d, 0x0a, 0x29, 0x53, 0x71, 0x6c, 0x46, 0x75, 0x6e, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x4d, 0x41, 0x54, 0x43, 0x48, 0x5f, 0x52, 0x45, 0x43, 0x4f, 0x47, 0x4e, 0x49, 0x5a,
	0x45, 0x5f, 0x10, 0x0a, 0x2a, 0x94, 0x04, 0x0a, 0x0d, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e,
	0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x10, 0x00, 0x12,
	0x18, 0x0a, 0x14, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4d, 0x4f, 0x4e, 0x54, 0x48, 0x5f, 0x10, 0x01, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d,
	0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x41, 0x59, 0x5f, 0x10,
	0x02, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x5f, 0x10, 0x03, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x69,
	0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4e, 0x55,
	0x54, 0x45, 0x5f, 0x10, 0x04, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x05,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x51, 0x55, 0x41, 0x52, 0x54, 0x45, 0x52, 0x5f, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53,
	0x4f, 0x59, 0x45, 0x41, 0x52, 0x5f, 0x10, 0x07, 0x12, 0x17, 0x0a, 0x13, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x57, 0x45, 0x45, 0x4b, 0x5f, 0x10,
	0x08, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x4c, 0x4c, 0x49, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10,
	0x09, 0x12, 0x1e, 0x0a, 0x1a, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4d, 0x49, 0x43, 0x52, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10,
	0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x5f, 0x4e, 0x41, 0x4e, 0x4f, 0x53, 0x45, 0x43, 0x4f, 0x4e, 0x44, 0x5f, 0x10, 0x0b,
	0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x44, 0x4f, 0x57, 0x5f, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65,
	0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x4f, 0x44, 0x4f, 0x57,
	0x5f, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x4f, 0x59, 0x5f, 0x10, 0x0e, 0x12, 0x18, 0x0a, 0x14, 0x54,
	0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x45, 0x50, 0x4f,
	0x43, 0x48, 0x5f, 0x10, 0x0f, 0x12, 0x19, 0x0a, 0x15, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x43, 0x41, 0x44, 0x45, 0x5f, 0x10, 0x10,
	0x12, 0x1a, 0x0a, 0x16, 0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x43, 0x45, 0x4e, 0x54, 0x55, 0x52, 0x59, 0x5f, 0x10, 0x11, 0x12, 0x1d, 0x0a, 0x19,
	0x54, 0x69, 0x6d, 0x65, 0x55, 0x6e, 0x69, 0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x49,
	0x4c, 0x4c, 0x45, 0x4e, 0x4e, 0x49, 0x55, 0x4d, 0x5f, 0x10, 0x12, 0x2a, 0xac, 0x01, 0x0a, 0x14,
	0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x25, 0x0a, 0x21, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72,
	0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x57,
	0x41, 0x59, 0x53, 0x5f, 0x54, 0x52, 0x55, 0x45, 0x5f, 0x10, 0x00, 0x12, 0x26, 0x0a, 0x22, 0x4f,
	0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x46, 0x41, 0x4c, 0x53, 0x45,
	0x5f, 0x10, 0x01, 0x12, 0x21, 0x0a, 0x1d, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x50, 0x72, 0x65,
	0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x53, 0x5f, 0x4e,
	0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x02, 0x12, 0x22, 0x0a, 0x1e, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x50, 0x72, 0x65, 0x64, 0x69, 0x63, 0x61, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e,
	0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x03, 0x2a, 0x93, 0x01, 0x0a, 0x10, 0x4f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4d, 0x41, 0x4e, 0x44, 0x41, 0x54, 0x4f, 0x52, 0x59, 0x5f, 0x10, 0x00,
	0x12, 0x1e, 0x0a, 0x1a, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x41, 0x4c, 0x5f, 0x10, 0x01,
	0x12, 0x1d, 0x0a, 0x19, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x49, 0x47, 0x4e, 0x4f, 0x52, 0x45, 0x44, 0x5f, 0x10, 0x02, 0x12,
	0x1f, 0x0a, 0x1b, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x4f, 0x52, 0x42, 0x49, 0x44, 0x44, 0x45, 0x4e, 0x5f, 0x10, 0x03,
	0x2a, 0x8f, 0x01, 0x0a, 0x21, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x33, 0x0a, 0x2f, 0x53, 0x71, 0x6c, 0x4a, 0x73, 0x6f,
	0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x4e, 0x75, 0x6c, 0x6c,
	0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x55, 0x4c, 0x4c,
	0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f, 0x10, 0x00, 0x12, 0x35, 0x0a, 0x31, 0x53,
	0x71, 0x6c, 0x4a, 0x73, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x6f,
	0x72, 0x4e, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x61, 0x75, 0x73, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x41, 0x42, 0x53, 0x45, 0x4e, 0x54, 0x5f, 0x4f, 0x4e, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x5f,
	0x10, 0x01, 0x2a, 0xa8, 0x02, 0x0a, 0x0e, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74,
	0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x10, 0x00, 0x12, 0x21, 0x0a, 0x1d, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x53,
	0x54, 0x41, 0x52, 0x5f, 0x10, 0x01, 0x12, 0x24, 0x0a, 0x20, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e,
	0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x4f, 0x52, 0x44, 0x45, 0x52, 0x45, 0x44,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16,
	0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x42,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x10, 0x03, 0x12, 0x1a, 0x0a, 0x16, 0x53, 0x71, 0x6c, 0x53,
	0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x52, 0x45, 0x46, 0x49,
	0x58, 0x5f, 0x10, 0x04, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61,
	0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x46, 0x49, 0x58, 0x5f, 0x10,
	0x05, 0x12, 0x1b, 0x0a, 0x17, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x50, 0x45, 0x43, 0x49, 0x41, 0x4c, 0x5f, 0x10, 0x06, 0x12, 0x1f,
	0x0a, 0x1b, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x46, 0x55, 0x4e, 0x43, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x49, 0x44, 0x5f, 0x10, 0x07, 0x12,
	0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x53, 0x79, 0x6e, 0x74, 0x61, 0x78, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x5f, 0x49, 0x4e, 0x54, 0x45, 0x52, 0x4e, 0x41, 0x4c, 0x5f, 0x10, 0x08, 0x2a, 0x50, 0x0a,
	0x10, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x1e, 0x0a, 0x1a, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x52, 0x45, 0x4c, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x10,
	0x00, 0x12, 0x1c, 0x0a, 0x18, 0x53, 0x71, 0x6c, 0x4d, 0x6f, 0x64, 0x61, 0x6c, 0x69, 0x74, 0x79,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x52, 0x45, 0x41, 0x4d, 0x5f, 0x10, 0x01, 0x2a,
	0x40, 0x0a, 0x09, 0x46, 0x6c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x19, 0x0a, 0x15,
	0x46, 0x6c, 0x61, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x41, 0x53, 0x59, 0x4d, 0x4d, 0x45,
	0x54, 0x52, 0x49, 0x43, 0x5f, 0x10, 0x00, 0x12, 0x18, 0x0a, 0x14, 0x46, 0x6c, 0x61, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x59, 0x4d, 0x4d, 0x45, 0x54, 0x52, 0x49, 0x43, 0x5f, 0x10,
	0x01, 0x2a, 0xc4, 0x01, 0x0a, 0x13, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x61,
	0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x21, 0x0a, 0x1d, 0x43, 0x6f, 0x6c,
	0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45, 0x5f, 0x10, 0x00, 0x12, 0x25, 0x0a, 0x21,
	0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x5f, 0x4e, 0x4f, 0x54, 0x5f, 0x4e, 0x55, 0x4c, 0x4c, 0x41, 0x42, 0x4c, 0x45,
	0x5f, 0x10, 0x01, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53, 0x74, 0x72,
	0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x44, 0x45, 0x46, 0x41, 0x55,
	0x4c, 0x54, 0x5f, 0x10, 0x02, 0x12, 0x1f, 0x0a, 0x1b, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e, 0x53,
	0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x53, 0x54, 0x4f,
	0x52, 0x45, 0x44, 0x5f, 0x10, 0x03, 0x12, 0x20, 0x0a, 0x1c, 0x43, 0x6f, 0x6c, 0x75, 0x6d, 0x6e,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5f, 0x56, 0x49,
	0x52, 0x54, 0x55, 0x41, 0x4c, 0x5f, 0x10, 0x04, 0x42, 0x23, 0x0a, 0x1f, 0x63, 0x6f, 0x6d, 0x2e,
	0x72, 0x69, 0x6c, 0x6c, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x67, 0x65, 0x6e, 0x65, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x01, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_sql_src_main_proto_ast_proto_rawDescOnce sync.Once
	file_sql_src_main_proto_ast_proto_rawDescData = file_sql_src_main_proto_ast_proto_rawDesc
)

func file_sql_src_main_proto_ast_proto_rawDescGZIP() []byte {
	file_sql_src_main_proto_ast_proto_rawDescOnce.Do(func() {
		file_sql_src_main_proto_ast_proto_rawDescData = protoimpl.X.CompressGZIP(file_sql_src_main_proto_ast_proto_rawDescData)
	})
	return file_sql_src_main_proto_ast_proto_rawDescData
}

var file_sql_src_main_proto_ast_proto_enumTypes = make([]protoimpl.EnumInfo, 19)
var file_sql_src_main_proto_ast_proto_msgTypes = make([]protoimpl.MessageInfo, 337)
var file_sql_src_main_proto_ast_proto_goTypes = []interface{}{
	(SqlTypeNameProto)(0),                                       // 0: rill.sql.v1.SqlTypeNameProto
	(CoercibilityProto)(0),                                      // 1: rill.sql.v1.CoercibilityProto
	(TimeUnitRangeProto)(0),                                     // 2: rill.sql.v1.TimeUnitRangeProto
	(RelDataTypeComparabilityProto)(0),                          // 3: rill.sql.v1.RelDataTypeComparabilityProto
	(SqlTypeFamilyProto)(0),                                     // 4: rill.sql.v1.SqlTypeFamilyProto
	(StructKindProto)(0),                                        // 5: rill.sql.v1.StructKindProto
	(HintOptionFormatProto)(0),                                  // 6: rill.sql.v1.HintOptionFormatProto
	(SqlKindProto)(0),                                           // 7: rill.sql.v1.SqlKindProto
	(ConsistencyProto)(0),                                       // 8: rill.sql.v1.ConsistencyProto
	(CompositionProto)(0),                                       // 9: rill.sql.v1.CompositionProto
	(SqlFunctionCategoryProto)(0),                               // 10: rill.sql.v1.SqlFunctionCategoryProto
	(TimeUnitProto)(0),                                          // 11: rill.sql.v1.TimeUnitProto
	(ObjectPredicateProto)(0),                                   // 12: rill.sql.v1.ObjectPredicateProto
	(OptionalityProto)(0),                                       // 13: rill.sql.v1.OptionalityProto
	(SqlJsonConstructorNullClauseProto)(0),                      // 14: rill.sql.v1.SqlJsonConstructorNullClauseProto
	(SqlSyntaxProto)(0),                                         // 15: rill.sql.v1.SqlSyntaxProto
	(SqlModalityProto)(0),                                       // 16: rill.sql.v1.SqlModalityProto
	(FlagProto)(0),                                              // 17: rill.sql.v1.FlagProto
	(ColumnStrategyProto)(0),                                    // 18: rill.sql.v1.ColumnStrategyProto
	(*RelDataTypeProto)(nil),                                    // 19: rill.sql.v1.RelDataTypeProto
	(*RelDataTypeImplProto)(nil),                                // 20: rill.sql.v1.RelDataTypeImplProto
	(*AbstractSqlTypeProto)(nil),                                // 21: rill.sql.v1.AbstractSqlTypeProto
	(*MultisetSqlTypeProto)(nil),                                // 22: rill.sql.v1.MultisetSqlTypeProto
	(*RelDataTypeFieldProto)(nil),                               // 23: rill.sql.v1.RelDataTypeFieldProto
	(*RelDataTypeFieldImplProto)(nil),                           // 24: rill.sql.v1.RelDataTypeFieldImplProto
	(*ArraySqlTypeProto)(nil),                                   // 25: rill.sql.v1.ArraySqlTypeProto
	(*MapSqlTypeProto)(nil),                                     // 26: rill.sql.v1.MapSqlTypeProto
	(*BasicSqlTypeProto)(nil),                                   // 27: rill.sql.v1.BasicSqlTypeProto
	(*RelDataTypeSystemProto)(nil),                              // 28: rill.sql.v1.RelDataTypeSystemProto
	(*RelDataTypeSystemImplProto)(nil),                          // 29: rill.sql.v1.RelDataTypeSystemImplProto
	(*DelegatingTypeSystemProto)(nil),                           // 30: rill.sql.v1.DelegatingTypeSystemProto
	(*SqlCollationProto)(nil),                                   // 31: rill.sql.v1.SqlCollationProto
	(*JavaCollationProto)(nil),                                  // 32: rill.sql.v1.JavaCollationProto
	(*CollatorProto)(nil),                                       // 33: rill.sql.v1.CollatorProto
	(*SerializableCharsetProto)(nil),                            // 34: rill.sql.v1.SerializableCharsetProto
	(*CharsetProto)(nil),                                        // 35: rill.sql.v1.CharsetProto
	(*LocaleProto)(nil),                                         // 36: rill.sql.v1.LocaleProto
	(*IntervalSqlTypeProto)(nil),                                // 37: rill.sql.v1.IntervalSqlTypeProto
	(*SqlIntervalQualifierProto)(nil),                           // 38: rill.sql.v1.SqlIntervalQualifierProto
	(*SqlParserPosProto)(nil),                                   // 39: rill.sql.v1.SqlParserPosProto
	(*ObjectSqlTypeProto)(nil),                                  // 40: rill.sql.v1.ObjectSqlTypeProto
	(*SqlIdentifierProto)(nil),                                  // 41: rill.sql.v1.SqlIdentifierProto
	(*RelDataTypeFamilyProto)(nil),                              // 42: rill.sql.v1.RelDataTypeFamilyProto
	(*RelCrossTypeProto)(nil),                                   // 43: rill.sql.v1.RelCrossTypeProto
	(*RelRecordTypeProto)(nil),                                  // 44: rill.sql.v1.RelRecordTypeProto
	(*JavaRecordTypeProto)(nil),                                 // 45: rill.sql.v1.JavaRecordTypeProto
	(*ClassProto)(nil),                                          // 46: rill.sql.v1.ClassProto
	(*DynamicRecordTypeProto)(nil),                              // 47: rill.sql.v1.DynamicRecordTypeProto
	(*DynamicRecordTypeImplProto)(nil),                          // 48: rill.sql.v1.DynamicRecordTypeImplProto
	(*RelDataTypeHolderProto)(nil),                              // 49: rill.sql.v1.RelDataTypeHolderProto
	(*RelDataTypeFactoryProto)(nil),                             // 50: rill.sql.v1.RelDataTypeFactoryProto
	(*JavaTypeFactoryProto)(nil),                                // 51: rill.sql.v1.JavaTypeFactoryProto
	(*JavaTypeFactoryImplProto)(nil),                            // 52: rill.sql.v1.JavaTypeFactoryImplProto
	(*RelDataTypeFactoryImplProto)(nil),                         // 53: rill.sql.v1.RelDataTypeFactoryImplProto
	(*SqlTypeFactoryImplProto)(nil),                             // 54: rill.sql.v1.SqlTypeFactoryImplProto
	(*SqlNodeProto)(nil),                                        // 55: rill.sql.v1.SqlNodeProto
	(*SqlCallProto)(nil),                                        // 56: rill.sql.v1.SqlCallProto
	(*SqlUpdateProto)(nil),                                      // 57: rill.sql.v1.SqlUpdateProto
	(*SqlNodeListProto)(nil),                                    // 58: rill.sql.v1.SqlNodeListProto
	(*SqlSelectProto)(nil),                                      // 59: rill.sql.v1.SqlSelectProto
	(*SqlInsertProto)(nil),                                      // 60: rill.sql.v1.SqlInsertProto
	(*SqlCaseProto)(nil),                                        // 61: rill.sql.v1.SqlCaseProto
	(*SqlDeleteProto)(nil),                                      // 62: rill.sql.v1.SqlDeleteProto
	(*SqlCheckConstraintProto)(nil),                             // 63: rill.sql.v1.SqlCheckConstraintProto
	(*SqlPivotProto)(nil),                                       // 64: rill.sql.v1.SqlPivotProto
	(*SqlTableRefProto)(nil),                                    // 65: rill.sql.v1.SqlTableRefProto
	(*SqlKeyConstraintProto)(nil),                               // 66: rill.sql.v1.SqlKeyConstraintProto
	(*SqlWithProto)(nil),                                        // 67: rill.sql.v1.SqlWithProto
	(*SqlSnapshotProto)(nil),                                    // 68: rill.sql.v1.SqlSnapshotProto
	(*SqlOrderByProto)(nil),                                     // 69: rill.sql.v1.SqlOrderByProto
	(*SqlWindowProto)(nil),                                      // 70: rill.sql.v1.SqlWindowProto
	(*SqlLiteralProto)(nil),                                     // 71: rill.sql.v1.SqlLiteralProto
	(*SqlNumericLiteralProto)(nil),                              // 72: rill.sql.v1.SqlNumericLiteralProto
	(*SqlAbstractStringLiteralProto)(nil),                       // 73: rill.sql.v1.SqlAbstractStringLiteralProto
	(*SqlBinaryStringLiteralProto)(nil),                         // 74: rill.sql.v1.SqlBinaryStringLiteralProto
	(*SqlCharStringLiteralProto)(nil),                           // 75: rill.sql.v1.SqlCharStringLiteralProto
	(*SqlAbstractDateTimeLiteralProto)(nil),                     // 76: rill.sql.v1.SqlAbstractDateTimeLiteralProto
	(*SqlDateLiteralProto)(nil),                                 // 77: rill.sql.v1.SqlDateLiteralProto
	(*SqlTimestampLiteralProto)(nil),                            // 78: rill.sql.v1.SqlTimestampLiteralProto
	(*SqlTimeLiteralProto)(nil),                                 // 79: rill.sql.v1.SqlTimeLiteralProto
	(*SqlIntervalLiteralProto)(nil),                             // 80: rill.sql.v1.SqlIntervalLiteralProto
	(*SqlAttributeDefinitionProto)(nil),                         // 81: rill.sql.v1.SqlAttributeDefinitionProto
	(*SqlDataTypeSpecProto)(nil),                                // 82: rill.sql.v1.SqlDataTypeSpecProto
	(*SqlTypeNameSpecProto)(nil),                                // 83: rill.sql.v1.SqlTypeNameSpecProto
	(*SqlUserDefinedTypeNameSpecProto)(nil),                     // 84: rill.sql.v1.SqlUserDefinedTypeNameSpecProto
	(*SqlRowTypeNameSpecProto)(nil),                             // 85: rill.sql.v1.SqlRowTypeNameSpecProto
	(*SqlBasicTypeNameSpecProto)(nil),                           // 86: rill.sql.v1.SqlBasicTypeNameSpecProto
	(*SqlAlienSystemTypeNameSpecProto)(nil),                     // 87: rill.sql.v1.SqlAlienSystemTypeNameSpecProto
	(*SqlCollectionTypeNameSpecProto)(nil),                      // 88: rill.sql.v1.SqlCollectionTypeNameSpecProto
	(*TimeZoneProto)(nil),                                       // 89: rill.sql.v1.TimeZoneProto
	(*SqlExplainProto)(nil),                                     // 90: rill.sql.v1.SqlExplainProto
	(*SqlWithItemProto)(nil),                                    // 91: rill.sql.v1.SqlWithItemProto
	(*SqlUnpivotProto)(nil),                                     // 92: rill.sql.v1.SqlUnpivotProto
	(*SqlMergeProto)(nil),                                       // 93: rill.sql.v1.SqlMergeProto
	(*SqlHintProto)(nil),                                        // 94: rill.sql.v1.SqlHintProto
	(*SqlBasicCallProto)(nil),                                   // 95: rill.sql.v1.SqlBasicCallProto
	(*SqlOperatorProto)(nil),                                    // 96: rill.sql.v1.SqlOperatorProto
	(*SqlPrefixOperatorProto)(nil),                              // 97: rill.sql.v1.SqlPrefixOperatorProto
	(*SqlNewOperatorProto)(nil),                                 // 98: rill.sql.v1.SqlNewOperatorProto
	(*SqlReturnTypeInferenceProto)(nil),                         // 99: rill.sql.v1.SqlReturnTypeInferenceProto
	(*SqlReturnTypeInferenceChainProto)(nil),                    // 100: rill.sql.v1.SqlReturnTypeInferenceChainProto
	(*OrdinalReturnTypeInferenceProto)(nil),                     // 101: rill.sql.v1.OrdinalReturnTypeInferenceProto
	(*ExplicitReturnTypeInferenceProto)(nil),                    // 102: rill.sql.v1.ExplicitReturnTypeInferenceProto
	(*TableFunctionReturnTypeInferenceProto)(nil),               // 103: rill.sql.v1.TableFunctionReturnTypeInferenceProto
	(*RelColumnMappingProto)(nil),                               // 104: rill.sql.v1.RelColumnMappingProto
	(*RelProtoDataTypeProto)(nil),                               // 105: rill.sql.v1.RelProtoDataTypeProto
	(*CursorReturnTypeInferenceProto)(nil),                      // 106: rill.sql.v1.CursorReturnTypeInferenceProto
	(*SqlTypeTransformCascadeProto)(nil),                        // 107: rill.sql.v1.SqlTypeTransformCascadeProto
	(*SqlTypeTransformProto)(nil),                               // 108: rill.sql.v1.SqlTypeTransformProto
	(*MatchReturnTypeInferenceProto)(nil),                       // 109: rill.sql.v1.MatchReturnTypeInferenceProto
	(*SqlOperandTypeInferenceProto)(nil),                        // 110: rill.sql.v1.SqlOperandTypeInferenceProto
	(*ExplicitOperandTypeInferenceProto)(nil),                   // 111: rill.sql.v1.ExplicitOperandTypeInferenceProto
	(*SqlOperandTypeCheckerProto)(nil),                          // 112: rill.sql.v1.SqlOperandTypeCheckerProto
	(*SqlOperandMetadataProto)(nil),                             // 113: rill.sql.v1.SqlOperandMetadataProto
	(*OperandMetadataImplProto)(nil),                            // 114: rill.sql.v1.OperandMetadataImplProto
	(*FunctionProto)(nil),                                       // 115: rill.sql.v1.FunctionProto
	(*IntFunctionProto)(nil),                                    // 116: rill.sql.v1.IntFunctionProto
	(*PredicateProto)(nil),                                      // 117: rill.sql.v1.PredicateProto
	(*SetopOperandTypeCheckerProto)(nil),                        // 118: rill.sql.v1.SetopOperandTypeCheckerProto
	(*ExplicitOperandTypeCheckerProto)(nil),                     // 119: rill.sql.v1.ExplicitOperandTypeCheckerProto
	(*SqlSingleOperandTypeCheckerProto)(nil),                    // 120: rill.sql.v1.SqlSingleOperandTypeCheckerProto
	(*LiteralOperandTypeCheckerProto)(nil),                      // 121: rill.sql.v1.LiteralOperandTypeCheckerProto
	(*SameOperandTypeCheckerProto)(nil),                         // 122: rill.sql.v1.SameOperandTypeCheckerProto
	(*SameOperandTypeExceptLastOperandCheckerProto)(nil),        // 123: rill.sql.v1.SameOperandTypeExceptLastOperandCheckerProto
	(*ComparableOperandTypeCheckerProto)(nil),                   // 124: rill.sql.v1.ComparableOperandTypeCheckerProto
	(*FamilyOperandTypeCheckerProto)(nil),                       // 125: rill.sql.v1.FamilyOperandTypeCheckerProto
	(*CompositeSingleOperandTypeCheckerProto)(nil),              // 126: rill.sql.v1.CompositeSingleOperandTypeCheckerProto
	(*SqlOperandCountRangeProto)(nil),                           // 127: rill.sql.v1.SqlOperandCountRangeProto
	(*AssignableOperandTypeCheckerProto)(nil),                   // 128: rill.sql.v1.AssignableOperandTypeCheckerProto
	(*MultisetOperandTypeCheckerProto)(nil),                     // 129: rill.sql.v1.MultisetOperandTypeCheckerProto
	(*CompositeOperandTypeCheckerProto)(nil),                    // 130: rill.sql.v1.CompositeOperandTypeCheckerProto
	(*SqlProcedureCallOperatorProto)(nil),                       // 131: rill.sql.v1.SqlProcedureCallOperatorProto
	(*SqlDescriptorOperatorProto)(nil),                          // 132: rill.sql.v1.SqlDescriptorOperatorProto
	(*SqlPostfixOperatorProto)(nil),                             // 133: rill.sql.v1.SqlPostfixOperatorProto
	(*SqlJsonValueExpressionOperatorProto)(nil),                 // 134: rill.sql.v1.SqlJsonValueExpressionOperatorProto
	(*SqlFunctionProto)(nil),                                    // 135: rill.sql.v1.SqlFunctionProto
	(*SqlUnresolvedFunctionProto)(nil),                          // 136: rill.sql.v1.SqlUnresolvedFunctionProto
	(*SqlJdbcFunctionCallProto)(nil),                            // 137: rill.sql.v1.SqlJdbcFunctionCallProto
	(*SqlUserDefinedTableMacroProto)(nil),                       // 138: rill.sql.v1.SqlUserDefinedTableMacroProto
	(*TableMacroProto)(nil),                                     // 139: rill.sql.v1.TableMacroProto
	(*TableMacroImplProto)(nil),                                 // 140: rill.sql.v1.TableMacroImplProto
	(*MethodProto)(nil),                                         // 141: rill.sql.v1.MethodProto
	(*FunctionParameterProto)(nil),                              // 142: rill.sql.v1.FunctionParameterProto
	(*ViewTableMacroProto)(nil),                                 // 143: rill.sql.v1.ViewTableMacroProto
	(*CalciteSchemaProto)(nil),                                  // 144: rill.sql.v1.CalciteSchemaProto
	(*SimpleCalciteSchemaProto)(nil),                            // 145: rill.sql.v1.SimpleCalciteSchemaProto
	(*SchemaProto)(nil),                                         // 146: rill.sql.v1.SchemaProto
	(*SchemaPlusProto)(nil),                                     // 147: rill.sql.v1.SchemaPlusProto
	(*DelegatingSchemaProto)(nil),                               // 148: rill.sql.v1.DelegatingSchemaProto
	(*AbstractSchemaProto)(nil),                                 // 149: rill.sql.v1.AbstractSchemaProto
	(*SemiMutableSchemaProto)(nil),                              // 150: rill.sql.v1.SemiMutableSchemaProto
	(*NameMapProto)(nil),                                        // 151: rill.sql.v1.NameMapProto
	(*NameMultimapProto)(nil),                                   // 152: rill.sql.v1.NameMultimapProto
	(*NameSetProto)(nil),                                        // 153: rill.sql.v1.NameSetProto
	(*CachingCalciteSchemaProto)(nil),                           // 154: rill.sql.v1.CachingCalciteSchemaProto
	(*CalciteRootSchemaProto)(nil),                              // 155: rill.sql.v1.CalciteRootSchemaProto
	(*SqlUserDefinedFunctionProto)(nil),                         // 156: rill.sql.v1.SqlUserDefinedFunctionProto
	(*SqlUserDefinedTableFunctionProto)(nil),                    // 157: rill.sql.v1.SqlUserDefinedTableFunctionProto
	(*OrgApacheCalciteSchema_FunctionProto)(nil),                // 158: rill.sql.v1.org_apache_calcite_schema_FunctionProto
	(*TableFunctionProto)(nil),                                  // 159: rill.sql.v1.TableFunctionProto
	(*TableFunctionImplProto)(nil),                              // 160: rill.sql.v1.TableFunctionImplProto
	(*CallImplementorProto)(nil),                                // 161: rill.sql.v1.CallImplementorProto
	(*ReflectiveFunctionBaseProto)(nil),                         // 162: rill.sql.v1.ReflectiveFunctionBaseProto
	(*ScalarFunctionImplProto)(nil),                             // 163: rill.sql.v1.ScalarFunctionImplProto
	(*ImplementableFunctionProto)(nil),                          // 164: rill.sql.v1.ImplementableFunctionProto
	(*ScalarFunctionProto)(nil),                                 // 165: rill.sql.v1.ScalarFunctionProto
	(*AggregateFunctionProto)(nil),                              // 166: rill.sql.v1.AggregateFunctionProto
	(*ImplementableAggFunctionProto)(nil),                       // 167: rill.sql.v1.ImplementableAggFunctionProto
	(*AggregateFunctionImplProto)(nil),                          // 168: rill.sql.v1.AggregateFunctionImplProto
	(*SqlExtractFunctionProto)(nil),                             // 169: rill.sql.v1.SqlExtractFunctionProto
	(*SqlTranslate3FunctionProto)(nil),                          // 170: rill.sql.v1.SqlTranslate3FunctionProto
	(*SqlTrimFunctionProto)(nil),                                // 171: rill.sql.v1.SqlTrimFunctionProto
	(*SqlSubstringFunctionProto)(nil),                           // 172: rill.sql.v1.SqlSubstringFunctionProto
	(*SqlJsonDepthFunctionProto)(nil),                           // 173: rill.sql.v1.SqlJsonDepthFunctionProto
	(*SqlAbstractTimeFunctionProto)(nil),                        // 174: rill.sql.v1.SqlAbstractTimeFunctionProto
	(*SqlRandFunctionProto)(nil),                                // 175: rill.sql.v1.SqlRandFunctionProto
	(*SqlCoalesceFunctionProto)(nil),                            // 176: rill.sql.v1.SqlCoalesceFunctionProto
	(*SqlJsonTypeFunctionProto)(nil),                            // 177: rill.sql.v1.SqlJsonTypeFunctionProto
	(*SqlJsonValueFunctionProto)(nil),                           // 178: rill.sql.v1.SqlJsonValueFunctionProto
	(*SqlDatePartFunctionProto)(nil),                            // 179: rill.sql.v1.SqlDatePartFunctionProto
	(*SqlJsonObjectFunctionProto)(nil),                          // 180: rill.sql.v1.SqlJsonObjectFunctionProto
	(*SqlNullifFunctionProto)(nil),                              // 181: rill.sql.v1.SqlNullifFunctionProto
	(*SqlTimestampAddFunctionProto)(nil),                        // 182: rill.sql.v1.SqlTimestampAddFunctionProto
	(*SqlJsonPrettyFunctionProto)(nil),                          // 183: rill.sql.v1.SqlJsonPrettyFunctionProto
	(*SqlBaseContextVariableProto)(nil),                         // 184: rill.sql.v1.SqlBaseContextVariableProto
	(*SqlStringContextVariableProto)(nil),                       // 185: rill.sql.v1.SqlStringContextVariableProto
	(*SqlConvertFunctionProto)(nil),                             // 186: rill.sql.v1.SqlConvertFunctionProto
	(*SqlGroupedWindowFunctionProto)(nil),                       // 187: rill.sql.v1.SqlGroupedWindowFunctionProto
	(*SqlTypeConstructorFunctionProto)(nil),                     // 188: rill.sql.v1.SqlTypeConstructorFunctionProto
	(*SqlTimestampDiffFunctionProto)(nil),                       // 189: rill.sql.v1.SqlTimestampDiffFunctionProto
	(*SqlJsonKeysFunctionProto)(nil),                            // 190: rill.sql.v1.SqlJsonKeysFunctionProto
	(*SqlJsonLengthFunctionProto)(nil),                          // 191: rill.sql.v1.SqlJsonLengthFunctionProto
	(*SqlCastFunctionProto)(nil),                                // 192: rill.sql.v1.SqlCastFunctionProto
	(*SetMultimapProto)(nil),                                    // 193: rill.sql.v1.SetMultimapProto
	(*AbstractSetMultimapProto)(nil),                            // 194: rill.sql.v1.AbstractSetMultimapProto
	(*LinkedHashMultimapGwtSerializationDependenciesProto)(nil), // 195: rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	(*LinkedHashMultimapProto)(nil),                             // 196: rill.sql.v1.LinkedHashMultimapProto
	(*HashMultimapGwtSerializationDependenciesProto)(nil),       // 197: rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	(*HashMultimapProto)(nil),                                   // 198: rill.sql.v1.HashMultimapProto
	(*AbstractSortedSetMultimapProto)(nil),                      // 199: rill.sql.v1.AbstractSortedSetMultimapProto
	(*AbstractSortedKeySortedSetMultimapProto)(nil),             // 200: rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	(*TreeMultimapProto)(nil),                                   // 201: rill.sql.v1.TreeMultimapProto
	(*SortedSetMultimapProto)(nil),                              // 202: rill.sql.v1.SortedSetMultimapProto
	(*ForwardingSortedSetMultimapProto)(nil),                    // 203: rill.sql.v1.ForwardingSortedSetMultimapProto
	(*ForwardingSetMultimapProto)(nil),                          // 204: rill.sql.v1.ForwardingSetMultimapProto
	(*FilteredSetMultimapProto)(nil),                            // 205: rill.sql.v1.FilteredSetMultimapProto
	(*FilteredEntrySetMultimapProto)(nil),                       // 206: rill.sql.v1.FilteredEntrySetMultimapProto
	(*MultimapProto)(nil),                                       // 207: rill.sql.v1.MultimapProto
	(*ForwardingMultimapProto)(nil),                             // 208: rill.sql.v1.ForwardingMultimapProto
	(*ForwardingListMultimapProto)(nil),                         // 209: rill.sql.v1.ForwardingListMultimapProto
	(*ListMultimapProto)(nil),                                   // 210: rill.sql.v1.ListMultimapProto
	(*LinkedListMultimapProto)(nil),                             // 211: rill.sql.v1.LinkedListMultimapProto
	(*AbstractListMultimapProto)(nil),                           // 212: rill.sql.v1.AbstractListMultimapProto
	(*ArrayListMultimapGwtSerializationDependenciesProto)(nil),  // 213: rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	(*ArrayListMultimapProto)(nil),                              // 214: rill.sql.v1.ArrayListMultimapProto
	(*FilteredKeyListMultimapProto)(nil),                        // 215: rill.sql.v1.FilteredKeyListMultimapProto
	(*ComGoogleCommonBase_PredicateProto)(nil),                  // 216: rill.sql.v1.com_google_common_base_PredicateProto
	(*CharMatcherProto)(nil),                                    // 217: rill.sql.v1.CharMatcherProto
	(*SmallCharMatcherProto)(nil),                               // 218: rill.sql.v1.SmallCharMatcherProto
	(*ImmutableListMultimapProto)(nil),                          // 219: rill.sql.v1.ImmutableListMultimapProto
	(*EmptyImmutableListMultimapProto)(nil),                     // 220: rill.sql.v1.EmptyImmutableListMultimapProto
	(*AbstractMultimapProto)(nil),                               // 221: rill.sql.v1.AbstractMultimapProto
	(*AbstractMapBasedMultimapProto)(nil),                       // 222: rill.sql.v1.AbstractMapBasedMultimapProto
	(*FilteredEntryMultimapProto)(nil),                          // 223: rill.sql.v1.FilteredEntryMultimapProto
	(*BaseImmutableMultimapProto)(nil),                          // 224: rill.sql.v1.BaseImmutableMultimapProto
	(*ImmutableMultimapProto)(nil),                              // 225: rill.sql.v1.ImmutableMultimapProto
	(*ImmutableSetMultimapProto)(nil),                           // 226: rill.sql.v1.ImmutableSetMultimapProto
	(*EmptyImmutableSetMultimapProto)(nil),                      // 227: rill.sql.v1.EmptyImmutableSetMultimapProto
	(*FilteredKeyMultimapProto)(nil),                            // 228: rill.sql.v1.FilteredKeyMultimapProto
	(*FilteredKeySetMultimapProto)(nil),                         // 229: rill.sql.v1.FilteredKeySetMultimapProto
	(*FilteredMultimapProto)(nil),                               // 230: rill.sql.v1.FilteredMultimapProto
	(*SqlPositionFunctionProto)(nil),                            // 231: rill.sql.v1.SqlPositionFunctionProto
	(*SqlJsonRemoveFunctionProto)(nil),                          // 232: rill.sql.v1.SqlJsonRemoveFunctionProto
	(*SqlMatchFunctionProto)(nil),                               // 233: rill.sql.v1.SqlMatchFunctionProto
	(*SqlOverlayFunctionProto)(nil),                             // 234: rill.sql.v1.SqlOverlayFunctionProto
	(*SqlJsonArrayFunctionProto)(nil),                           // 235: rill.sql.v1.SqlJsonArrayFunctionProto
	(*SqlRandIntegerFunctionProto)(nil),                         // 236: rill.sql.v1.SqlRandIntegerFunctionProto
	(*SqlCurrentDateFunctionProto)(nil),                         // 237: rill.sql.v1.SqlCurrentDateFunctionProto
	(*SqlAggFunctionProto)(nil),                                 // 238: rill.sql.v1.SqlAggFunctionProto
	(*SqlUserDefinedAggFunctionProto)(nil),                      // 239: rill.sql.v1.SqlUserDefinedAggFunctionProto
	(*SqlCovarAggFunctionProto)(nil),                            // 240: rill.sql.v1.SqlCovarAggFunctionProto
	(*SqlJsonArrayAggAggFunctionProto)(nil),                     // 241: rill.sql.v1.SqlJsonArrayAggAggFunctionProto
	(*SqlSumAggFunctionProto)(nil),                              // 242: rill.sql.v1.SqlSumAggFunctionProto
	(*SqlMinMaxAggFunctionProto)(nil),                           // 243: rill.sql.v1.SqlMinMaxAggFunctionProto
	(*SqlCountAggFunctionProto)(nil),                            // 244: rill.sql.v1.SqlCountAggFunctionProto
	(*SqlRegrCountAggFunctionProto)(nil),                        // 245: rill.sql.v1.SqlRegrCountAggFunctionProto
	(*SqlAnyValueAggFunctionProto)(nil),                         // 246: rill.sql.v1.SqlAnyValueAggFunctionProto
	(*SqlAvgAggFunctionProto)(nil),                              // 247: rill.sql.v1.SqlAvgAggFunctionProto
	(*SqlNthValueAggFunctionProto)(nil),                         // 248: rill.sql.v1.SqlNthValueAggFunctionProto
	(*SqlBasicAggFunctionProto)(nil),                            // 249: rill.sql.v1.SqlBasicAggFunctionProto
	(*SqlSingleValueAggFunctionProto)(nil),                      // 250: rill.sql.v1.SqlSingleValueAggFunctionProto
	(*SqlSumEmptyIsZeroAggFunctionProto)(nil),                   // 251: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto
	(*SqlListaggAggFunctionProto)(nil),                          // 252: rill.sql.v1.SqlListaggAggFunctionProto
	(*SqlNtileAggFunctionProto)(nil),                            // 253: rill.sql.v1.SqlNtileAggFunctionProto
	(*SqlJsonObjectAggAggFunctionProto)(nil),                    // 254: rill.sql.v1.SqlJsonObjectAggAggFunctionProto
	(*SqlFirstLastValueAggFunctionProto)(nil),                   // 255: rill.sql.v1.SqlFirstLastValueAggFunctionProto
	(*SqlAbstractGroupFunctionProto)(nil),                       // 256: rill.sql.v1.SqlAbstractGroupFunctionProto
	(*SqlGroupIdFunctionProto)(nil),                             // 257: rill.sql.v1.SqlGroupIdFunctionProto
	(*SqlGroupingIdFunctionProto)(nil),                          // 258: rill.sql.v1.SqlGroupingIdFunctionProto
	(*SqlGroupingFunctionProto)(nil),                            // 259: rill.sql.v1.SqlGroupingFunctionProto
	(*SqlHistogramAggFunctionProto)(nil),                        // 260: rill.sql.v1.SqlHistogramAggFunctionProto
	(*SqlRankFunctionProto)(nil),                                // 261: rill.sql.v1.SqlRankFunctionProto
	(*SqlLeadLagAggFunctionProto)(nil),                          // 262: rill.sql.v1.SqlLeadLagAggFunctionProto
	(*SqlBitOpAggFunctionProto)(nil),                            // 263: rill.sql.v1.SqlBitOpAggFunctionProto
	(*SqlWindowTableFunctionProto)(nil),                         // 264: rill.sql.v1.SqlWindowTableFunctionProto
	(*SqlTumbleTableFunctionProto)(nil),                         // 265: rill.sql.v1.SqlTumbleTableFunctionProto
	(*SqlSessionTableFunctionProto)(nil),                        // 266: rill.sql.v1.SqlSessionTableFunctionProto
	(*SqlHopTableFunctionProto)(nil),                            // 267: rill.sql.v1.SqlHopTableFunctionProto
	(*SqlRegexpReplaceFunctionProto)(nil),                       // 268: rill.sql.v1.SqlRegexpReplaceFunctionProto
	(*SqlMonotonicUnaryFunctionProto)(nil),                      // 269: rill.sql.v1.SqlMonotonicUnaryFunctionProto
	(*SqlFloorFunctionProto)(nil),                               // 270: rill.sql.v1.SqlFloorFunctionProto
	(*SqlJsonStorageSizeFunctionProto)(nil),                     // 271: rill.sql.v1.SqlJsonStorageSizeFunctionProto
	(*SqlJsonQueryFunctionProto)(nil),                           // 272: rill.sql.v1.SqlJsonQueryFunctionProto
	(*SqlJsonExistsFunctionProto)(nil),                          // 273: rill.sql.v1.SqlJsonExistsFunctionProto
	(*SqlCaseOperatorProto)(nil),                                // 274: rill.sql.v1.SqlCaseOperatorProto
	(*SqlBinaryOperatorProto)(nil),                              // 275: rill.sql.v1.SqlBinaryOperatorProto
	(*SqlSetOperatorProto)(nil),                                 // 276: rill.sql.v1.SqlSetOperatorProto
	(*SqlOverlapsOperatorProto)(nil),                            // 277: rill.sql.v1.SqlOverlapsOperatorProto
	(*SqlCastOperatorProto)(nil),                                // 278: rill.sql.v1.SqlCastOperatorProto
	(*SqlMonotonicBinaryOperatorProto)(nil),                     // 279: rill.sql.v1.SqlMonotonicBinaryOperatorProto
	(*SqlMultisetMemberOfOperatorProto)(nil),                    // 280: rill.sql.v1.SqlMultisetMemberOfOperatorProto
	(*SqlMultisetSetOperatorProto)(nil),                         // 281: rill.sql.v1.SqlMultisetSetOperatorProto
	(*SqlWithinGroupOperatorProto)(nil),                         // 282: rill.sql.v1.SqlWithinGroupOperatorProto
	(*SqlFilterOperatorProto)(nil),                              // 283: rill.sql.v1.SqlFilterOperatorProto
	(*SqlOverOperatorProto)(nil),                                // 284: rill.sql.v1.SqlOverOperatorProto
	(*SqlInOperatorProto)(nil),                                  // 285: rill.sql.v1.SqlInOperatorProto
	(*SqlQuantifyOperatorProto)(nil),                            // 286: rill.sql.v1.SqlQuantifyOperatorProto
	(*SqlPosixRegexOperatorProto)(nil),                          // 287: rill.sql.v1.SqlPosixRegexOperatorProto
	(*SqlWithinDistinctOperatorProto)(nil),                      // 288: rill.sql.v1.SqlWithinDistinctOperatorProto
	(*SqlSelectOperatorProto)(nil),                              // 289: rill.sql.v1.SqlSelectOperatorProto
	(*SqlSpecialOperatorProto)(nil),                             // 290: rill.sql.v1.SqlSpecialOperatorProto
	(*SqlLateralOperatorProto)(nil),                             // 291: rill.sql.v1.SqlLateralOperatorProto
	(*SqlMultisetValueConstructorProto)(nil),                    // 292: rill.sql.v1.SqlMultisetValueConstructorProto
	(*SqlArrayValueConstructorProto)(nil),                       // 293: rill.sql.v1.SqlArrayValueConstructorProto
	(*SqlMapValueConstructorProto)(nil),                         // 294: rill.sql.v1.SqlMapValueConstructorProto
	(*SqlDefaultOperatorProto)(nil),                             // 295: rill.sql.v1.SqlDefaultOperatorProto
	(*SqlLiteralChainOperatorProto)(nil),                        // 296: rill.sql.v1.SqlLiteralChainOperatorProto
	(*SqlDatetimePlusOperatorProto)(nil),                        // 297: rill.sql.v1.SqlDatetimePlusOperatorProto
	(*SqlSequenceValueOperatorProto)(nil),                       // 298: rill.sql.v1.SqlSequenceValueOperatorProto
	(*SqlFunctionalOperatorProto)(nil),                          // 299: rill.sql.v1.SqlFunctionalOperatorProto
	(*SqlCollectionTableOperatorProto)(nil),                     // 300: rill.sql.v1.SqlCollectionTableOperatorProto
	(*SqlUnnestOperatorProto)(nil),                              // 301: rill.sql.v1.SqlUnnestOperatorProto
	(*SqlLikeOperatorProto)(nil),                                // 302: rill.sql.v1.SqlLikeOperatorProto
	(*SqlInternalOperatorProto)(nil),                            // 303: rill.sql.v1.SqlInternalOperatorProto
	(*SqlExtendOperatorProto)(nil),                              // 304: rill.sql.v1.SqlExtendOperatorProto
	(*SqlRollupOperatorProto)(nil),                              // 305: rill.sql.v1.SqlRollupOperatorProto
	(*SqlIntervalOperatorProto)(nil),                            // 306: rill.sql.v1.SqlIntervalOperatorProto
	(*SqlSearchOperatorProto)(nil),                              // 307: rill.sql.v1.SqlSearchOperatorProto
	(*SqlDotOperatorProto)(nil),                                 // 308: rill.sql.v1.SqlDotOperatorProto
	(*SqlThrowOperatorProto)(nil),                               // 309: rill.sql.v1.SqlThrowOperatorProto
	(*SqlItemOperatorProto)(nil),                                // 310: rill.sql.v1.SqlItemOperatorProto
	(*SqlInfixOperatorProto)(nil),                               // 311: rill.sql.v1.SqlInfixOperatorProto
	(*SqlBetweenOperatorProto)(nil),                             // 312: rill.sql.v1.SqlBetweenOperatorProto
	(*SqlAsOperatorProto)(nil),                                  // 313: rill.sql.v1.SqlAsOperatorProto
	(*SqlArgumentAssignmentOperatorProto)(nil),                  // 314: rill.sql.v1.SqlArgumentAssignmentOperatorProto
	(*SqlValuesOperatorProto)(nil),                              // 315: rill.sql.v1.SqlValuesOperatorProto
	(*SqlColumnListConstructorProto)(nil),                       // 316: rill.sql.v1.SqlColumnListConstructorProto
	(*SqlMultisetQueryConstructorProto)(nil),                    // 317: rill.sql.v1.SqlMultisetQueryConstructorProto
	(*SqlArrayQueryConstructorProto)(nil),                       // 318: rill.sql.v1.SqlArrayQueryConstructorProto
	(*SqlMapQueryConstructorProto)(nil),                         // 319: rill.sql.v1.SqlMapQueryConstructorProto
	(*SqlCursorConstructorProto)(nil),                           // 320: rill.sql.v1.SqlCursorConstructorProto
	(*SqlRowOperatorProto)(nil),                                 // 321: rill.sql.v1.SqlRowOperatorProto
	(*SqlDatetimeSubtractionOperatorProto)(nil),                 // 322: rill.sql.v1.SqlDatetimeSubtractionOperatorProto
	(*SqlNullTreatmentOperatorProto)(nil),                       // 323: rill.sql.v1.SqlNullTreatmentOperatorProto
	(*SqlMatchRecognizeProto)(nil),                              // 324: rill.sql.v1.SqlMatchRecognizeProto
	(*SqlAlterProto)(nil),                                       // 325: rill.sql.v1.SqlAlterProto
	(*SqlSetOptionProto)(nil),                                   // 326: rill.sql.v1.SqlSetOptionProto
	(*SqlDdlProto)(nil),                                         // 327: rill.sql.v1.SqlDdlProto
	(*SqlDropProto)(nil),                                        // 328: rill.sql.v1.SqlDropProto
	(*SqlDropSchemaProto)(nil),                                  // 329: rill.sql.v1.SqlDropSchemaProto
	(*SqlDropObjectProto)(nil),                                  // 330: rill.sql.v1.SqlDropObjectProto
	(*SqlDropTableProto)(nil),                                   // 331: rill.sql.v1.SqlDropTableProto
	(*SqlDropMaterializedViewProto)(nil),                        // 332: rill.sql.v1.SqlDropMaterializedViewProto
	(*SqlDropViewProto)(nil),                                    // 333: rill.sql.v1.SqlDropViewProto
	(*SqlDropFunctionProto)(nil),                                // 334: rill.sql.v1.SqlDropFunctionProto
	(*SqlDropTypeProto)(nil),                                    // 335: rill.sql.v1.SqlDropTypeProto
	(*SqlCreateProto)(nil),                                      // 336: rill.sql.v1.SqlCreateProto
	(*SqlCreateTypeProto)(nil),                                  // 337: rill.sql.v1.SqlCreateTypeProto
	(*SqlCreateTableProto)(nil),                                 // 338: rill.sql.v1.SqlCreateTableProto
	(*SqlCreateViewProto)(nil),                                  // 339: rill.sql.v1.SqlCreateViewProto
	(*SqlCreateFunctionProto)(nil),                              // 340: rill.sql.v1.SqlCreateFunctionProto
	(*SqlCreateForeignSchemaProto)(nil),                         // 341: rill.sql.v1.SqlCreateForeignSchemaProto
	(*SqlCreateSchemaProto)(nil),                                // 342: rill.sql.v1.SqlCreateSchemaProto
	(*SqlCreateMaterializedViewProto)(nil),                      // 343: rill.sql.v1.SqlCreateMaterializedViewProto
	(*SqlDescribeSchemaProto)(nil),                              // 344: rill.sql.v1.SqlDescribeSchemaProto
	(*SqlJoinProto)(nil),                                        // 345: rill.sql.v1.SqlJoinProto
	(*SqlDescribeTableProto)(nil),                               // 346: rill.sql.v1.SqlDescribeTableProto
	(*SqlColumnDeclarationProto)(nil),                           // 347: rill.sql.v1.SqlColumnDeclarationProto
	(*SqlDynamicParamProto)(nil),                                // 348: rill.sql.v1.SqlDynamicParamProto
	(*SqlCreateMetricsViewProto)(nil),                           // 349: rill.sql.v1.SqlCreateMetricsViewProto
	(*SqlCreateSourceProto)(nil),                                // 350: rill.sql.v1.SqlCreateSourceProto
	nil,                                                         // 351: rill.sql.v1.RelRecordTypeProto.FieldNameMapEntry
	nil,                                                         // 352: rill.sql.v1.JavaRecordTypeProto.FieldNameMapEntry
	nil,                                                         // 353: rill.sql.v1.SqlCreateMetricsViewProto.DimensionsMapEntry
	nil,                                                         // 354: rill.sql.v1.SqlCreateMetricsViewProto.MeasuresMapEntry
	nil,                                                         // 355: rill.sql.v1.SqlCreateSourceProto.PropertiesEntry
}
var file_sql_src_main_proto_ast_proto_depIdxs = []int32{
	20,   // 0: rill.sql.v1.RelDataTypeProto.relDataTypeImplProto:type_name -> rill.sql.v1.RelDataTypeImplProto
	21,   // 1: rill.sql.v1.RelDataTypeProto.abstractSqlTypeProto:type_name -> rill.sql.v1.AbstractSqlTypeProto
	43,   // 2: rill.sql.v1.RelDataTypeProto.relCrossTypeProto:type_name -> rill.sql.v1.RelCrossTypeProto
	44,   // 3: rill.sql.v1.RelDataTypeProto.relRecordTypeProto:type_name -> rill.sql.v1.RelRecordTypeProto
	47,   // 4: rill.sql.v1.RelDataTypeProto.dynamicRecordTypeProto:type_name -> rill.sql.v1.DynamicRecordTypeProto
	22,   // 5: rill.sql.v1.RelDataTypeProto.multisetSqlTypeProto:type_name -> rill.sql.v1.MultisetSqlTypeProto
	25,   // 6: rill.sql.v1.RelDataTypeProto.arraySqlTypeProto:type_name -> rill.sql.v1.ArraySqlTypeProto
	26,   // 7: rill.sql.v1.RelDataTypeProto.mapSqlTypeProto:type_name -> rill.sql.v1.MapSqlTypeProto
	27,   // 8: rill.sql.v1.RelDataTypeProto.basicSqlTypeProto:type_name -> rill.sql.v1.BasicSqlTypeProto
	37,   // 9: rill.sql.v1.RelDataTypeProto.intervalSqlTypeProto:type_name -> rill.sql.v1.IntervalSqlTypeProto
	40,   // 10: rill.sql.v1.RelDataTypeProto.objectSqlTypeProto:type_name -> rill.sql.v1.ObjectSqlTypeProto
	45,   // 11: rill.sql.v1.RelDataTypeProto.javaRecordTypeProto:type_name -> rill.sql.v1.JavaRecordTypeProto
	48,   // 12: rill.sql.v1.RelDataTypeProto.dynamicRecordTypeImplProto:type_name -> rill.sql.v1.DynamicRecordTypeImplProto
	21,   // 13: rill.sql.v1.RelDataTypeImplProto.abstractSqlTypeProto:type_name -> rill.sql.v1.AbstractSqlTypeProto
	43,   // 14: rill.sql.v1.RelDataTypeImplProto.relCrossTypeProto:type_name -> rill.sql.v1.RelCrossTypeProto
	44,   // 15: rill.sql.v1.RelDataTypeImplProto.relRecordTypeProto:type_name -> rill.sql.v1.RelRecordTypeProto
	47,   // 16: rill.sql.v1.RelDataTypeImplProto.dynamicRecordTypeProto:type_name -> rill.sql.v1.DynamicRecordTypeProto
	22,   // 17: rill.sql.v1.RelDataTypeImplProto.multisetSqlTypeProto:type_name -> rill.sql.v1.MultisetSqlTypeProto
	25,   // 18: rill.sql.v1.RelDataTypeImplProto.arraySqlTypeProto:type_name -> rill.sql.v1.ArraySqlTypeProto
	26,   // 19: rill.sql.v1.RelDataTypeImplProto.mapSqlTypeProto:type_name -> rill.sql.v1.MapSqlTypeProto
	27,   // 20: rill.sql.v1.RelDataTypeImplProto.basicSqlTypeProto:type_name -> rill.sql.v1.BasicSqlTypeProto
	37,   // 21: rill.sql.v1.RelDataTypeImplProto.intervalSqlTypeProto:type_name -> rill.sql.v1.IntervalSqlTypeProto
	40,   // 22: rill.sql.v1.RelDataTypeImplProto.objectSqlTypeProto:type_name -> rill.sql.v1.ObjectSqlTypeProto
	45,   // 23: rill.sql.v1.RelDataTypeImplProto.javaRecordTypeProto:type_name -> rill.sql.v1.JavaRecordTypeProto
	48,   // 24: rill.sql.v1.RelDataTypeImplProto.dynamicRecordTypeImplProto:type_name -> rill.sql.v1.DynamicRecordTypeImplProto
	23,   // 25: rill.sql.v1.RelDataTypeImplProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	22,   // 26: rill.sql.v1.AbstractSqlTypeProto.multisetSqlTypeProto:type_name -> rill.sql.v1.MultisetSqlTypeProto
	25,   // 27: rill.sql.v1.AbstractSqlTypeProto.arraySqlTypeProto:type_name -> rill.sql.v1.ArraySqlTypeProto
	26,   // 28: rill.sql.v1.AbstractSqlTypeProto.mapSqlTypeProto:type_name -> rill.sql.v1.MapSqlTypeProto
	27,   // 29: rill.sql.v1.AbstractSqlTypeProto.basicSqlTypeProto:type_name -> rill.sql.v1.BasicSqlTypeProto
	37,   // 30: rill.sql.v1.AbstractSqlTypeProto.intervalSqlTypeProto:type_name -> rill.sql.v1.IntervalSqlTypeProto
	40,   // 31: rill.sql.v1.AbstractSqlTypeProto.objectSqlTypeProto:type_name -> rill.sql.v1.ObjectSqlTypeProto
	0,    // 32: rill.sql.v1.AbstractSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 33: rill.sql.v1.AbstractSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	19,   // 34: rill.sql.v1.MultisetSqlTypeProto.elementType:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 35: rill.sql.v1.MultisetSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 36: rill.sql.v1.MultisetSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	24,   // 37: rill.sql.v1.RelDataTypeFieldProto.relDataTypeFieldImplProto:type_name -> rill.sql.v1.RelDataTypeFieldImplProto
	19,   // 38: rill.sql.v1.RelDataTypeFieldImplProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	19,   // 39: rill.sql.v1.ArraySqlTypeProto.elementType:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 40: rill.sql.v1.ArraySqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 41: rill.sql.v1.ArraySqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	19,   // 42: rill.sql.v1.MapSqlTypeProto.keyType:type_name -> rill.sql.v1.RelDataTypeProto
	19,   // 43: rill.sql.v1.MapSqlTypeProto.valueType:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 44: rill.sql.v1.MapSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 45: rill.sql.v1.MapSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	28,   // 46: rill.sql.v1.BasicSqlTypeProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	31,   // 47: rill.sql.v1.BasicSqlTypeProto.collation:type_name -> rill.sql.v1.SqlCollationProto
	34,   // 48: rill.sql.v1.BasicSqlTypeProto.wrappedCharset:type_name -> rill.sql.v1.SerializableCharsetProto
	0,    // 49: rill.sql.v1.BasicSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 50: rill.sql.v1.BasicSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	29,   // 51: rill.sql.v1.RelDataTypeSystemProto.relDataTypeSystemImplProto:type_name -> rill.sql.v1.RelDataTypeSystemImplProto
	30,   // 52: rill.sql.v1.RelDataTypeSystemProto.delegatingTypeSystemProto:type_name -> rill.sql.v1.DelegatingTypeSystemProto
	28,   // 53: rill.sql.v1.DelegatingTypeSystemProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	32,   // 54: rill.sql.v1.SqlCollationProto.javaCollationProto:type_name -> rill.sql.v1.JavaCollationProto
	34,   // 55: rill.sql.v1.SqlCollationProto.wrappedCharset:type_name -> rill.sql.v1.SerializableCharsetProto
	36,   // 56: rill.sql.v1.SqlCollationProto.locale:type_name -> rill.sql.v1.LocaleProto
	1,    // 57: rill.sql.v1.SqlCollationProto.coercibility:type_name -> rill.sql.v1.CoercibilityProto
	33,   // 58: rill.sql.v1.JavaCollationProto.collator:type_name -> rill.sql.v1.CollatorProto
	34,   // 59: rill.sql.v1.JavaCollationProto.wrappedCharset:type_name -> rill.sql.v1.SerializableCharsetProto
	36,   // 60: rill.sql.v1.JavaCollationProto.locale:type_name -> rill.sql.v1.LocaleProto
	1,    // 61: rill.sql.v1.JavaCollationProto.coercibility:type_name -> rill.sql.v1.CoercibilityProto
	35,   // 62: rill.sql.v1.SerializableCharsetProto.charset:type_name -> rill.sql.v1.CharsetProto
	28,   // 63: rill.sql.v1.IntervalSqlTypeProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	38,   // 64: rill.sql.v1.IntervalSqlTypeProto.intervalQualifier:type_name -> rill.sql.v1.SqlIntervalQualifierProto
	0,    // 65: rill.sql.v1.IntervalSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 66: rill.sql.v1.IntervalSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	2,    // 67: rill.sql.v1.SqlIntervalQualifierProto.timeUnitRange:type_name -> rill.sql.v1.TimeUnitRangeProto
	39,   // 68: rill.sql.v1.SqlIntervalQualifierProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 69: rill.sql.v1.SqlIntervalQualifierProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 70: rill.sql.v1.ObjectSqlTypeProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	3,    // 71: rill.sql.v1.ObjectSqlTypeProto.comparability:type_name -> rill.sql.v1.RelDataTypeComparabilityProto
	42,   // 72: rill.sql.v1.ObjectSqlTypeProto.family:type_name -> rill.sql.v1.RelDataTypeFamilyProto
	0,    // 73: rill.sql.v1.ObjectSqlTypeProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	23,   // 74: rill.sql.v1.ObjectSqlTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	31,   // 75: rill.sql.v1.SqlIdentifierProto.collation:type_name -> rill.sql.v1.SqlCollationProto
	39,   // 76: rill.sql.v1.SqlIdentifierProto.componentPositions:type_name -> rill.sql.v1.SqlParserPosProto
	39,   // 77: rill.sql.v1.SqlIdentifierProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 78: rill.sql.v1.SqlIdentifierProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	20,   // 79: rill.sql.v1.RelDataTypeFamilyProto.relDataTypeImplProto:type_name -> rill.sql.v1.RelDataTypeImplProto
	4,    // 80: rill.sql.v1.RelDataTypeFamilyProto.sqlTypeFamilyProto:type_name -> rill.sql.v1.SqlTypeFamilyProto
	21,   // 81: rill.sql.v1.RelDataTypeFamilyProto.abstractSqlTypeProto:type_name -> rill.sql.v1.AbstractSqlTypeProto
	43,   // 82: rill.sql.v1.RelDataTypeFamilyProto.relCrossTypeProto:type_name -> rill.sql.v1.RelCrossTypeProto
	44,   // 83: rill.sql.v1.RelDataTypeFamilyProto.relRecordTypeProto:type_name -> rill.sql.v1.RelRecordTypeProto
	47,   // 84: rill.sql.v1.RelDataTypeFamilyProto.dynamicRecordTypeProto:type_name -> rill.sql.v1.DynamicRecordTypeProto
	22,   // 85: rill.sql.v1.RelDataTypeFamilyProto.multisetSqlTypeProto:type_name -> rill.sql.v1.MultisetSqlTypeProto
	25,   // 86: rill.sql.v1.RelDataTypeFamilyProto.arraySqlTypeProto:type_name -> rill.sql.v1.ArraySqlTypeProto
	26,   // 87: rill.sql.v1.RelDataTypeFamilyProto.mapSqlTypeProto:type_name -> rill.sql.v1.MapSqlTypeProto
	27,   // 88: rill.sql.v1.RelDataTypeFamilyProto.basicSqlTypeProto:type_name -> rill.sql.v1.BasicSqlTypeProto
	37,   // 89: rill.sql.v1.RelDataTypeFamilyProto.intervalSqlTypeProto:type_name -> rill.sql.v1.IntervalSqlTypeProto
	40,   // 90: rill.sql.v1.RelDataTypeFamilyProto.objectSqlTypeProto:type_name -> rill.sql.v1.ObjectSqlTypeProto
	45,   // 91: rill.sql.v1.RelDataTypeFamilyProto.javaRecordTypeProto:type_name -> rill.sql.v1.JavaRecordTypeProto
	48,   // 92: rill.sql.v1.RelDataTypeFamilyProto.dynamicRecordTypeImplProto:type_name -> rill.sql.v1.DynamicRecordTypeImplProto
	19,   // 93: rill.sql.v1.RelCrossTypeProto.types:type_name -> rill.sql.v1.RelDataTypeProto
	23,   // 94: rill.sql.v1.RelCrossTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	45,   // 95: rill.sql.v1.RelRecordTypeProto.javaRecordTypeProto:type_name -> rill.sql.v1.JavaRecordTypeProto
	5,    // 96: rill.sql.v1.RelRecordTypeProto.kind:type_name -> rill.sql.v1.StructKindProto
	351,  // 97: rill.sql.v1.RelRecordTypeProto.fieldNameMap:type_name -> rill.sql.v1.RelRecordTypeProto.FieldNameMapEntry
	23,   // 98: rill.sql.v1.RelRecordTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	46,   // 99: rill.sql.v1.JavaRecordTypeProto.clazz:type_name -> rill.sql.v1.ClassProto
	5,    // 100: rill.sql.v1.JavaRecordTypeProto.kind:type_name -> rill.sql.v1.StructKindProto
	352,  // 101: rill.sql.v1.JavaRecordTypeProto.fieldNameMap:type_name -> rill.sql.v1.JavaRecordTypeProto.FieldNameMapEntry
	23,   // 102: rill.sql.v1.JavaRecordTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	48,   // 103: rill.sql.v1.DynamicRecordTypeProto.dynamicRecordTypeImplProto:type_name -> rill.sql.v1.DynamicRecordTypeImplProto
	23,   // 104: rill.sql.v1.DynamicRecordTypeProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	49,   // 105: rill.sql.v1.DynamicRecordTypeImplProto.holder:type_name -> rill.sql.v1.RelDataTypeHolderProto
	23,   // 106: rill.sql.v1.DynamicRecordTypeImplProto.fieldList:type_name -> rill.sql.v1.RelDataTypeFieldProto
	23,   // 107: rill.sql.v1.RelDataTypeHolderProto.fields:type_name -> rill.sql.v1.RelDataTypeFieldProto
	50,   // 108: rill.sql.v1.RelDataTypeHolderProto.typeFactory:type_name -> rill.sql.v1.RelDataTypeFactoryProto
	51,   // 109: rill.sql.v1.RelDataTypeFactoryProto.javaTypeFactoryProto:type_name -> rill.sql.v1.JavaTypeFactoryProto
	53,   // 110: rill.sql.v1.RelDataTypeFactoryProto.relDataTypeFactoryImplProto:type_name -> rill.sql.v1.RelDataTypeFactoryImplProto
	52,   // 111: rill.sql.v1.RelDataTypeFactoryProto.javaTypeFactoryImplProto:type_name -> rill.sql.v1.JavaTypeFactoryImplProto
	54,   // 112: rill.sql.v1.RelDataTypeFactoryProto.sqlTypeFactoryImplProto:type_name -> rill.sql.v1.SqlTypeFactoryImplProto
	52,   // 113: rill.sql.v1.JavaTypeFactoryProto.javaTypeFactoryImplProto:type_name -> rill.sql.v1.JavaTypeFactoryImplProto
	28,   // 114: rill.sql.v1.JavaTypeFactoryImplProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	54,   // 115: rill.sql.v1.RelDataTypeFactoryImplProto.sqlTypeFactoryImplProto:type_name -> rill.sql.v1.SqlTypeFactoryImplProto
	52,   // 116: rill.sql.v1.RelDataTypeFactoryImplProto.javaTypeFactoryImplProto:type_name -> rill.sql.v1.JavaTypeFactoryImplProto
	28,   // 117: rill.sql.v1.RelDataTypeFactoryImplProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	52,   // 118: rill.sql.v1.SqlTypeFactoryImplProto.javaTypeFactoryImplProto:type_name -> rill.sql.v1.JavaTypeFactoryImplProto
	28,   // 119: rill.sql.v1.SqlTypeFactoryImplProto.typeSystem:type_name -> rill.sql.v1.RelDataTypeSystemProto
	56,   // 120: rill.sql.v1.SqlNodeProto.sqlCallProto:type_name -> rill.sql.v1.SqlCallProto
	38,   // 121: rill.sql.v1.SqlNodeProto.sqlIntervalQualifierProto:type_name -> rill.sql.v1.SqlIntervalQualifierProto
	71,   // 122: rill.sql.v1.SqlNodeProto.sqlLiteralProto:type_name -> rill.sql.v1.SqlLiteralProto
	348,  // 123: rill.sql.v1.SqlNodeProto.sqlDynamicParamProto:type_name -> rill.sql.v1.SqlDynamicParamProto
	41,   // 124: rill.sql.v1.SqlNodeProto.sqlIdentifierProto:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 125: rill.sql.v1.SqlNodeProto.sqlNodeListProto:type_name -> rill.sql.v1.SqlNodeListProto
	82,   // 126: rill.sql.v1.SqlNodeProto.sqlDataTypeSpecProto:type_name -> rill.sql.v1.SqlDataTypeSpecProto
	57,   // 127: rill.sql.v1.SqlNodeProto.sqlUpdateProto:type_name -> rill.sql.v1.SqlUpdateProto
	60,   // 128: rill.sql.v1.SqlNodeProto.sqlInsertProto:type_name -> rill.sql.v1.SqlInsertProto
	61,   // 129: rill.sql.v1.SqlNodeProto.sqlCaseProto:type_name -> rill.sql.v1.SqlCaseProto
	62,   // 130: rill.sql.v1.SqlNodeProto.sqlDeleteProto:type_name -> rill.sql.v1.SqlDeleteProto
	63,   // 131: rill.sql.v1.SqlNodeProto.sqlCheckConstraintProto:type_name -> rill.sql.v1.SqlCheckConstraintProto
	64,   // 132: rill.sql.v1.SqlNodeProto.sqlPivotProto:type_name -> rill.sql.v1.SqlPivotProto
	65,   // 133: rill.sql.v1.SqlNodeProto.sqlTableRefProto:type_name -> rill.sql.v1.SqlTableRefProto
	66,   // 134: rill.sql.v1.SqlNodeProto.sqlKeyConstraintProto:type_name -> rill.sql.v1.SqlKeyConstraintProto
	67,   // 135: rill.sql.v1.SqlNodeProto.sqlWithProto:type_name -> rill.sql.v1.SqlWithProto
	68,   // 136: rill.sql.v1.SqlNodeProto.sqlSnapshotProto:type_name -> rill.sql.v1.SqlSnapshotProto
	69,   // 137: rill.sql.v1.SqlNodeProto.sqlOrderByProto:type_name -> rill.sql.v1.SqlOrderByProto
	70,   // 138: rill.sql.v1.SqlNodeProto.sqlWindowProto:type_name -> rill.sql.v1.SqlWindowProto
	59,   // 139: rill.sql.v1.SqlNodeProto.sqlSelectProto:type_name -> rill.sql.v1.SqlSelectProto
	81,   // 140: rill.sql.v1.SqlNodeProto.sqlAttributeDefinitionProto:type_name -> rill.sql.v1.SqlAttributeDefinitionProto
	90,   // 141: rill.sql.v1.SqlNodeProto.sqlExplainProto:type_name -> rill.sql.v1.SqlExplainProto
	91,   // 142: rill.sql.v1.SqlNodeProto.sqlWithItemProto:type_name -> rill.sql.v1.SqlWithItemProto
	92,   // 143: rill.sql.v1.SqlNodeProto.sqlUnpivotProto:type_name -> rill.sql.v1.SqlUnpivotProto
	93,   // 144: rill.sql.v1.SqlNodeProto.sqlMergeProto:type_name -> rill.sql.v1.SqlMergeProto
	94,   // 145: rill.sql.v1.SqlNodeProto.sqlHintProto:type_name -> rill.sql.v1.SqlHintProto
	95,   // 146: rill.sql.v1.SqlNodeProto.sqlBasicCallProto:type_name -> rill.sql.v1.SqlBasicCallProto
	324,  // 147: rill.sql.v1.SqlNodeProto.sqlMatchRecognizeProto:type_name -> rill.sql.v1.SqlMatchRecognizeProto
	325,  // 148: rill.sql.v1.SqlNodeProto.sqlAlterProto:type_name -> rill.sql.v1.SqlAlterProto
	327,  // 149: rill.sql.v1.SqlNodeProto.sqlDdlProto:type_name -> rill.sql.v1.SqlDdlProto
	344,  // 150: rill.sql.v1.SqlNodeProto.sqlDescribeSchemaProto:type_name -> rill.sql.v1.SqlDescribeSchemaProto
	345,  // 151: rill.sql.v1.SqlNodeProto.sqlJoinProto:type_name -> rill.sql.v1.SqlJoinProto
	346,  // 152: rill.sql.v1.SqlNodeProto.sqlDescribeTableProto:type_name -> rill.sql.v1.SqlDescribeTableProto
	347,  // 153: rill.sql.v1.SqlNodeProto.sqlColumnDeclarationProto:type_name -> rill.sql.v1.SqlColumnDeclarationProto
	72,   // 154: rill.sql.v1.SqlNodeProto.sqlNumericLiteralProto:type_name -> rill.sql.v1.SqlNumericLiteralProto
	73,   // 155: rill.sql.v1.SqlNodeProto.sqlAbstractStringLiteralProto:type_name -> rill.sql.v1.SqlAbstractStringLiteralProto
	76,   // 156: rill.sql.v1.SqlNodeProto.sqlAbstractDateTimeLiteralProto:type_name -> rill.sql.v1.SqlAbstractDateTimeLiteralProto
	80,   // 157: rill.sql.v1.SqlNodeProto.sqlIntervalLiteralProto:type_name -> rill.sql.v1.SqlIntervalLiteralProto
	326,  // 158: rill.sql.v1.SqlNodeProto.sqlSetOptionProto:type_name -> rill.sql.v1.SqlSetOptionProto
	328,  // 159: rill.sql.v1.SqlNodeProto.sqlDropProto:type_name -> rill.sql.v1.SqlDropProto
	336,  // 160: rill.sql.v1.SqlNodeProto.sqlCreateProto:type_name -> rill.sql.v1.SqlCreateProto
	74,   // 161: rill.sql.v1.SqlNodeProto.sqlBinaryStringLiteralProto:type_name -> rill.sql.v1.SqlBinaryStringLiteralProto
	75,   // 162: rill.sql.v1.SqlNodeProto.sqlCharStringLiteralProto:type_name -> rill.sql.v1.SqlCharStringLiteralProto
	77,   // 163: rill.sql.v1.SqlNodeProto.sqlDateLiteralProto:type_name -> rill.sql.v1.SqlDateLiteralProto
	78,   // 164: rill.sql.v1.SqlNodeProto.sqlTimestampLiteralProto:type_name -> rill.sql.v1.SqlTimestampLiteralProto
	79,   // 165: rill.sql.v1.SqlNodeProto.sqlTimeLiteralProto:type_name -> rill.sql.v1.SqlTimeLiteralProto
	329,  // 166: rill.sql.v1.SqlNodeProto.sqlDropSchemaProto:type_name -> rill.sql.v1.SqlDropSchemaProto
	330,  // 167: rill.sql.v1.SqlNodeProto.sqlDropObjectProto:type_name -> rill.sql.v1.SqlDropObjectProto
	337,  // 168: rill.sql.v1.SqlNodeProto.sqlCreateTypeProto:type_name -> rill.sql.v1.SqlCreateTypeProto
	338,  // 169: rill.sql.v1.SqlNodeProto.sqlCreateTableProto:type_name -> rill.sql.v1.SqlCreateTableProto
	339,  // 170: rill.sql.v1.SqlNodeProto.sqlCreateViewProto:type_name -> rill.sql.v1.SqlCreateViewProto
	340,  // 171: rill.sql.v1.SqlNodeProto.sqlCreateFunctionProto:type_name -> rill.sql.v1.SqlCreateFunctionProto
	341,  // 172: rill.sql.v1.SqlNodeProto.sqlCreateForeignSchemaProto:type_name -> rill.sql.v1.SqlCreateForeignSchemaProto
	342,  // 173: rill.sql.v1.SqlNodeProto.sqlCreateSchemaProto:type_name -> rill.sql.v1.SqlCreateSchemaProto
	343,  // 174: rill.sql.v1.SqlNodeProto.sqlCreateMaterializedViewProto:type_name -> rill.sql.v1.SqlCreateMaterializedViewProto
	331,  // 175: rill.sql.v1.SqlNodeProto.sqlDropTableProto:type_name -> rill.sql.v1.SqlDropTableProto
	332,  // 176: rill.sql.v1.SqlNodeProto.sqlDropMaterializedViewProto:type_name -> rill.sql.v1.SqlDropMaterializedViewProto
	333,  // 177: rill.sql.v1.SqlNodeProto.sqlDropViewProto:type_name -> rill.sql.v1.SqlDropViewProto
	334,  // 178: rill.sql.v1.SqlNodeProto.sqlDropFunctionProto:type_name -> rill.sql.v1.SqlDropFunctionProto
	335,  // 179: rill.sql.v1.SqlNodeProto.sqlDropTypeProto:type_name -> rill.sql.v1.SqlDropTypeProto
	350,  // 180: rill.sql.v1.SqlNodeProto.sqlCreateSourceProto:type_name -> rill.sql.v1.SqlCreateSourceProto
	349,  // 181: rill.sql.v1.SqlNodeProto.sqlCreateMetricsViewProto:type_name -> rill.sql.v1.SqlCreateMetricsViewProto
	39,   // 182: rill.sql.v1.SqlNodeProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	57,   // 183: rill.sql.v1.SqlCallProto.sqlUpdateProto:type_name -> rill.sql.v1.SqlUpdateProto
	60,   // 184: rill.sql.v1.SqlCallProto.sqlInsertProto:type_name -> rill.sql.v1.SqlInsertProto
	61,   // 185: rill.sql.v1.SqlCallProto.sqlCaseProto:type_name -> rill.sql.v1.SqlCaseProto
	62,   // 186: rill.sql.v1.SqlCallProto.sqlDeleteProto:type_name -> rill.sql.v1.SqlDeleteProto
	63,   // 187: rill.sql.v1.SqlCallProto.sqlCheckConstraintProto:type_name -> rill.sql.v1.SqlCheckConstraintProto
	64,   // 188: rill.sql.v1.SqlCallProto.sqlPivotProto:type_name -> rill.sql.v1.SqlPivotProto
	65,   // 189: rill.sql.v1.SqlCallProto.sqlTableRefProto:type_name -> rill.sql.v1.SqlTableRefProto
	66,   // 190: rill.sql.v1.SqlCallProto.sqlKeyConstraintProto:type_name -> rill.sql.v1.SqlKeyConstraintProto
	67,   // 191: rill.sql.v1.SqlCallProto.sqlWithProto:type_name -> rill.sql.v1.SqlWithProto
	68,   // 192: rill.sql.v1.SqlCallProto.sqlSnapshotProto:type_name -> rill.sql.v1.SqlSnapshotProto
	69,   // 193: rill.sql.v1.SqlCallProto.sqlOrderByProto:type_name -> rill.sql.v1.SqlOrderByProto
	70,   // 194: rill.sql.v1.SqlCallProto.sqlWindowProto:type_name -> rill.sql.v1.SqlWindowProto
	59,   // 195: rill.sql.v1.SqlCallProto.sqlSelectProto:type_name -> rill.sql.v1.SqlSelectProto
	81,   // 196: rill.sql.v1.SqlCallProto.sqlAttributeDefinitionProto:type_name -> rill.sql.v1.SqlAttributeDefinitionProto
	90,   // 197: rill.sql.v1.SqlCallProto.sqlExplainProto:type_name -> rill.sql.v1.SqlExplainProto
	91,   // 198: rill.sql.v1.SqlCallProto.sqlWithItemProto:type_name -> rill.sql.v1.SqlWithItemProto
	92,   // 199: rill.sql.v1.SqlCallProto.sqlUnpivotProto:type_name -> rill.sql.v1.SqlUnpivotProto
	93,   // 200: rill.sql.v1.SqlCallProto.sqlMergeProto:type_name -> rill.sql.v1.SqlMergeProto
	94,   // 201: rill.sql.v1.SqlCallProto.sqlHintProto:type_name -> rill.sql.v1.SqlHintProto
	95,   // 202: rill.sql.v1.SqlCallProto.sqlBasicCallProto:type_name -> rill.sql.v1.SqlBasicCallProto
	324,  // 203: rill.sql.v1.SqlCallProto.sqlMatchRecognizeProto:type_name -> rill.sql.v1.SqlMatchRecognizeProto
	325,  // 204: rill.sql.v1.SqlCallProto.sqlAlterProto:type_name -> rill.sql.v1.SqlAlterProto
	327,  // 205: rill.sql.v1.SqlCallProto.sqlDdlProto:type_name -> rill.sql.v1.SqlDdlProto
	344,  // 206: rill.sql.v1.SqlCallProto.sqlDescribeSchemaProto:type_name -> rill.sql.v1.SqlDescribeSchemaProto
	345,  // 207: rill.sql.v1.SqlCallProto.sqlJoinProto:type_name -> rill.sql.v1.SqlJoinProto
	346,  // 208: rill.sql.v1.SqlCallProto.sqlDescribeTableProto:type_name -> rill.sql.v1.SqlDescribeTableProto
	347,  // 209: rill.sql.v1.SqlCallProto.sqlColumnDeclarationProto:type_name -> rill.sql.v1.SqlColumnDeclarationProto
	326,  // 210: rill.sql.v1.SqlCallProto.sqlSetOptionProto:type_name -> rill.sql.v1.SqlSetOptionProto
	328,  // 211: rill.sql.v1.SqlCallProto.sqlDropProto:type_name -> rill.sql.v1.SqlDropProto
	336,  // 212: rill.sql.v1.SqlCallProto.sqlCreateProto:type_name -> rill.sql.v1.SqlCreateProto
	329,  // 213: rill.sql.v1.SqlCallProto.sqlDropSchemaProto:type_name -> rill.sql.v1.SqlDropSchemaProto
	330,  // 214: rill.sql.v1.SqlCallProto.sqlDropObjectProto:type_name -> rill.sql.v1.SqlDropObjectProto
	337,  // 215: rill.sql.v1.SqlCallProto.sqlCreateTypeProto:type_name -> rill.sql.v1.SqlCreateTypeProto
	338,  // 216: rill.sql.v1.SqlCallProto.sqlCreateTableProto:type_name -> rill.sql.v1.SqlCreateTableProto
	339,  // 217: rill.sql.v1.SqlCallProto.sqlCreateViewProto:type_name -> rill.sql.v1.SqlCreateViewProto
	340,  // 218: rill.sql.v1.SqlCallProto.sqlCreateFunctionProto:type_name -> rill.sql.v1.SqlCreateFunctionProto
	341,  // 219: rill.sql.v1.SqlCallProto.sqlCreateForeignSchemaProto:type_name -> rill.sql.v1.SqlCreateForeignSchemaProto
	342,  // 220: rill.sql.v1.SqlCallProto.sqlCreateSchemaProto:type_name -> rill.sql.v1.SqlCreateSchemaProto
	343,  // 221: rill.sql.v1.SqlCallProto.sqlCreateMaterializedViewProto:type_name -> rill.sql.v1.SqlCreateMaterializedViewProto
	331,  // 222: rill.sql.v1.SqlCallProto.sqlDropTableProto:type_name -> rill.sql.v1.SqlDropTableProto
	332,  // 223: rill.sql.v1.SqlCallProto.sqlDropMaterializedViewProto:type_name -> rill.sql.v1.SqlDropMaterializedViewProto
	333,  // 224: rill.sql.v1.SqlCallProto.sqlDropViewProto:type_name -> rill.sql.v1.SqlDropViewProto
	334,  // 225: rill.sql.v1.SqlCallProto.sqlDropFunctionProto:type_name -> rill.sql.v1.SqlDropFunctionProto
	335,  // 226: rill.sql.v1.SqlCallProto.sqlDropTypeProto:type_name -> rill.sql.v1.SqlDropTypeProto
	39,   // 227: rill.sql.v1.SqlCallProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 228: rill.sql.v1.SqlCallProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 229: rill.sql.v1.SqlUpdateProto.targetTable:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 230: rill.sql.v1.SqlUpdateProto.targetColumnList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 231: rill.sql.v1.SqlUpdateProto.sourceExpressionList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 232: rill.sql.v1.SqlUpdateProto.condition:type_name -> rill.sql.v1.SqlNodeProto
	59,   // 233: rill.sql.v1.SqlUpdateProto.sourceSelect:type_name -> rill.sql.v1.SqlSelectProto
	41,   // 234: rill.sql.v1.SqlUpdateProto.alias:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 235: rill.sql.v1.SqlUpdateProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 236: rill.sql.v1.SqlUpdateProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 237: rill.sql.v1.SqlNodeListProto.list:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 238: rill.sql.v1.SqlNodeListProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 239: rill.sql.v1.SqlNodeListProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	58,   // 240: rill.sql.v1.SqlSelectProto.keywordList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 241: rill.sql.v1.SqlSelectProto.selectList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 242: rill.sql.v1.SqlSelectProto.from:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 243: rill.sql.v1.SqlSelectProto.where:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 244: rill.sql.v1.SqlSelectProto.groupBy:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 245: rill.sql.v1.SqlSelectProto.having:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 246: rill.sql.v1.SqlSelectProto.windowDecls:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 247: rill.sql.v1.SqlSelectProto.orderBy:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 248: rill.sql.v1.SqlSelectProto.offset:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 249: rill.sql.v1.SqlSelectProto.fetch:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 250: rill.sql.v1.SqlSelectProto.hints:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 251: rill.sql.v1.SqlSelectProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 252: rill.sql.v1.SqlSelectProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	58,   // 253: rill.sql.v1.SqlInsertProto.keywords:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 254: rill.sql.v1.SqlInsertProto.targetTable:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 255: rill.sql.v1.SqlInsertProto.source:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 256: rill.sql.v1.SqlInsertProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 257: rill.sql.v1.SqlInsertProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 258: rill.sql.v1.SqlInsertProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 259: rill.sql.v1.SqlCaseProto.value:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 260: rill.sql.v1.SqlCaseProto.whenList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 261: rill.sql.v1.SqlCaseProto.thenList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 262: rill.sql.v1.SqlCaseProto.elseExpr:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 263: rill.sql.v1.SqlCaseProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 264: rill.sql.v1.SqlCaseProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 265: rill.sql.v1.SqlDeleteProto.targetTable:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 266: rill.sql.v1.SqlDeleteProto.condition:type_name -> rill.sql.v1.SqlNodeProto
	59,   // 267: rill.sql.v1.SqlDeleteProto.sourceSelect:type_name -> rill.sql.v1.SqlSelectProto
	41,   // 268: rill.sql.v1.SqlDeleteProto.alias:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 269: rill.sql.v1.SqlDeleteProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 270: rill.sql.v1.SqlDeleteProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 271: rill.sql.v1.SqlCheckConstraintProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	55,   // 272: rill.sql.v1.SqlCheckConstraintProto.expression:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 273: rill.sql.v1.SqlCheckConstraintProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 274: rill.sql.v1.SqlCheckConstraintProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 275: rill.sql.v1.SqlPivotProto.query:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 276: rill.sql.v1.SqlPivotProto.aggList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 277: rill.sql.v1.SqlPivotProto.axisList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 278: rill.sql.v1.SqlPivotProto.inList:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 279: rill.sql.v1.SqlPivotProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 280: rill.sql.v1.SqlPivotProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 281: rill.sql.v1.SqlTableRefProto.tableName:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 282: rill.sql.v1.SqlTableRefProto.hints:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 283: rill.sql.v1.SqlTableRefProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 284: rill.sql.v1.SqlTableRefProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 285: rill.sql.v1.SqlKeyConstraintProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 286: rill.sql.v1.SqlKeyConstraintProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 287: rill.sql.v1.SqlKeyConstraintProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 288: rill.sql.v1.SqlKeyConstraintProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	58,   // 289: rill.sql.v1.SqlWithProto.withList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 290: rill.sql.v1.SqlWithProto.body:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 291: rill.sql.v1.SqlWithProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 292: rill.sql.v1.SqlWithProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 293: rill.sql.v1.SqlSnapshotProto.tableRef:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 294: rill.sql.v1.SqlSnapshotProto.period:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 295: rill.sql.v1.SqlSnapshotProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 296: rill.sql.v1.SqlSnapshotProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 297: rill.sql.v1.SqlOrderByProto.query:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 298: rill.sql.v1.SqlOrderByProto.orderList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 299: rill.sql.v1.SqlOrderByProto.offset:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 300: rill.sql.v1.SqlOrderByProto.fetch:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 301: rill.sql.v1.SqlOrderByProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 302: rill.sql.v1.SqlOrderByProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 303: rill.sql.v1.SqlWindowProto.declName:type_name -> rill.sql.v1.SqlIdentifierProto
	41,   // 304: rill.sql.v1.SqlWindowProto.refName:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 305: rill.sql.v1.SqlWindowProto.partitionList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 306: rill.sql.v1.SqlWindowProto.orderList:type_name -> rill.sql.v1.SqlNodeListProto
	71,   // 307: rill.sql.v1.SqlWindowProto.isRows:type_name -> rill.sql.v1.SqlLiteralProto
	55,   // 308: rill.sql.v1.SqlWindowProto.lowerBound:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 309: rill.sql.v1.SqlWindowProto.upperBound:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 310: rill.sql.v1.SqlWindowProto.allowPartial:type_name -> rill.sql.v1.SqlLiteralProto
	56,   // 311: rill.sql.v1.SqlWindowProto.windowCall:type_name -> rill.sql.v1.SqlCallProto
	39,   // 312: rill.sql.v1.SqlWindowProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 313: rill.sql.v1.SqlWindowProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	72,   // 314: rill.sql.v1.SqlLiteralProto.sqlNumericLiteralProto:type_name -> rill.sql.v1.SqlNumericLiteralProto
	73,   // 315: rill.sql.v1.SqlLiteralProto.sqlAbstractStringLiteralProto:type_name -> rill.sql.v1.SqlAbstractStringLiteralProto
	76,   // 316: rill.sql.v1.SqlLiteralProto.sqlAbstractDateTimeLiteralProto:type_name -> rill.sql.v1.SqlAbstractDateTimeLiteralProto
	80,   // 317: rill.sql.v1.SqlLiteralProto.sqlIntervalLiteralProto:type_name -> rill.sql.v1.SqlIntervalLiteralProto
	74,   // 318: rill.sql.v1.SqlLiteralProto.sqlBinaryStringLiteralProto:type_name -> rill.sql.v1.SqlBinaryStringLiteralProto
	75,   // 319: rill.sql.v1.SqlLiteralProto.sqlCharStringLiteralProto:type_name -> rill.sql.v1.SqlCharStringLiteralProto
	77,   // 320: rill.sql.v1.SqlLiteralProto.sqlDateLiteralProto:type_name -> rill.sql.v1.SqlDateLiteralProto
	78,   // 321: rill.sql.v1.SqlLiteralProto.sqlTimestampLiteralProto:type_name -> rill.sql.v1.SqlTimestampLiteralProto
	79,   // 322: rill.sql.v1.SqlLiteralProto.sqlTimeLiteralProto:type_name -> rill.sql.v1.SqlTimeLiteralProto
	0,    // 323: rill.sql.v1.SqlLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 324: rill.sql.v1.SqlLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 325: rill.sql.v1.SqlLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 326: rill.sql.v1.SqlNumericLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 327: rill.sql.v1.SqlNumericLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 328: rill.sql.v1.SqlNumericLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	74,   // 329: rill.sql.v1.SqlAbstractStringLiteralProto.sqlBinaryStringLiteralProto:type_name -> rill.sql.v1.SqlBinaryStringLiteralProto
	75,   // 330: rill.sql.v1.SqlAbstractStringLiteralProto.sqlCharStringLiteralProto:type_name -> rill.sql.v1.SqlCharStringLiteralProto
	0,    // 331: rill.sql.v1.SqlAbstractStringLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 332: rill.sql.v1.SqlAbstractStringLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 333: rill.sql.v1.SqlAbstractStringLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 334: rill.sql.v1.SqlBinaryStringLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 335: rill.sql.v1.SqlBinaryStringLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 336: rill.sql.v1.SqlBinaryStringLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 337: rill.sql.v1.SqlCharStringLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 338: rill.sql.v1.SqlCharStringLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 339: rill.sql.v1.SqlCharStringLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	77,   // 340: rill.sql.v1.SqlAbstractDateTimeLiteralProto.sqlDateLiteralProto:type_name -> rill.sql.v1.SqlDateLiteralProto
	78,   // 341: rill.sql.v1.SqlAbstractDateTimeLiteralProto.sqlTimestampLiteralProto:type_name -> rill.sql.v1.SqlTimestampLiteralProto
	79,   // 342: rill.sql.v1.SqlAbstractDateTimeLiteralProto.sqlTimeLiteralProto:type_name -> rill.sql.v1.SqlTimeLiteralProto
	0,    // 343: rill.sql.v1.SqlAbstractDateTimeLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 344: rill.sql.v1.SqlAbstractDateTimeLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 345: rill.sql.v1.SqlAbstractDateTimeLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 346: rill.sql.v1.SqlDateLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 347: rill.sql.v1.SqlDateLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 348: rill.sql.v1.SqlDateLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 349: rill.sql.v1.SqlTimestampLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 350: rill.sql.v1.SqlTimestampLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 351: rill.sql.v1.SqlTimestampLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 352: rill.sql.v1.SqlTimeLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 353: rill.sql.v1.SqlTimeLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 354: rill.sql.v1.SqlTimeLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	0,    // 355: rill.sql.v1.SqlIntervalLiteralProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	39,   // 356: rill.sql.v1.SqlIntervalLiteralProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 357: rill.sql.v1.SqlIntervalLiteralProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 358: rill.sql.v1.SqlAttributeDefinitionProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	82,   // 359: rill.sql.v1.SqlAttributeDefinitionProto.dataType:type_name -> rill.sql.v1.SqlDataTypeSpecProto
	55,   // 360: rill.sql.v1.SqlAttributeDefinitionProto.expression:type_name -> rill.sql.v1.SqlNodeProto
	31,   // 361: rill.sql.v1.SqlAttributeDefinitionProto.collation:type_name -> rill.sql.v1.SqlCollationProto
	39,   // 362: rill.sql.v1.SqlAttributeDefinitionProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 363: rill.sql.v1.SqlAttributeDefinitionProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	83,   // 364: rill.sql.v1.SqlDataTypeSpecProto.typeNameSpec:type_name -> rill.sql.v1.SqlTypeNameSpecProto
	89,   // 365: rill.sql.v1.SqlDataTypeSpecProto.timeZone:type_name -> rill.sql.v1.TimeZoneProto
	39,   // 366: rill.sql.v1.SqlDataTypeSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 367: rill.sql.v1.SqlDataTypeSpecProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	84,   // 368: rill.sql.v1.SqlTypeNameSpecProto.sqlUserDefinedTypeNameSpecProto:type_name -> rill.sql.v1.SqlUserDefinedTypeNameSpecProto
	85,   // 369: rill.sql.v1.SqlTypeNameSpecProto.sqlRowTypeNameSpecProto:type_name -> rill.sql.v1.SqlRowTypeNameSpecProto
	86,   // 370: rill.sql.v1.SqlTypeNameSpecProto.sqlBasicTypeNameSpecProto:type_name -> rill.sql.v1.SqlBasicTypeNameSpecProto
	88,   // 371: rill.sql.v1.SqlTypeNameSpecProto.sqlCollectionTypeNameSpecProto:type_name -> rill.sql.v1.SqlCollectionTypeNameSpecProto
	87,   // 372: rill.sql.v1.SqlTypeNameSpecProto.sqlAlienSystemTypeNameSpecProto:type_name -> rill.sql.v1.SqlAlienSystemTypeNameSpecProto
	41,   // 373: rill.sql.v1.SqlTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 374: rill.sql.v1.SqlTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	41,   // 375: rill.sql.v1.SqlUserDefinedTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 376: rill.sql.v1.SqlUserDefinedTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	41,   // 377: rill.sql.v1.SqlRowTypeNameSpecProto.fieldNames:type_name -> rill.sql.v1.SqlIdentifierProto
	82,   // 378: rill.sql.v1.SqlRowTypeNameSpecProto.fieldTypes:type_name -> rill.sql.v1.SqlDataTypeSpecProto
	41,   // 379: rill.sql.v1.SqlRowTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 380: rill.sql.v1.SqlRowTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	87,   // 381: rill.sql.v1.SqlBasicTypeNameSpecProto.sqlAlienSystemTypeNameSpecProto:type_name -> rill.sql.v1.SqlAlienSystemTypeNameSpecProto
	0,    // 382: rill.sql.v1.SqlBasicTypeNameSpecProto.sqlTypeName:type_name -> rill.sql.v1.SqlTypeNameProto
	41,   // 383: rill.sql.v1.SqlBasicTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 384: rill.sql.v1.SqlBasicTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	0,    // 385: rill.sql.v1.SqlAlienSystemTypeNameSpecProto.sqlTypeName:type_name -> rill.sql.v1.SqlTypeNameProto
	41,   // 386: rill.sql.v1.SqlAlienSystemTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 387: rill.sql.v1.SqlAlienSystemTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	83,   // 388: rill.sql.v1.SqlCollectionTypeNameSpecProto.elementTypeName:type_name -> rill.sql.v1.SqlTypeNameSpecProto
	0,    // 389: rill.sql.v1.SqlCollectionTypeNameSpecProto.collectionTypeName:type_name -> rill.sql.v1.SqlTypeNameProto
	41,   // 390: rill.sql.v1.SqlCollectionTypeNameSpecProto.typeName:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 391: rill.sql.v1.SqlCollectionTypeNameSpecProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	55,   // 392: rill.sql.v1.SqlExplainProto.explicandum:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 393: rill.sql.v1.SqlExplainProto.detailLevel:type_name -> rill.sql.v1.SqlLiteralProto
	71,   // 394: rill.sql.v1.SqlExplainProto.depth:type_name -> rill.sql.v1.SqlLiteralProto
	71,   // 395: rill.sql.v1.SqlExplainProto.format:type_name -> rill.sql.v1.SqlLiteralProto
	39,   // 396: rill.sql.v1.SqlExplainProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 397: rill.sql.v1.SqlExplainProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 398: rill.sql.v1.SqlWithItemProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 399: rill.sql.v1.SqlWithItemProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 400: rill.sql.v1.SqlWithItemProto.query:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 401: rill.sql.v1.SqlWithItemProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 402: rill.sql.v1.SqlWithItemProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 403: rill.sql.v1.SqlUnpivotProto.query:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 404: rill.sql.v1.SqlUnpivotProto.measureList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 405: rill.sql.v1.SqlUnpivotProto.axisList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 406: rill.sql.v1.SqlUnpivotProto.inList:type_name -> rill.sql.v1.SqlNodeListProto
	39,   // 407: rill.sql.v1.SqlUnpivotProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 408: rill.sql.v1.SqlUnpivotProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 409: rill.sql.v1.SqlMergeProto.targetTable:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 410: rill.sql.v1.SqlMergeProto.condition:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 411: rill.sql.v1.SqlMergeProto.source:type_name -> rill.sql.v1.SqlNodeProto
	57,   // 412: rill.sql.v1.SqlMergeProto.updateCall:type_name -> rill.sql.v1.SqlUpdateProto
	60,   // 413: rill.sql.v1.SqlMergeProto.insertCall:type_name -> rill.sql.v1.SqlInsertProto
	59,   // 414: rill.sql.v1.SqlMergeProto.sourceSelect:type_name -> rill.sql.v1.SqlSelectProto
	41,   // 415: rill.sql.v1.SqlMergeProto.alias:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 416: rill.sql.v1.SqlMergeProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 417: rill.sql.v1.SqlMergeProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 418: rill.sql.v1.SqlHintProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 419: rill.sql.v1.SqlHintProto.options:type_name -> rill.sql.v1.SqlNodeListProto
	6,    // 420: rill.sql.v1.SqlHintProto.optionFormat:type_name -> rill.sql.v1.HintOptionFormatProto
	39,   // 421: rill.sql.v1.SqlHintProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 422: rill.sql.v1.SqlHintProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	96,   // 423: rill.sql.v1.SqlBasicCallProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	55,   // 424: rill.sql.v1.SqlBasicCallProto.operandList:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 425: rill.sql.v1.SqlBasicCallProto.functionQuantifier:type_name -> rill.sql.v1.SqlLiteralProto
	39,   // 426: rill.sql.v1.SqlBasicCallProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 427: rill.sql.v1.SqlBasicCallProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	97,   // 428: rill.sql.v1.SqlOperatorProto.sqlPrefixOperatorProto:type_name -> rill.sql.v1.SqlPrefixOperatorProto
	132,  // 429: rill.sql.v1.SqlOperatorProto.sqlDescriptorOperatorProto:type_name -> rill.sql.v1.SqlDescriptorOperatorProto
	133,  // 430: rill.sql.v1.SqlOperatorProto.sqlPostfixOperatorProto:type_name -> rill.sql.v1.SqlPostfixOperatorProto
	135,  // 431: rill.sql.v1.SqlOperatorProto.sqlFunctionProto:type_name -> rill.sql.v1.SqlFunctionProto
	274,  // 432: rill.sql.v1.SqlOperatorProto.sqlCaseOperatorProto:type_name -> rill.sql.v1.SqlCaseOperatorProto
	275,  // 433: rill.sql.v1.SqlOperatorProto.sqlBinaryOperatorProto:type_name -> rill.sql.v1.SqlBinaryOperatorProto
	289,  // 434: rill.sql.v1.SqlOperatorProto.sqlSelectOperatorProto:type_name -> rill.sql.v1.SqlSelectOperatorProto
	290,  // 435: rill.sql.v1.SqlOperatorProto.sqlSpecialOperatorProto:type_name -> rill.sql.v1.SqlSpecialOperatorProto
	98,   // 436: rill.sql.v1.SqlOperatorProto.sqlNewOperatorProto:type_name -> rill.sql.v1.SqlNewOperatorProto
	131,  // 437: rill.sql.v1.SqlOperatorProto.sqlProcedureCallOperatorProto:type_name -> rill.sql.v1.SqlProcedureCallOperatorProto
	134,  // 438: rill.sql.v1.SqlOperatorProto.sqlJsonValueExpressionOperatorProto:type_name -> rill.sql.v1.SqlJsonValueExpressionOperatorProto
	136,  // 439: rill.sql.v1.SqlOperatorProto.sqlUnresolvedFunctionProto:type_name -> rill.sql.v1.SqlUnresolvedFunctionProto
	137,  // 440: rill.sql.v1.SqlOperatorProto.sqlJdbcFunctionCallProto:type_name -> rill.sql.v1.SqlJdbcFunctionCallProto
	138,  // 441: rill.sql.v1.SqlOperatorProto.sqlUserDefinedTableMacroProto:type_name -> rill.sql.v1.SqlUserDefinedTableMacroProto
	156,  // 442: rill.sql.v1.SqlOperatorProto.sqlUserDefinedFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedFunctionProto
	169,  // 443: rill.sql.v1.SqlOperatorProto.sqlExtractFunctionProto:type_name -> rill.sql.v1.SqlExtractFunctionProto
	170,  // 444: rill.sql.v1.SqlOperatorProto.sqlTranslate3FunctionProto:type_name -> rill.sql.v1.SqlTranslate3FunctionProto
	171,  // 445: rill.sql.v1.SqlOperatorProto.sqlTrimFunctionProto:type_name -> rill.sql.v1.SqlTrimFunctionProto
	172,  // 446: rill.sql.v1.SqlOperatorProto.sqlSubstringFunctionProto:type_name -> rill.sql.v1.SqlSubstringFunctionProto
	173,  // 447: rill.sql.v1.SqlOperatorProto.sqlJsonDepthFunctionProto:type_name -> rill.sql.v1.SqlJsonDepthFunctionProto
	174,  // 448: rill.sql.v1.SqlOperatorProto.sqlAbstractTimeFunctionProto:type_name -> rill.sql.v1.SqlAbstractTimeFunctionProto
	175,  // 449: rill.sql.v1.SqlOperatorProto.sqlRandFunctionProto:type_name -> rill.sql.v1.SqlRandFunctionProto
	176,  // 450: rill.sql.v1.SqlOperatorProto.sqlCoalesceFunctionProto:type_name -> rill.sql.v1.SqlCoalesceFunctionProto
	177,  // 451: rill.sql.v1.SqlOperatorProto.sqlJsonTypeFunctionProto:type_name -> rill.sql.v1.SqlJsonTypeFunctionProto
	178,  // 452: rill.sql.v1.SqlOperatorProto.sqlJsonValueFunctionProto:type_name -> rill.sql.v1.SqlJsonValueFunctionProto
	179,  // 453: rill.sql.v1.SqlOperatorProto.sqlDatePartFunctionProto:type_name -> rill.sql.v1.SqlDatePartFunctionProto
	180,  // 454: rill.sql.v1.SqlOperatorProto.sqlJsonObjectFunctionProto:type_name -> rill.sql.v1.SqlJsonObjectFunctionProto
	181,  // 455: rill.sql.v1.SqlOperatorProto.sqlNullifFunctionProto:type_name -> rill.sql.v1.SqlNullifFunctionProto
	182,  // 456: rill.sql.v1.SqlOperatorProto.sqlTimestampAddFunctionProto:type_name -> rill.sql.v1.SqlTimestampAddFunctionProto
	183,  // 457: rill.sql.v1.SqlOperatorProto.sqlJsonPrettyFunctionProto:type_name -> rill.sql.v1.SqlJsonPrettyFunctionProto
	184,  // 458: rill.sql.v1.SqlOperatorProto.sqlBaseContextVariableProto:type_name -> rill.sql.v1.SqlBaseContextVariableProto
	186,  // 459: rill.sql.v1.SqlOperatorProto.sqlConvertFunctionProto:type_name -> rill.sql.v1.SqlConvertFunctionProto
	187,  // 460: rill.sql.v1.SqlOperatorProto.sqlGroupedWindowFunctionProto:type_name -> rill.sql.v1.SqlGroupedWindowFunctionProto
	188,  // 461: rill.sql.v1.SqlOperatorProto.sqlTypeConstructorFunctionProto:type_name -> rill.sql.v1.SqlTypeConstructorFunctionProto
	189,  // 462: rill.sql.v1.SqlOperatorProto.sqlTimestampDiffFunctionProto:type_name -> rill.sql.v1.SqlTimestampDiffFunctionProto
	190,  // 463: rill.sql.v1.SqlOperatorProto.sqlJsonKeysFunctionProto:type_name -> rill.sql.v1.SqlJsonKeysFunctionProto
	191,  // 464: rill.sql.v1.SqlOperatorProto.sqlJsonLengthFunctionProto:type_name -> rill.sql.v1.SqlJsonLengthFunctionProto
	192,  // 465: rill.sql.v1.SqlOperatorProto.sqlCastFunctionProto:type_name -> rill.sql.v1.SqlCastFunctionProto
	231,  // 466: rill.sql.v1.SqlOperatorProto.sqlPositionFunctionProto:type_name -> rill.sql.v1.SqlPositionFunctionProto
	232,  // 467: rill.sql.v1.SqlOperatorProto.sqlJsonRemoveFunctionProto:type_name -> rill.sql.v1.SqlJsonRemoveFunctionProto
	233,  // 468: rill.sql.v1.SqlOperatorProto.sqlMatchFunctionProto:type_name -> rill.sql.v1.SqlMatchFunctionProto
	234,  // 469: rill.sql.v1.SqlOperatorProto.sqlOverlayFunctionProto:type_name -> rill.sql.v1.SqlOverlayFunctionProto
	235,  // 470: rill.sql.v1.SqlOperatorProto.sqlJsonArrayFunctionProto:type_name -> rill.sql.v1.SqlJsonArrayFunctionProto
	236,  // 471: rill.sql.v1.SqlOperatorProto.sqlRandIntegerFunctionProto:type_name -> rill.sql.v1.SqlRandIntegerFunctionProto
	237,  // 472: rill.sql.v1.SqlOperatorProto.sqlCurrentDateFunctionProto:type_name -> rill.sql.v1.SqlCurrentDateFunctionProto
	238,  // 473: rill.sql.v1.SqlOperatorProto.sqlAggFunctionProto:type_name -> rill.sql.v1.SqlAggFunctionProto
	264,  // 474: rill.sql.v1.SqlOperatorProto.sqlWindowTableFunctionProto:type_name -> rill.sql.v1.SqlWindowTableFunctionProto
	268,  // 475: rill.sql.v1.SqlOperatorProto.sqlRegexpReplaceFunctionProto:type_name -> rill.sql.v1.SqlRegexpReplaceFunctionProto
	269,  // 476: rill.sql.v1.SqlOperatorProto.sqlMonotonicUnaryFunctionProto:type_name -> rill.sql.v1.SqlMonotonicUnaryFunctionProto
	271,  // 477: rill.sql.v1.SqlOperatorProto.sqlJsonStorageSizeFunctionProto:type_name -> rill.sql.v1.SqlJsonStorageSizeFunctionProto
	272,  // 478: rill.sql.v1.SqlOperatorProto.sqlJsonQueryFunctionProto:type_name -> rill.sql.v1.SqlJsonQueryFunctionProto
	273,  // 479: rill.sql.v1.SqlOperatorProto.sqlJsonExistsFunctionProto:type_name -> rill.sql.v1.SqlJsonExistsFunctionProto
	276,  // 480: rill.sql.v1.SqlOperatorProto.sqlSetOperatorProto:type_name -> rill.sql.v1.SqlSetOperatorProto
	277,  // 481: rill.sql.v1.SqlOperatorProto.sqlOverlapsOperatorProto:type_name -> rill.sql.v1.SqlOverlapsOperatorProto
	278,  // 482: rill.sql.v1.SqlOperatorProto.sqlCastOperatorProto:type_name -> rill.sql.v1.SqlCastOperatorProto
	279,  // 483: rill.sql.v1.SqlOperatorProto.sqlMonotonicBinaryOperatorProto:type_name -> rill.sql.v1.SqlMonotonicBinaryOperatorProto
	280,  // 484: rill.sql.v1.SqlOperatorProto.sqlMultisetMemberOfOperatorProto:type_name -> rill.sql.v1.SqlMultisetMemberOfOperatorProto
	281,  // 485: rill.sql.v1.SqlOperatorProto.sqlMultisetSetOperatorProto:type_name -> rill.sql.v1.SqlMultisetSetOperatorProto
	282,  // 486: rill.sql.v1.SqlOperatorProto.sqlWithinGroupOperatorProto:type_name -> rill.sql.v1.SqlWithinGroupOperatorProto
	283,  // 487: rill.sql.v1.SqlOperatorProto.sqlFilterOperatorProto:type_name -> rill.sql.v1.SqlFilterOperatorProto
	284,  // 488: rill.sql.v1.SqlOperatorProto.sqlOverOperatorProto:type_name -> rill.sql.v1.SqlOverOperatorProto
	285,  // 489: rill.sql.v1.SqlOperatorProto.sqlInOperatorProto:type_name -> rill.sql.v1.SqlInOperatorProto
	287,  // 490: rill.sql.v1.SqlOperatorProto.sqlPosixRegexOperatorProto:type_name -> rill.sql.v1.SqlPosixRegexOperatorProto
	288,  // 491: rill.sql.v1.SqlOperatorProto.sqlWithinDistinctOperatorProto:type_name -> rill.sql.v1.SqlWithinDistinctOperatorProto
	291,  // 492: rill.sql.v1.SqlOperatorProto.sqlLateralOperatorProto:type_name -> rill.sql.v1.SqlLateralOperatorProto
	292,  // 493: rill.sql.v1.SqlOperatorProto.sqlMultisetValueConstructorProto:type_name -> rill.sql.v1.SqlMultisetValueConstructorProto
	295,  // 494: rill.sql.v1.SqlOperatorProto.sqlDefaultOperatorProto:type_name -> rill.sql.v1.SqlDefaultOperatorProto
	296,  // 495: rill.sql.v1.SqlOperatorProto.sqlLiteralChainOperatorProto:type_name -> rill.sql.v1.SqlLiteralChainOperatorProto
	297,  // 496: rill.sql.v1.SqlOperatorProto.sqlDatetimePlusOperatorProto:type_name -> rill.sql.v1.SqlDatetimePlusOperatorProto
	298,  // 497: rill.sql.v1.SqlOperatorProto.sqlSequenceValueOperatorProto:type_name -> rill.sql.v1.SqlSequenceValueOperatorProto
	299,  // 498: rill.sql.v1.SqlOperatorProto.sqlFunctionalOperatorProto:type_name -> rill.sql.v1.SqlFunctionalOperatorProto
	302,  // 499: rill.sql.v1.SqlOperatorProto.sqlLikeOperatorProto:type_name -> rill.sql.v1.SqlLikeOperatorProto
	303,  // 500: rill.sql.v1.SqlOperatorProto.sqlInternalOperatorProto:type_name -> rill.sql.v1.SqlInternalOperatorProto
	308,  // 501: rill.sql.v1.SqlOperatorProto.sqlDotOperatorProto:type_name -> rill.sql.v1.SqlDotOperatorProto
	309,  // 502: rill.sql.v1.SqlOperatorProto.sqlThrowOperatorProto:type_name -> rill.sql.v1.SqlThrowOperatorProto
	310,  // 503: rill.sql.v1.SqlOperatorProto.sqlItemOperatorProto:type_name -> rill.sql.v1.SqlItemOperatorProto
	311,  // 504: rill.sql.v1.SqlOperatorProto.sqlInfixOperatorProto:type_name -> rill.sql.v1.SqlInfixOperatorProto
	313,  // 505: rill.sql.v1.SqlOperatorProto.sqlAsOperatorProto:type_name -> rill.sql.v1.SqlAsOperatorProto
	315,  // 506: rill.sql.v1.SqlOperatorProto.sqlValuesOperatorProto:type_name -> rill.sql.v1.SqlValuesOperatorProto
	316,  // 507: rill.sql.v1.SqlOperatorProto.sqlColumnListConstructorProto:type_name -> rill.sql.v1.SqlColumnListConstructorProto
	317,  // 508: rill.sql.v1.SqlOperatorProto.sqlMultisetQueryConstructorProto:type_name -> rill.sql.v1.SqlMultisetQueryConstructorProto
	320,  // 509: rill.sql.v1.SqlOperatorProto.sqlCursorConstructorProto:type_name -> rill.sql.v1.SqlCursorConstructorProto
	321,  // 510: rill.sql.v1.SqlOperatorProto.sqlRowOperatorProto:type_name -> rill.sql.v1.SqlRowOperatorProto
	322,  // 511: rill.sql.v1.SqlOperatorProto.sqlDatetimeSubtractionOperatorProto:type_name -> rill.sql.v1.SqlDatetimeSubtractionOperatorProto
	323,  // 512: rill.sql.v1.SqlOperatorProto.sqlNullTreatmentOperatorProto:type_name -> rill.sql.v1.SqlNullTreatmentOperatorProto
	157,  // 513: rill.sql.v1.SqlOperatorProto.sqlUserDefinedTableFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedTableFunctionProto
	185,  // 514: rill.sql.v1.SqlOperatorProto.sqlStringContextVariableProto:type_name -> rill.sql.v1.SqlStringContextVariableProto
	239,  // 515: rill.sql.v1.SqlOperatorProto.sqlUserDefinedAggFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedAggFunctionProto
	240,  // 516: rill.sql.v1.SqlOperatorProto.sqlCovarAggFunctionProto:type_name -> rill.sql.v1.SqlCovarAggFunctionProto
	241,  // 517: rill.sql.v1.SqlOperatorProto.sqlJsonArrayAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonArrayAggAggFunctionProto
	242,  // 518: rill.sql.v1.SqlOperatorProto.sqlSumAggFunctionProto:type_name -> rill.sql.v1.SqlSumAggFunctionProto
	243,  // 519: rill.sql.v1.SqlOperatorProto.sqlMinMaxAggFunctionProto:type_name -> rill.sql.v1.SqlMinMaxAggFunctionProto
	244,  // 520: rill.sql.v1.SqlOperatorProto.sqlCountAggFunctionProto:type_name -> rill.sql.v1.SqlCountAggFunctionProto
	246,  // 521: rill.sql.v1.SqlOperatorProto.sqlAnyValueAggFunctionProto:type_name -> rill.sql.v1.SqlAnyValueAggFunctionProto
	247,  // 522: rill.sql.v1.SqlOperatorProto.sqlAvgAggFunctionProto:type_name -> rill.sql.v1.SqlAvgAggFunctionProto
	248,  // 523: rill.sql.v1.SqlOperatorProto.sqlNthValueAggFunctionProto:type_name -> rill.sql.v1.SqlNthValueAggFunctionProto
	249,  // 524: rill.sql.v1.SqlOperatorProto.sqlBasicAggFunctionProto:type_name -> rill.sql.v1.SqlBasicAggFunctionProto
	250,  // 525: rill.sql.v1.SqlOperatorProto.sqlSingleValueAggFunctionProto:type_name -> rill.sql.v1.SqlSingleValueAggFunctionProto
	251,  // 526: rill.sql.v1.SqlOperatorProto.sqlSumEmptyIsZeroAggFunctionProto:type_name -> rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto
	252,  // 527: rill.sql.v1.SqlOperatorProto.sqlListaggAggFunctionProto:type_name -> rill.sql.v1.SqlListaggAggFunctionProto
	253,  // 528: rill.sql.v1.SqlOperatorProto.sqlNtileAggFunctionProto:type_name -> rill.sql.v1.SqlNtileAggFunctionProto
	254,  // 529: rill.sql.v1.SqlOperatorProto.sqlJsonObjectAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonObjectAggAggFunctionProto
	255,  // 530: rill.sql.v1.SqlOperatorProto.sqlFirstLastValueAggFunctionProto:type_name -> rill.sql.v1.SqlFirstLastValueAggFunctionProto
	256,  // 531: rill.sql.v1.SqlOperatorProto.sqlAbstractGroupFunctionProto:type_name -> rill.sql.v1.SqlAbstractGroupFunctionProto
	260,  // 532: rill.sql.v1.SqlOperatorProto.sqlHistogramAggFunctionProto:type_name -> rill.sql.v1.SqlHistogramAggFunctionProto
	261,  // 533: rill.sql.v1.SqlOperatorProto.sqlRankFunctionProto:type_name -> rill.sql.v1.SqlRankFunctionProto
	262,  // 534: rill.sql.v1.SqlOperatorProto.sqlLeadLagAggFunctionProto:type_name -> rill.sql.v1.SqlLeadLagAggFunctionProto
	263,  // 535: rill.sql.v1.SqlOperatorProto.sqlBitOpAggFunctionProto:type_name -> rill.sql.v1.SqlBitOpAggFunctionProto
	265,  // 536: rill.sql.v1.SqlOperatorProto.sqlTumbleTableFunctionProto:type_name -> rill.sql.v1.SqlTumbleTableFunctionProto
	266,  // 537: rill.sql.v1.SqlOperatorProto.sqlSessionTableFunctionProto:type_name -> rill.sql.v1.SqlSessionTableFunctionProto
	267,  // 538: rill.sql.v1.SqlOperatorProto.sqlHopTableFunctionProto:type_name -> rill.sql.v1.SqlHopTableFunctionProto
	270,  // 539: rill.sql.v1.SqlOperatorProto.sqlFloorFunctionProto:type_name -> rill.sql.v1.SqlFloorFunctionProto
	286,  // 540: rill.sql.v1.SqlOperatorProto.sqlQuantifyOperatorProto:type_name -> rill.sql.v1.SqlQuantifyOperatorProto
	293,  // 541: rill.sql.v1.SqlOperatorProto.sqlArrayValueConstructorProto:type_name -> rill.sql.v1.SqlArrayValueConstructorProto
	294,  // 542: rill.sql.v1.SqlOperatorProto.sqlMapValueConstructorProto:type_name -> rill.sql.v1.SqlMapValueConstructorProto
	300,  // 543: rill.sql.v1.SqlOperatorProto.sqlCollectionTableOperatorProto:type_name -> rill.sql.v1.SqlCollectionTableOperatorProto
	301,  // 544: rill.sql.v1.SqlOperatorProto.sqlUnnestOperatorProto:type_name -> rill.sql.v1.SqlUnnestOperatorProto
	304,  // 545: rill.sql.v1.SqlOperatorProto.sqlExtendOperatorProto:type_name -> rill.sql.v1.SqlExtendOperatorProto
	305,  // 546: rill.sql.v1.SqlOperatorProto.sqlRollupOperatorProto:type_name -> rill.sql.v1.SqlRollupOperatorProto
	306,  // 547: rill.sql.v1.SqlOperatorProto.sqlIntervalOperatorProto:type_name -> rill.sql.v1.SqlIntervalOperatorProto
	307,  // 548: rill.sql.v1.SqlOperatorProto.sqlSearchOperatorProto:type_name -> rill.sql.v1.SqlSearchOperatorProto
	312,  // 549: rill.sql.v1.SqlOperatorProto.sqlBetweenOperatorProto:type_name -> rill.sql.v1.SqlBetweenOperatorProto
	314,  // 550: rill.sql.v1.SqlOperatorProto.sqlArgumentAssignmentOperatorProto:type_name -> rill.sql.v1.SqlArgumentAssignmentOperatorProto
	318,  // 551: rill.sql.v1.SqlOperatorProto.sqlArrayQueryConstructorProto:type_name -> rill.sql.v1.SqlArrayQueryConstructorProto
	319,  // 552: rill.sql.v1.SqlOperatorProto.sqlMapQueryConstructorProto:type_name -> rill.sql.v1.SqlMapQueryConstructorProto
	245,  // 553: rill.sql.v1.SqlOperatorProto.sqlRegrCountAggFunctionProto:type_name -> rill.sql.v1.SqlRegrCountAggFunctionProto
	257,  // 554: rill.sql.v1.SqlOperatorProto.sqlGroupIdFunctionProto:type_name -> rill.sql.v1.SqlGroupIdFunctionProto
	258,  // 555: rill.sql.v1.SqlOperatorProto.sqlGroupingIdFunctionProto:type_name -> rill.sql.v1.SqlGroupingIdFunctionProto
	259,  // 556: rill.sql.v1.SqlOperatorProto.sqlGroupingFunctionProto:type_name -> rill.sql.v1.SqlGroupingFunctionProto
	7,    // 557: rill.sql.v1.SqlOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 558: rill.sql.v1.SqlOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 559: rill.sql.v1.SqlOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 560: rill.sql.v1.SqlOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	98,   // 561: rill.sql.v1.SqlPrefixOperatorProto.sqlNewOperatorProto:type_name -> rill.sql.v1.SqlNewOperatorProto
	131,  // 562: rill.sql.v1.SqlPrefixOperatorProto.sqlProcedureCallOperatorProto:type_name -> rill.sql.v1.SqlProcedureCallOperatorProto
	7,    // 563: rill.sql.v1.SqlPrefixOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 564: rill.sql.v1.SqlPrefixOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 565: rill.sql.v1.SqlPrefixOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 566: rill.sql.v1.SqlPrefixOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 567: rill.sql.v1.SqlNewOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 568: rill.sql.v1.SqlNewOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 569: rill.sql.v1.SqlNewOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 570: rill.sql.v1.SqlNewOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	100,  // 571: rill.sql.v1.SqlReturnTypeInferenceProto.sqlReturnTypeInferenceChainProto:type_name -> rill.sql.v1.SqlReturnTypeInferenceChainProto
	101,  // 572: rill.sql.v1.SqlReturnTypeInferenceProto.ordinalReturnTypeInferenceProto:type_name -> rill.sql.v1.OrdinalReturnTypeInferenceProto
	102,  // 573: rill.sql.v1.SqlReturnTypeInferenceProto.explicitReturnTypeInferenceProto:type_name -> rill.sql.v1.ExplicitReturnTypeInferenceProto
	106,  // 574: rill.sql.v1.SqlReturnTypeInferenceProto.cursorReturnTypeInferenceProto:type_name -> rill.sql.v1.CursorReturnTypeInferenceProto
	107,  // 575: rill.sql.v1.SqlReturnTypeInferenceProto.sqlTypeTransformCascadeProto:type_name -> rill.sql.v1.SqlTypeTransformCascadeProto
	109,  // 576: rill.sql.v1.SqlReturnTypeInferenceProto.matchReturnTypeInferenceProto:type_name -> rill.sql.v1.MatchReturnTypeInferenceProto
	103,  // 577: rill.sql.v1.SqlReturnTypeInferenceProto.tableFunctionReturnTypeInferenceProto:type_name -> rill.sql.v1.TableFunctionReturnTypeInferenceProto
	99,   // 578: rill.sql.v1.SqlReturnTypeInferenceChainProto.rules:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	103,  // 579: rill.sql.v1.ExplicitReturnTypeInferenceProto.tableFunctionReturnTypeInferenceProto:type_name -> rill.sql.v1.TableFunctionReturnTypeInferenceProto
	105,  // 580: rill.sql.v1.ExplicitReturnTypeInferenceProto.protoType:type_name -> rill.sql.v1.RelProtoDataTypeProto
	104,  // 581: rill.sql.v1.TableFunctionReturnTypeInferenceProto.columnMappings:type_name -> rill.sql.v1.RelColumnMappingProto
	105,  // 582: rill.sql.v1.TableFunctionReturnTypeInferenceProto.protoType:type_name -> rill.sql.v1.RelProtoDataTypeProto
	99,   // 583: rill.sql.v1.SqlTypeTransformCascadeProto.rule:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	108,  // 584: rill.sql.v1.SqlTypeTransformCascadeProto.transforms:type_name -> rill.sql.v1.SqlTypeTransformProto
	0,    // 585: rill.sql.v1.MatchReturnTypeInferenceProto.typeNames:type_name -> rill.sql.v1.SqlTypeNameProto
	111,  // 586: rill.sql.v1.SqlOperandTypeInferenceProto.explicitOperandTypeInferenceProto:type_name -> rill.sql.v1.ExplicitOperandTypeInferenceProto
	19,   // 587: rill.sql.v1.ExplicitOperandTypeInferenceProto.paramTypes:type_name -> rill.sql.v1.RelDataTypeProto
	113,  // 588: rill.sql.v1.SqlOperandTypeCheckerProto.sqlOperandMetadataProto:type_name -> rill.sql.v1.SqlOperandMetadataProto
	118,  // 589: rill.sql.v1.SqlOperandTypeCheckerProto.setopOperandTypeCheckerProto:type_name -> rill.sql.v1.SetopOperandTypeCheckerProto
	119,  // 590: rill.sql.v1.SqlOperandTypeCheckerProto.explicitOperandTypeCheckerProto:type_name -> rill.sql.v1.ExplicitOperandTypeCheckerProto
	120,  // 591: rill.sql.v1.SqlOperandTypeCheckerProto.sqlSingleOperandTypeCheckerProto:type_name -> rill.sql.v1.SqlSingleOperandTypeCheckerProto
	128,  // 592: rill.sql.v1.SqlOperandTypeCheckerProto.assignableOperandTypeCheckerProto:type_name -> rill.sql.v1.AssignableOperandTypeCheckerProto
	129,  // 593: rill.sql.v1.SqlOperandTypeCheckerProto.multisetOperandTypeCheckerProto:type_name -> rill.sql.v1.MultisetOperandTypeCheckerProto
	130,  // 594: rill.sql.v1.SqlOperandTypeCheckerProto.compositeOperandTypeCheckerProto:type_name -> rill.sql.v1.CompositeOperandTypeCheckerProto
	114,  // 595: rill.sql.v1.SqlOperandTypeCheckerProto.operandMetadataImplProto:type_name -> rill.sql.v1.OperandMetadataImplProto
	121,  // 596: rill.sql.v1.SqlOperandTypeCheckerProto.literalOperandTypeCheckerProto:type_name -> rill.sql.v1.LiteralOperandTypeCheckerProto
	122,  // 597: rill.sql.v1.SqlOperandTypeCheckerProto.sameOperandTypeCheckerProto:type_name -> rill.sql.v1.SameOperandTypeCheckerProto
	125,  // 598: rill.sql.v1.SqlOperandTypeCheckerProto.familyOperandTypeCheckerProto:type_name -> rill.sql.v1.FamilyOperandTypeCheckerProto
	126,  // 599: rill.sql.v1.SqlOperandTypeCheckerProto.compositeSingleOperandTypeCheckerProto:type_name -> rill.sql.v1.CompositeSingleOperandTypeCheckerProto
	123,  // 600: rill.sql.v1.SqlOperandTypeCheckerProto.sameOperandTypeExceptLastOperandCheckerProto:type_name -> rill.sql.v1.SameOperandTypeExceptLastOperandCheckerProto
	124,  // 601: rill.sql.v1.SqlOperandTypeCheckerProto.comparableOperandTypeCheckerProto:type_name -> rill.sql.v1.ComparableOperandTypeCheckerProto
	114,  // 602: rill.sql.v1.SqlOperandMetadataProto.operandMetadataImplProto:type_name -> rill.sql.v1.OperandMetadataImplProto
	115,  // 603: rill.sql.v1.OperandMetadataImplProto.paramTypesFactory:type_name -> rill.sql.v1.FunctionProto
	116,  // 604: rill.sql.v1.OperandMetadataImplProto.paramNameFn:type_name -> rill.sql.v1.IntFunctionProto
	4,    // 605: rill.sql.v1.OperandMetadataImplProto.families:type_name -> rill.sql.v1.SqlTypeFamilyProto
	117,  // 606: rill.sql.v1.OperandMetadataImplProto.optional:type_name -> rill.sql.v1.PredicateProto
	19,   // 607: rill.sql.v1.ExplicitOperandTypeCheckerProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	121,  // 608: rill.sql.v1.SqlSingleOperandTypeCheckerProto.literalOperandTypeCheckerProto:type_name -> rill.sql.v1.LiteralOperandTypeCheckerProto
	122,  // 609: rill.sql.v1.SqlSingleOperandTypeCheckerProto.sameOperandTypeCheckerProto:type_name -> rill.sql.v1.SameOperandTypeCheckerProto
	125,  // 610: rill.sql.v1.SqlSingleOperandTypeCheckerProto.familyOperandTypeCheckerProto:type_name -> rill.sql.v1.FamilyOperandTypeCheckerProto
	126,  // 611: rill.sql.v1.SqlSingleOperandTypeCheckerProto.compositeSingleOperandTypeCheckerProto:type_name -> rill.sql.v1.CompositeSingleOperandTypeCheckerProto
	123,  // 612: rill.sql.v1.SqlSingleOperandTypeCheckerProto.sameOperandTypeExceptLastOperandCheckerProto:type_name -> rill.sql.v1.SameOperandTypeExceptLastOperandCheckerProto
	124,  // 613: rill.sql.v1.SqlSingleOperandTypeCheckerProto.comparableOperandTypeCheckerProto:type_name -> rill.sql.v1.ComparableOperandTypeCheckerProto
	114,  // 614: rill.sql.v1.SqlSingleOperandTypeCheckerProto.operandMetadataImplProto:type_name -> rill.sql.v1.OperandMetadataImplProto
	123,  // 615: rill.sql.v1.SameOperandTypeCheckerProto.sameOperandTypeExceptLastOperandCheckerProto:type_name -> rill.sql.v1.SameOperandTypeExceptLastOperandCheckerProto
	124,  // 616: rill.sql.v1.SameOperandTypeCheckerProto.comparableOperandTypeCheckerProto:type_name -> rill.sql.v1.ComparableOperandTypeCheckerProto
	3,    // 617: rill.sql.v1.ComparableOperandTypeCheckerProto.requiredComparability:type_name -> rill.sql.v1.RelDataTypeComparabilityProto
	8,    // 618: rill.sql.v1.ComparableOperandTypeCheckerProto.consistency:type_name -> rill.sql.v1.ConsistencyProto
	114,  // 619: rill.sql.v1.FamilyOperandTypeCheckerProto.operandMetadataImplProto:type_name -> rill.sql.v1.OperandMetadataImplProto
	4,    // 620: rill.sql.v1.FamilyOperandTypeCheckerProto.families:type_name -> rill.sql.v1.SqlTypeFamilyProto
	117,  // 621: rill.sql.v1.FamilyOperandTypeCheckerProto.optional:type_name -> rill.sql.v1.PredicateProto
	127,  // 622: rill.sql.v1.CompositeSingleOperandTypeCheckerProto.range:type_name -> rill.sql.v1.SqlOperandCountRangeProto
	9,    // 623: rill.sql.v1.CompositeSingleOperandTypeCheckerProto.composition:type_name -> rill.sql.v1.CompositionProto
	19,   // 624: rill.sql.v1.AssignableOperandTypeCheckerProto.paramTypes:type_name -> rill.sql.v1.RelDataTypeProto
	126,  // 625: rill.sql.v1.CompositeOperandTypeCheckerProto.compositeSingleOperandTypeCheckerProto:type_name -> rill.sql.v1.CompositeSingleOperandTypeCheckerProto
	127,  // 626: rill.sql.v1.CompositeOperandTypeCheckerProto.range:type_name -> rill.sql.v1.SqlOperandCountRangeProto
	9,    // 627: rill.sql.v1.CompositeOperandTypeCheckerProto.composition:type_name -> rill.sql.v1.CompositionProto
	7,    // 628: rill.sql.v1.SqlProcedureCallOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 629: rill.sql.v1.SqlProcedureCallOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 630: rill.sql.v1.SqlProcedureCallOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 631: rill.sql.v1.SqlProcedureCallOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 632: rill.sql.v1.SqlDescriptorOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 633: rill.sql.v1.SqlDescriptorOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 634: rill.sql.v1.SqlDescriptorOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 635: rill.sql.v1.SqlDescriptorOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	134,  // 636: rill.sql.v1.SqlPostfixOperatorProto.sqlJsonValueExpressionOperatorProto:type_name -> rill.sql.v1.SqlJsonValueExpressionOperatorProto
	7,    // 637: rill.sql.v1.SqlPostfixOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 638: rill.sql.v1.SqlPostfixOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 639: rill.sql.v1.SqlPostfixOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 640: rill.sql.v1.SqlPostfixOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 641: rill.sql.v1.SqlJsonValueExpressionOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 642: rill.sql.v1.SqlJsonValueExpressionOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 643: rill.sql.v1.SqlJsonValueExpressionOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 644: rill.sql.v1.SqlJsonValueExpressionOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	136,  // 645: rill.sql.v1.SqlFunctionProto.sqlUnresolvedFunctionProto:type_name -> rill.sql.v1.SqlUnresolvedFunctionProto
	137,  // 646: rill.sql.v1.SqlFunctionProto.sqlJdbcFunctionCallProto:type_name -> rill.sql.v1.SqlJdbcFunctionCallProto
	138,  // 647: rill.sql.v1.SqlFunctionProto.sqlUserDefinedTableMacroProto:type_name -> rill.sql.v1.SqlUserDefinedTableMacroProto
	156,  // 648: rill.sql.v1.SqlFunctionProto.sqlUserDefinedFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedFunctionProto
	169,  // 649: rill.sql.v1.SqlFunctionProto.sqlExtractFunctionProto:type_name -> rill.sql.v1.SqlExtractFunctionProto
	170,  // 650: rill.sql.v1.SqlFunctionProto.sqlTranslate3FunctionProto:type_name -> rill.sql.v1.SqlTranslate3FunctionProto
	171,  // 651: rill.sql.v1.SqlFunctionProto.sqlTrimFunctionProto:type_name -> rill.sql.v1.SqlTrimFunctionProto
	172,  // 652: rill.sql.v1.SqlFunctionProto.sqlSubstringFunctionProto:type_name -> rill.sql.v1.SqlSubstringFunctionProto
	173,  // 653: rill.sql.v1.SqlFunctionProto.sqlJsonDepthFunctionProto:type_name -> rill.sql.v1.SqlJsonDepthFunctionProto
	174,  // 654: rill.sql.v1.SqlFunctionProto.sqlAbstractTimeFunctionProto:type_name -> rill.sql.v1.SqlAbstractTimeFunctionProto
	175,  // 655: rill.sql.v1.SqlFunctionProto.sqlRandFunctionProto:type_name -> rill.sql.v1.SqlRandFunctionProto
	176,  // 656: rill.sql.v1.SqlFunctionProto.sqlCoalesceFunctionProto:type_name -> rill.sql.v1.SqlCoalesceFunctionProto
	177,  // 657: rill.sql.v1.SqlFunctionProto.sqlJsonTypeFunctionProto:type_name -> rill.sql.v1.SqlJsonTypeFunctionProto
	178,  // 658: rill.sql.v1.SqlFunctionProto.sqlJsonValueFunctionProto:type_name -> rill.sql.v1.SqlJsonValueFunctionProto
	179,  // 659: rill.sql.v1.SqlFunctionProto.sqlDatePartFunctionProto:type_name -> rill.sql.v1.SqlDatePartFunctionProto
	180,  // 660: rill.sql.v1.SqlFunctionProto.sqlJsonObjectFunctionProto:type_name -> rill.sql.v1.SqlJsonObjectFunctionProto
	181,  // 661: rill.sql.v1.SqlFunctionProto.sqlNullifFunctionProto:type_name -> rill.sql.v1.SqlNullifFunctionProto
	182,  // 662: rill.sql.v1.SqlFunctionProto.sqlTimestampAddFunctionProto:type_name -> rill.sql.v1.SqlTimestampAddFunctionProto
	183,  // 663: rill.sql.v1.SqlFunctionProto.sqlJsonPrettyFunctionProto:type_name -> rill.sql.v1.SqlJsonPrettyFunctionProto
	184,  // 664: rill.sql.v1.SqlFunctionProto.sqlBaseContextVariableProto:type_name -> rill.sql.v1.SqlBaseContextVariableProto
	186,  // 665: rill.sql.v1.SqlFunctionProto.sqlConvertFunctionProto:type_name -> rill.sql.v1.SqlConvertFunctionProto
	187,  // 666: rill.sql.v1.SqlFunctionProto.sqlGroupedWindowFunctionProto:type_name -> rill.sql.v1.SqlGroupedWindowFunctionProto
	188,  // 667: rill.sql.v1.SqlFunctionProto.sqlTypeConstructorFunctionProto:type_name -> rill.sql.v1.SqlTypeConstructorFunctionProto
	189,  // 668: rill.sql.v1.SqlFunctionProto.sqlTimestampDiffFunctionProto:type_name -> rill.sql.v1.SqlTimestampDiffFunctionProto
	190,  // 669: rill.sql.v1.SqlFunctionProto.sqlJsonKeysFunctionProto:type_name -> rill.sql.v1.SqlJsonKeysFunctionProto
	191,  // 670: rill.sql.v1.SqlFunctionProto.sqlJsonLengthFunctionProto:type_name -> rill.sql.v1.SqlJsonLengthFunctionProto
	192,  // 671: rill.sql.v1.SqlFunctionProto.sqlCastFunctionProto:type_name -> rill.sql.v1.SqlCastFunctionProto
	231,  // 672: rill.sql.v1.SqlFunctionProto.sqlPositionFunctionProto:type_name -> rill.sql.v1.SqlPositionFunctionProto
	232,  // 673: rill.sql.v1.SqlFunctionProto.sqlJsonRemoveFunctionProto:type_name -> rill.sql.v1.SqlJsonRemoveFunctionProto
	233,  // 674: rill.sql.v1.SqlFunctionProto.sqlMatchFunctionProto:type_name -> rill.sql.v1.SqlMatchFunctionProto
	234,  // 675: rill.sql.v1.SqlFunctionProto.sqlOverlayFunctionProto:type_name -> rill.sql.v1.SqlOverlayFunctionProto
	235,  // 676: rill.sql.v1.SqlFunctionProto.sqlJsonArrayFunctionProto:type_name -> rill.sql.v1.SqlJsonArrayFunctionProto
	236,  // 677: rill.sql.v1.SqlFunctionProto.sqlRandIntegerFunctionProto:type_name -> rill.sql.v1.SqlRandIntegerFunctionProto
	237,  // 678: rill.sql.v1.SqlFunctionProto.sqlCurrentDateFunctionProto:type_name -> rill.sql.v1.SqlCurrentDateFunctionProto
	238,  // 679: rill.sql.v1.SqlFunctionProto.sqlAggFunctionProto:type_name -> rill.sql.v1.SqlAggFunctionProto
	264,  // 680: rill.sql.v1.SqlFunctionProto.sqlWindowTableFunctionProto:type_name -> rill.sql.v1.SqlWindowTableFunctionProto
	268,  // 681: rill.sql.v1.SqlFunctionProto.sqlRegexpReplaceFunctionProto:type_name -> rill.sql.v1.SqlRegexpReplaceFunctionProto
	269,  // 682: rill.sql.v1.SqlFunctionProto.sqlMonotonicUnaryFunctionProto:type_name -> rill.sql.v1.SqlMonotonicUnaryFunctionProto
	271,  // 683: rill.sql.v1.SqlFunctionProto.sqlJsonStorageSizeFunctionProto:type_name -> rill.sql.v1.SqlJsonStorageSizeFunctionProto
	272,  // 684: rill.sql.v1.SqlFunctionProto.sqlJsonQueryFunctionProto:type_name -> rill.sql.v1.SqlJsonQueryFunctionProto
	273,  // 685: rill.sql.v1.SqlFunctionProto.sqlJsonExistsFunctionProto:type_name -> rill.sql.v1.SqlJsonExistsFunctionProto
	157,  // 686: rill.sql.v1.SqlFunctionProto.sqlUserDefinedTableFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedTableFunctionProto
	185,  // 687: rill.sql.v1.SqlFunctionProto.sqlStringContextVariableProto:type_name -> rill.sql.v1.SqlStringContextVariableProto
	239,  // 688: rill.sql.v1.SqlFunctionProto.sqlUserDefinedAggFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedAggFunctionProto
	240,  // 689: rill.sql.v1.SqlFunctionProto.sqlCovarAggFunctionProto:type_name -> rill.sql.v1.SqlCovarAggFunctionProto
	241,  // 690: rill.sql.v1.SqlFunctionProto.sqlJsonArrayAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonArrayAggAggFunctionProto
	242,  // 691: rill.sql.v1.SqlFunctionProto.sqlSumAggFunctionProto:type_name -> rill.sql.v1.SqlSumAggFunctionProto
	243,  // 692: rill.sql.v1.SqlFunctionProto.sqlMinMaxAggFunctionProto:type_name -> rill.sql.v1.SqlMinMaxAggFunctionProto
	244,  // 693: rill.sql.v1.SqlFunctionProto.sqlCountAggFunctionProto:type_name -> rill.sql.v1.SqlCountAggFunctionProto
	246,  // 694: rill.sql.v1.SqlFunctionProto.sqlAnyValueAggFunctionProto:type_name -> rill.sql.v1.SqlAnyValueAggFunctionProto
	247,  // 695: rill.sql.v1.SqlFunctionProto.sqlAvgAggFunctionProto:type_name -> rill.sql.v1.SqlAvgAggFunctionProto
	248,  // 696: rill.sql.v1.SqlFunctionProto.sqlNthValueAggFunctionProto:type_name -> rill.sql.v1.SqlNthValueAggFunctionProto
	249,  // 697: rill.sql.v1.SqlFunctionProto.sqlBasicAggFunctionProto:type_name -> rill.sql.v1.SqlBasicAggFunctionProto
	250,  // 698: rill.sql.v1.SqlFunctionProto.sqlSingleValueAggFunctionProto:type_name -> rill.sql.v1.SqlSingleValueAggFunctionProto
	251,  // 699: rill.sql.v1.SqlFunctionProto.sqlSumEmptyIsZeroAggFunctionProto:type_name -> rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto
	252,  // 700: rill.sql.v1.SqlFunctionProto.sqlListaggAggFunctionProto:type_name -> rill.sql.v1.SqlListaggAggFunctionProto
	253,  // 701: rill.sql.v1.SqlFunctionProto.sqlNtileAggFunctionProto:type_name -> rill.sql.v1.SqlNtileAggFunctionProto
	254,  // 702: rill.sql.v1.SqlFunctionProto.sqlJsonObjectAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonObjectAggAggFunctionProto
	255,  // 703: rill.sql.v1.SqlFunctionProto.sqlFirstLastValueAggFunctionProto:type_name -> rill.sql.v1.SqlFirstLastValueAggFunctionProto
	256,  // 704: rill.sql.v1.SqlFunctionProto.sqlAbstractGroupFunctionProto:type_name -> rill.sql.v1.SqlAbstractGroupFunctionProto
	260,  // 705: rill.sql.v1.SqlFunctionProto.sqlHistogramAggFunctionProto:type_name -> rill.sql.v1.SqlHistogramAggFunctionProto
	261,  // 706: rill.sql.v1.SqlFunctionProto.sqlRankFunctionProto:type_name -> rill.sql.v1.SqlRankFunctionProto
	262,  // 707: rill.sql.v1.SqlFunctionProto.sqlLeadLagAggFunctionProto:type_name -> rill.sql.v1.SqlLeadLagAggFunctionProto
	263,  // 708: rill.sql.v1.SqlFunctionProto.sqlBitOpAggFunctionProto:type_name -> rill.sql.v1.SqlBitOpAggFunctionProto
	265,  // 709: rill.sql.v1.SqlFunctionProto.sqlTumbleTableFunctionProto:type_name -> rill.sql.v1.SqlTumbleTableFunctionProto
	266,  // 710: rill.sql.v1.SqlFunctionProto.sqlSessionTableFunctionProto:type_name -> rill.sql.v1.SqlSessionTableFunctionProto
	267,  // 711: rill.sql.v1.SqlFunctionProto.sqlHopTableFunctionProto:type_name -> rill.sql.v1.SqlHopTableFunctionProto
	270,  // 712: rill.sql.v1.SqlFunctionProto.sqlFloorFunctionProto:type_name -> rill.sql.v1.SqlFloorFunctionProto
	245,  // 713: rill.sql.v1.SqlFunctionProto.sqlRegrCountAggFunctionProto:type_name -> rill.sql.v1.SqlRegrCountAggFunctionProto
	257,  // 714: rill.sql.v1.SqlFunctionProto.sqlGroupIdFunctionProto:type_name -> rill.sql.v1.SqlGroupIdFunctionProto
	258,  // 715: rill.sql.v1.SqlFunctionProto.sqlGroupingIdFunctionProto:type_name -> rill.sql.v1.SqlGroupingIdFunctionProto
	259,  // 716: rill.sql.v1.SqlFunctionProto.sqlGroupingFunctionProto:type_name -> rill.sql.v1.SqlGroupingFunctionProto
	10,   // 717: rill.sql.v1.SqlFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 718: rill.sql.v1.SqlFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 719: rill.sql.v1.SqlFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 720: rill.sql.v1.SqlFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 721: rill.sql.v1.SqlFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 722: rill.sql.v1.SqlFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 723: rill.sql.v1.SqlUnresolvedFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 724: rill.sql.v1.SqlUnresolvedFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 725: rill.sql.v1.SqlUnresolvedFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 726: rill.sql.v1.SqlUnresolvedFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 727: rill.sql.v1.SqlUnresolvedFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 728: rill.sql.v1.SqlUnresolvedFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	56,   // 729: rill.sql.v1.SqlJdbcFunctionCallProto.lookupCall:type_name -> rill.sql.v1.SqlCallProto
	55,   // 730: rill.sql.v1.SqlJdbcFunctionCallProto.thisOperands:type_name -> rill.sql.v1.SqlNodeProto
	10,   // 731: rill.sql.v1.SqlJdbcFunctionCallProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 732: rill.sql.v1.SqlJdbcFunctionCallProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 733: rill.sql.v1.SqlJdbcFunctionCallProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 734: rill.sql.v1.SqlJdbcFunctionCallProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 735: rill.sql.v1.SqlJdbcFunctionCallProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 736: rill.sql.v1.SqlJdbcFunctionCallProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	139,  // 737: rill.sql.v1.SqlUserDefinedTableMacroProto.tableMacro:type_name -> rill.sql.v1.TableMacroProto
	10,   // 738: rill.sql.v1.SqlUserDefinedTableMacroProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 739: rill.sql.v1.SqlUserDefinedTableMacroProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 740: rill.sql.v1.SqlUserDefinedTableMacroProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 741: rill.sql.v1.SqlUserDefinedTableMacroProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 742: rill.sql.v1.SqlUserDefinedTableMacroProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 743: rill.sql.v1.SqlUserDefinedTableMacroProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	140,  // 744: rill.sql.v1.TableMacroProto.tableMacroImplProto:type_name -> rill.sql.v1.TableMacroImplProto
	143,  // 745: rill.sql.v1.TableMacroProto.viewTableMacroProto:type_name -> rill.sql.v1.ViewTableMacroProto
	141,  // 746: rill.sql.v1.TableMacroImplProto.method:type_name -> rill.sql.v1.MethodProto
	142,  // 747: rill.sql.v1.TableMacroImplProto.parameters:type_name -> rill.sql.v1.FunctionParameterProto
	144,  // 748: rill.sql.v1.ViewTableMacroProto.schema:type_name -> rill.sql.v1.CalciteSchemaProto
	145,  // 749: rill.sql.v1.CalciteSchemaProto.simpleCalciteSchemaProto:type_name -> rill.sql.v1.SimpleCalciteSchemaProto
	154,  // 750: rill.sql.v1.CalciteSchemaProto.cachingCalciteSchemaProto:type_name -> rill.sql.v1.CachingCalciteSchemaProto
	155,  // 751: rill.sql.v1.CalciteSchemaProto.calciteRootSchemaProto:type_name -> rill.sql.v1.CalciteRootSchemaProto
	144,  // 752: rill.sql.v1.CalciteSchemaProto.parent:type_name -> rill.sql.v1.CalciteSchemaProto
	146,  // 753: rill.sql.v1.CalciteSchemaProto.schema:type_name -> rill.sql.v1.SchemaProto
	151,  // 754: rill.sql.v1.CalciteSchemaProto.tableMap:type_name -> rill.sql.v1.NameMapProto
	152,  // 755: rill.sql.v1.CalciteSchemaProto.functionMap:type_name -> rill.sql.v1.NameMultimapProto
	151,  // 756: rill.sql.v1.CalciteSchemaProto.typeMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 757: rill.sql.v1.CalciteSchemaProto.latticeMap:type_name -> rill.sql.v1.NameMapProto
	153,  // 758: rill.sql.v1.CalciteSchemaProto.functionNames:type_name -> rill.sql.v1.NameSetProto
	151,  // 759: rill.sql.v1.CalciteSchemaProto.nullaryFunctionMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 760: rill.sql.v1.CalciteSchemaProto.subSchemaMap:type_name -> rill.sql.v1.NameMapProto
	144,  // 761: rill.sql.v1.SimpleCalciteSchemaProto.parent:type_name -> rill.sql.v1.CalciteSchemaProto
	146,  // 762: rill.sql.v1.SimpleCalciteSchemaProto.schema:type_name -> rill.sql.v1.SchemaProto
	151,  // 763: rill.sql.v1.SimpleCalciteSchemaProto.tableMap:type_name -> rill.sql.v1.NameMapProto
	152,  // 764: rill.sql.v1.SimpleCalciteSchemaProto.functionMap:type_name -> rill.sql.v1.NameMultimapProto
	151,  // 765: rill.sql.v1.SimpleCalciteSchemaProto.typeMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 766: rill.sql.v1.SimpleCalciteSchemaProto.latticeMap:type_name -> rill.sql.v1.NameMapProto
	153,  // 767: rill.sql.v1.SimpleCalciteSchemaProto.functionNames:type_name -> rill.sql.v1.NameSetProto
	151,  // 768: rill.sql.v1.SimpleCalciteSchemaProto.nullaryFunctionMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 769: rill.sql.v1.SimpleCalciteSchemaProto.subSchemaMap:type_name -> rill.sql.v1.NameMapProto
	147,  // 770: rill.sql.v1.SchemaProto.schemaPlusProto:type_name -> rill.sql.v1.SchemaPlusProto
	148,  // 771: rill.sql.v1.SchemaProto.delegatingSchemaProto:type_name -> rill.sql.v1.DelegatingSchemaProto
	149,  // 772: rill.sql.v1.SchemaProto.abstractSchemaProto:type_name -> rill.sql.v1.AbstractSchemaProto
	150,  // 773: rill.sql.v1.SchemaProto.semiMutableSchemaProto:type_name -> rill.sql.v1.SemiMutableSchemaProto
	146,  // 774: rill.sql.v1.DelegatingSchemaProto.schema:type_name -> rill.sql.v1.SchemaProto
	151,  // 775: rill.sql.v1.NameMultimapProto.map:type_name -> rill.sql.v1.NameMapProto
	151,  // 776: rill.sql.v1.NameSetProto.names:type_name -> rill.sql.v1.NameMapProto
	155,  // 777: rill.sql.v1.CachingCalciteSchemaProto.calciteRootSchemaProto:type_name -> rill.sql.v1.CalciteRootSchemaProto
	144,  // 778: rill.sql.v1.CachingCalciteSchemaProto.parent:type_name -> rill.sql.v1.CalciteSchemaProto
	146,  // 779: rill.sql.v1.CachingCalciteSchemaProto.schema:type_name -> rill.sql.v1.SchemaProto
	151,  // 780: rill.sql.v1.CachingCalciteSchemaProto.tableMap:type_name -> rill.sql.v1.NameMapProto
	152,  // 781: rill.sql.v1.CachingCalciteSchemaProto.functionMap:type_name -> rill.sql.v1.NameMultimapProto
	151,  // 782: rill.sql.v1.CachingCalciteSchemaProto.typeMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 783: rill.sql.v1.CachingCalciteSchemaProto.latticeMap:type_name -> rill.sql.v1.NameMapProto
	153,  // 784: rill.sql.v1.CachingCalciteSchemaProto.functionNames:type_name -> rill.sql.v1.NameSetProto
	151,  // 785: rill.sql.v1.CachingCalciteSchemaProto.nullaryFunctionMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 786: rill.sql.v1.CachingCalciteSchemaProto.subSchemaMap:type_name -> rill.sql.v1.NameMapProto
	144,  // 787: rill.sql.v1.CalciteRootSchemaProto.parent:type_name -> rill.sql.v1.CalciteSchemaProto
	146,  // 788: rill.sql.v1.CalciteRootSchemaProto.schema:type_name -> rill.sql.v1.SchemaProto
	151,  // 789: rill.sql.v1.CalciteRootSchemaProto.tableMap:type_name -> rill.sql.v1.NameMapProto
	152,  // 790: rill.sql.v1.CalciteRootSchemaProto.functionMap:type_name -> rill.sql.v1.NameMultimapProto
	151,  // 791: rill.sql.v1.CalciteRootSchemaProto.typeMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 792: rill.sql.v1.CalciteRootSchemaProto.latticeMap:type_name -> rill.sql.v1.NameMapProto
	153,  // 793: rill.sql.v1.CalciteRootSchemaProto.functionNames:type_name -> rill.sql.v1.NameSetProto
	151,  // 794: rill.sql.v1.CalciteRootSchemaProto.nullaryFunctionMap:type_name -> rill.sql.v1.NameMapProto
	151,  // 795: rill.sql.v1.CalciteRootSchemaProto.subSchemaMap:type_name -> rill.sql.v1.NameMapProto
	157,  // 796: rill.sql.v1.SqlUserDefinedFunctionProto.sqlUserDefinedTableFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedTableFunctionProto
	158,  // 797: rill.sql.v1.SqlUserDefinedFunctionProto.function:type_name -> rill.sql.v1.org_apache_calcite_schema_FunctionProto
	10,   // 798: rill.sql.v1.SqlUserDefinedFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 799: rill.sql.v1.SqlUserDefinedFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 800: rill.sql.v1.SqlUserDefinedFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 801: rill.sql.v1.SqlUserDefinedFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 802: rill.sql.v1.SqlUserDefinedFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 803: rill.sql.v1.SqlUserDefinedFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	158,  // 804: rill.sql.v1.SqlUserDefinedTableFunctionProto.function:type_name -> rill.sql.v1.org_apache_calcite_schema_FunctionProto
	10,   // 805: rill.sql.v1.SqlUserDefinedTableFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 806: rill.sql.v1.SqlUserDefinedTableFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 807: rill.sql.v1.SqlUserDefinedTableFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 808: rill.sql.v1.SqlUserDefinedTableFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 809: rill.sql.v1.SqlUserDefinedTableFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 810: rill.sql.v1.SqlUserDefinedTableFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	159,  // 811: rill.sql.v1.org_apache_calcite_schema_FunctionProto.tableFunctionProto:type_name -> rill.sql.v1.TableFunctionProto
	162,  // 812: rill.sql.v1.org_apache_calcite_schema_FunctionProto.reflectiveFunctionBaseProto:type_name -> rill.sql.v1.ReflectiveFunctionBaseProto
	164,  // 813: rill.sql.v1.org_apache_calcite_schema_FunctionProto.implementableFunctionProto:type_name -> rill.sql.v1.ImplementableFunctionProto
	139,  // 814: rill.sql.v1.org_apache_calcite_schema_FunctionProto.tableMacroProto:type_name -> rill.sql.v1.TableMacroProto
	165,  // 815: rill.sql.v1.org_apache_calcite_schema_FunctionProto.scalarFunctionProto:type_name -> rill.sql.v1.ScalarFunctionProto
	166,  // 816: rill.sql.v1.org_apache_calcite_schema_FunctionProto.aggregateFunctionProto:type_name -> rill.sql.v1.AggregateFunctionProto
	160,  // 817: rill.sql.v1.org_apache_calcite_schema_FunctionProto.tableFunctionImplProto:type_name -> rill.sql.v1.TableFunctionImplProto
	140,  // 818: rill.sql.v1.org_apache_calcite_schema_FunctionProto.tableMacroImplProto:type_name -> rill.sql.v1.TableMacroImplProto
	163,  // 819: rill.sql.v1.org_apache_calcite_schema_FunctionProto.scalarFunctionImplProto:type_name -> rill.sql.v1.ScalarFunctionImplProto
	143,  // 820: rill.sql.v1.org_apache_calcite_schema_FunctionProto.viewTableMacroProto:type_name -> rill.sql.v1.ViewTableMacroProto
	167,  // 821: rill.sql.v1.org_apache_calcite_schema_FunctionProto.implementableAggFunctionProto:type_name -> rill.sql.v1.ImplementableAggFunctionProto
	168,  // 822: rill.sql.v1.org_apache_calcite_schema_FunctionProto.aggregateFunctionImplProto:type_name -> rill.sql.v1.AggregateFunctionImplProto
	160,  // 823: rill.sql.v1.TableFunctionProto.tableFunctionImplProto:type_name -> rill.sql.v1.TableFunctionImplProto
	161,  // 824: rill.sql.v1.TableFunctionImplProto.implementor:type_name -> rill.sql.v1.CallImplementorProto
	141,  // 825: rill.sql.v1.TableFunctionImplProto.method:type_name -> rill.sql.v1.MethodProto
	142,  // 826: rill.sql.v1.TableFunctionImplProto.parameters:type_name -> rill.sql.v1.FunctionParameterProto
	160,  // 827: rill.sql.v1.ReflectiveFunctionBaseProto.tableFunctionImplProto:type_name -> rill.sql.v1.TableFunctionImplProto
	140,  // 828: rill.sql.v1.ReflectiveFunctionBaseProto.tableMacroImplProto:type_name -> rill.sql.v1.TableMacroImplProto
	163,  // 829: rill.sql.v1.ReflectiveFunctionBaseProto.scalarFunctionImplProto:type_name -> rill.sql.v1.ScalarFunctionImplProto
	141,  // 830: rill.sql.v1.ReflectiveFunctionBaseProto.method:type_name -> rill.sql.v1.MethodProto
	142,  // 831: rill.sql.v1.ReflectiveFunctionBaseProto.parameters:type_name -> rill.sql.v1.FunctionParameterProto
	161,  // 832: rill.sql.v1.ScalarFunctionImplProto.implementor:type_name -> rill.sql.v1.CallImplementorProto
	141,  // 833: rill.sql.v1.ScalarFunctionImplProto.method:type_name -> rill.sql.v1.MethodProto
	142,  // 834: rill.sql.v1.ScalarFunctionImplProto.parameters:type_name -> rill.sql.v1.FunctionParameterProto
	160,  // 835: rill.sql.v1.ImplementableFunctionProto.tableFunctionImplProto:type_name -> rill.sql.v1.TableFunctionImplProto
	163,  // 836: rill.sql.v1.ImplementableFunctionProto.scalarFunctionImplProto:type_name -> rill.sql.v1.ScalarFunctionImplProto
	163,  // 837: rill.sql.v1.ScalarFunctionProto.scalarFunctionImplProto:type_name -> rill.sql.v1.ScalarFunctionImplProto
	167,  // 838: rill.sql.v1.AggregateFunctionProto.implementableAggFunctionProto:type_name -> rill.sql.v1.ImplementableAggFunctionProto
	168,  // 839: rill.sql.v1.AggregateFunctionProto.aggregateFunctionImplProto:type_name -> rill.sql.v1.AggregateFunctionImplProto
	168,  // 840: rill.sql.v1.ImplementableAggFunctionProto.aggregateFunctionImplProto:type_name -> rill.sql.v1.AggregateFunctionImplProto
	141,  // 841: rill.sql.v1.AggregateFunctionImplProto.initMethod:type_name -> rill.sql.v1.MethodProto
	141,  // 842: rill.sql.v1.AggregateFunctionImplProto.addMethod:type_name -> rill.sql.v1.MethodProto
	141,  // 843: rill.sql.v1.AggregateFunctionImplProto.mergeMethod:type_name -> rill.sql.v1.MethodProto
	141,  // 844: rill.sql.v1.AggregateFunctionImplProto.resultMethod:type_name -> rill.sql.v1.MethodProto
	142,  // 845: rill.sql.v1.AggregateFunctionImplProto.parameters:type_name -> rill.sql.v1.FunctionParameterProto
	46,   // 846: rill.sql.v1.AggregateFunctionImplProto.accumulatorType:type_name -> rill.sql.v1.ClassProto
	46,   // 847: rill.sql.v1.AggregateFunctionImplProto.resultType:type_name -> rill.sql.v1.ClassProto
	46,   // 848: rill.sql.v1.AggregateFunctionImplProto.declaringClass:type_name -> rill.sql.v1.ClassProto
	10,   // 849: rill.sql.v1.SqlExtractFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 850: rill.sql.v1.SqlExtractFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 851: rill.sql.v1.SqlExtractFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 852: rill.sql.v1.SqlExtractFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 853: rill.sql.v1.SqlExtractFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 854: rill.sql.v1.SqlExtractFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 855: rill.sql.v1.SqlTranslate3FunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 856: rill.sql.v1.SqlTranslate3FunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 857: rill.sql.v1.SqlTranslate3FunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 858: rill.sql.v1.SqlTranslate3FunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 859: rill.sql.v1.SqlTranslate3FunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 860: rill.sql.v1.SqlTranslate3FunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 861: rill.sql.v1.SqlTrimFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 862: rill.sql.v1.SqlTrimFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 863: rill.sql.v1.SqlTrimFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 864: rill.sql.v1.SqlTrimFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 865: rill.sql.v1.SqlTrimFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 866: rill.sql.v1.SqlTrimFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 867: rill.sql.v1.SqlSubstringFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 868: rill.sql.v1.SqlSubstringFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 869: rill.sql.v1.SqlSubstringFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 870: rill.sql.v1.SqlSubstringFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 871: rill.sql.v1.SqlSubstringFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 872: rill.sql.v1.SqlSubstringFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 873: rill.sql.v1.SqlJsonDepthFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 874: rill.sql.v1.SqlJsonDepthFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 875: rill.sql.v1.SqlJsonDepthFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 876: rill.sql.v1.SqlJsonDepthFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 877: rill.sql.v1.SqlJsonDepthFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 878: rill.sql.v1.SqlJsonDepthFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	0,    // 879: rill.sql.v1.SqlAbstractTimeFunctionProto.typeName:type_name -> rill.sql.v1.SqlTypeNameProto
	10,   // 880: rill.sql.v1.SqlAbstractTimeFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 881: rill.sql.v1.SqlAbstractTimeFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 882: rill.sql.v1.SqlAbstractTimeFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 883: rill.sql.v1.SqlAbstractTimeFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 884: rill.sql.v1.SqlAbstractTimeFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 885: rill.sql.v1.SqlAbstractTimeFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 886: rill.sql.v1.SqlRandFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 887: rill.sql.v1.SqlRandFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 888: rill.sql.v1.SqlRandFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 889: rill.sql.v1.SqlRandFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 890: rill.sql.v1.SqlRandFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 891: rill.sql.v1.SqlRandFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 892: rill.sql.v1.SqlCoalesceFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 893: rill.sql.v1.SqlCoalesceFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 894: rill.sql.v1.SqlCoalesceFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 895: rill.sql.v1.SqlCoalesceFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 896: rill.sql.v1.SqlCoalesceFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 897: rill.sql.v1.SqlCoalesceFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 898: rill.sql.v1.SqlJsonTypeFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 899: rill.sql.v1.SqlJsonTypeFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 900: rill.sql.v1.SqlJsonTypeFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 901: rill.sql.v1.SqlJsonTypeFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 902: rill.sql.v1.SqlJsonTypeFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 903: rill.sql.v1.SqlJsonTypeFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 904: rill.sql.v1.SqlJsonValueFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 905: rill.sql.v1.SqlJsonValueFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 906: rill.sql.v1.SqlJsonValueFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 907: rill.sql.v1.SqlJsonValueFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 908: rill.sql.v1.SqlJsonValueFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 909: rill.sql.v1.SqlJsonValueFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	11,   // 910: rill.sql.v1.SqlDatePartFunctionProto.timeUnit:type_name -> rill.sql.v1.TimeUnitProto
	10,   // 911: rill.sql.v1.SqlDatePartFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 912: rill.sql.v1.SqlDatePartFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 913: rill.sql.v1.SqlDatePartFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 914: rill.sql.v1.SqlDatePartFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 915: rill.sql.v1.SqlDatePartFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 916: rill.sql.v1.SqlDatePartFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 917: rill.sql.v1.SqlJsonObjectFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 918: rill.sql.v1.SqlJsonObjectFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 919: rill.sql.v1.SqlJsonObjectFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 920: rill.sql.v1.SqlJsonObjectFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 921: rill.sql.v1.SqlJsonObjectFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 922: rill.sql.v1.SqlJsonObjectFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 923: rill.sql.v1.SqlNullifFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 924: rill.sql.v1.SqlNullifFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 925: rill.sql.v1.SqlNullifFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 926: rill.sql.v1.SqlNullifFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 927: rill.sql.v1.SqlNullifFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 928: rill.sql.v1.SqlNullifFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 929: rill.sql.v1.SqlTimestampAddFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 930: rill.sql.v1.SqlTimestampAddFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 931: rill.sql.v1.SqlTimestampAddFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 932: rill.sql.v1.SqlTimestampAddFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 933: rill.sql.v1.SqlTimestampAddFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 934: rill.sql.v1.SqlTimestampAddFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 935: rill.sql.v1.SqlJsonPrettyFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 936: rill.sql.v1.SqlJsonPrettyFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 937: rill.sql.v1.SqlJsonPrettyFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 938: rill.sql.v1.SqlJsonPrettyFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 939: rill.sql.v1.SqlJsonPrettyFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 940: rill.sql.v1.SqlJsonPrettyFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	185,  // 941: rill.sql.v1.SqlBaseContextVariableProto.sqlStringContextVariableProto:type_name -> rill.sql.v1.SqlStringContextVariableProto
	10,   // 942: rill.sql.v1.SqlBaseContextVariableProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 943: rill.sql.v1.SqlBaseContextVariableProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 944: rill.sql.v1.SqlBaseContextVariableProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 945: rill.sql.v1.SqlBaseContextVariableProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 946: rill.sql.v1.SqlBaseContextVariableProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 947: rill.sql.v1.SqlBaseContextVariableProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 948: rill.sql.v1.SqlStringContextVariableProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 949: rill.sql.v1.SqlStringContextVariableProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 950: rill.sql.v1.SqlStringContextVariableProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 951: rill.sql.v1.SqlStringContextVariableProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 952: rill.sql.v1.SqlStringContextVariableProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 953: rill.sql.v1.SqlStringContextVariableProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 954: rill.sql.v1.SqlConvertFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 955: rill.sql.v1.SqlConvertFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 956: rill.sql.v1.SqlConvertFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 957: rill.sql.v1.SqlConvertFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 958: rill.sql.v1.SqlConvertFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 959: rill.sql.v1.SqlConvertFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	187,  // 960: rill.sql.v1.SqlGroupedWindowFunctionProto.groupFunction:type_name -> rill.sql.v1.SqlGroupedWindowFunctionProto
	10,   // 961: rill.sql.v1.SqlGroupedWindowFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 962: rill.sql.v1.SqlGroupedWindowFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 963: rill.sql.v1.SqlGroupedWindowFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 964: rill.sql.v1.SqlGroupedWindowFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 965: rill.sql.v1.SqlGroupedWindowFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 966: rill.sql.v1.SqlGroupedWindowFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	19,   // 967: rill.sql.v1.SqlTypeConstructorFunctionProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	10,   // 968: rill.sql.v1.SqlTypeConstructorFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 969: rill.sql.v1.SqlTypeConstructorFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 970: rill.sql.v1.SqlTypeConstructorFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 971: rill.sql.v1.SqlTypeConstructorFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 972: rill.sql.v1.SqlTypeConstructorFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 973: rill.sql.v1.SqlTypeConstructorFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 974: rill.sql.v1.SqlTimestampDiffFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 975: rill.sql.v1.SqlTimestampDiffFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 976: rill.sql.v1.SqlTimestampDiffFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 977: rill.sql.v1.SqlTimestampDiffFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 978: rill.sql.v1.SqlTimestampDiffFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 979: rill.sql.v1.SqlTimestampDiffFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 980: rill.sql.v1.SqlJsonKeysFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 981: rill.sql.v1.SqlJsonKeysFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 982: rill.sql.v1.SqlJsonKeysFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 983: rill.sql.v1.SqlJsonKeysFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 984: rill.sql.v1.SqlJsonKeysFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 985: rill.sql.v1.SqlJsonKeysFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 986: rill.sql.v1.SqlJsonLengthFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 987: rill.sql.v1.SqlJsonLengthFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 988: rill.sql.v1.SqlJsonLengthFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 989: rill.sql.v1.SqlJsonLengthFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 990: rill.sql.v1.SqlJsonLengthFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 991: rill.sql.v1.SqlJsonLengthFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	193,  // 992: rill.sql.v1.SqlCastFunctionProto.nonMonotonicCasts:type_name -> rill.sql.v1.SetMultimapProto
	10,   // 993: rill.sql.v1.SqlCastFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 994: rill.sql.v1.SqlCastFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 995: rill.sql.v1.SqlCastFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 996: rill.sql.v1.SqlCastFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 997: rill.sql.v1.SqlCastFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 998: rill.sql.v1.SqlCastFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	194,  // 999: rill.sql.v1.SetMultimapProto.abstractSetMultimapProto:type_name -> rill.sql.v1.AbstractSetMultimapProto
	202,  // 1000: rill.sql.v1.SetMultimapProto.sortedSetMultimapProto:type_name -> rill.sql.v1.SortedSetMultimapProto
	204,  // 1001: rill.sql.v1.SetMultimapProto.forwardingSetMultimapProto:type_name -> rill.sql.v1.ForwardingSetMultimapProto
	205,  // 1002: rill.sql.v1.SetMultimapProto.filteredSetMultimapProto:type_name -> rill.sql.v1.FilteredSetMultimapProto
	226,  // 1003: rill.sql.v1.SetMultimapProto.immutableSetMultimapProto:type_name -> rill.sql.v1.ImmutableSetMultimapProto
	195,  // 1004: rill.sql.v1.SetMultimapProto.linkedHashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	197,  // 1005: rill.sql.v1.SetMultimapProto.hashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	199,  // 1006: rill.sql.v1.SetMultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	203,  // 1007: rill.sql.v1.SetMultimapProto.forwardingSortedSetMultimapProto:type_name -> rill.sql.v1.ForwardingSortedSetMultimapProto
	206,  // 1008: rill.sql.v1.SetMultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	229,  // 1009: rill.sql.v1.SetMultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	227,  // 1010: rill.sql.v1.SetMultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	196,  // 1011: rill.sql.v1.SetMultimapProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1012: rill.sql.v1.SetMultimapProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1013: rill.sql.v1.SetMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1014: rill.sql.v1.SetMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	195,  // 1015: rill.sql.v1.AbstractSetMultimapProto.linkedHashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	197,  // 1016: rill.sql.v1.AbstractSetMultimapProto.hashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	199,  // 1017: rill.sql.v1.AbstractSetMultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	196,  // 1018: rill.sql.v1.AbstractSetMultimapProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1019: rill.sql.v1.AbstractSetMultimapProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1020: rill.sql.v1.AbstractSetMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1021: rill.sql.v1.AbstractSetMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	196,  // 1022: rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1023: rill.sql.v1.HashMultimapGwtSerializationDependenciesProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1024: rill.sql.v1.AbstractSortedSetMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1025: rill.sql.v1.AbstractSortedSetMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	201,  // 1026: rill.sql.v1.AbstractSortedKeySortedSetMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	203,  // 1027: rill.sql.v1.SortedSetMultimapProto.forwardingSortedSetMultimapProto:type_name -> rill.sql.v1.ForwardingSortedSetMultimapProto
	199,  // 1028: rill.sql.v1.SortedSetMultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	200,  // 1029: rill.sql.v1.SortedSetMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1030: rill.sql.v1.SortedSetMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	203,  // 1031: rill.sql.v1.ForwardingSetMultimapProto.forwardingSortedSetMultimapProto:type_name -> rill.sql.v1.ForwardingSortedSetMultimapProto
	206,  // 1032: rill.sql.v1.FilteredSetMultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	229,  // 1033: rill.sql.v1.FilteredSetMultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	207,  // 1034: rill.sql.v1.FilteredEntrySetMultimapProto.unfiltered:type_name -> rill.sql.v1.MultimapProto
	216,  // 1035: rill.sql.v1.FilteredEntrySetMultimapProto.predicate:type_name -> rill.sql.v1.com_google_common_base_PredicateProto
	208,  // 1036: rill.sql.v1.MultimapProto.forwardingMultimapProto:type_name -> rill.sql.v1.ForwardingMultimapProto
	210,  // 1037: rill.sql.v1.MultimapProto.listMultimapProto:type_name -> rill.sql.v1.ListMultimapProto
	221,  // 1038: rill.sql.v1.MultimapProto.abstractMultimapProto:type_name -> rill.sql.v1.AbstractMultimapProto
	230,  // 1039: rill.sql.v1.MultimapProto.filteredMultimapProto:type_name -> rill.sql.v1.FilteredMultimapProto
	193,  // 1040: rill.sql.v1.MultimapProto.setMultimapProto:type_name -> rill.sql.v1.SetMultimapProto
	209,  // 1041: rill.sql.v1.MultimapProto.forwardingListMultimapProto:type_name -> rill.sql.v1.ForwardingListMultimapProto
	204,  // 1042: rill.sql.v1.MultimapProto.forwardingSetMultimapProto:type_name -> rill.sql.v1.ForwardingSetMultimapProto
	211,  // 1043: rill.sql.v1.MultimapProto.linkedListMultimapProto:type_name -> rill.sql.v1.LinkedListMultimapProto
	212,  // 1044: rill.sql.v1.MultimapProto.abstractListMultimapProto:type_name -> rill.sql.v1.AbstractListMultimapProto
	215,  // 1045: rill.sql.v1.MultimapProto.filteredKeyListMultimapProto:type_name -> rill.sql.v1.FilteredKeyListMultimapProto
	219,  // 1046: rill.sql.v1.MultimapProto.immutableListMultimapProto:type_name -> rill.sql.v1.ImmutableListMultimapProto
	222,  // 1047: rill.sql.v1.MultimapProto.abstractMapBasedMultimapProto:type_name -> rill.sql.v1.AbstractMapBasedMultimapProto
	223,  // 1048: rill.sql.v1.MultimapProto.filteredEntryMultimapProto:type_name -> rill.sql.v1.FilteredEntryMultimapProto
	224,  // 1049: rill.sql.v1.MultimapProto.baseImmutableMultimapProto:type_name -> rill.sql.v1.BaseImmutableMultimapProto
	228,  // 1050: rill.sql.v1.MultimapProto.filteredKeyMultimapProto:type_name -> rill.sql.v1.FilteredKeyMultimapProto
	205,  // 1051: rill.sql.v1.MultimapProto.filteredSetMultimapProto:type_name -> rill.sql.v1.FilteredSetMultimapProto
	194,  // 1052: rill.sql.v1.MultimapProto.abstractSetMultimapProto:type_name -> rill.sql.v1.AbstractSetMultimapProto
	202,  // 1053: rill.sql.v1.MultimapProto.sortedSetMultimapProto:type_name -> rill.sql.v1.SortedSetMultimapProto
	226,  // 1054: rill.sql.v1.MultimapProto.immutableSetMultimapProto:type_name -> rill.sql.v1.ImmutableSetMultimapProto
	203,  // 1055: rill.sql.v1.MultimapProto.forwardingSortedSetMultimapProto:type_name -> rill.sql.v1.ForwardingSortedSetMultimapProto
	213,  // 1056: rill.sql.v1.MultimapProto.arrayListMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	220,  // 1057: rill.sql.v1.MultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	206,  // 1058: rill.sql.v1.MultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	225,  // 1059: rill.sql.v1.MultimapProto.immutableMultimapProto:type_name -> rill.sql.v1.ImmutableMultimapProto
	229,  // 1060: rill.sql.v1.MultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	195,  // 1061: rill.sql.v1.MultimapProto.linkedHashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	197,  // 1062: rill.sql.v1.MultimapProto.hashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	199,  // 1063: rill.sql.v1.MultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	227,  // 1064: rill.sql.v1.MultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	214,  // 1065: rill.sql.v1.MultimapProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	196,  // 1066: rill.sql.v1.MultimapProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1067: rill.sql.v1.MultimapProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1068: rill.sql.v1.MultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1069: rill.sql.v1.MultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	209,  // 1070: rill.sql.v1.ForwardingMultimapProto.forwardingListMultimapProto:type_name -> rill.sql.v1.ForwardingListMultimapProto
	204,  // 1071: rill.sql.v1.ForwardingMultimapProto.forwardingSetMultimapProto:type_name -> rill.sql.v1.ForwardingSetMultimapProto
	203,  // 1072: rill.sql.v1.ForwardingMultimapProto.forwardingSortedSetMultimapProto:type_name -> rill.sql.v1.ForwardingSortedSetMultimapProto
	211,  // 1073: rill.sql.v1.ListMultimapProto.linkedListMultimapProto:type_name -> rill.sql.v1.LinkedListMultimapProto
	212,  // 1074: rill.sql.v1.ListMultimapProto.abstractListMultimapProto:type_name -> rill.sql.v1.AbstractListMultimapProto
	215,  // 1075: rill.sql.v1.ListMultimapProto.filteredKeyListMultimapProto:type_name -> rill.sql.v1.FilteredKeyListMultimapProto
	209,  // 1076: rill.sql.v1.ListMultimapProto.forwardingListMultimapProto:type_name -> rill.sql.v1.ForwardingListMultimapProto
	219,  // 1077: rill.sql.v1.ListMultimapProto.immutableListMultimapProto:type_name -> rill.sql.v1.ImmutableListMultimapProto
	213,  // 1078: rill.sql.v1.ListMultimapProto.arrayListMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	220,  // 1079: rill.sql.v1.ListMultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	214,  // 1080: rill.sql.v1.ListMultimapProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	213,  // 1081: rill.sql.v1.AbstractListMultimapProto.arrayListMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	214,  // 1082: rill.sql.v1.AbstractListMultimapProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	214,  // 1083: rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	207,  // 1084: rill.sql.v1.FilteredKeyListMultimapProto.unfiltered:type_name -> rill.sql.v1.MultimapProto
	216,  // 1085: rill.sql.v1.FilteredKeyListMultimapProto.keyPredicate:type_name -> rill.sql.v1.com_google_common_base_PredicateProto
	12,   // 1086: rill.sql.v1.com_google_common_base_PredicateProto.objectPredicateProto:type_name -> rill.sql.v1.ObjectPredicateProto
	217,  // 1087: rill.sql.v1.com_google_common_base_PredicateProto.charMatcherProto:type_name -> rill.sql.v1.CharMatcherProto
	218,  // 1088: rill.sql.v1.com_google_common_base_PredicateProto.smallCharMatcherProto:type_name -> rill.sql.v1.SmallCharMatcherProto
	218,  // 1089: rill.sql.v1.CharMatcherProto.smallCharMatcherProto:type_name -> rill.sql.v1.SmallCharMatcherProto
	220,  // 1090: rill.sql.v1.ImmutableListMultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	211,  // 1091: rill.sql.v1.AbstractMultimapProto.linkedListMultimapProto:type_name -> rill.sql.v1.LinkedListMultimapProto
	222,  // 1092: rill.sql.v1.AbstractMultimapProto.abstractMapBasedMultimapProto:type_name -> rill.sql.v1.AbstractMapBasedMultimapProto
	223,  // 1093: rill.sql.v1.AbstractMultimapProto.filteredEntryMultimapProto:type_name -> rill.sql.v1.FilteredEntryMultimapProto
	224,  // 1094: rill.sql.v1.AbstractMultimapProto.baseImmutableMultimapProto:type_name -> rill.sql.v1.BaseImmutableMultimapProto
	228,  // 1095: rill.sql.v1.AbstractMultimapProto.filteredKeyMultimapProto:type_name -> rill.sql.v1.FilteredKeyMultimapProto
	212,  // 1096: rill.sql.v1.AbstractMultimapProto.abstractListMultimapProto:type_name -> rill.sql.v1.AbstractListMultimapProto
	194,  // 1097: rill.sql.v1.AbstractMultimapProto.abstractSetMultimapProto:type_name -> rill.sql.v1.AbstractSetMultimapProto
	206,  // 1098: rill.sql.v1.AbstractMultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	225,  // 1099: rill.sql.v1.AbstractMultimapProto.immutableMultimapProto:type_name -> rill.sql.v1.ImmutableMultimapProto
	215,  // 1100: rill.sql.v1.AbstractMultimapProto.filteredKeyListMultimapProto:type_name -> rill.sql.v1.FilteredKeyListMultimapProto
	229,  // 1101: rill.sql.v1.AbstractMultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	213,  // 1102: rill.sql.v1.AbstractMultimapProto.arrayListMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	195,  // 1103: rill.sql.v1.AbstractMultimapProto.linkedHashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	197,  // 1104: rill.sql.v1.AbstractMultimapProto.hashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	199,  // 1105: rill.sql.v1.AbstractMultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	219,  // 1106: rill.sql.v1.AbstractMultimapProto.immutableListMultimapProto:type_name -> rill.sql.v1.ImmutableListMultimapProto
	226,  // 1107: rill.sql.v1.AbstractMultimapProto.immutableSetMultimapProto:type_name -> rill.sql.v1.ImmutableSetMultimapProto
	214,  // 1108: rill.sql.v1.AbstractMultimapProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	196,  // 1109: rill.sql.v1.AbstractMultimapProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1110: rill.sql.v1.AbstractMultimapProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1111: rill.sql.v1.AbstractMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	220,  // 1112: rill.sql.v1.AbstractMultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	227,  // 1113: rill.sql.v1.AbstractMultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	201,  // 1114: rill.sql.v1.AbstractMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	212,  // 1115: rill.sql.v1.AbstractMapBasedMultimapProto.abstractListMultimapProto:type_name -> rill.sql.v1.AbstractListMultimapProto
	194,  // 1116: rill.sql.v1.AbstractMapBasedMultimapProto.abstractSetMultimapProto:type_name -> rill.sql.v1.AbstractSetMultimapProto
	213,  // 1117: rill.sql.v1.AbstractMapBasedMultimapProto.arrayListMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.ArrayListMultimapGwtSerializationDependenciesProto
	195,  // 1118: rill.sql.v1.AbstractMapBasedMultimapProto.linkedHashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.LinkedHashMultimapGwtSerializationDependenciesProto
	197,  // 1119: rill.sql.v1.AbstractMapBasedMultimapProto.hashMultimapGwtSerializationDependenciesProto:type_name -> rill.sql.v1.HashMultimapGwtSerializationDependenciesProto
	199,  // 1120: rill.sql.v1.AbstractMapBasedMultimapProto.abstractSortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedSetMultimapProto
	214,  // 1121: rill.sql.v1.AbstractMapBasedMultimapProto.arrayListMultimapProto:type_name -> rill.sql.v1.ArrayListMultimapProto
	196,  // 1122: rill.sql.v1.AbstractMapBasedMultimapProto.linkedHashMultimapProto:type_name -> rill.sql.v1.LinkedHashMultimapProto
	198,  // 1123: rill.sql.v1.AbstractMapBasedMultimapProto.hashMultimapProto:type_name -> rill.sql.v1.HashMultimapProto
	200,  // 1124: rill.sql.v1.AbstractMapBasedMultimapProto.abstractSortedKeySortedSetMultimapProto:type_name -> rill.sql.v1.AbstractSortedKeySortedSetMultimapProto
	201,  // 1125: rill.sql.v1.AbstractMapBasedMultimapProto.treeMultimapProto:type_name -> rill.sql.v1.TreeMultimapProto
	206,  // 1126: rill.sql.v1.FilteredEntryMultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	207,  // 1127: rill.sql.v1.FilteredEntryMultimapProto.unfiltered:type_name -> rill.sql.v1.MultimapProto
	216,  // 1128: rill.sql.v1.FilteredEntryMultimapProto.predicate:type_name -> rill.sql.v1.com_google_common_base_PredicateProto
	225,  // 1129: rill.sql.v1.BaseImmutableMultimapProto.immutableMultimapProto:type_name -> rill.sql.v1.ImmutableMultimapProto
	219,  // 1130: rill.sql.v1.BaseImmutableMultimapProto.immutableListMultimapProto:type_name -> rill.sql.v1.ImmutableListMultimapProto
	226,  // 1131: rill.sql.v1.BaseImmutableMultimapProto.immutableSetMultimapProto:type_name -> rill.sql.v1.ImmutableSetMultimapProto
	220,  // 1132: rill.sql.v1.BaseImmutableMultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	227,  // 1133: rill.sql.v1.BaseImmutableMultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	219,  // 1134: rill.sql.v1.ImmutableMultimapProto.immutableListMultimapProto:type_name -> rill.sql.v1.ImmutableListMultimapProto
	226,  // 1135: rill.sql.v1.ImmutableMultimapProto.immutableSetMultimapProto:type_name -> rill.sql.v1.ImmutableSetMultimapProto
	220,  // 1136: rill.sql.v1.ImmutableMultimapProto.emptyImmutableListMultimapProto:type_name -> rill.sql.v1.EmptyImmutableListMultimapProto
	227,  // 1137: rill.sql.v1.ImmutableMultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	227,  // 1138: rill.sql.v1.ImmutableSetMultimapProto.emptyImmutableSetMultimapProto:type_name -> rill.sql.v1.EmptyImmutableSetMultimapProto
	215,  // 1139: rill.sql.v1.FilteredKeyMultimapProto.filteredKeyListMultimapProto:type_name -> rill.sql.v1.FilteredKeyListMultimapProto
	229,  // 1140: rill.sql.v1.FilteredKeyMultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	207,  // 1141: rill.sql.v1.FilteredKeyMultimapProto.unfiltered:type_name -> rill.sql.v1.MultimapProto
	216,  // 1142: rill.sql.v1.FilteredKeyMultimapProto.keyPredicate:type_name -> rill.sql.v1.com_google_common_base_PredicateProto
	207,  // 1143: rill.sql.v1.FilteredKeySetMultimapProto.unfiltered:type_name -> rill.sql.v1.MultimapProto
	216,  // 1144: rill.sql.v1.FilteredKeySetMultimapProto.keyPredicate:type_name -> rill.sql.v1.com_google_common_base_PredicateProto
	223,  // 1145: rill.sql.v1.FilteredMultimapProto.filteredEntryMultimapProto:type_name -> rill.sql.v1.FilteredEntryMultimapProto
	228,  // 1146: rill.sql.v1.FilteredMultimapProto.filteredKeyMultimapProto:type_name -> rill.sql.v1.FilteredKeyMultimapProto
	205,  // 1147: rill.sql.v1.FilteredMultimapProto.filteredSetMultimapProto:type_name -> rill.sql.v1.FilteredSetMultimapProto
	206,  // 1148: rill.sql.v1.FilteredMultimapProto.filteredEntrySetMultimapProto:type_name -> rill.sql.v1.FilteredEntrySetMultimapProto
	215,  // 1149: rill.sql.v1.FilteredMultimapProto.filteredKeyListMultimapProto:type_name -> rill.sql.v1.FilteredKeyListMultimapProto
	229,  // 1150: rill.sql.v1.FilteredMultimapProto.filteredKeySetMultimapProto:type_name -> rill.sql.v1.FilteredKeySetMultimapProto
	10,   // 1151: rill.sql.v1.SqlPositionFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1152: rill.sql.v1.SqlPositionFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1153: rill.sql.v1.SqlPositionFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1154: rill.sql.v1.SqlPositionFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1155: rill.sql.v1.SqlPositionFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1156: rill.sql.v1.SqlPositionFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1157: rill.sql.v1.SqlJsonRemoveFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1158: rill.sql.v1.SqlJsonRemoveFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1159: rill.sql.v1.SqlJsonRemoveFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1160: rill.sql.v1.SqlJsonRemoveFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1161: rill.sql.v1.SqlJsonRemoveFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1162: rill.sql.v1.SqlJsonRemoveFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1163: rill.sql.v1.SqlMatchFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1164: rill.sql.v1.SqlMatchFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1165: rill.sql.v1.SqlMatchFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1166: rill.sql.v1.SqlMatchFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1167: rill.sql.v1.SqlMatchFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1168: rill.sql.v1.SqlMatchFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1169: rill.sql.v1.SqlOverlayFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1170: rill.sql.v1.SqlOverlayFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1171: rill.sql.v1.SqlOverlayFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1172: rill.sql.v1.SqlOverlayFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1173: rill.sql.v1.SqlOverlayFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1174: rill.sql.v1.SqlOverlayFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1175: rill.sql.v1.SqlJsonArrayFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1176: rill.sql.v1.SqlJsonArrayFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1177: rill.sql.v1.SqlJsonArrayFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1178: rill.sql.v1.SqlJsonArrayFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1179: rill.sql.v1.SqlJsonArrayFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1180: rill.sql.v1.SqlJsonArrayFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1181: rill.sql.v1.SqlRandIntegerFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1182: rill.sql.v1.SqlRandIntegerFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1183: rill.sql.v1.SqlRandIntegerFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1184: rill.sql.v1.SqlRandIntegerFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1185: rill.sql.v1.SqlRandIntegerFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1186: rill.sql.v1.SqlRandIntegerFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1187: rill.sql.v1.SqlCurrentDateFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1188: rill.sql.v1.SqlCurrentDateFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1189: rill.sql.v1.SqlCurrentDateFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1190: rill.sql.v1.SqlCurrentDateFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1191: rill.sql.v1.SqlCurrentDateFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1192: rill.sql.v1.SqlCurrentDateFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	239,  // 1193: rill.sql.v1.SqlAggFunctionProto.sqlUserDefinedAggFunctionProto:type_name -> rill.sql.v1.SqlUserDefinedAggFunctionProto
	240,  // 1194: rill.sql.v1.SqlAggFunctionProto.sqlCovarAggFunctionProto:type_name -> rill.sql.v1.SqlCovarAggFunctionProto
	241,  // 1195: rill.sql.v1.SqlAggFunctionProto.sqlJsonArrayAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonArrayAggAggFunctionProto
	242,  // 1196: rill.sql.v1.SqlAggFunctionProto.sqlSumAggFunctionProto:type_name -> rill.sql.v1.SqlSumAggFunctionProto
	243,  // 1197: rill.sql.v1.SqlAggFunctionProto.sqlMinMaxAggFunctionProto:type_name -> rill.sql.v1.SqlMinMaxAggFunctionProto
	244,  // 1198: rill.sql.v1.SqlAggFunctionProto.sqlCountAggFunctionProto:type_name -> rill.sql.v1.SqlCountAggFunctionProto
	246,  // 1199: rill.sql.v1.SqlAggFunctionProto.sqlAnyValueAggFunctionProto:type_name -> rill.sql.v1.SqlAnyValueAggFunctionProto
	247,  // 1200: rill.sql.v1.SqlAggFunctionProto.sqlAvgAggFunctionProto:type_name -> rill.sql.v1.SqlAvgAggFunctionProto
	248,  // 1201: rill.sql.v1.SqlAggFunctionProto.sqlNthValueAggFunctionProto:type_name -> rill.sql.v1.SqlNthValueAggFunctionProto
	249,  // 1202: rill.sql.v1.SqlAggFunctionProto.sqlBasicAggFunctionProto:type_name -> rill.sql.v1.SqlBasicAggFunctionProto
	250,  // 1203: rill.sql.v1.SqlAggFunctionProto.sqlSingleValueAggFunctionProto:type_name -> rill.sql.v1.SqlSingleValueAggFunctionProto
	251,  // 1204: rill.sql.v1.SqlAggFunctionProto.sqlSumEmptyIsZeroAggFunctionProto:type_name -> rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto
	252,  // 1205: rill.sql.v1.SqlAggFunctionProto.sqlListaggAggFunctionProto:type_name -> rill.sql.v1.SqlListaggAggFunctionProto
	253,  // 1206: rill.sql.v1.SqlAggFunctionProto.sqlNtileAggFunctionProto:type_name -> rill.sql.v1.SqlNtileAggFunctionProto
	254,  // 1207: rill.sql.v1.SqlAggFunctionProto.sqlJsonObjectAggAggFunctionProto:type_name -> rill.sql.v1.SqlJsonObjectAggAggFunctionProto
	255,  // 1208: rill.sql.v1.SqlAggFunctionProto.sqlFirstLastValueAggFunctionProto:type_name -> rill.sql.v1.SqlFirstLastValueAggFunctionProto
	256,  // 1209: rill.sql.v1.SqlAggFunctionProto.sqlAbstractGroupFunctionProto:type_name -> rill.sql.v1.SqlAbstractGroupFunctionProto
	260,  // 1210: rill.sql.v1.SqlAggFunctionProto.sqlHistogramAggFunctionProto:type_name -> rill.sql.v1.SqlHistogramAggFunctionProto
	261,  // 1211: rill.sql.v1.SqlAggFunctionProto.sqlRankFunctionProto:type_name -> rill.sql.v1.SqlRankFunctionProto
	262,  // 1212: rill.sql.v1.SqlAggFunctionProto.sqlLeadLagAggFunctionProto:type_name -> rill.sql.v1.SqlLeadLagAggFunctionProto
	263,  // 1213: rill.sql.v1.SqlAggFunctionProto.sqlBitOpAggFunctionProto:type_name -> rill.sql.v1.SqlBitOpAggFunctionProto
	245,  // 1214: rill.sql.v1.SqlAggFunctionProto.sqlRegrCountAggFunctionProto:type_name -> rill.sql.v1.SqlRegrCountAggFunctionProto
	257,  // 1215: rill.sql.v1.SqlAggFunctionProto.sqlGroupIdFunctionProto:type_name -> rill.sql.v1.SqlGroupIdFunctionProto
	258,  // 1216: rill.sql.v1.SqlAggFunctionProto.sqlGroupingIdFunctionProto:type_name -> rill.sql.v1.SqlGroupingIdFunctionProto
	259,  // 1217: rill.sql.v1.SqlAggFunctionProto.sqlGroupingFunctionProto:type_name -> rill.sql.v1.SqlGroupingFunctionProto
	13,   // 1218: rill.sql.v1.SqlAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1219: rill.sql.v1.SqlAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1220: rill.sql.v1.SqlAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1221: rill.sql.v1.SqlAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1222: rill.sql.v1.SqlAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1223: rill.sql.v1.SqlAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1224: rill.sql.v1.SqlAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	166,  // 1225: rill.sql.v1.SqlUserDefinedAggFunctionProto.function:type_name -> rill.sql.v1.AggregateFunctionProto
	13,   // 1226: rill.sql.v1.SqlUserDefinedAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1227: rill.sql.v1.SqlUserDefinedAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1228: rill.sql.v1.SqlUserDefinedAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1229: rill.sql.v1.SqlUserDefinedAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1230: rill.sql.v1.SqlUserDefinedAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1231: rill.sql.v1.SqlUserDefinedAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1232: rill.sql.v1.SqlUserDefinedAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1233: rill.sql.v1.SqlCovarAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1234: rill.sql.v1.SqlCovarAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1235: rill.sql.v1.SqlCovarAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1236: rill.sql.v1.SqlCovarAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1237: rill.sql.v1.SqlCovarAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1238: rill.sql.v1.SqlCovarAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1239: rill.sql.v1.SqlCovarAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	14,   // 1240: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.nullClause:type_name -> rill.sql.v1.SqlJsonConstructorNullClauseProto
	13,   // 1241: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1242: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1243: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1244: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1245: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1246: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1247: rill.sql.v1.SqlJsonArrayAggAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	19,   // 1248: rill.sql.v1.SqlSumAggFunctionProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	13,   // 1249: rill.sql.v1.SqlSumAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1250: rill.sql.v1.SqlSumAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1251: rill.sql.v1.SqlSumAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1252: rill.sql.v1.SqlSumAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1253: rill.sql.v1.SqlSumAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1254: rill.sql.v1.SqlSumAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1255: rill.sql.v1.SqlSumAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	19,   // 1256: rill.sql.v1.SqlMinMaxAggFunctionProto.argTypes:type_name -> rill.sql.v1.RelDataTypeProto
	13,   // 1257: rill.sql.v1.SqlMinMaxAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1258: rill.sql.v1.SqlMinMaxAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1259: rill.sql.v1.SqlMinMaxAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1260: rill.sql.v1.SqlMinMaxAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1261: rill.sql.v1.SqlMinMaxAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1262: rill.sql.v1.SqlMinMaxAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1263: rill.sql.v1.SqlMinMaxAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	245,  // 1264: rill.sql.v1.SqlCountAggFunctionProto.sqlRegrCountAggFunctionProto:type_name -> rill.sql.v1.SqlRegrCountAggFunctionProto
	13,   // 1265: rill.sql.v1.SqlCountAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1266: rill.sql.v1.SqlCountAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1267: rill.sql.v1.SqlCountAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1268: rill.sql.v1.SqlCountAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1269: rill.sql.v1.SqlCountAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1270: rill.sql.v1.SqlCountAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1271: rill.sql.v1.SqlCountAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1272: rill.sql.v1.SqlRegrCountAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1273: rill.sql.v1.SqlRegrCountAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1274: rill.sql.v1.SqlRegrCountAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1275: rill.sql.v1.SqlRegrCountAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1276: rill.sql.v1.SqlRegrCountAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1277: rill.sql.v1.SqlRegrCountAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1278: rill.sql.v1.SqlRegrCountAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1279: rill.sql.v1.SqlAnyValueAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1280: rill.sql.v1.SqlAnyValueAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1281: rill.sql.v1.SqlAnyValueAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1282: rill.sql.v1.SqlAnyValueAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1283: rill.sql.v1.SqlAnyValueAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1284: rill.sql.v1.SqlAnyValueAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1285: rill.sql.v1.SqlAnyValueAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1286: rill.sql.v1.SqlAvgAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1287: rill.sql.v1.SqlAvgAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1288: rill.sql.v1.SqlAvgAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1289: rill.sql.v1.SqlAvgAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1290: rill.sql.v1.SqlAvgAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1291: rill.sql.v1.SqlAvgAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1292: rill.sql.v1.SqlAvgAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1293: rill.sql.v1.SqlNthValueAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1294: rill.sql.v1.SqlNthValueAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1295: rill.sql.v1.SqlNthValueAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1296: rill.sql.v1.SqlNthValueAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1297: rill.sql.v1.SqlNthValueAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1298: rill.sql.v1.SqlNthValueAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1299: rill.sql.v1.SqlNthValueAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1300: rill.sql.v1.SqlBasicAggFunctionProto.distinctOptionality:type_name -> rill.sql.v1.OptionalityProto
	15,   // 1301: rill.sql.v1.SqlBasicAggFunctionProto.syntax:type_name -> rill.sql.v1.SqlSyntaxProto
	13,   // 1302: rill.sql.v1.SqlBasicAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1303: rill.sql.v1.SqlBasicAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1304: rill.sql.v1.SqlBasicAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1305: rill.sql.v1.SqlBasicAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1306: rill.sql.v1.SqlBasicAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1307: rill.sql.v1.SqlBasicAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1308: rill.sql.v1.SqlBasicAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	19,   // 1309: rill.sql.v1.SqlSingleValueAggFunctionProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	13,   // 1310: rill.sql.v1.SqlSingleValueAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1311: rill.sql.v1.SqlSingleValueAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1312: rill.sql.v1.SqlSingleValueAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1313: rill.sql.v1.SqlSingleValueAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1314: rill.sql.v1.SqlSingleValueAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1315: rill.sql.v1.SqlSingleValueAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1316: rill.sql.v1.SqlSingleValueAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1317: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1318: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1319: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1320: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1321: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1322: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1323: rill.sql.v1.SqlSumEmptyIsZeroAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1324: rill.sql.v1.SqlListaggAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1325: rill.sql.v1.SqlListaggAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1326: rill.sql.v1.SqlListaggAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1327: rill.sql.v1.SqlListaggAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1328: rill.sql.v1.SqlListaggAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1329: rill.sql.v1.SqlListaggAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1330: rill.sql.v1.SqlListaggAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1331: rill.sql.v1.SqlNtileAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1332: rill.sql.v1.SqlNtileAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1333: rill.sql.v1.SqlNtileAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1334: rill.sql.v1.SqlNtileAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1335: rill.sql.v1.SqlNtileAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1336: rill.sql.v1.SqlNtileAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1337: rill.sql.v1.SqlNtileAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	14,   // 1338: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.nullClause:type_name -> rill.sql.v1.SqlJsonConstructorNullClauseProto
	13,   // 1339: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1340: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1341: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1342: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1343: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1344: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1345: rill.sql.v1.SqlJsonObjectAggAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1346: rill.sql.v1.SqlFirstLastValueAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1347: rill.sql.v1.SqlFirstLastValueAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1348: rill.sql.v1.SqlFirstLastValueAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1349: rill.sql.v1.SqlFirstLastValueAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1350: rill.sql.v1.SqlFirstLastValueAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1351: rill.sql.v1.SqlFirstLastValueAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1352: rill.sql.v1.SqlFirstLastValueAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	257,  // 1353: rill.sql.v1.SqlAbstractGroupFunctionProto.sqlGroupIdFunctionProto:type_name -> rill.sql.v1.SqlGroupIdFunctionProto
	258,  // 1354: rill.sql.v1.SqlAbstractGroupFunctionProto.sqlGroupingIdFunctionProto:type_name -> rill.sql.v1.SqlGroupingIdFunctionProto
	259,  // 1355: rill.sql.v1.SqlAbstractGroupFunctionProto.sqlGroupingFunctionProto:type_name -> rill.sql.v1.SqlGroupingFunctionProto
	13,   // 1356: rill.sql.v1.SqlAbstractGroupFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1357: rill.sql.v1.SqlAbstractGroupFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1358: rill.sql.v1.SqlAbstractGroupFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1359: rill.sql.v1.SqlAbstractGroupFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1360: rill.sql.v1.SqlAbstractGroupFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1361: rill.sql.v1.SqlAbstractGroupFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1362: rill.sql.v1.SqlAbstractGroupFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1363: rill.sql.v1.SqlGroupIdFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1364: rill.sql.v1.SqlGroupIdFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1365: rill.sql.v1.SqlGroupIdFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1366: rill.sql.v1.SqlGroupIdFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1367: rill.sql.v1.SqlGroupIdFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1368: rill.sql.v1.SqlGroupIdFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1369: rill.sql.v1.SqlGroupIdFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1370: rill.sql.v1.SqlGroupingIdFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1371: rill.sql.v1.SqlGroupingIdFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1372: rill.sql.v1.SqlGroupingIdFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1373: rill.sql.v1.SqlGroupingIdFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1374: rill.sql.v1.SqlGroupingIdFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1375: rill.sql.v1.SqlGroupingIdFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1376: rill.sql.v1.SqlGroupingIdFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1377: rill.sql.v1.SqlGroupingFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1378: rill.sql.v1.SqlGroupingFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1379: rill.sql.v1.SqlGroupingFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1380: rill.sql.v1.SqlGroupingFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1381: rill.sql.v1.SqlGroupingFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1382: rill.sql.v1.SqlGroupingFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1383: rill.sql.v1.SqlGroupingFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	19,   // 1384: rill.sql.v1.SqlHistogramAggFunctionProto.type:type_name -> rill.sql.v1.RelDataTypeProto
	13,   // 1385: rill.sql.v1.SqlHistogramAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1386: rill.sql.v1.SqlHistogramAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1387: rill.sql.v1.SqlHistogramAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1388: rill.sql.v1.SqlHistogramAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1389: rill.sql.v1.SqlHistogramAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1390: rill.sql.v1.SqlHistogramAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1391: rill.sql.v1.SqlHistogramAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1392: rill.sql.v1.SqlRankFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1393: rill.sql.v1.SqlRankFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1394: rill.sql.v1.SqlRankFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1395: rill.sql.v1.SqlRankFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1396: rill.sql.v1.SqlRankFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1397: rill.sql.v1.SqlRankFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1398: rill.sql.v1.SqlRankFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1399: rill.sql.v1.SqlLeadLagAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1400: rill.sql.v1.SqlLeadLagAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1401: rill.sql.v1.SqlLeadLagAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1402: rill.sql.v1.SqlLeadLagAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1403: rill.sql.v1.SqlLeadLagAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1404: rill.sql.v1.SqlLeadLagAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1405: rill.sql.v1.SqlLeadLagAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	13,   // 1406: rill.sql.v1.SqlBitOpAggFunctionProto.requiresGroupOrder:type_name -> rill.sql.v1.OptionalityProto
	10,   // 1407: rill.sql.v1.SqlBitOpAggFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1408: rill.sql.v1.SqlBitOpAggFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1409: rill.sql.v1.SqlBitOpAggFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1410: rill.sql.v1.SqlBitOpAggFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1411: rill.sql.v1.SqlBitOpAggFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1412: rill.sql.v1.SqlBitOpAggFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	265,  // 1413: rill.sql.v1.SqlWindowTableFunctionProto.sqlTumbleTableFunctionProto:type_name -> rill.sql.v1.SqlTumbleTableFunctionProto
	266,  // 1414: rill.sql.v1.SqlWindowTableFunctionProto.sqlSessionTableFunctionProto:type_name -> rill.sql.v1.SqlSessionTableFunctionProto
	267,  // 1415: rill.sql.v1.SqlWindowTableFunctionProto.sqlHopTableFunctionProto:type_name -> rill.sql.v1.SqlHopTableFunctionProto
	10,   // 1416: rill.sql.v1.SqlWindowTableFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1417: rill.sql.v1.SqlWindowTableFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1418: rill.sql.v1.SqlWindowTableFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1419: rill.sql.v1.SqlWindowTableFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1420: rill.sql.v1.SqlWindowTableFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1421: rill.sql.v1.SqlWindowTableFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1422: rill.sql.v1.SqlTumbleTableFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1423: rill.sql.v1.SqlTumbleTableFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1424: rill.sql.v1.SqlTumbleTableFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1425: rill.sql.v1.SqlTumbleTableFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1426: rill.sql.v1.SqlTumbleTableFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1427: rill.sql.v1.SqlTumbleTableFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1428: rill.sql.v1.SqlSessionTableFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1429: rill.sql.v1.SqlSessionTableFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1430: rill.sql.v1.SqlSessionTableFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1431: rill.sql.v1.SqlSessionTableFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1432: rill.sql.v1.SqlSessionTableFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1433: rill.sql.v1.SqlSessionTableFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1434: rill.sql.v1.SqlHopTableFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1435: rill.sql.v1.SqlHopTableFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1436: rill.sql.v1.SqlHopTableFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1437: rill.sql.v1.SqlHopTableFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1438: rill.sql.v1.SqlHopTableFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1439: rill.sql.v1.SqlHopTableFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1440: rill.sql.v1.SqlRegexpReplaceFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1441: rill.sql.v1.SqlRegexpReplaceFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1442: rill.sql.v1.SqlRegexpReplaceFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1443: rill.sql.v1.SqlRegexpReplaceFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1444: rill.sql.v1.SqlRegexpReplaceFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1445: rill.sql.v1.SqlRegexpReplaceFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	270,  // 1446: rill.sql.v1.SqlMonotonicUnaryFunctionProto.sqlFloorFunctionProto:type_name -> rill.sql.v1.SqlFloorFunctionProto
	10,   // 1447: rill.sql.v1.SqlMonotonicUnaryFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1448: rill.sql.v1.SqlMonotonicUnaryFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1449: rill.sql.v1.SqlMonotonicUnaryFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1450: rill.sql.v1.SqlMonotonicUnaryFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1451: rill.sql.v1.SqlMonotonicUnaryFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1452: rill.sql.v1.SqlMonotonicUnaryFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1453: rill.sql.v1.SqlFloorFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1454: rill.sql.v1.SqlFloorFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1455: rill.sql.v1.SqlFloorFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1456: rill.sql.v1.SqlFloorFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1457: rill.sql.v1.SqlFloorFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1458: rill.sql.v1.SqlFloorFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1459: rill.sql.v1.SqlJsonStorageSizeFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1460: rill.sql.v1.SqlJsonStorageSizeFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1461: rill.sql.v1.SqlJsonStorageSizeFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1462: rill.sql.v1.SqlJsonStorageSizeFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1463: rill.sql.v1.SqlJsonStorageSizeFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1464: rill.sql.v1.SqlJsonStorageSizeFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1465: rill.sql.v1.SqlJsonQueryFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1466: rill.sql.v1.SqlJsonQueryFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1467: rill.sql.v1.SqlJsonQueryFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1468: rill.sql.v1.SqlJsonQueryFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1469: rill.sql.v1.SqlJsonQueryFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1470: rill.sql.v1.SqlJsonQueryFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	10,   // 1471: rill.sql.v1.SqlJsonExistsFunctionProto.category:type_name -> rill.sql.v1.SqlFunctionCategoryProto
	41,   // 1472: rill.sql.v1.SqlJsonExistsFunctionProto.sqlIdentifier:type_name -> rill.sql.v1.SqlIdentifierProto
	7,    // 1473: rill.sql.v1.SqlJsonExistsFunctionProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1474: rill.sql.v1.SqlJsonExistsFunctionProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1475: rill.sql.v1.SqlJsonExistsFunctionProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1476: rill.sql.v1.SqlJsonExistsFunctionProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1477: rill.sql.v1.SqlCaseOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1478: rill.sql.v1.SqlCaseOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1479: rill.sql.v1.SqlCaseOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1480: rill.sql.v1.SqlCaseOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	276,  // 1481: rill.sql.v1.SqlBinaryOperatorProto.sqlSetOperatorProto:type_name -> rill.sql.v1.SqlSetOperatorProto
	277,  // 1482: rill.sql.v1.SqlBinaryOperatorProto.sqlOverlapsOperatorProto:type_name -> rill.sql.v1.SqlOverlapsOperatorProto
	278,  // 1483: rill.sql.v1.SqlBinaryOperatorProto.sqlCastOperatorProto:type_name -> rill.sql.v1.SqlCastOperatorProto
	279,  // 1484: rill.sql.v1.SqlBinaryOperatorProto.sqlMonotonicBinaryOperatorProto:type_name -> rill.sql.v1.SqlMonotonicBinaryOperatorProto
	280,  // 1485: rill.sql.v1.SqlBinaryOperatorProto.sqlMultisetMemberOfOperatorProto:type_name -> rill.sql.v1.SqlMultisetMemberOfOperatorProto
	281,  // 1486: rill.sql.v1.SqlBinaryOperatorProto.sqlMultisetSetOperatorProto:type_name -> rill.sql.v1.SqlMultisetSetOperatorProto
	282,  // 1487: rill.sql.v1.SqlBinaryOperatorProto.sqlWithinGroupOperatorProto:type_name -> rill.sql.v1.SqlWithinGroupOperatorProto
	283,  // 1488: rill.sql.v1.SqlBinaryOperatorProto.sqlFilterOperatorProto:type_name -> rill.sql.v1.SqlFilterOperatorProto
	284,  // 1489: rill.sql.v1.SqlBinaryOperatorProto.sqlOverOperatorProto:type_name -> rill.sql.v1.SqlOverOperatorProto
	285,  // 1490: rill.sql.v1.SqlBinaryOperatorProto.sqlInOperatorProto:type_name -> rill.sql.v1.SqlInOperatorProto
	287,  // 1491: rill.sql.v1.SqlBinaryOperatorProto.sqlPosixRegexOperatorProto:type_name -> rill.sql.v1.SqlPosixRegexOperatorProto
	288,  // 1492: rill.sql.v1.SqlBinaryOperatorProto.sqlWithinDistinctOperatorProto:type_name -> rill.sql.v1.SqlWithinDistinctOperatorProto
	286,  // 1493: rill.sql.v1.SqlBinaryOperatorProto.sqlQuantifyOperatorProto:type_name -> rill.sql.v1.SqlQuantifyOperatorProto
	7,    // 1494: rill.sql.v1.SqlBinaryOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1495: rill.sql.v1.SqlBinaryOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1496: rill.sql.v1.SqlBinaryOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1497: rill.sql.v1.SqlBinaryOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1498: rill.sql.v1.SqlSetOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1499: rill.sql.v1.SqlSetOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1500: rill.sql.v1.SqlSetOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1501: rill.sql.v1.SqlSetOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1502: rill.sql.v1.SqlOverlapsOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1503: rill.sql.v1.SqlOverlapsOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1504: rill.sql.v1.SqlOverlapsOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1505: rill.sql.v1.SqlOverlapsOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1506: rill.sql.v1.SqlCastOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1507: rill.sql.v1.SqlCastOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1508: rill.sql.v1.SqlCastOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1509: rill.sql.v1.SqlCastOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1510: rill.sql.v1.SqlMonotonicBinaryOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1511: rill.sql.v1.SqlMonotonicBinaryOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1512: rill.sql.v1.SqlMonotonicBinaryOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1513: rill.sql.v1.SqlMonotonicBinaryOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1514: rill.sql.v1.SqlMultisetMemberOfOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1515: rill.sql.v1.SqlMultisetMemberOfOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1516: rill.sql.v1.SqlMultisetMemberOfOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1517: rill.sql.v1.SqlMultisetMemberOfOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1518: rill.sql.v1.SqlMultisetSetOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1519: rill.sql.v1.SqlMultisetSetOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1520: rill.sql.v1.SqlMultisetSetOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1521: rill.sql.v1.SqlMultisetSetOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1522: rill.sql.v1.SqlWithinGroupOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1523: rill.sql.v1.SqlWithinGroupOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1524: rill.sql.v1.SqlWithinGroupOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1525: rill.sql.v1.SqlWithinGroupOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1526: rill.sql.v1.SqlFilterOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1527: rill.sql.v1.SqlFilterOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1528: rill.sql.v1.SqlFilterOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1529: rill.sql.v1.SqlFilterOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1530: rill.sql.v1.SqlOverOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1531: rill.sql.v1.SqlOverOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1532: rill.sql.v1.SqlOverOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1533: rill.sql.v1.SqlOverOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	286,  // 1534: rill.sql.v1.SqlInOperatorProto.sqlQuantifyOperatorProto:type_name -> rill.sql.v1.SqlQuantifyOperatorProto
	7,    // 1535: rill.sql.v1.SqlInOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1536: rill.sql.v1.SqlInOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1537: rill.sql.v1.SqlInOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1538: rill.sql.v1.SqlInOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1539: rill.sql.v1.SqlQuantifyOperatorProto.comparisonKind:type_name -> rill.sql.v1.SqlKindProto
	7,    // 1540: rill.sql.v1.SqlQuantifyOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1541: rill.sql.v1.SqlQuantifyOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1542: rill.sql.v1.SqlQuantifyOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1543: rill.sql.v1.SqlQuantifyOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1544: rill.sql.v1.SqlPosixRegexOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1545: rill.sql.v1.SqlPosixRegexOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1546: rill.sql.v1.SqlPosixRegexOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1547: rill.sql.v1.SqlPosixRegexOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1548: rill.sql.v1.SqlWithinDistinctOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1549: rill.sql.v1.SqlWithinDistinctOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1550: rill.sql.v1.SqlWithinDistinctOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1551: rill.sql.v1.SqlWithinDistinctOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1552: rill.sql.v1.SqlSelectOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1553: rill.sql.v1.SqlSelectOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1554: rill.sql.v1.SqlSelectOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1555: rill.sql.v1.SqlSelectOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	291,  // 1556: rill.sql.v1.SqlSpecialOperatorProto.sqlLateralOperatorProto:type_name -> rill.sql.v1.SqlLateralOperatorProto
	292,  // 1557: rill.sql.v1.SqlSpecialOperatorProto.sqlMultisetValueConstructorProto:type_name -> rill.sql.v1.SqlMultisetValueConstructorProto
	295,  // 1558: rill.sql.v1.SqlSpecialOperatorProto.sqlDefaultOperatorProto:type_name -> rill.sql.v1.SqlDefaultOperatorProto
	296,  // 1559: rill.sql.v1.SqlSpecialOperatorProto.sqlLiteralChainOperatorProto:type_name -> rill.sql.v1.SqlLiteralChainOperatorProto
	297,  // 1560: rill.sql.v1.SqlSpecialOperatorProto.sqlDatetimePlusOperatorProto:type_name -> rill.sql.v1.SqlDatetimePlusOperatorProto
	298,  // 1561: rill.sql.v1.SqlSpecialOperatorProto.sqlSequenceValueOperatorProto:type_name -> rill.sql.v1.SqlSequenceValueOperatorProto
	299,  // 1562: rill.sql.v1.SqlSpecialOperatorProto.sqlFunctionalOperatorProto:type_name -> rill.sql.v1.SqlFunctionalOperatorProto
	302,  // 1563: rill.sql.v1.SqlSpecialOperatorProto.sqlLikeOperatorProto:type_name -> rill.sql.v1.SqlLikeOperatorProto
	303,  // 1564: rill.sql.v1.SqlSpecialOperatorProto.sqlInternalOperatorProto:type_name -> rill.sql.v1.SqlInternalOperatorProto
	308,  // 1565: rill.sql.v1.SqlSpecialOperatorProto.sqlDotOperatorProto:type_name -> rill.sql.v1.SqlDotOperatorProto
	309,  // 1566: rill.sql.v1.SqlSpecialOperatorProto.sqlThrowOperatorProto:type_name -> rill.sql.v1.SqlThrowOperatorProto
	310,  // 1567: rill.sql.v1.SqlSpecialOperatorProto.sqlItemOperatorProto:type_name -> rill.sql.v1.SqlItemOperatorProto
	311,  // 1568: rill.sql.v1.SqlSpecialOperatorProto.sqlInfixOperatorProto:type_name -> rill.sql.v1.SqlInfixOperatorProto
	313,  // 1569: rill.sql.v1.SqlSpecialOperatorProto.sqlAsOperatorProto:type_name -> rill.sql.v1.SqlAsOperatorProto
	315,  // 1570: rill.sql.v1.SqlSpecialOperatorProto.sqlValuesOperatorProto:type_name -> rill.sql.v1.SqlValuesOperatorProto
	316,  // 1571: rill.sql.v1.SqlSpecialOperatorProto.sqlColumnListConstructorProto:type_name -> rill.sql.v1.SqlColumnListConstructorProto
	317,  // 1572: rill.sql.v1.SqlSpecialOperatorProto.sqlMultisetQueryConstructorProto:type_name -> rill.sql.v1.SqlMultisetQueryConstructorProto
	320,  // 1573: rill.sql.v1.SqlSpecialOperatorProto.sqlCursorConstructorProto:type_name -> rill.sql.v1.SqlCursorConstructorProto
	321,  // 1574: rill.sql.v1.SqlSpecialOperatorProto.sqlRowOperatorProto:type_name -> rill.sql.v1.SqlRowOperatorProto
	322,  // 1575: rill.sql.v1.SqlSpecialOperatorProto.sqlDatetimeSubtractionOperatorProto:type_name -> rill.sql.v1.SqlDatetimeSubtractionOperatorProto
	323,  // 1576: rill.sql.v1.SqlSpecialOperatorProto.sqlNullTreatmentOperatorProto:type_name -> rill.sql.v1.SqlNullTreatmentOperatorProto
	293,  // 1577: rill.sql.v1.SqlSpecialOperatorProto.sqlArrayValueConstructorProto:type_name -> rill.sql.v1.SqlArrayValueConstructorProto
	294,  // 1578: rill.sql.v1.SqlSpecialOperatorProto.sqlMapValueConstructorProto:type_name -> rill.sql.v1.SqlMapValueConstructorProto
	300,  // 1579: rill.sql.v1.SqlSpecialOperatorProto.sqlCollectionTableOperatorProto:type_name -> rill.sql.v1.SqlCollectionTableOperatorProto
	301,  // 1580: rill.sql.v1.SqlSpecialOperatorProto.sqlUnnestOperatorProto:type_name -> rill.sql.v1.SqlUnnestOperatorProto
	304,  // 1581: rill.sql.v1.SqlSpecialOperatorProto.sqlExtendOperatorProto:type_name -> rill.sql.v1.SqlExtendOperatorProto
	305,  // 1582: rill.sql.v1.SqlSpecialOperatorProto.sqlRollupOperatorProto:type_name -> rill.sql.v1.SqlRollupOperatorProto
	306,  // 1583: rill.sql.v1.SqlSpecialOperatorProto.sqlIntervalOperatorProto:type_name -> rill.sql.v1.SqlIntervalOperatorProto
	307,  // 1584: rill.sql.v1.SqlSpecialOperatorProto.sqlSearchOperatorProto:type_name -> rill.sql.v1.SqlSearchOperatorProto
	312,  // 1585: rill.sql.v1.SqlSpecialOperatorProto.sqlBetweenOperatorProto:type_name -> rill.sql.v1.SqlBetweenOperatorProto
	314,  // 1586: rill.sql.v1.SqlSpecialOperatorProto.sqlArgumentAssignmentOperatorProto:type_name -> rill.sql.v1.SqlArgumentAssignmentOperatorProto
	318,  // 1587: rill.sql.v1.SqlSpecialOperatorProto.sqlArrayQueryConstructorProto:type_name -> rill.sql.v1.SqlArrayQueryConstructorProto
	319,  // 1588: rill.sql.v1.SqlSpecialOperatorProto.sqlMapQueryConstructorProto:type_name -> rill.sql.v1.SqlMapQueryConstructorProto
	7,    // 1589: rill.sql.v1.SqlSpecialOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1590: rill.sql.v1.SqlSpecialOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1591: rill.sql.v1.SqlSpecialOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1592: rill.sql.v1.SqlSpecialOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1593: rill.sql.v1.SqlLateralOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1594: rill.sql.v1.SqlLateralOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1595: rill.sql.v1.SqlLateralOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1596: rill.sql.v1.SqlLateralOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	293,  // 1597: rill.sql.v1.SqlMultisetValueConstructorProto.sqlArrayValueConstructorProto:type_name -> rill.sql.v1.SqlArrayValueConstructorProto
	294,  // 1598: rill.sql.v1.SqlMultisetValueConstructorProto.sqlMapValueConstructorProto:type_name -> rill.sql.v1.SqlMapValueConstructorProto
	7,    // 1599: rill.sql.v1.SqlMultisetValueConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1600: rill.sql.v1.SqlMultisetValueConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1601: rill.sql.v1.SqlMultisetValueConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1602: rill.sql.v1.SqlMultisetValueConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1603: rill.sql.v1.SqlArrayValueConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1604: rill.sql.v1.SqlArrayValueConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1605: rill.sql.v1.SqlArrayValueConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1606: rill.sql.v1.SqlArrayValueConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1607: rill.sql.v1.SqlMapValueConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1608: rill.sql.v1.SqlMapValueConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1609: rill.sql.v1.SqlMapValueConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1610: rill.sql.v1.SqlMapValueConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1611: rill.sql.v1.SqlDefaultOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1612: rill.sql.v1.SqlDefaultOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1613: rill.sql.v1.SqlDefaultOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1614: rill.sql.v1.SqlDefaultOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1615: rill.sql.v1.SqlLiteralChainOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1616: rill.sql.v1.SqlLiteralChainOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1617: rill.sql.v1.SqlLiteralChainOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1618: rill.sql.v1.SqlLiteralChainOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1619: rill.sql.v1.SqlDatetimePlusOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1620: rill.sql.v1.SqlDatetimePlusOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1621: rill.sql.v1.SqlDatetimePlusOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1622: rill.sql.v1.SqlDatetimePlusOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1623: rill.sql.v1.SqlSequenceValueOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1624: rill.sql.v1.SqlSequenceValueOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1625: rill.sql.v1.SqlSequenceValueOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1626: rill.sql.v1.SqlSequenceValueOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	300,  // 1627: rill.sql.v1.SqlFunctionalOperatorProto.sqlCollectionTableOperatorProto:type_name -> rill.sql.v1.SqlCollectionTableOperatorProto
	301,  // 1628: rill.sql.v1.SqlFunctionalOperatorProto.sqlUnnestOperatorProto:type_name -> rill.sql.v1.SqlUnnestOperatorProto
	7,    // 1629: rill.sql.v1.SqlFunctionalOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1630: rill.sql.v1.SqlFunctionalOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1631: rill.sql.v1.SqlFunctionalOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1632: rill.sql.v1.SqlFunctionalOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	16,   // 1633: rill.sql.v1.SqlCollectionTableOperatorProto.modality:type_name -> rill.sql.v1.SqlModalityProto
	7,    // 1634: rill.sql.v1.SqlCollectionTableOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1635: rill.sql.v1.SqlCollectionTableOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1636: rill.sql.v1.SqlCollectionTableOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1637: rill.sql.v1.SqlCollectionTableOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1638: rill.sql.v1.SqlUnnestOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1639: rill.sql.v1.SqlUnnestOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1640: rill.sql.v1.SqlUnnestOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1641: rill.sql.v1.SqlUnnestOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1642: rill.sql.v1.SqlLikeOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1643: rill.sql.v1.SqlLikeOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1644: rill.sql.v1.SqlLikeOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1645: rill.sql.v1.SqlLikeOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	304,  // 1646: rill.sql.v1.SqlInternalOperatorProto.sqlExtendOperatorProto:type_name -> rill.sql.v1.SqlExtendOperatorProto
	305,  // 1647: rill.sql.v1.SqlInternalOperatorProto.sqlRollupOperatorProto:type_name -> rill.sql.v1.SqlRollupOperatorProto
	306,  // 1648: rill.sql.v1.SqlInternalOperatorProto.sqlIntervalOperatorProto:type_name -> rill.sql.v1.SqlIntervalOperatorProto
	307,  // 1649: rill.sql.v1.SqlInternalOperatorProto.sqlSearchOperatorProto:type_name -> rill.sql.v1.SqlSearchOperatorProto
	7,    // 1650: rill.sql.v1.SqlInternalOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1651: rill.sql.v1.SqlInternalOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1652: rill.sql.v1.SqlInternalOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1653: rill.sql.v1.SqlInternalOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1654: rill.sql.v1.SqlExtendOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1655: rill.sql.v1.SqlExtendOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1656: rill.sql.v1.SqlExtendOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1657: rill.sql.v1.SqlExtendOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1658: rill.sql.v1.SqlRollupOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1659: rill.sql.v1.SqlRollupOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1660: rill.sql.v1.SqlRollupOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1661: rill.sql.v1.SqlRollupOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1662: rill.sql.v1.SqlIntervalOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1663: rill.sql.v1.SqlIntervalOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1664: rill.sql.v1.SqlIntervalOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1665: rill.sql.v1.SqlIntervalOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1666: rill.sql.v1.SqlSearchOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1667: rill.sql.v1.SqlSearchOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1668: rill.sql.v1.SqlSearchOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1669: rill.sql.v1.SqlSearchOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1670: rill.sql.v1.SqlDotOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1671: rill.sql.v1.SqlDotOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1672: rill.sql.v1.SqlDotOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1673: rill.sql.v1.SqlDotOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1674: rill.sql.v1.SqlThrowOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1675: rill.sql.v1.SqlThrowOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1676: rill.sql.v1.SqlThrowOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1677: rill.sql.v1.SqlThrowOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1678: rill.sql.v1.SqlItemOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1679: rill.sql.v1.SqlItemOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1680: rill.sql.v1.SqlItemOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1681: rill.sql.v1.SqlItemOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	312,  // 1682: rill.sql.v1.SqlInfixOperatorProto.sqlBetweenOperatorProto:type_name -> rill.sql.v1.SqlBetweenOperatorProto
	7,    // 1683: rill.sql.v1.SqlInfixOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1684: rill.sql.v1.SqlInfixOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1685: rill.sql.v1.SqlInfixOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1686: rill.sql.v1.SqlInfixOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	17,   // 1687: rill.sql.v1.SqlBetweenOperatorProto.flag:type_name -> rill.sql.v1.FlagProto
	7,    // 1688: rill.sql.v1.SqlBetweenOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1689: rill.sql.v1.SqlBetweenOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1690: rill.sql.v1.SqlBetweenOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1691: rill.sql.v1.SqlBetweenOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	314,  // 1692: rill.sql.v1.SqlAsOperatorProto.sqlArgumentAssignmentOperatorProto:type_name -> rill.sql.v1.SqlArgumentAssignmentOperatorProto
	7,    // 1693: rill.sql.v1.SqlAsOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1694: rill.sql.v1.SqlAsOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1695: rill.sql.v1.SqlAsOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1696: rill.sql.v1.SqlAsOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1697: rill.sql.v1.SqlArgumentAssignmentOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1698: rill.sql.v1.SqlArgumentAssignmentOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1699: rill.sql.v1.SqlArgumentAssignmentOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1700: rill.sql.v1.SqlArgumentAssignmentOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1701: rill.sql.v1.SqlValuesOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1702: rill.sql.v1.SqlValuesOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1703: rill.sql.v1.SqlValuesOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1704: rill.sql.v1.SqlValuesOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1705: rill.sql.v1.SqlColumnListConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1706: rill.sql.v1.SqlColumnListConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1707: rill.sql.v1.SqlColumnListConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1708: rill.sql.v1.SqlColumnListConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	318,  // 1709: rill.sql.v1.SqlMultisetQueryConstructorProto.sqlArrayQueryConstructorProto:type_name -> rill.sql.v1.SqlArrayQueryConstructorProto
	319,  // 1710: rill.sql.v1.SqlMultisetQueryConstructorProto.sqlMapQueryConstructorProto:type_name -> rill.sql.v1.SqlMapQueryConstructorProto
	108,  // 1711: rill.sql.v1.SqlMultisetQueryConstructorProto.typeTransform:type_name -> rill.sql.v1.SqlTypeTransformProto
	7,    // 1712: rill.sql.v1.SqlMultisetQueryConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1713: rill.sql.v1.SqlMultisetQueryConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1714: rill.sql.v1.SqlMultisetQueryConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1715: rill.sql.v1.SqlMultisetQueryConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	108,  // 1716: rill.sql.v1.SqlArrayQueryConstructorProto.typeTransform:type_name -> rill.sql.v1.SqlTypeTransformProto
	7,    // 1717: rill.sql.v1.SqlArrayQueryConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1718: rill.sql.v1.SqlArrayQueryConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1719: rill.sql.v1.SqlArrayQueryConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1720: rill.sql.v1.SqlArrayQueryConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	108,  // 1721: rill.sql.v1.SqlMapQueryConstructorProto.typeTransform:type_name -> rill.sql.v1.SqlTypeTransformProto
	7,    // 1722: rill.sql.v1.SqlMapQueryConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1723: rill.sql.v1.SqlMapQueryConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1724: rill.sql.v1.SqlMapQueryConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1725: rill.sql.v1.SqlMapQueryConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1726: rill.sql.v1.SqlCursorConstructorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1727: rill.sql.v1.SqlCursorConstructorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1728: rill.sql.v1.SqlCursorConstructorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1729: rill.sql.v1.SqlCursorConstructorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1730: rill.sql.v1.SqlRowOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1731: rill.sql.v1.SqlRowOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1732: rill.sql.v1.SqlRowOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1733: rill.sql.v1.SqlRowOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1734: rill.sql.v1.SqlDatetimeSubtractionOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1735: rill.sql.v1.SqlDatetimeSubtractionOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1736: rill.sql.v1.SqlDatetimeSubtractionOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1737: rill.sql.v1.SqlDatetimeSubtractionOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	7,    // 1738: rill.sql.v1.SqlNullTreatmentOperatorProto.kind:type_name -> rill.sql.v1.SqlKindProto
	99,   // 1739: rill.sql.v1.SqlNullTreatmentOperatorProto.returnTypeInference:type_name -> rill.sql.v1.SqlReturnTypeInferenceProto
	110,  // 1740: rill.sql.v1.SqlNullTreatmentOperatorProto.operandTypeInference:type_name -> rill.sql.v1.SqlOperandTypeInferenceProto
	112,  // 1741: rill.sql.v1.SqlNullTreatmentOperatorProto.operandTypeChecker:type_name -> rill.sql.v1.SqlOperandTypeCheckerProto
	55,   // 1742: rill.sql.v1.SqlMatchRecognizeProto.tableRef:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 1743: rill.sql.v1.SqlMatchRecognizeProto.pattern:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 1744: rill.sql.v1.SqlMatchRecognizeProto.strictStart:type_name -> rill.sql.v1.SqlLiteralProto
	71,   // 1745: rill.sql.v1.SqlMatchRecognizeProto.strictEnd:type_name -> rill.sql.v1.SqlLiteralProto
	58,   // 1746: rill.sql.v1.SqlMatchRecognizeProto.patternDefList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 1747: rill.sql.v1.SqlMatchRecognizeProto.measureList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 1748: rill.sql.v1.SqlMatchRecognizeProto.after:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 1749: rill.sql.v1.SqlMatchRecognizeProto.subsetList:type_name -> rill.sql.v1.SqlNodeListProto
	71,   // 1750: rill.sql.v1.SqlMatchRecognizeProto.rowsPerMatch:type_name -> rill.sql.v1.SqlLiteralProto
	58,   // 1751: rill.sql.v1.SqlMatchRecognizeProto.partitionList:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 1752: rill.sql.v1.SqlMatchRecognizeProto.orderList:type_name -> rill.sql.v1.SqlNodeListProto
	71,   // 1753: rill.sql.v1.SqlMatchRecognizeProto.interval:type_name -> rill.sql.v1.SqlLiteralProto
	39,   // 1754: rill.sql.v1.SqlMatchRecognizeProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1755: rill.sql.v1.SqlMatchRecognizeProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	326,  // 1756: rill.sql.v1.SqlAlterProto.sqlSetOptionProto:type_name -> rill.sql.v1.SqlSetOptionProto
	39,   // 1757: rill.sql.v1.SqlAlterProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1758: rill.sql.v1.SqlAlterProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1759: rill.sql.v1.SqlSetOptionProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	55,   // 1760: rill.sql.v1.SqlSetOptionProto.value:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 1761: rill.sql.v1.SqlSetOptionProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1762: rill.sql.v1.SqlSetOptionProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	328,  // 1763: rill.sql.v1.SqlDdlProto.sqlDropProto:type_name -> rill.sql.v1.SqlDropProto
	336,  // 1764: rill.sql.v1.SqlDdlProto.sqlCreateProto:type_name -> rill.sql.v1.SqlCreateProto
	329,  // 1765: rill.sql.v1.SqlDdlProto.sqlDropSchemaProto:type_name -> rill.sql.v1.SqlDropSchemaProto
	330,  // 1766: rill.sql.v1.SqlDdlProto.sqlDropObjectProto:type_name -> rill.sql.v1.SqlDropObjectProto
	337,  // 1767: rill.sql.v1.SqlDdlProto.sqlCreateTypeProto:type_name -> rill.sql.v1.SqlCreateTypeProto
	338,  // 1768: rill.sql.v1.SqlDdlProto.sqlCreateTableProto:type_name -> rill.sql.v1.SqlCreateTableProto
	339,  // 1769: rill.sql.v1.SqlDdlProto.sqlCreateViewProto:type_name -> rill.sql.v1.SqlCreateViewProto
	340,  // 1770: rill.sql.v1.SqlDdlProto.sqlCreateFunctionProto:type_name -> rill.sql.v1.SqlCreateFunctionProto
	341,  // 1771: rill.sql.v1.SqlDdlProto.sqlCreateForeignSchemaProto:type_name -> rill.sql.v1.SqlCreateForeignSchemaProto
	342,  // 1772: rill.sql.v1.SqlDdlProto.sqlCreateSchemaProto:type_name -> rill.sql.v1.SqlCreateSchemaProto
	343,  // 1773: rill.sql.v1.SqlDdlProto.sqlCreateMaterializedViewProto:type_name -> rill.sql.v1.SqlCreateMaterializedViewProto
	331,  // 1774: rill.sql.v1.SqlDdlProto.sqlDropTableProto:type_name -> rill.sql.v1.SqlDropTableProto
	332,  // 1775: rill.sql.v1.SqlDdlProto.sqlDropMaterializedViewProto:type_name -> rill.sql.v1.SqlDropMaterializedViewProto
	333,  // 1776: rill.sql.v1.SqlDdlProto.sqlDropViewProto:type_name -> rill.sql.v1.SqlDropViewProto
	334,  // 1777: rill.sql.v1.SqlDdlProto.sqlDropFunctionProto:type_name -> rill.sql.v1.SqlDropFunctionProto
	335,  // 1778: rill.sql.v1.SqlDdlProto.sqlDropTypeProto:type_name -> rill.sql.v1.SqlDropTypeProto
	96,   // 1779: rill.sql.v1.SqlDdlProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1780: rill.sql.v1.SqlDdlProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1781: rill.sql.v1.SqlDdlProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	329,  // 1782: rill.sql.v1.SqlDropProto.sqlDropSchemaProto:type_name -> rill.sql.v1.SqlDropSchemaProto
	330,  // 1783: rill.sql.v1.SqlDropProto.sqlDropObjectProto:type_name -> rill.sql.v1.SqlDropObjectProto
	331,  // 1784: rill.sql.v1.SqlDropProto.sqlDropTableProto:type_name -> rill.sql.v1.SqlDropTableProto
	332,  // 1785: rill.sql.v1.SqlDropProto.sqlDropMaterializedViewProto:type_name -> rill.sql.v1.SqlDropMaterializedViewProto
	333,  // 1786: rill.sql.v1.SqlDropProto.sqlDropViewProto:type_name -> rill.sql.v1.SqlDropViewProto
	334,  // 1787: rill.sql.v1.SqlDropProto.sqlDropFunctionProto:type_name -> rill.sql.v1.SqlDropFunctionProto
	335,  // 1788: rill.sql.v1.SqlDropProto.sqlDropTypeProto:type_name -> rill.sql.v1.SqlDropTypeProto
	96,   // 1789: rill.sql.v1.SqlDropProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1790: rill.sql.v1.SqlDropProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1791: rill.sql.v1.SqlDropProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1792: rill.sql.v1.SqlDropSchemaProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1793: rill.sql.v1.SqlDropSchemaProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1794: rill.sql.v1.SqlDropSchemaProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1795: rill.sql.v1.SqlDropSchemaProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	331,  // 1796: rill.sql.v1.SqlDropObjectProto.sqlDropTableProto:type_name -> rill.sql.v1.SqlDropTableProto
	332,  // 1797: rill.sql.v1.SqlDropObjectProto.sqlDropMaterializedViewProto:type_name -> rill.sql.v1.SqlDropMaterializedViewProto
	333,  // 1798: rill.sql.v1.SqlDropObjectProto.sqlDropViewProto:type_name -> rill.sql.v1.SqlDropViewProto
	334,  // 1799: rill.sql.v1.SqlDropObjectProto.sqlDropFunctionProto:type_name -> rill.sql.v1.SqlDropFunctionProto
	335,  // 1800: rill.sql.v1.SqlDropObjectProto.sqlDropTypeProto:type_name -> rill.sql.v1.SqlDropTypeProto
	41,   // 1801: rill.sql.v1.SqlDropObjectProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1802: rill.sql.v1.SqlDropObjectProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1803: rill.sql.v1.SqlDropObjectProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1804: rill.sql.v1.SqlDropObjectProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1805: rill.sql.v1.SqlDropTableProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1806: rill.sql.v1.SqlDropTableProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1807: rill.sql.v1.SqlDropTableProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1808: rill.sql.v1.SqlDropTableProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1809: rill.sql.v1.SqlDropMaterializedViewProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1810: rill.sql.v1.SqlDropMaterializedViewProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1811: rill.sql.v1.SqlDropMaterializedViewProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1812: rill.sql.v1.SqlDropMaterializedViewProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1813: rill.sql.v1.SqlDropViewProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1814: rill.sql.v1.SqlDropViewProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1815: rill.sql.v1.SqlDropViewProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1816: rill.sql.v1.SqlDropViewProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1817: rill.sql.v1.SqlDropFunctionProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1818: rill.sql.v1.SqlDropFunctionProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1819: rill.sql.v1.SqlDropFunctionProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1820: rill.sql.v1.SqlDropFunctionProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1821: rill.sql.v1.SqlDropTypeProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1822: rill.sql.v1.SqlDropTypeProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1823: rill.sql.v1.SqlDropTypeProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1824: rill.sql.v1.SqlDropTypeProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	337,  // 1825: rill.sql.v1.SqlCreateProto.sqlCreateTypeProto:type_name -> rill.sql.v1.SqlCreateTypeProto
	338,  // 1826: rill.sql.v1.SqlCreateProto.sqlCreateTableProto:type_name -> rill.sql.v1.SqlCreateTableProto
	339,  // 1827: rill.sql.v1.SqlCreateProto.sqlCreateViewProto:type_name -> rill.sql.v1.SqlCreateViewProto
	340,  // 1828: rill.sql.v1.SqlCreateProto.sqlCreateFunctionProto:type_name -> rill.sql.v1.SqlCreateFunctionProto
	341,  // 1829: rill.sql.v1.SqlCreateProto.sqlCreateForeignSchemaProto:type_name -> rill.sql.v1.SqlCreateForeignSchemaProto
	342,  // 1830: rill.sql.v1.SqlCreateProto.sqlCreateSchemaProto:type_name -> rill.sql.v1.SqlCreateSchemaProto
	343,  // 1831: rill.sql.v1.SqlCreateProto.sqlCreateMaterializedViewProto:type_name -> rill.sql.v1.SqlCreateMaterializedViewProto
	96,   // 1832: rill.sql.v1.SqlCreateProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1833: rill.sql.v1.SqlCreateProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1834: rill.sql.v1.SqlCreateProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1835: rill.sql.v1.SqlCreateTypeProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 1836: rill.sql.v1.SqlCreateTypeProto.attributeDefs:type_name -> rill.sql.v1.SqlNodeListProto
	82,   // 1837: rill.sql.v1.SqlCreateTypeProto.dataType:type_name -> rill.sql.v1.SqlDataTypeSpecProto
	96,   // 1838: rill.sql.v1.SqlCreateTypeProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1839: rill.sql.v1.SqlCreateTypeProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1840: rill.sql.v1.SqlCreateTypeProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1841: rill.sql.v1.SqlCreateTableProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 1842: rill.sql.v1.SqlCreateTableProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 1843: rill.sql.v1.SqlCreateTableProto.query:type_name -> rill.sql.v1.SqlNodeProto
	96,   // 1844: rill.sql.v1.SqlCreateTableProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1845: rill.sql.v1.SqlCreateTableProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1846: rill.sql.v1.SqlCreateTableProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1847: rill.sql.v1.SqlCreateViewProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 1848: rill.sql.v1.SqlCreateViewProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 1849: rill.sql.v1.SqlCreateViewProto.query:type_name -> rill.sql.v1.SqlNodeProto
	96,   // 1850: rill.sql.v1.SqlCreateViewProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1851: rill.sql.v1.SqlCreateViewProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1852: rill.sql.v1.SqlCreateViewProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1853: rill.sql.v1.SqlCreateFunctionProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	55,   // 1854: rill.sql.v1.SqlCreateFunctionProto.className:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 1855: rill.sql.v1.SqlCreateFunctionProto.usingList:type_name -> rill.sql.v1.SqlNodeListProto
	96,   // 1856: rill.sql.v1.SqlCreateFunctionProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1857: rill.sql.v1.SqlCreateFunctionProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1858: rill.sql.v1.SqlCreateFunctionProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1859: rill.sql.v1.SqlCreateForeignSchemaProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	55,   // 1860: rill.sql.v1.SqlCreateForeignSchemaProto.type:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 1861: rill.sql.v1.SqlCreateForeignSchemaProto.library:type_name -> rill.sql.v1.SqlNodeProto
	58,   // 1862: rill.sql.v1.SqlCreateForeignSchemaProto.optionList:type_name -> rill.sql.v1.SqlNodeListProto
	96,   // 1863: rill.sql.v1.SqlCreateForeignSchemaProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1864: rill.sql.v1.SqlCreateForeignSchemaProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1865: rill.sql.v1.SqlCreateForeignSchemaProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1866: rill.sql.v1.SqlCreateSchemaProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	96,   // 1867: rill.sql.v1.SqlCreateSchemaProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1868: rill.sql.v1.SqlCreateSchemaProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1869: rill.sql.v1.SqlCreateSchemaProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1870: rill.sql.v1.SqlCreateMaterializedViewProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 1871: rill.sql.v1.SqlCreateMaterializedViewProto.columnList:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 1872: rill.sql.v1.SqlCreateMaterializedViewProto.query:type_name -> rill.sql.v1.SqlNodeProto
	96,   // 1873: rill.sql.v1.SqlCreateMaterializedViewProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1874: rill.sql.v1.SqlCreateMaterializedViewProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1875: rill.sql.v1.SqlCreateMaterializedViewProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1876: rill.sql.v1.SqlDescribeSchemaProto.schema:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 1877: rill.sql.v1.SqlDescribeSchemaProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1878: rill.sql.v1.SqlDescribeSchemaProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	55,   // 1879: rill.sql.v1.SqlJoinProto.left:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 1880: rill.sql.v1.SqlJoinProto.natural:type_name -> rill.sql.v1.SqlLiteralProto
	71,   // 1881: rill.sql.v1.SqlJoinProto.joinType:type_name -> rill.sql.v1.SqlLiteralProto
	55,   // 1882: rill.sql.v1.SqlJoinProto.right:type_name -> rill.sql.v1.SqlNodeProto
	71,   // 1883: rill.sql.v1.SqlJoinProto.conditionType:type_name -> rill.sql.v1.SqlLiteralProto
	55,   // 1884: rill.sql.v1.SqlJoinProto.condition:type_name -> rill.sql.v1.SqlNodeProto
	39,   // 1885: rill.sql.v1.SqlJoinProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1886: rill.sql.v1.SqlJoinProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1887: rill.sql.v1.SqlDescribeTableProto.table:type_name -> rill.sql.v1.SqlIdentifierProto
	41,   // 1888: rill.sql.v1.SqlDescribeTableProto.column:type_name -> rill.sql.v1.SqlIdentifierProto
	39,   // 1889: rill.sql.v1.SqlDescribeTableProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1890: rill.sql.v1.SqlDescribeTableProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1891: rill.sql.v1.SqlColumnDeclarationProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	82,   // 1892: rill.sql.v1.SqlColumnDeclarationProto.dataType:type_name -> rill.sql.v1.SqlDataTypeSpecProto
	55,   // 1893: rill.sql.v1.SqlColumnDeclarationProto.expression:type_name -> rill.sql.v1.SqlNodeProto
	18,   // 1894: rill.sql.v1.SqlColumnDeclarationProto.strategy:type_name -> rill.sql.v1.ColumnStrategyProto
	39,   // 1895: rill.sql.v1.SqlColumnDeclarationProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1896: rill.sql.v1.SqlColumnDeclarationProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	39,   // 1897: rill.sql.v1.SqlDynamicParamProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1898: rill.sql.v1.SqlDynamicParamProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1899: rill.sql.v1.SqlCreateMetricsViewProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	58,   // 1900: rill.sql.v1.SqlCreateMetricsViewProto.dimensions:type_name -> rill.sql.v1.SqlNodeListProto
	58,   // 1901: rill.sql.v1.SqlCreateMetricsViewProto.measures:type_name -> rill.sql.v1.SqlNodeListProto
	55,   // 1902: rill.sql.v1.SqlCreateMetricsViewProto.from:type_name -> rill.sql.v1.SqlNodeProto
	353,  // 1903: rill.sql.v1.SqlCreateMetricsViewProto.dimensionsMap:type_name -> rill.sql.v1.SqlCreateMetricsViewProto.DimensionsMapEntry
	354,  // 1904: rill.sql.v1.SqlCreateMetricsViewProto.measuresMap:type_name -> rill.sql.v1.SqlCreateMetricsViewProto.MeasuresMapEntry
	96,   // 1905: rill.sql.v1.SqlCreateMetricsViewProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1906: rill.sql.v1.SqlCreateMetricsViewProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1907: rill.sql.v1.SqlCreateMetricsViewProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	41,   // 1908: rill.sql.v1.SqlCreateSourceProto.name:type_name -> rill.sql.v1.SqlIdentifierProto
	355,  // 1909: rill.sql.v1.SqlCreateSourceProto.properties:type_name -> rill.sql.v1.SqlCreateSourceProto.PropertiesEntry
	96,   // 1910: rill.sql.v1.SqlCreateSourceProto.operator:type_name -> rill.sql.v1.SqlOperatorProto
	39,   // 1911: rill.sql.v1.SqlCreateSourceProto.pos:type_name -> rill.sql.v1.SqlParserPosProto
	19,   // 1912: rill.sql.v1.SqlCreateSourceProto.typeInformation:type_name -> rill.sql.v1.RelDataTypeProto
	23,   // 1913: rill.sql.v1.RelRecordTypeProto.FieldNameMapEntry.value:type_name -> rill.sql.v1.RelDataTypeFieldProto
	23,   // 1914: rill.sql.v1.JavaRecordTypeProto.FieldNameMapEntry.value:type_name -> rill.sql.v1.RelDataTypeFieldProto
	55,   // 1915: rill.sql.v1.SqlCreateMetricsViewProto.DimensionsMapEntry.value:type_name -> rill.sql.v1.SqlNodeProto
	55,   // 1916: rill.sql.v1.SqlCreateMetricsViewProto.MeasuresMapEntry.value:type_name -> rill.sql.v1.SqlNodeProto
	1917, // [1917:1917] is the sub-list for method output_type
	1917, // [1917:1917] is the sub-list for method input_type
	1917, // [1917:1917] is the sub-list for extension type_name
	1917, // [1917:1917] is the sub-list for extension extendee
	0,    // [0:1917] is the sub-list for field type_name
}

func init() { file_sql_src_main_proto_ast_proto_init() }
func file_sql_src_main_proto_ast_proto_init() {
	if File_sql_src_main_proto_ast_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_sql_src_main_proto_ast_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisetSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeFieldProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeFieldImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArraySqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MapSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BasicSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeSystemProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeSystemImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatingTypeSystemProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCollationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaCollationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CollatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SerializableCharsetProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharsetProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocaleProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntervalSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlIntervalQualifierProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlParserPosProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObjectSqlTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlIdentifierProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeFamilyProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelCrossTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelRecordTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaRecordTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClassProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicRecordTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DynamicRecordTypeImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeHolderProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeFactoryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaTypeFactoryProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JavaTypeFactoryImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelDataTypeFactoryImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTypeFactoryImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNodeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCallProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUpdateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNodeListProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSelectProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInsertProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCaseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDeleteProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCheckConstraintProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlPivotProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTableRefProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlKeyConstraintProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWithProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSnapshotProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOrderByProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWindowProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNumericLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAbstractStringLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBinaryStringLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCharStringLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAbstractDateTimeLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDateLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimestampLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimeLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlIntervalLiteralProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAttributeDefinitionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDataTypeSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUserDefinedTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRowTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBasicTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAlienSystemTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCollectionTypeNameSpecProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TimeZoneProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlExplainProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWithItemProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUnpivotProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMergeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlHintProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[76].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBasicCallProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[77].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[78].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlPrefixOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[79].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNewOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[80].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[81].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlReturnTypeInferenceChainProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[82].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrdinalReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[83].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[84].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunctionReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[85].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelColumnMappingProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[86].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RelProtoDataTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[87].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CursorReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[88].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTypeTransformCascadeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[89].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTypeTransformProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[90].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatchReturnTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[91].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperandTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[92].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitOperandTypeInferenceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[93].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[94].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperandMetadataProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[95].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OperandMetadataImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[96].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[97].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IntFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[98].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PredicateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[99].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetopOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[100].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExplicitOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[101].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSingleOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[102].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiteralOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[103].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SameOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[104].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SameOperandTypeExceptLastOperandCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[105].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComparableOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[106].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FamilyOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[107].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeSingleOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[108].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOperandCountRangeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[109].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AssignableOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[110].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultisetOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[111].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CompositeOperandTypeCheckerProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[112].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlProcedureCallOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[113].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDescriptorOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[114].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlPostfixOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[115].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonValueExpressionOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[116].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[117].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUnresolvedFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[118].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJdbcFunctionCallProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[119].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUserDefinedTableMacroProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[120].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMacroProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[121].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableMacroImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[122].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MethodProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[123].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FunctionParameterProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[124].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ViewTableMacroProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[125].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalciteSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[126].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SimpleCalciteSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[127].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[128].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SchemaPlusProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[129].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DelegatingSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[130].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[131].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemiMutableSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[132].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameMapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[133].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[134].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameSetProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[135].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CachingCalciteSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[136].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CalciteRootSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[137].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUserDefinedFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[138].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUserDefinedTableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[139].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrgApacheCalciteSchema_FunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[140].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[141].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TableFunctionImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[142].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallImplementorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[143].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReflectiveFunctionBaseProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[144].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunctionImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[145].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[146].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ScalarFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[147].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[148].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImplementableAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[149].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AggregateFunctionImplProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[150].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlExtractFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[151].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTranslate3FunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[152].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTrimFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[153].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSubstringFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[154].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonDepthFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[155].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAbstractTimeFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[156].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRandFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[157].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCoalesceFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[158].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonTypeFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[159].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonValueFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[160].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatePartFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[161].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonObjectFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[162].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNullifFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[163].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimestampAddFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[164].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonPrettyFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[165].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBaseContextVariableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[166].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlStringContextVariableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[167].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlConvertFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[168].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlGroupedWindowFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[169].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTypeConstructorFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[170].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTimestampDiffFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[171].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonKeysFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[172].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonLengthFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[173].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCastFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[174].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[175].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[176].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedHashMultimapGwtSerializationDependenciesProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[177].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedHashMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[178].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashMultimapGwtSerializationDependenciesProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[179].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HashMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[180].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractSortedSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[181].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractSortedKeySortedSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[182].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TreeMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[183].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SortedSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[184].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingSortedSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[185].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[186].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[187].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredEntrySetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[188].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[189].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[190].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ForwardingListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[191].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[192].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LinkedListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[193].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[194].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayListMultimapGwtSerializationDependenciesProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[195].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ArrayListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[196].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredKeyListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[197].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ComGoogleCommonBase_PredicateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[198].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CharMatcherProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[199].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SmallCharMatcherProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[200].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmutableListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[201].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyImmutableListMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[202].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[203].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AbstractMapBasedMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[204].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredEntryMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[205].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BaseImmutableMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[206].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmutableMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[207].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ImmutableSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[208].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmptyImmutableSetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[209].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredKeyMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[210].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredKeySetMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[211].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FilteredMultimapProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[212].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlPositionFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[213].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonRemoveFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[214].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMatchFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[215].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOverlayFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[216].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonArrayFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[217].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRandIntegerFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[218].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCurrentDateFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[219].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[220].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUserDefinedAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[221].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCovarAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[222].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonArrayAggAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[223].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSumAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[224].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMinMaxAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[225].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCountAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[226].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRegrCountAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[227].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAnyValueAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[228].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAvgAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[229].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNthValueAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[230].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBasicAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[231].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSingleValueAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[232].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSumEmptyIsZeroAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[233].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlListaggAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[234].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNtileAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[235].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonObjectAggAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[236].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFirstLastValueAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[237].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAbstractGroupFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[238].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlGroupIdFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[239].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlGroupingIdFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[240].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlGroupingFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[241].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlHistogramAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[242].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRankFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[243].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlLeadLagAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[244].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBitOpAggFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[245].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWindowTableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[246].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlTumbleTableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[247].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSessionTableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[248].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlHopTableFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[249].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRegexpReplaceFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[250].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMonotonicUnaryFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[251].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFloorFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[252].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonStorageSizeFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[253].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonQueryFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[254].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJsonExistsFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[255].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCaseOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[256].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBinaryOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[257].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSetOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[258].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOverlapsOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[259].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCastOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[260].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMonotonicBinaryOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[261].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMultisetMemberOfOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[262].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMultisetSetOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[263].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWithinGroupOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[264].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFilterOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[265].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlOverOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[266].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[267].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlQuantifyOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[268].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlPosixRegexOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[269].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlWithinDistinctOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[270].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSelectOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[271].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSpecialOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[272].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlLateralOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[273].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMultisetValueConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[274].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlArrayValueConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[275].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMapValueConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[276].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDefaultOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[277].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlLiteralChainOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[278].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatetimePlusOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[279].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSequenceValueOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[280].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlFunctionalOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[281].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCollectionTableOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[282].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlUnnestOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[283].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlLikeOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[284].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInternalOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[285].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlExtendOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[286].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRollupOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[287].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlIntervalOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[288].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSearchOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[289].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDotOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[290].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlThrowOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[291].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlItemOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[292].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlInfixOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[293].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlBetweenOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[294].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAsOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[295].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlArgumentAssignmentOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[296].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlValuesOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[297].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnListConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[298].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMultisetQueryConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[299].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlArrayQueryConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[300].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMapQueryConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[301].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCursorConstructorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[302].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlRowOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[303].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDatetimeSubtractionOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[304].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlNullTreatmentOperatorProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[305].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlMatchRecognizeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[306].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlAlterProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[307].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlSetOptionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[308].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDdlProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[309].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[310].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[311].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropObjectProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[312].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropTableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[313].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropMaterializedViewProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[314].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropViewProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[315].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[316].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDropTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[317].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[318].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateTypeProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[319].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateTableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[320].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateViewProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[321].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateFunctionProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[322].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateForeignSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[323].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[324].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateMaterializedViewProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[325].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDescribeSchemaProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[326].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlJoinProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[327].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDescribeTableProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[328].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlColumnDeclarationProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[329].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlDynamicParamProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[330].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateMetricsViewProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_sql_src_main_proto_ast_proto_msgTypes[331].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SqlCreateSourceProto); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_sql_src_main_proto_ast_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*RelDataTypeProto_RelDataTypeImplProto)(nil),
		(*RelDataTypeProto_AbstractSqlTypeProto)(nil),
		(*RelDataTypeProto_RelCrossTypeProto)(nil),
		(*RelDataTypeProto_RelRecordTypeProto)(nil),
		(*RelDataTypeProto_DynamicRecordTypeProto)(nil),
		(*RelDataTypeProto_MultisetSqlTypeProto)(nil),
		(*RelDataTypeProto_ArraySqlTypeProto)(nil),
		(*RelDataTypeProto_MapSqlTypeProto)(nil),
		(*RelDataTypeProto_BasicSqlTypeProto)(nil),
		(*RelDataTypeProto_IntervalSqlTypeProto)(nil),
		(*RelDataTypeProto_ObjectSqlTypeProto)(nil),
		(*RelDataTypeProto_JavaRecordTypeProto)(nil),
		(*RelDataTypeProto_DynamicRecordTypeImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*RelDataTypeImplProto_AbstractSqlTypeProto)(nil),
		(*RelDataTypeImplProto_RelCrossTypeProto)(nil),
		(*RelDataTypeImplProto_RelRecordTypeProto)(nil),
		(*RelDataTypeImplProto_DynamicRecordTypeProto)(nil),
		(*RelDataTypeImplProto_MultisetSqlTypeProto)(nil),
		(*RelDataTypeImplProto_ArraySqlTypeProto)(nil),
		(*RelDataTypeImplProto_MapSqlTypeProto)(nil),
		(*RelDataTypeImplProto_BasicSqlTypeProto)(nil),
		(*RelDataTypeImplProto_IntervalSqlTypeProto)(nil),
		(*RelDataTypeImplProto_ObjectSqlTypeProto)(nil),
		(*RelDataTypeImplProto_JavaRecordTypeProto)(nil),
		(*RelDataTypeImplProto_DynamicRecordTypeImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*AbstractSqlTypeProto_MultisetSqlTypeProto)(nil),
		(*AbstractSqlTypeProto_ArraySqlTypeProto)(nil),
		(*AbstractSqlTypeProto_MapSqlTypeProto)(nil),
		(*AbstractSqlTypeProto_BasicSqlTypeProto)(nil),
		(*AbstractSqlTypeProto_IntervalSqlTypeProto)(nil),
		(*AbstractSqlTypeProto_ObjectSqlTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[4].OneofWrappers = []interface{}{
		(*RelDataTypeFieldProto_RelDataTypeFieldImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*RelDataTypeSystemProto_RelDataTypeSystemImplProto)(nil),
		(*RelDataTypeSystemProto_DelegatingTypeSystemProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[12].OneofWrappers = []interface{}{
		(*SqlCollationProto_JavaCollationProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[23].OneofWrappers = []interface{}{
		(*RelDataTypeFamilyProto_RelDataTypeImplProto)(nil),
		(*RelDataTypeFamilyProto_SqlTypeFamilyProto)(nil),
		(*RelDataTypeFamilyProto_AbstractSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_RelCrossTypeProto)(nil),
		(*RelDataTypeFamilyProto_RelRecordTypeProto)(nil),
		(*RelDataTypeFamilyProto_DynamicRecordTypeProto)(nil),
		(*RelDataTypeFamilyProto_MultisetSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_ArraySqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_MapSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_BasicSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_IntervalSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_ObjectSqlTypeProto)(nil),
		(*RelDataTypeFamilyProto_JavaRecordTypeProto)(nil),
		(*RelDataTypeFamilyProto_DynamicRecordTypeImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[25].OneofWrappers = []interface{}{
		(*RelRecordTypeProto_JavaRecordTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[28].OneofWrappers = []interface{}{
		(*DynamicRecordTypeProto_DynamicRecordTypeImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[31].OneofWrappers = []interface{}{
		(*RelDataTypeFactoryProto_JavaTypeFactoryProto)(nil),
		(*RelDataTypeFactoryProto_RelDataTypeFactoryImplProto)(nil),
		(*RelDataTypeFactoryProto_JavaTypeFactoryImplProto)(nil),
		(*RelDataTypeFactoryProto_SqlTypeFactoryImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[32].OneofWrappers = []interface{}{
		(*JavaTypeFactoryProto_JavaTypeFactoryImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[34].OneofWrappers = []interface{}{
		(*RelDataTypeFactoryImplProto_SqlTypeFactoryImplProto)(nil),
		(*RelDataTypeFactoryImplProto_JavaTypeFactoryImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[35].OneofWrappers = []interface{}{
		(*SqlTypeFactoryImplProto_JavaTypeFactoryImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[36].OneofWrappers = []interface{}{
		(*SqlNodeProto_SqlCallProto)(nil),
		(*SqlNodeProto_SqlIntervalQualifierProto)(nil),
		(*SqlNodeProto_SqlLiteralProto)(nil),
		(*SqlNodeProto_SqlDynamicParamProto)(nil),
		(*SqlNodeProto_SqlIdentifierProto)(nil),
		(*SqlNodeProto_SqlNodeListProto)(nil),
		(*SqlNodeProto_SqlDataTypeSpecProto)(nil),
		(*SqlNodeProto_SqlUpdateProto)(nil),
		(*SqlNodeProto_SqlInsertProto)(nil),
		(*SqlNodeProto_SqlCaseProto)(nil),
		(*SqlNodeProto_SqlDeleteProto)(nil),
		(*SqlNodeProto_SqlCheckConstraintProto)(nil),
		(*SqlNodeProto_SqlPivotProto)(nil),
		(*SqlNodeProto_SqlTableRefProto)(nil),
		(*SqlNodeProto_SqlKeyConstraintProto)(nil),
		(*SqlNodeProto_SqlWithProto)(nil),
		(*SqlNodeProto_SqlSnapshotProto)(nil),
		(*SqlNodeProto_SqlOrderByProto)(nil),
		(*SqlNodeProto_SqlWindowProto)(nil),
		(*SqlNodeProto_SqlSelectProto)(nil),
		(*SqlNodeProto_SqlAttributeDefinitionProto)(nil),
		(*SqlNodeProto_SqlExplainProto)(nil),
		(*SqlNodeProto_SqlWithItemProto)(nil),
		(*SqlNodeProto_SqlUnpivotProto)(nil),
		(*SqlNodeProto_SqlMergeProto)(nil),
		(*SqlNodeProto_SqlHintProto)(nil),
		(*SqlNodeProto_SqlBasicCallProto)(nil),
		(*SqlNodeProto_SqlMatchRecognizeProto)(nil),
		(*SqlNodeProto_SqlAlterProto)(nil),
		(*SqlNodeProto_SqlDdlProto)(nil),
		(*SqlNodeProto_SqlDescribeSchemaProto)(nil),
		(*SqlNodeProto_SqlJoinProto)(nil),
		(*SqlNodeProto_SqlDescribeTableProto)(nil),
		(*SqlNodeProto_SqlColumnDeclarationProto)(nil),
		(*SqlNodeProto_SqlNumericLiteralProto)(nil),
		(*SqlNodeProto_SqlAbstractStringLiteralProto)(nil),
		(*SqlNodeProto_SqlAbstractDateTimeLiteralProto)(nil),
		(*SqlNodeProto_SqlIntervalLiteralProto)(nil),
		(*SqlNodeProto_SqlSetOptionProto)(nil),
		(*SqlNodeProto_SqlDropProto)(nil),
		(*SqlNodeProto_SqlCreateProto)(nil),
		(*SqlNodeProto_SqlBinaryStringLiteralProto)(nil),
		(*SqlNodeProto_SqlCharStringLiteralProto)(nil),
		(*SqlNodeProto_SqlDateLiteralProto)(nil),
		(*SqlNodeProto_SqlTimestampLiteralProto)(nil),
		(*SqlNodeProto_SqlTimeLiteralProto)(nil),
		(*SqlNodeProto_SqlDropSchemaProto)(nil),
		(*SqlNodeProto_SqlDropObjectProto)(nil),
		(*SqlNodeProto_SqlCreateTypeProto)(nil),
		(*SqlNodeProto_SqlCreateTableProto)(nil),
		(*SqlNodeProto_SqlCreateViewProto)(nil),
		(*SqlNodeProto_SqlCreateFunctionProto)(nil),
		(*SqlNodeProto_SqlCreateForeignSchemaProto)(nil),
		(*SqlNodeProto_SqlCreateSchemaProto)(nil),
		(*SqlNodeProto_SqlCreateMaterializedViewProto)(nil),
		(*SqlNodeProto_SqlDropTableProto)(nil),
		(*SqlNodeProto_SqlDropMaterializedViewProto)(nil),
		(*SqlNodeProto_SqlDropViewProto)(nil),
		(*SqlNodeProto_SqlDropFunctionProto)(nil),
		(*SqlNodeProto_SqlDropTypeProto)(nil),
		(*SqlNodeProto_SqlCreateSourceProto)(nil),
		(*SqlNodeProto_SqlCreateMetricsViewProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[37].OneofWrappers = []interface{}{
		(*SqlCallProto_SqlUpdateProto)(nil),
		(*SqlCallProto_SqlInsertProto)(nil),
		(*SqlCallProto_SqlCaseProto)(nil),
		(*SqlCallProto_SqlDeleteProto)(nil),
		(*SqlCallProto_SqlCheckConstraintProto)(nil),
		(*SqlCallProto_SqlPivotProto)(nil),
		(*SqlCallProto_SqlTableRefProto)(nil),
		(*SqlCallProto_SqlKeyConstraintProto)(nil),
		(*SqlCallProto_SqlWithProto)(nil),
		(*SqlCallProto_SqlSnapshotProto)(nil),
		(*SqlCallProto_SqlOrderByProto)(nil),
		(*SqlCallProto_SqlWindowProto)(nil),
		(*SqlCallProto_SqlSelectProto)(nil),
		(*SqlCallProto_SqlAttributeDefinitionProto)(nil),
		(*SqlCallProto_SqlExplainProto)(nil),
		(*SqlCallProto_SqlWithItemProto)(nil),
		(*SqlCallProto_SqlUnpivotProto)(nil),
		(*SqlCallProto_SqlMergeProto)(nil),
		(*SqlCallProto_SqlHintProto)(nil),
		(*SqlCallProto_SqlBasicCallProto)(nil),
		(*SqlCallProto_SqlMatchRecognizeProto)(nil),
		(*SqlCallProto_SqlAlterProto)(nil),
		(*SqlCallProto_SqlDdlProto)(nil),
		(*SqlCallProto_SqlDescribeSchemaProto)(nil),
		(*SqlCallProto_SqlJoinProto)(nil),
		(*SqlCallProto_SqlDescribeTableProto)(nil),
		(*SqlCallProto_SqlColumnDeclarationProto)(nil),
		(*SqlCallProto_SqlSetOptionProto)(nil),
		(*SqlCallProto_SqlDropProto)(nil),
		(*SqlCallProto_SqlCreateProto)(nil),
		(*SqlCallProto_SqlDropSchemaProto)(nil),
		(*SqlCallProto_SqlDropObjectProto)(nil),
		(*SqlCallProto_SqlCreateTypeProto)(nil),
		(*SqlCallProto_SqlCreateTableProto)(nil),
		(*SqlCallProto_SqlCreateViewProto)(nil),
		(*SqlCallProto_SqlCreateFunctionProto)(nil),
		(*SqlCallProto_SqlCreateForeignSchemaProto)(nil),
		(*SqlCallProto_SqlCreateSchemaProto)(nil),
		(*SqlCallProto_SqlCreateMaterializedViewProto)(nil),
		(*SqlCallProto_SqlDropTableProto)(nil),
		(*SqlCallProto_SqlDropMaterializedViewProto)(nil),
		(*SqlCallProto_SqlDropViewProto)(nil),
		(*SqlCallProto_SqlDropFunctionProto)(nil),
		(*SqlCallProto_SqlDropTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[52].OneofWrappers = []interface{}{
		(*SqlLiteralProto_SqlNumericLiteralProto)(nil),
		(*SqlLiteralProto_SqlAbstractStringLiteralProto)(nil),
		(*SqlLiteralProto_SqlAbstractDateTimeLiteralProto)(nil),
		(*SqlLiteralProto_SqlIntervalLiteralProto)(nil),
		(*SqlLiteralProto_SqlBinaryStringLiteralProto)(nil),
		(*SqlLiteralProto_SqlCharStringLiteralProto)(nil),
		(*SqlLiteralProto_SqlDateLiteralProto)(nil),
		(*SqlLiteralProto_SqlTimestampLiteralProto)(nil),
		(*SqlLiteralProto_SqlTimeLiteralProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[54].OneofWrappers = []interface{}{
		(*SqlAbstractStringLiteralProto_SqlBinaryStringLiteralProto)(nil),
		(*SqlAbstractStringLiteralProto_SqlCharStringLiteralProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[57].OneofWrappers = []interface{}{
		(*SqlAbstractDateTimeLiteralProto_SqlDateLiteralProto)(nil),
		(*SqlAbstractDateTimeLiteralProto_SqlTimestampLiteralProto)(nil),
		(*SqlAbstractDateTimeLiteralProto_SqlTimeLiteralProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[64].OneofWrappers = []interface{}{
		(*SqlTypeNameSpecProto_SqlUserDefinedTypeNameSpecProto)(nil),
		(*SqlTypeNameSpecProto_SqlRowTypeNameSpecProto)(nil),
		(*SqlTypeNameSpecProto_SqlBasicTypeNameSpecProto)(nil),
		(*SqlTypeNameSpecProto_SqlCollectionTypeNameSpecProto)(nil),
		(*SqlTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[67].OneofWrappers = []interface{}{
		(*SqlBasicTypeNameSpecProto_SqlAlienSystemTypeNameSpecProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[77].OneofWrappers = []interface{}{
		(*SqlOperatorProto_SqlPrefixOperatorProto)(nil),
		(*SqlOperatorProto_SqlDescriptorOperatorProto)(nil),
		(*SqlOperatorProto_SqlPostfixOperatorProto)(nil),
		(*SqlOperatorProto_SqlFunctionProto)(nil),
		(*SqlOperatorProto_SqlCaseOperatorProto)(nil),
		(*SqlOperatorProto_SqlBinaryOperatorProto)(nil),
		(*SqlOperatorProto_SqlSelectOperatorProto)(nil),
		(*SqlOperatorProto_SqlSpecialOperatorProto)(nil),
		(*SqlOperatorProto_SqlNewOperatorProto)(nil),
		(*SqlOperatorProto_SqlProcedureCallOperatorProto)(nil),
		(*SqlOperatorProto_SqlJsonValueExpressionOperatorProto)(nil),
		(*SqlOperatorProto_SqlUnresolvedFunctionProto)(nil),
		(*SqlOperatorProto_SqlJdbcFunctionCallProto)(nil),
		(*SqlOperatorProto_SqlUserDefinedTableMacroProto)(nil),
		(*SqlOperatorProto_SqlUserDefinedFunctionProto)(nil),
		(*SqlOperatorProto_SqlExtractFunctionProto)(nil),
		(*SqlOperatorProto_SqlTranslate3FunctionProto)(nil),
		(*SqlOperatorProto_SqlTrimFunctionProto)(nil),
		(*SqlOperatorProto_SqlSubstringFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonDepthFunctionProto)(nil),
		(*SqlOperatorProto_SqlAbstractTimeFunctionProto)(nil),
		(*SqlOperatorProto_SqlRandFunctionProto)(nil),
		(*SqlOperatorProto_SqlCoalesceFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonTypeFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonValueFunctionProto)(nil),
		(*SqlOperatorProto_SqlDatePartFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonObjectFunctionProto)(nil),
		(*SqlOperatorProto_SqlNullifFunctionProto)(nil),
		(*SqlOperatorProto_SqlTimestampAddFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonPrettyFunctionProto)(nil),
		(*SqlOperatorProto_SqlBaseContextVariableProto)(nil),
		(*SqlOperatorProto_SqlConvertFunctionProto)(nil),
		(*SqlOperatorProto_SqlGroupedWindowFunctionProto)(nil),
		(*SqlOperatorProto_SqlTypeConstructorFunctionProto)(nil),
		(*SqlOperatorProto_SqlTimestampDiffFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonKeysFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonLengthFunctionProto)(nil),
		(*SqlOperatorProto_SqlCastFunctionProto)(nil),
		(*SqlOperatorProto_SqlPositionFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonRemoveFunctionProto)(nil),
		(*SqlOperatorProto_SqlMatchFunctionProto)(nil),
		(*SqlOperatorProto_SqlOverlayFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonArrayFunctionProto)(nil),
		(*SqlOperatorProto_SqlRandIntegerFunctionProto)(nil),
		(*SqlOperatorProto_SqlCurrentDateFunctionProto)(nil),
		(*SqlOperatorProto_SqlAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlWindowTableFunctionProto)(nil),
		(*SqlOperatorProto_SqlRegexpReplaceFunctionProto)(nil),
		(*SqlOperatorProto_SqlMonotonicUnaryFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonStorageSizeFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonQueryFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonExistsFunctionProto)(nil),
		(*SqlOperatorProto_SqlSetOperatorProto)(nil),
		(*SqlOperatorProto_SqlOverlapsOperatorProto)(nil),
		(*SqlOperatorProto_SqlCastOperatorProto)(nil),
		(*SqlOperatorProto_SqlMonotonicBinaryOperatorProto)(nil),
		(*SqlOperatorProto_SqlMultisetMemberOfOperatorProto)(nil),
		(*SqlOperatorProto_SqlMultisetSetOperatorProto)(nil),
		(*SqlOperatorProto_SqlWithinGroupOperatorProto)(nil),
		(*SqlOperatorProto_SqlFilterOperatorProto)(nil),
		(*SqlOperatorProto_SqlOverOperatorProto)(nil),
		(*SqlOperatorProto_SqlInOperatorProto)(nil),
		(*SqlOperatorProto_SqlPosixRegexOperatorProto)(nil),
		(*SqlOperatorProto_SqlWithinDistinctOperatorProto)(nil),
		(*SqlOperatorProto_SqlLateralOperatorProto)(nil),
		(*SqlOperatorProto_SqlMultisetValueConstructorProto)(nil),
		(*SqlOperatorProto_SqlDefaultOperatorProto)(nil),
		(*SqlOperatorProto_SqlLiteralChainOperatorProto)(nil),
		(*SqlOperatorProto_SqlDatetimePlusOperatorProto)(nil),
		(*SqlOperatorProto_SqlSequenceValueOperatorProto)(nil),
		(*SqlOperatorProto_SqlFunctionalOperatorProto)(nil),
		(*SqlOperatorProto_SqlLikeOperatorProto)(nil),
		(*SqlOperatorProto_SqlInternalOperatorProto)(nil),
		(*SqlOperatorProto_SqlDotOperatorProto)(nil),
		(*SqlOperatorProto_SqlThrowOperatorProto)(nil),
		(*SqlOperatorProto_SqlItemOperatorProto)(nil),
		(*SqlOperatorProto_SqlInfixOperatorProto)(nil),
		(*SqlOperatorProto_SqlAsOperatorProto)(nil),
		(*SqlOperatorProto_SqlValuesOperatorProto)(nil),
		(*SqlOperatorProto_SqlColumnListConstructorProto)(nil),
		(*SqlOperatorProto_SqlMultisetQueryConstructorProto)(nil),
		(*SqlOperatorProto_SqlCursorConstructorProto)(nil),
		(*SqlOperatorProto_SqlRowOperatorProto)(nil),
		(*SqlOperatorProto_SqlDatetimeSubtractionOperatorProto)(nil),
		(*SqlOperatorProto_SqlNullTreatmentOperatorProto)(nil),
		(*SqlOperatorProto_SqlUserDefinedTableFunctionProto)(nil),
		(*SqlOperatorProto_SqlStringContextVariableProto)(nil),
		(*SqlOperatorProto_SqlUserDefinedAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlCovarAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonArrayAggAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlSumAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlMinMaxAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlCountAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlAnyValueAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlAvgAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlNthValueAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlBasicAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlSingleValueAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlSumEmptyIsZeroAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlListaggAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlNtileAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlJsonObjectAggAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlFirstLastValueAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlAbstractGroupFunctionProto)(nil),
		(*SqlOperatorProto_SqlHistogramAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlRankFunctionProto)(nil),
		(*SqlOperatorProto_SqlLeadLagAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlBitOpAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlTumbleTableFunctionProto)(nil),
		(*SqlOperatorProto_SqlSessionTableFunctionProto)(nil),
		(*SqlOperatorProto_SqlHopTableFunctionProto)(nil),
		(*SqlOperatorProto_SqlFloorFunctionProto)(nil),
		(*SqlOperatorProto_SqlQuantifyOperatorProto)(nil),
		(*SqlOperatorProto_SqlArrayValueConstructorProto)(nil),
		(*SqlOperatorProto_SqlMapValueConstructorProto)(nil),
		(*SqlOperatorProto_SqlCollectionTableOperatorProto)(nil),
		(*SqlOperatorProto_SqlUnnestOperatorProto)(nil),
		(*SqlOperatorProto_SqlExtendOperatorProto)(nil),
		(*SqlOperatorProto_SqlRollupOperatorProto)(nil),
		(*SqlOperatorProto_SqlIntervalOperatorProto)(nil),
		(*SqlOperatorProto_SqlSearchOperatorProto)(nil),
		(*SqlOperatorProto_SqlBetweenOperatorProto)(nil),
		(*SqlOperatorProto_SqlArgumentAssignmentOperatorProto)(nil),
		(*SqlOperatorProto_SqlArrayQueryConstructorProto)(nil),
		(*SqlOperatorProto_SqlMapQueryConstructorProto)(nil),
		(*SqlOperatorProto_SqlRegrCountAggFunctionProto)(nil),
		(*SqlOperatorProto_SqlGroupIdFunctionProto)(nil),
		(*SqlOperatorProto_SqlGroupingIdFunctionProto)(nil),
		(*SqlOperatorProto_SqlGroupingFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[78].OneofWrappers = []interface{}{
		(*SqlPrefixOperatorProto_SqlNewOperatorProto)(nil),
		(*SqlPrefixOperatorProto_SqlProcedureCallOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[80].OneofWrappers = []interface{}{
		(*SqlReturnTypeInferenceProto_SqlReturnTypeInferenceChainProto)(nil),
		(*SqlReturnTypeInferenceProto_OrdinalReturnTypeInferenceProto)(nil),
		(*SqlReturnTypeInferenceProto_ExplicitReturnTypeInferenceProto)(nil),
		(*SqlReturnTypeInferenceProto_CursorReturnTypeInferenceProto)(nil),
		(*SqlReturnTypeInferenceProto_SqlTypeTransformCascadeProto)(nil),
		(*SqlReturnTypeInferenceProto_MatchReturnTypeInferenceProto)(nil),
		(*SqlReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[83].OneofWrappers = []interface{}{
		(*ExplicitReturnTypeInferenceProto_TableFunctionReturnTypeInferenceProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[91].OneofWrappers = []interface{}{
		(*SqlOperandTypeInferenceProto_ExplicitOperandTypeInferenceProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[93].OneofWrappers = []interface{}{
		(*SqlOperandTypeCheckerProto_SqlOperandMetadataProto)(nil),
		(*SqlOperandTypeCheckerProto_SetopOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_ExplicitOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_SqlSingleOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_AssignableOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_MultisetOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_CompositeOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_OperandMetadataImplProto)(nil),
		(*SqlOperandTypeCheckerProto_LiteralOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_SameOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_FamilyOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto)(nil),
		(*SqlOperandTypeCheckerProto_ComparableOperandTypeCheckerProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[94].OneofWrappers = []interface{}{
		(*SqlOperandMetadataProto_OperandMetadataImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[101].OneofWrappers = []interface{}{
		(*SqlSingleOperandTypeCheckerProto_LiteralOperandTypeCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_SameOperandTypeCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_FamilyOperandTypeCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_ComparableOperandTypeCheckerProto)(nil),
		(*SqlSingleOperandTypeCheckerProto_OperandMetadataImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[103].OneofWrappers = []interface{}{
		(*SameOperandTypeCheckerProto_SameOperandTypeExceptLastOperandCheckerProto)(nil),
		(*SameOperandTypeCheckerProto_ComparableOperandTypeCheckerProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[106].OneofWrappers = []interface{}{
		(*FamilyOperandTypeCheckerProto_OperandMetadataImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[111].OneofWrappers = []interface{}{
		(*CompositeOperandTypeCheckerProto_CompositeSingleOperandTypeCheckerProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[114].OneofWrappers = []interface{}{
		(*SqlPostfixOperatorProto_SqlJsonValueExpressionOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[116].OneofWrappers = []interface{}{
		(*SqlFunctionProto_SqlUnresolvedFunctionProto)(nil),
		(*SqlFunctionProto_SqlJdbcFunctionCallProto)(nil),
		(*SqlFunctionProto_SqlUserDefinedTableMacroProto)(nil),
		(*SqlFunctionProto_SqlUserDefinedFunctionProto)(nil),
		(*SqlFunctionProto_SqlExtractFunctionProto)(nil),
		(*SqlFunctionProto_SqlTranslate3FunctionProto)(nil),
		(*SqlFunctionProto_SqlTrimFunctionProto)(nil),
		(*SqlFunctionProto_SqlSubstringFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonDepthFunctionProto)(nil),
		(*SqlFunctionProto_SqlAbstractTimeFunctionProto)(nil),
		(*SqlFunctionProto_SqlRandFunctionProto)(nil),
		(*SqlFunctionProto_SqlCoalesceFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonTypeFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonValueFunctionProto)(nil),
		(*SqlFunctionProto_SqlDatePartFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonObjectFunctionProto)(nil),
		(*SqlFunctionProto_SqlNullifFunctionProto)(nil),
		(*SqlFunctionProto_SqlTimestampAddFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonPrettyFunctionProto)(nil),
		(*SqlFunctionProto_SqlBaseContextVariableProto)(nil),
		(*SqlFunctionProto_SqlConvertFunctionProto)(nil),
		(*SqlFunctionProto_SqlGroupedWindowFunctionProto)(nil),
		(*SqlFunctionProto_SqlTypeConstructorFunctionProto)(nil),
		(*SqlFunctionProto_SqlTimestampDiffFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonKeysFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonLengthFunctionProto)(nil),
		(*SqlFunctionProto_SqlCastFunctionProto)(nil),
		(*SqlFunctionProto_SqlPositionFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonRemoveFunctionProto)(nil),
		(*SqlFunctionProto_SqlMatchFunctionProto)(nil),
		(*SqlFunctionProto_SqlOverlayFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonArrayFunctionProto)(nil),
		(*SqlFunctionProto_SqlRandIntegerFunctionProto)(nil),
		(*SqlFunctionProto_SqlCurrentDateFunctionProto)(nil),
		(*SqlFunctionProto_SqlAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlWindowTableFunctionProto)(nil),
		(*SqlFunctionProto_SqlRegexpReplaceFunctionProto)(nil),
		(*SqlFunctionProto_SqlMonotonicUnaryFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonStorageSizeFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonQueryFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonExistsFunctionProto)(nil),
		(*SqlFunctionProto_SqlUserDefinedTableFunctionProto)(nil),
		(*SqlFunctionProto_SqlStringContextVariableProto)(nil),
		(*SqlFunctionProto_SqlUserDefinedAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlCovarAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonArrayAggAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlSumAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlMinMaxAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlCountAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlAnyValueAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlAvgAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlNthValueAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlBasicAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlSingleValueAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlSumEmptyIsZeroAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlListaggAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlNtileAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlJsonObjectAggAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlFirstLastValueAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlAbstractGroupFunctionProto)(nil),
		(*SqlFunctionProto_SqlHistogramAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlRankFunctionProto)(nil),
		(*SqlFunctionProto_SqlLeadLagAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlBitOpAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlTumbleTableFunctionProto)(nil),
		(*SqlFunctionProto_SqlSessionTableFunctionProto)(nil),
		(*SqlFunctionProto_SqlHopTableFunctionProto)(nil),
		(*SqlFunctionProto_SqlFloorFunctionProto)(nil),
		(*SqlFunctionProto_SqlRegrCountAggFunctionProto)(nil),
		(*SqlFunctionProto_SqlGroupIdFunctionProto)(nil),
		(*SqlFunctionProto_SqlGroupingIdFunctionProto)(nil),
		(*SqlFunctionProto_SqlGroupingFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[120].OneofWrappers = []interface{}{
		(*TableMacroProto_TableMacroImplProto)(nil),
		(*TableMacroProto_ViewTableMacroProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[125].OneofWrappers = []interface{}{
		(*CalciteSchemaProto_SimpleCalciteSchemaProto)(nil),
		(*CalciteSchemaProto_CachingCalciteSchemaProto)(nil),
		(*CalciteSchemaProto_CalciteRootSchemaProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[127].OneofWrappers = []interface{}{
		(*SchemaProto_SchemaPlusProto)(nil),
		(*SchemaProto_DelegatingSchemaProto)(nil),
		(*SchemaProto_AbstractSchemaProto)(nil),
		(*SchemaProto_SemiMutableSchemaProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[135].OneofWrappers = []interface{}{
		(*CachingCalciteSchemaProto_CalciteRootSchemaProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[137].OneofWrappers = []interface{}{
		(*SqlUserDefinedFunctionProto_SqlUserDefinedTableFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[139].OneofWrappers = []interface{}{
		(*OrgApacheCalciteSchema_FunctionProto_TableFunctionProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ReflectiveFunctionBaseProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ImplementableFunctionProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_TableMacroProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_TableFunctionImplProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_TableMacroImplProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ScalarFunctionImplProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ViewTableMacroProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_ImplementableAggFunctionProto)(nil),
		(*OrgApacheCalciteSchema_FunctionProto_AggregateFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[140].OneofWrappers = []interface{}{
		(*TableFunctionProto_TableFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[143].OneofWrappers = []interface{}{
		(*ReflectiveFunctionBaseProto_TableFunctionImplProto)(nil),
		(*ReflectiveFunctionBaseProto_TableMacroImplProto)(nil),
		(*ReflectiveFunctionBaseProto_ScalarFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[145].OneofWrappers = []interface{}{
		(*ImplementableFunctionProto_TableFunctionImplProto)(nil),
		(*ImplementableFunctionProto_ScalarFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[146].OneofWrappers = []interface{}{
		(*ScalarFunctionProto_ScalarFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[147].OneofWrappers = []interface{}{
		(*AggregateFunctionProto_ImplementableAggFunctionProto)(nil),
		(*AggregateFunctionProto_AggregateFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[148].OneofWrappers = []interface{}{
		(*ImplementableAggFunctionProto_AggregateFunctionImplProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[165].OneofWrappers = []interface{}{
		(*SqlBaseContextVariableProto_SqlStringContextVariableProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[174].OneofWrappers = []interface{}{
		(*SetMultimapProto_AbstractSetMultimapProto)(nil),
		(*SetMultimapProto_SortedSetMultimapProto)(nil),
		(*SetMultimapProto_ForwardingSetMultimapProto)(nil),
		(*SetMultimapProto_FilteredSetMultimapProto)(nil),
		(*SetMultimapProto_ImmutableSetMultimapProto)(nil),
		(*SetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto)(nil),
		(*SetMultimapProto_HashMultimapGwtSerializationDependenciesProto)(nil),
		(*SetMultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*SetMultimapProto_ForwardingSortedSetMultimapProto)(nil),
		(*SetMultimapProto_FilteredEntrySetMultimapProto)(nil),
		(*SetMultimapProto_FilteredKeySetMultimapProto)(nil),
		(*SetMultimapProto_EmptyImmutableSetMultimapProto)(nil),
		(*SetMultimapProto_LinkedHashMultimapProto)(nil),
		(*SetMultimapProto_HashMultimapProto)(nil),
		(*SetMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*SetMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[175].OneofWrappers = []interface{}{
		(*AbstractSetMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractSetMultimapProto_HashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractSetMultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*AbstractSetMultimapProto_LinkedHashMultimapProto)(nil),
		(*AbstractSetMultimapProto_HashMultimapProto)(nil),
		(*AbstractSetMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*AbstractSetMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[176].OneofWrappers = []interface{}{
		(*LinkedHashMultimapGwtSerializationDependenciesProto_LinkedHashMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[178].OneofWrappers = []interface{}{
		(*HashMultimapGwtSerializationDependenciesProto_HashMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[180].OneofWrappers = []interface{}{
		(*AbstractSortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*AbstractSortedSetMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[181].OneofWrappers = []interface{}{
		(*AbstractSortedKeySortedSetMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[183].OneofWrappers = []interface{}{
		(*SortedSetMultimapProto_ForwardingSortedSetMultimapProto)(nil),
		(*SortedSetMultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*SortedSetMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*SortedSetMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[185].OneofWrappers = []interface{}{
		(*ForwardingSetMultimapProto_ForwardingSortedSetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[186].OneofWrappers = []interface{}{
		(*FilteredSetMultimapProto_FilteredEntrySetMultimapProto)(nil),
		(*FilteredSetMultimapProto_FilteredKeySetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[188].OneofWrappers = []interface{}{
		(*MultimapProto_ForwardingMultimapProto)(nil),
		(*MultimapProto_ListMultimapProto)(nil),
		(*MultimapProto_AbstractMultimapProto)(nil),
		(*MultimapProto_FilteredMultimapProto)(nil),
		(*MultimapProto_SetMultimapProto)(nil),
		(*MultimapProto_ForwardingListMultimapProto)(nil),
		(*MultimapProto_ForwardingSetMultimapProto)(nil),
		(*MultimapProto_LinkedListMultimapProto)(nil),
		(*MultimapProto_AbstractListMultimapProto)(nil),
		(*MultimapProto_FilteredKeyListMultimapProto)(nil),
		(*MultimapProto_ImmutableListMultimapProto)(nil),
		(*MultimapProto_AbstractMapBasedMultimapProto)(nil),
		(*MultimapProto_FilteredEntryMultimapProto)(nil),
		(*MultimapProto_BaseImmutableMultimapProto)(nil),
		(*MultimapProto_FilteredKeyMultimapProto)(nil),
		(*MultimapProto_FilteredSetMultimapProto)(nil),
		(*MultimapProto_AbstractSetMultimapProto)(nil),
		(*MultimapProto_SortedSetMultimapProto)(nil),
		(*MultimapProto_ImmutableSetMultimapProto)(nil),
		(*MultimapProto_ForwardingSortedSetMultimapProto)(nil),
		(*MultimapProto_ArrayListMultimapGwtSerializationDependenciesProto)(nil),
		(*MultimapProto_EmptyImmutableListMultimapProto)(nil),
		(*MultimapProto_FilteredEntrySetMultimapProto)(nil),
		(*MultimapProto_ImmutableMultimapProto)(nil),
		(*MultimapProto_FilteredKeySetMultimapProto)(nil),
		(*MultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto)(nil),
		(*MultimapProto_HashMultimapGwtSerializationDependenciesProto)(nil),
		(*MultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*MultimapProto_EmptyImmutableSetMultimapProto)(nil),
		(*MultimapProto_ArrayListMultimapProto)(nil),
		(*MultimapProto_LinkedHashMultimapProto)(nil),
		(*MultimapProto_HashMultimapProto)(nil),
		(*MultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*MultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[189].OneofWrappers = []interface{}{
		(*ForwardingMultimapProto_ForwardingListMultimapProto)(nil),
		(*ForwardingMultimapProto_ForwardingSetMultimapProto)(nil),
		(*ForwardingMultimapProto_ForwardingSortedSetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[191].OneofWrappers = []interface{}{
		(*ListMultimapProto_LinkedListMultimapProto)(nil),
		(*ListMultimapProto_AbstractListMultimapProto)(nil),
		(*ListMultimapProto_FilteredKeyListMultimapProto)(nil),
		(*ListMultimapProto_ForwardingListMultimapProto)(nil),
		(*ListMultimapProto_ImmutableListMultimapProto)(nil),
		(*ListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto)(nil),
		(*ListMultimapProto_EmptyImmutableListMultimapProto)(nil),
		(*ListMultimapProto_ArrayListMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[193].OneofWrappers = []interface{}{
		(*AbstractListMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractListMultimapProto_ArrayListMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[194].OneofWrappers = []interface{}{
		(*ArrayListMultimapGwtSerializationDependenciesProto_ArrayListMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[197].OneofWrappers = []interface{}{
		(*ComGoogleCommonBase_PredicateProto_ObjectPredicateProto)(nil),
		(*ComGoogleCommonBase_PredicateProto_CharMatcherProto)(nil),
		(*ComGoogleCommonBase_PredicateProto_SmallCharMatcherProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[198].OneofWrappers = []interface{}{
		(*CharMatcherProto_SmallCharMatcherProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[200].OneofWrappers = []interface{}{
		(*ImmutableListMultimapProto_EmptyImmutableListMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[202].OneofWrappers = []interface{}{
		(*AbstractMultimapProto_LinkedListMultimapProto)(nil),
		(*AbstractMultimapProto_AbstractMapBasedMultimapProto)(nil),
		(*AbstractMultimapProto_FilteredEntryMultimapProto)(nil),
		(*AbstractMultimapProto_BaseImmutableMultimapProto)(nil),
		(*AbstractMultimapProto_FilteredKeyMultimapProto)(nil),
		(*AbstractMultimapProto_AbstractListMultimapProto)(nil),
		(*AbstractMultimapProto_AbstractSetMultimapProto)(nil),
		(*AbstractMultimapProto_FilteredEntrySetMultimapProto)(nil),
		(*AbstractMultimapProto_ImmutableMultimapProto)(nil),
		(*AbstractMultimapProto_FilteredKeyListMultimapProto)(nil),
		(*AbstractMultimapProto_FilteredKeySetMultimapProto)(nil),
		(*AbstractMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMultimapProto_HashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*AbstractMultimapProto_ImmutableListMultimapProto)(nil),
		(*AbstractMultimapProto_ImmutableSetMultimapProto)(nil),
		(*AbstractMultimapProto_ArrayListMultimapProto)(nil),
		(*AbstractMultimapProto_LinkedHashMultimapProto)(nil),
		(*AbstractMultimapProto_HashMultimapProto)(nil),
		(*AbstractMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*AbstractMultimapProto_EmptyImmutableListMultimapProto)(nil),
		(*AbstractMultimapProto_EmptyImmutableSetMultimapProto)(nil),
		(*AbstractMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[203].OneofWrappers = []interface{}{
		(*AbstractMapBasedMultimapProto_AbstractListMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_AbstractSetMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_ArrayListMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMapBasedMultimapProto_LinkedHashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMapBasedMultimapProto_HashMultimapGwtSerializationDependenciesProto)(nil),
		(*AbstractMapBasedMultimapProto_AbstractSortedSetMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_ArrayListMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_LinkedHashMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_HashMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_AbstractSortedKeySortedSetMultimapProto)(nil),
		(*AbstractMapBasedMultimapProto_TreeMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[204].OneofWrappers = []interface{}{
		(*FilteredEntryMultimapProto_FilteredEntrySetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[205].OneofWrappers = []interface{}{
		(*BaseImmutableMultimapProto_ImmutableMultimapProto)(nil),
		(*BaseImmutableMultimapProto_ImmutableListMultimapProto)(nil),
		(*BaseImmutableMultimapProto_ImmutableSetMultimapProto)(nil),
		(*BaseImmutableMultimapProto_EmptyImmutableListMultimapProto)(nil),
		(*BaseImmutableMultimapProto_EmptyImmutableSetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[206].OneofWrappers = []interface{}{
		(*ImmutableMultimapProto_ImmutableListMultimapProto)(nil),
		(*ImmutableMultimapProto_ImmutableSetMultimapProto)(nil),
		(*ImmutableMultimapProto_EmptyImmutableListMultimapProto)(nil),
		(*ImmutableMultimapProto_EmptyImmutableSetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[207].OneofWrappers = []interface{}{
		(*ImmutableSetMultimapProto_EmptyImmutableSetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[209].OneofWrappers = []interface{}{
		(*FilteredKeyMultimapProto_FilteredKeyListMultimapProto)(nil),
		(*FilteredKeyMultimapProto_FilteredKeySetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[211].OneofWrappers = []interface{}{
		(*FilteredMultimapProto_FilteredEntryMultimapProto)(nil),
		(*FilteredMultimapProto_FilteredKeyMultimapProto)(nil),
		(*FilteredMultimapProto_FilteredSetMultimapProto)(nil),
		(*FilteredMultimapProto_FilteredEntrySetMultimapProto)(nil),
		(*FilteredMultimapProto_FilteredKeyListMultimapProto)(nil),
		(*FilteredMultimapProto_FilteredKeySetMultimapProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[219].OneofWrappers = []interface{}{
		(*SqlAggFunctionProto_SqlUserDefinedAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlCovarAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlJsonArrayAggAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlSumAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlMinMaxAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlCountAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlAnyValueAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlAvgAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlNthValueAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlBasicAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlSingleValueAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlSumEmptyIsZeroAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlListaggAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlNtileAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlJsonObjectAggAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlFirstLastValueAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlAbstractGroupFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlHistogramAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlRankFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlLeadLagAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlBitOpAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlRegrCountAggFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlGroupIdFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlGroupingIdFunctionProto)(nil),
		(*SqlAggFunctionProto_SqlGroupingFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[225].OneofWrappers = []interface{}{
		(*SqlCountAggFunctionProto_SqlRegrCountAggFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[237].OneofWrappers = []interface{}{
		(*SqlAbstractGroupFunctionProto_SqlGroupIdFunctionProto)(nil),
		(*SqlAbstractGroupFunctionProto_SqlGroupingIdFunctionProto)(nil),
		(*SqlAbstractGroupFunctionProto_SqlGroupingFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[245].OneofWrappers = []interface{}{
		(*SqlWindowTableFunctionProto_SqlTumbleTableFunctionProto)(nil),
		(*SqlWindowTableFunctionProto_SqlSessionTableFunctionProto)(nil),
		(*SqlWindowTableFunctionProto_SqlHopTableFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[250].OneofWrappers = []interface{}{
		(*SqlMonotonicUnaryFunctionProto_SqlFloorFunctionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[256].OneofWrappers = []interface{}{
		(*SqlBinaryOperatorProto_SqlSetOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlOverlapsOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlCastOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlMonotonicBinaryOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlMultisetMemberOfOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlMultisetSetOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlWithinGroupOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlFilterOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlOverOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlInOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlPosixRegexOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlWithinDistinctOperatorProto)(nil),
		(*SqlBinaryOperatorProto_SqlQuantifyOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[266].OneofWrappers = []interface{}{
		(*SqlInOperatorProto_SqlQuantifyOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[271].OneofWrappers = []interface{}{
		(*SqlSpecialOperatorProto_SqlLateralOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlMultisetValueConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlDefaultOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlLiteralChainOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlDatetimePlusOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlSequenceValueOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlFunctionalOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlLikeOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlInternalOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlDotOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlThrowOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlItemOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlInfixOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlAsOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlValuesOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlColumnListConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlMultisetQueryConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlCursorConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlRowOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlDatetimeSubtractionOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlNullTreatmentOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlArrayValueConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlMapValueConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlCollectionTableOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlUnnestOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlExtendOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlRollupOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlIntervalOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlSearchOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlBetweenOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlArgumentAssignmentOperatorProto)(nil),
		(*SqlSpecialOperatorProto_SqlArrayQueryConstructorProto)(nil),
		(*SqlSpecialOperatorProto_SqlMapQueryConstructorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[273].OneofWrappers = []interface{}{
		(*SqlMultisetValueConstructorProto_SqlArrayValueConstructorProto)(nil),
		(*SqlMultisetValueConstructorProto_SqlMapValueConstructorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[280].OneofWrappers = []interface{}{
		(*SqlFunctionalOperatorProto_SqlCollectionTableOperatorProto)(nil),
		(*SqlFunctionalOperatorProto_SqlUnnestOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[284].OneofWrappers = []interface{}{
		(*SqlInternalOperatorProto_SqlExtendOperatorProto)(nil),
		(*SqlInternalOperatorProto_SqlRollupOperatorProto)(nil),
		(*SqlInternalOperatorProto_SqlIntervalOperatorProto)(nil),
		(*SqlInternalOperatorProto_SqlSearchOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[292].OneofWrappers = []interface{}{
		(*SqlInfixOperatorProto_SqlBetweenOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[294].OneofWrappers = []interface{}{
		(*SqlAsOperatorProto_SqlArgumentAssignmentOperatorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[298].OneofWrappers = []interface{}{
		(*SqlMultisetQueryConstructorProto_SqlArrayQueryConstructorProto)(nil),
		(*SqlMultisetQueryConstructorProto_SqlMapQueryConstructorProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[306].OneofWrappers = []interface{}{
		(*SqlAlterProto_SqlSetOptionProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[308].OneofWrappers = []interface{}{
		(*SqlDdlProto_SqlDropProto)(nil),
		(*SqlDdlProto_SqlCreateProto)(nil),
		(*SqlDdlProto_SqlDropSchemaProto)(nil),
		(*SqlDdlProto_SqlDropObjectProto)(nil),
		(*SqlDdlProto_SqlCreateTypeProto)(nil),
		(*SqlDdlProto_SqlCreateTableProto)(nil),
		(*SqlDdlProto_SqlCreateViewProto)(nil),
		(*SqlDdlProto_SqlCreateFunctionProto)(nil),
		(*SqlDdlProto_SqlCreateForeignSchemaProto)(nil),
		(*SqlDdlProto_SqlCreateSchemaProto)(nil),
		(*SqlDdlProto_SqlCreateMaterializedViewProto)(nil),
		(*SqlDdlProto_SqlDropTableProto)(nil),
		(*SqlDdlProto_SqlDropMaterializedViewProto)(nil),
		(*SqlDdlProto_SqlDropViewProto)(nil),
		(*SqlDdlProto_SqlDropFunctionProto)(nil),
		(*SqlDdlProto_SqlDropTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[309].OneofWrappers = []interface{}{
		(*SqlDropProto_SqlDropSchemaProto)(nil),
		(*SqlDropProto_SqlDropObjectProto)(nil),
		(*SqlDropProto_SqlDropTableProto)(nil),
		(*SqlDropProto_SqlDropMaterializedViewProto)(nil),
		(*SqlDropProto_SqlDropViewProto)(nil),
		(*SqlDropProto_SqlDropFunctionProto)(nil),
		(*SqlDropProto_SqlDropTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[311].OneofWrappers = []interface{}{
		(*SqlDropObjectProto_SqlDropTableProto)(nil),
		(*SqlDropObjectProto_SqlDropMaterializedViewProto)(nil),
		(*SqlDropObjectProto_SqlDropViewProto)(nil),
		(*SqlDropObjectProto_SqlDropFunctionProto)(nil),
		(*SqlDropObjectProto_SqlDropTypeProto)(nil),
	}
	file_sql_src_main_proto_ast_proto_msgTypes[317].OneofWrappers = []interface{}{
		(*SqlCreateProto_SqlCreateTypeProto)(nil),
		(*SqlCreateProto_SqlCreateTableProto)(nil),
		(*SqlCreateProto_SqlCreateViewProto)(nil),
		(*SqlCreateProto_SqlCreateFunctionProto)(nil),
		(*SqlCreateProto_SqlCreateForeignSchemaProto)(nil),
		(*SqlCreateProto_SqlCreateSchemaProto)(nil),
		(*SqlCreateProto_SqlCreateMaterializedViewProto)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_sql_src_main_proto_ast_proto_rawDesc,
			NumEnums:      19,
			NumMessages:   337,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_sql_src_main_proto_ast_proto_goTypes,
		DependencyIndexes: file_sql_src_main_proto_ast_proto_depIdxs,
		EnumInfos:         file_sql_src_main_proto_ast_proto_enumTypes,
		MessageInfos:      file_sql_src_main_proto_ast_proto_msgTypes,
	}.Build()
	File_sql_src_main_proto_ast_proto = out.File
	file_sql_src_main_proto_ast_proto_rawDesc = nil
	file_sql_src_main_proto_ast_proto_goTypes = nil
	file_sql_src_main_proto_ast_proto_depIdxs = nil
}
