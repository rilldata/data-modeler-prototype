/**
 * Generated by orval v6.10.1 🍺
 * Do not edit manually.
 * rill/runtime/v1/schema.proto
 * OpenAPI spec version: version not set
 */
import { useQuery, useMutation } from "@sveltestack/svelte-query";
import type {
  UseQueryOptions,
  UseMutationOptions,
  QueryFunction,
  MutationFunction,
  UseQueryStoreResult,
  QueryKey,
} from "@sveltestack/svelte-query";
import type {
  V1MetricsViewTimeSeriesResponse,
  RpcStatus,
  QueryServiceMetricsViewTimeSeriesBody,
  V1MetricsViewToplistResponse,
  QueryServiceMetricsViewToplistBody,
  V1MetricsViewTotalsResponse,
  QueryServiceMetricsViewTotalsBody,
  V1GetCardinalityOfColumnResponse,
  QueryServiceGetCardinalityOfColumnParams,
  V1ProfileColumnsResponse,
  QueryServiceProfileColumnsParams,
  V1GetDescriptiveStatisticsResponse,
  QueryServiceGetDescriptiveStatisticsParams,
  V1GetNullCountResponse,
  QueryServiceGetNullCountParams,
  V1GetNumericHistogramResponse,
  QueryServiceGetNumericHistogramParams,
  V1EstimateRollupIntervalResponse,
  QueryServiceEstimateRollupIntervalBody,
  V1GetTableRowsResponse,
  QueryServiceGetTableRowsParams,
  V1GetRugHistogramResponse,
  QueryServiceGetRugHistogramParams,
  V1EstimateSmallestTimeGrainResponse,
  QueryServiceEstimateSmallestTimeGrainParams,
  V1GetTableCardinalityResponse,
  QueryServiceGetTableCardinalityParams,
  V1GetTimeRangeSummaryResponse,
  QueryServiceGetTimeRangeSummaryParams,
  V1GenerateTimeSeriesResponse,
  QueryServiceGenerateTimeSeriesBody,
  V1GetTopKResponse,
  QueryServiceGetTopKBody,
  V1QueryResponse,
  QueryServiceQueryBody,
} from "../index.schemas";
import { httpClient } from "../../http-client";

/**
 * @summary MetricsViewTimeSeries returns time series for the measures in the metrics view.
It's a convenience API for querying a metrics view.
 */
export const queryServiceMetricsViewTimeSeries = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTimeSeriesBody: QueryServiceMetricsViewTimeSeriesBody
) => {
  return httpClient<V1MetricsViewTimeSeriesResponse>({
    url: `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/timeseries`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceMetricsViewTimeSeriesBody,
  });
};

export const getQueryServiceMetricsViewTimeSeriesQueryKey = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTimeSeriesBody: QueryServiceMetricsViewTimeSeriesBody
) => [
  `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/timeseries`,
  queryServiceMetricsViewTimeSeriesBody,
];

export type QueryServiceMetricsViewTimeSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>
>;
export type QueryServiceMetricsViewTimeSeriesQueryError = RpcStatus;

export const useQueryServiceMetricsViewTimeSeries = <
  TData = Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>,
  TError = RpcStatus
>(
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTimeSeriesBody: QueryServiceMetricsViewTimeSeriesBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceMetricsViewTimeSeriesQueryKey(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewTimeSeriesBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>
  > = () =>
    queryServiceMetricsViewTimeSeries(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewTimeSeriesBody
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && metricsViewName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceMetricsViewTimeSeries>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary MetricsViewToplist returns the top dimension values of a metrics view sorted by one or more measures.
It's a convenience API for querying a metrics view.
 */
export const queryServiceMetricsViewToplist = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewToplistBody: QueryServiceMetricsViewToplistBody
) => {
  return httpClient<V1MetricsViewToplistResponse>({
    url: `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/toplist`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceMetricsViewToplistBody,
  });
};

export const getQueryServiceMetricsViewToplistQueryKey = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewToplistBody: QueryServiceMetricsViewToplistBody
) => [
  `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/toplist`,
  queryServiceMetricsViewToplistBody,
];

export type QueryServiceMetricsViewToplistQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>
>;
export type QueryServiceMetricsViewToplistQueryError = RpcStatus;

export const useQueryServiceMetricsViewToplist = <
  TData = Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>,
  TError = RpcStatus
>(
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewToplistBody: QueryServiceMetricsViewToplistBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceMetricsViewToplistQueryKey(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewToplistBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>
  > = () =>
    queryServiceMetricsViewToplist(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewToplistBody
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && metricsViewName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceMetricsViewToplist>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary MetricsViewTotals returns totals over a time period for the measures in a metrics view.
It's a convenience API for querying a metrics view.
 */
export const queryServiceMetricsViewTotals = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTotalsBody: QueryServiceMetricsViewTotalsBody
) => {
  return httpClient<V1MetricsViewTotalsResponse>({
    url: `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/totals`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceMetricsViewTotalsBody,
  });
};

export const getQueryServiceMetricsViewTotalsQueryKey = (
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTotalsBody: QueryServiceMetricsViewTotalsBody
) => [
  `/v1/instances/${instanceId}/metrics-views/${metricsViewName}/totals`,
  queryServiceMetricsViewTotalsBody,
];

export type QueryServiceMetricsViewTotalsQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>
>;
export type QueryServiceMetricsViewTotalsQueryError = RpcStatus;

export const useQueryServiceMetricsViewTotals = <
  TData = Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>,
  TError = RpcStatus
>(
  instanceId: string,
  metricsViewName: string,
  queryServiceMetricsViewTotalsBody: QueryServiceMetricsViewTotalsBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceMetricsViewTotalsQueryKey(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewTotalsBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>
  > = () =>
    queryServiceMetricsViewTotals(
      instanceId,
      metricsViewName,
      queryServiceMetricsViewTotalsBody
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && metricsViewName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceMetricsViewTotals>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get cardinality for a column
 */
export const queryServiceGetCardinalityOfColumn = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetCardinalityOfColumnParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetCardinalityOfColumnResponse>({
    url: `/v1/instances/${instanceId}/queries/column-cardinality/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetCardinalityOfColumnQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetCardinalityOfColumnParams
) => [
  `/v1/instances/${instanceId}/queries/column-cardinality/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetCardinalityOfColumnQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>
>;
export type QueryServiceGetCardinalityOfColumnQueryError = RpcStatus;

export const useQueryServiceGetCardinalityOfColumn = <
  TData = Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetCardinalityOfColumnParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetCardinalityOfColumnQueryKey(
      instanceId,
      tableName,
      params
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>
  > = ({ signal }) =>
    queryServiceGetCardinalityOfColumn(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetCardinalityOfColumn>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary ProfileColumns (TODO: add description)
 */
export const queryServiceProfileColumns = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceProfileColumnsParams
) => {
  return httpClient<V1ProfileColumnsResponse>({
    url: `/v1/instances/${instanceId}/queries/columns-profile/tables/${tableName}`,
    method: "post",
    params,
  });
};

export const getQueryServiceProfileColumnsQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceProfileColumnsParams
) => [
  `/v1/instances/${instanceId}/queries/columns-profile/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceProfileColumnsQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceProfileColumns>>
>;
export type QueryServiceProfileColumnsQueryError = RpcStatus;

export const useQueryServiceProfileColumns = <
  TData = Awaited<ReturnType<typeof queryServiceProfileColumns>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceProfileColumnsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceProfileColumns>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceProfileColumns>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceProfileColumnsQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceProfileColumns>>
  > = () => queryServiceProfileColumns(instanceId, tableName, params);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceProfileColumns>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceProfileColumns>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get basic stats for a numeric column like min, max, mean, stddev, etc
 */
export const queryServiceGetDescriptiveStatistics = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetDescriptiveStatisticsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetDescriptiveStatisticsResponse>({
    url: `/v1/instances/${instanceId}/queries/descriptive-statistics/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetDescriptiveStatisticsQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetDescriptiveStatisticsParams
) => [
  `/v1/instances/${instanceId}/queries/descriptive-statistics/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetDescriptiveStatisticsQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>
>;
export type QueryServiceGetDescriptiveStatisticsQueryError = RpcStatus;

export const useQueryServiceGetDescriptiveStatistics = <
  TData = Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetDescriptiveStatisticsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetDescriptiveStatisticsQueryKey(
      instanceId,
      tableName,
      params
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>
  > = ({ signal }) =>
    queryServiceGetDescriptiveStatistics(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetDescriptiveStatistics>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get the number of nulls in a column
 */
export const queryServiceGetNullCount = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNullCountParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetNullCountResponse>({
    url: `/v1/instances/${instanceId}/queries/null-count/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetNullCountQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNullCountParams
) => [
  `/v1/instances/${instanceId}/queries/null-count/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetNullCountQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetNullCount>>
>;
export type QueryServiceGetNullCountQueryError = RpcStatus;

export const useQueryServiceGetNullCount = <
  TData = Awaited<ReturnType<typeof queryServiceGetNullCount>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNullCountParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetNullCount>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetNullCount>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetNullCountQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetNullCount>>
  > = ({ signal }) =>
    queryServiceGetNullCount(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetNullCount>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetNullCount>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get the histogram for values in a column
 */
export const queryServiceGetNumericHistogram = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNumericHistogramParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetNumericHistogramResponse>({
    url: `/v1/instances/${instanceId}/queries/numeric-histogram/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetNumericHistogramQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNumericHistogramParams
) => [
  `/v1/instances/${instanceId}/queries/numeric-histogram/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetNumericHistogramQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>
>;
export type QueryServiceGetNumericHistogramQueryError = RpcStatus;

export const useQueryServiceGetNumericHistogram = <
  TData = Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetNumericHistogramParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetNumericHistogramQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>
  > = ({ signal }) =>
    queryServiceGetNumericHistogram(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetNumericHistogram>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary EstimateRollupInterval (TODO: add description)
 */
export const queryServiceEstimateRollupInterval = (
  instanceId: string,
  tableName: string,
  queryServiceEstimateRollupIntervalBody: QueryServiceEstimateRollupIntervalBody
) => {
  return httpClient<V1EstimateRollupIntervalResponse>({
    url: `/v1/instances/${instanceId}/queries/rollup-interval/tables/${tableName}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceEstimateRollupIntervalBody,
  });
};

export const getQueryServiceEstimateRollupIntervalQueryKey = (
  instanceId: string,
  tableName: string,
  queryServiceEstimateRollupIntervalBody: QueryServiceEstimateRollupIntervalBody
) => [
  `/v1/instances/${instanceId}/queries/rollup-interval/tables/${tableName}`,
  queryServiceEstimateRollupIntervalBody,
];

export type QueryServiceEstimateRollupIntervalQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>
>;
export type QueryServiceEstimateRollupIntervalQueryError = RpcStatus;

export const useQueryServiceEstimateRollupInterval = <
  TData = Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  queryServiceEstimateRollupIntervalBody: QueryServiceEstimateRollupIntervalBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceEstimateRollupIntervalQueryKey(
      instanceId,
      tableName,
      queryServiceEstimateRollupIntervalBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>
  > = () =>
    queryServiceEstimateRollupInterval(
      instanceId,
      tableName,
      queryServiceEstimateRollupIntervalBody
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceEstimateRollupInterval>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary TableRows (TODO: add description)
 */
export const queryServiceGetTableRows = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableRowsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetTableRowsResponse>({
    url: `/v1/instances/${instanceId}/queries/rows/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetTableRowsQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableRowsParams
) => [
  `/v1/instances/${instanceId}/queries/rows/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetTableRowsQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetTableRows>>
>;
export type QueryServiceGetTableRowsQueryError = RpcStatus;

export const useQueryServiceGetTableRows = <
  TData = Awaited<ReturnType<typeof queryServiceGetTableRows>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableRowsParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetTableRows>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetTableRows>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetTableRowsQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetTableRows>>
  > = ({ signal }) =>
    queryServiceGetTableRows(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetTableRows>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetTableRows>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get outliers for a numeric column
 */
export const queryServiceGetRugHistogram = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetRugHistogramParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetRugHistogramResponse>({
    url: `/v1/instances/${instanceId}/queries/rug-histogram/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetRugHistogramQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetRugHistogramParams
) => [
  `/v1/instances/${instanceId}/queries/rug-histogram/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetRugHistogramQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetRugHistogram>>
>;
export type QueryServiceGetRugHistogramQueryError = RpcStatus;

export const useQueryServiceGetRugHistogram = <
  TData = Awaited<ReturnType<typeof queryServiceGetRugHistogram>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetRugHistogramParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetRugHistogram>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetRugHistogram>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetRugHistogramQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetRugHistogram>>
  > = ({ signal }) =>
    queryServiceGetRugHistogram(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetRugHistogram>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetRugHistogram>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Estimates the smallest time grain present in the column
 */
export const queryServiceEstimateSmallestTimeGrain = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceEstimateSmallestTimeGrainParams,
  signal?: AbortSignal
) => {
  return httpClient<V1EstimateSmallestTimeGrainResponse>({
    url: `/v1/instances/${instanceId}/queries/smallest-time-grain/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceEstimateSmallestTimeGrainQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceEstimateSmallestTimeGrainParams
) => [
  `/v1/instances/${instanceId}/queries/smallest-time-grain/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceEstimateSmallestTimeGrainQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>
>;
export type QueryServiceEstimateSmallestTimeGrainQueryError = RpcStatus;

export const useQueryServiceEstimateSmallestTimeGrain = <
  TData = Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceEstimateSmallestTimeGrainParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceEstimateSmallestTimeGrainQueryKey(
      instanceId,
      tableName,
      params
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>
  > = ({ signal }) =>
    queryServiceEstimateSmallestTimeGrain(
      instanceId,
      tableName,
      params,
      signal
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceEstimateSmallestTimeGrain>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary TableCardinality (TODO: add description)
 */
export const queryServiceGetTableCardinality = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableCardinalityParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetTableCardinalityResponse>({
    url: `/v1/instances/${instanceId}/queries/table-cardinality/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetTableCardinalityQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableCardinalityParams
) => [
  `/v1/instances/${instanceId}/queries/table-cardinality/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetTableCardinalityQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetTableCardinality>>
>;
export type QueryServiceGetTableCardinalityQueryError = RpcStatus;

export const useQueryServiceGetTableCardinality = <
  TData = Awaited<ReturnType<typeof queryServiceGetTableCardinality>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTableCardinalityParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetTableCardinality>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetTableCardinality>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetTableCardinalityQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetTableCardinality>>
  > = ({ signal }) =>
    queryServiceGetTableCardinality(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetTableCardinality>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetTableCardinality>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get the time range summaries (min, max) for a column
 */
export const queryServiceGetTimeRangeSummary = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTimeRangeSummaryParams,
  signal?: AbortSignal
) => {
  return httpClient<V1GetTimeRangeSummaryResponse>({
    url: `/v1/instances/${instanceId}/queries/time-range-summary/tables/${tableName}`,
    method: "get",
    params,
    signal,
  });
};

export const getQueryServiceGetTimeRangeSummaryQueryKey = (
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTimeRangeSummaryParams
) => [
  `/v1/instances/${instanceId}/queries/time-range-summary/tables/${tableName}`,
  ...(params ? [params] : []),
];

export type QueryServiceGetTimeRangeSummaryQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>
>;
export type QueryServiceGetTimeRangeSummaryQueryError = RpcStatus;

export const useQueryServiceGetTimeRangeSummary = <
  TData = Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  params?: QueryServiceGetTimeRangeSummaryParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetTimeRangeSummaryQueryKey(instanceId, tableName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>
  > = ({ signal }) =>
    queryServiceGetTimeRangeSummary(instanceId, tableName, params, signal);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetTimeRangeSummary>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Generate time series
 */
export const queryServiceGenerateTimeSeries = (
  instanceId: string,
  tableName: string,
  queryServiceGenerateTimeSeriesBody: QueryServiceGenerateTimeSeriesBody
) => {
  return httpClient<V1GenerateTimeSeriesResponse>({
    url: `/v1/instances/${instanceId}/queries/timeseries/tables/${tableName}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceGenerateTimeSeriesBody,
  });
};

export const getQueryServiceGenerateTimeSeriesQueryKey = (
  instanceId: string,
  tableName: string,
  queryServiceGenerateTimeSeriesBody: QueryServiceGenerateTimeSeriesBody
) => [
  `/v1/instances/${instanceId}/queries/timeseries/tables/${tableName}`,
  queryServiceGenerateTimeSeriesBody,
];

export type QueryServiceGenerateTimeSeriesQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>
>;
export type QueryServiceGenerateTimeSeriesQueryError = RpcStatus;

export const useQueryServiceGenerateTimeSeries = <
  TData = Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  queryServiceGenerateTimeSeriesBody: QueryServiceGenerateTimeSeriesBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGenerateTimeSeriesQueryKey(
      instanceId,
      tableName,
      queryServiceGenerateTimeSeriesBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>
  > = () =>
    queryServiceGenerateTimeSeries(
      instanceId,
      tableName,
      queryServiceGenerateTimeSeriesBody
    );

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGenerateTimeSeries>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Get TopK elements from a table for a column given an agg function
agg function and k are optional, defaults are count(*) and 50 respectively
 */
export const queryServiceGetTopK = (
  instanceId: string,
  tableName: string,
  queryServiceGetTopKBody: QueryServiceGetTopKBody
) => {
  return httpClient<V1GetTopKResponse>({
    url: `/v1/instances/${instanceId}/queries/topk/tables/${tableName}`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceGetTopKBody,
  });
};

export const getQueryServiceGetTopKQueryKey = (
  instanceId: string,
  tableName: string,
  queryServiceGetTopKBody: QueryServiceGetTopKBody
) => [
  `/v1/instances/${instanceId}/queries/topk/tables/${tableName}`,
  queryServiceGetTopKBody,
];

export type QueryServiceGetTopKQueryResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceGetTopK>>
>;
export type QueryServiceGetTopKQueryError = RpcStatus;

export const useQueryServiceGetTopK = <
  TData = Awaited<ReturnType<typeof queryServiceGetTopK>>,
  TError = RpcStatus
>(
  instanceId: string,
  tableName: string,
  queryServiceGetTopKBody: QueryServiceGetTopKBody,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof queryServiceGetTopK>>,
      TError,
      TData
    >;
  }
): UseQueryStoreResult<
  Awaited<ReturnType<typeof queryServiceGetTopK>>,
  TError,
  TData,
  QueryKey
> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getQueryServiceGetTopKQueryKey(
      instanceId,
      tableName,
      queryServiceGetTopKBody
    );

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof queryServiceGetTopK>>
  > = () => queryServiceGetTopK(instanceId, tableName, queryServiceGetTopKBody);

  const query = useQuery<
    Awaited<ReturnType<typeof queryServiceGetTopK>>,
    TError,
    TData
  >(queryKey, queryFn, {
    enabled: !!(instanceId && tableName),
    ...queryOptions,
  }) as UseQueryStoreResult<
    Awaited<ReturnType<typeof queryServiceGetTopK>>,
    TError,
    TData,
    QueryKey
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

/**
 * @summary Query runs a SQL query against the instance's OLAP datastore.
 */
export const queryServiceQuery = (
  instanceId: string,
  queryServiceQueryBody: QueryServiceQueryBody
) => {
  return httpClient<V1QueryResponse>({
    url: `/v1/instances/${instanceId}/query`,
    method: "post",
    headers: { "Content-Type": "application/json" },
    data: queryServiceQueryBody,
  });
};

export type QueryServiceQueryMutationResult = NonNullable<
  Awaited<ReturnType<typeof queryServiceQuery>>
>;
export type QueryServiceQueryMutationBody = QueryServiceQueryBody;
export type QueryServiceQueryMutationError = RpcStatus;

export const useQueryServiceQuery = <
  TError = RpcStatus,
  TContext = unknown
>(options?: {
  mutation?: UseMutationOptions<
    Awaited<ReturnType<typeof queryServiceQuery>>,
    TError,
    { instanceId: string; data: QueryServiceQueryBody },
    TContext
  >;
}) => {
  const { mutation: mutationOptions } = options ?? {};

  const mutationFn: MutationFunction<
    Awaited<ReturnType<typeof queryServiceQuery>>,
    { instanceId: string; data: QueryServiceQueryBody }
  > = (props) => {
    const { instanceId, data } = props ?? {};

    return queryServiceQuery(instanceId, data);
  };

  return useMutation<
    Awaited<ReturnType<typeof queryServiceQuery>>,
    TError,
    { instanceId: string; data: QueryServiceQueryBody },
    TContext
  >(mutationFn, mutationOptions);
};
