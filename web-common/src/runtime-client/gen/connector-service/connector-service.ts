/**
 * Generated by orval v6.13.1 🍺
 * Do not edit manually.
 * rill/runtime/v1/schema.proto
 * OpenAPI spec version: version not set
 */
import { createQuery } from "@tanstack/svelte-query";
import type {
  CreateQueryOptions,
  QueryFunction,
  CreateQueryResult,
  QueryKey,
} from "@tanstack/svelte-query";
import type {
  V1ListGCSBucketObjectsResponse,
  RpcStatus,
  ConnectorServiceListGCSBucketObjectsParams,
  V1ListGCSBucketsResponse,
  ConnectorServiceListGCSBucketsParams,
  V1ListS3BucketObjectsResponse,
  ConnectorServiceListS3BucketObjectsParams,
  V1ListS3BucketsResponse,
  ConnectorServiceListS3BucketsParams,
} from "../index.schemas";
import { httpClient } from "../../http-client";

export const connectorServiceListGCSBucketObjects = (
  bucketName: string,
  params?: ConnectorServiceListGCSBucketObjectsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListGCSBucketObjectsResponse>({
    url: `/v1/gcs/bucket/${bucketName}/objects`,
    method: "get",
    params,
    signal,
  });
};

export const getConnectorServiceListGCSBucketObjectsQueryKey = (
  bucketName: string,
  params?: ConnectorServiceListGCSBucketObjectsParams
) =>
  [
    `/v1/gcs/bucket/${bucketName}/objects`,
    ...(params ? [params] : []),
  ] as const;

export type ConnectorServiceListGCSBucketObjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof connectorServiceListGCSBucketObjects>>
>;
export type ConnectorServiceListGCSBucketObjectsQueryError = RpcStatus;

export const createConnectorServiceListGCSBucketObjects = <
  TData = Awaited<ReturnType<typeof connectorServiceListGCSBucketObjects>>,
  TError = RpcStatus
>(
  bucketName: string,
  params?: ConnectorServiceListGCSBucketObjectsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof connectorServiceListGCSBucketObjects>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getConnectorServiceListGCSBucketObjectsQueryKey(bucketName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof connectorServiceListGCSBucketObjects>>
  > = ({ signal }) =>
    connectorServiceListGCSBucketObjects(bucketName, params, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof connectorServiceListGCSBucketObjects>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!bucketName,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const connectorServiceListGCSBuckets = (
  params?: ConnectorServiceListGCSBucketsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListGCSBucketsResponse>({
    url: `/v1/gcs/buckets`,
    method: "get",
    params,
    signal,
  });
};

export const getConnectorServiceListGCSBucketsQueryKey = (
  params?: ConnectorServiceListGCSBucketsParams
) => [`/v1/gcs/buckets`, ...(params ? [params] : [])] as const;

export type ConnectorServiceListGCSBucketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof connectorServiceListGCSBuckets>>
>;
export type ConnectorServiceListGCSBucketsQueryError = RpcStatus;

export const createConnectorServiceListGCSBuckets = <
  TData = Awaited<ReturnType<typeof connectorServiceListGCSBuckets>>,
  TError = RpcStatus
>(
  params?: ConnectorServiceListGCSBucketsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof connectorServiceListGCSBuckets>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConnectorServiceListGCSBucketsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof connectorServiceListGCSBuckets>>
  > = ({ signal }) => connectorServiceListGCSBuckets(params, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof connectorServiceListGCSBuckets>>,
    TError,
    TData
  >({ queryKey, queryFn, ...queryOptions }) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const connectorServiceListS3BucketObjects = (
  bucketName: string,
  params?: ConnectorServiceListS3BucketObjectsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListS3BucketObjectsResponse>({
    url: `/v1/s3/bucket/${bucketName}/objects`,
    method: "get",
    params,
    signal,
  });
};

export const getConnectorServiceListS3BucketObjectsQueryKey = (
  bucketName: string,
  params?: ConnectorServiceListS3BucketObjectsParams
) =>
  [`/v1/s3/bucket/${bucketName}/objects`, ...(params ? [params] : [])] as const;

export type ConnectorServiceListS3BucketObjectsQueryResult = NonNullable<
  Awaited<ReturnType<typeof connectorServiceListS3BucketObjects>>
>;
export type ConnectorServiceListS3BucketObjectsQueryError = RpcStatus;

export const createConnectorServiceListS3BucketObjects = <
  TData = Awaited<ReturnType<typeof connectorServiceListS3BucketObjects>>,
  TError = RpcStatus
>(
  bucketName: string,
  params?: ConnectorServiceListS3BucketObjectsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof connectorServiceListS3BucketObjects>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getConnectorServiceListS3BucketObjectsQueryKey(bucketName, params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof connectorServiceListS3BucketObjects>>
  > = ({ signal }) =>
    connectorServiceListS3BucketObjects(bucketName, params, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof connectorServiceListS3BucketObjects>>,
    TError,
    TData
  >({
    queryKey,
    queryFn,
    enabled: !!bucketName,
    ...queryOptions,
  }) as CreateQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};

export const connectorServiceListS3Buckets = (
  params?: ConnectorServiceListS3BucketsParams,
  signal?: AbortSignal
) => {
  return httpClient<V1ListS3BucketsResponse>({
    url: `/v1/s3/buckets`,
    method: "get",
    params,
    signal,
  });
};

export const getConnectorServiceListS3BucketsQueryKey = (
  params?: ConnectorServiceListS3BucketsParams
) => [`/v1/s3/buckets`, ...(params ? [params] : [])] as const;

export type ConnectorServiceListS3BucketsQueryResult = NonNullable<
  Awaited<ReturnType<typeof connectorServiceListS3Buckets>>
>;
export type ConnectorServiceListS3BucketsQueryError = RpcStatus;

export const createConnectorServiceListS3Buckets = <
  TData = Awaited<ReturnType<typeof connectorServiceListS3Buckets>>,
  TError = RpcStatus
>(
  params?: ConnectorServiceListS3BucketsParams,
  options?: {
    query?: CreateQueryOptions<
      Awaited<ReturnType<typeof connectorServiceListS3Buckets>>,
      TError,
      TData
    >;
  }
): CreateQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const { query: queryOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getConnectorServiceListS3BucketsQueryKey(params);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof connectorServiceListS3Buckets>>
  > = ({ signal }) => connectorServiceListS3Buckets(params, signal);

  const query = createQuery<
    Awaited<ReturnType<typeof connectorServiceListS3Buckets>>,
    TError,
    TData
  >({ queryKey, queryFn, ...queryOptions }) as CreateQueryResult<
    TData,
    TError
  > & { queryKey: QueryKey };

  query.queryKey = queryKey;

  return query;
};
