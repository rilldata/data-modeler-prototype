/**
 * Generated by orval v6.10.1 üç∫
 * Do not edit manually.
 * runtime.proto
 * OpenAPI spec version: version not set
 */
export type RuntimeServicePutRepoObjectBody = {
  blob?: string;
  delete?: boolean;
};

export type RuntimeServiceListReposParams = {
  pageSize?: number;
  pageToken?: string;
};

/**
 * Request for RuntimeService.GetTopK. Returns the top K values for a given column using agg function for table table_name.
 */
export type RuntimeServiceGetTopKBody = {
  agg?: string;
  k?: number;
};

export type RuntimeServiceQueryDirectBody = {
  sql?: string;
  args?: unknown[];
  priority?: string;
  dryRun?: boolean;
};

export type RuntimeServiceQueryBody = {
  sql?: string;
  args?: unknown[];
  priority?: string;
  dryRun?: boolean;
};

export type RuntimeServiceMigrateDeleteBody = {
  name?: string;
};

export type RuntimeServiceMigrateSingleBody = {
  sql?: string;
  dryRun?: boolean;
  createOrReplace?: boolean;
  /** If provided, will attempt to rename an existing object and only recompute if necessary.
NOTE: very questionable semantics here. */
  renameFrom?: string;
};

export type RuntimeServiceMigrateBody = {
  blobs?: string[];
  dropDeleted?: boolean;
  dryRun?: boolean;
};

export type RuntimeServiceMetricsViewTotalsBody = {
  measureNames?: string[];
  timeStart?: string;
  timeEnd?: string;
  filter?: V1MetricsViewFilter;
};

export type RuntimeServiceMetricsViewToplistBody = {
  measureNames?: string[];
  timeStart?: string;
  timeEnd?: string;
  limit?: string;
  offset?: string;
  sort?: V1MetricsViewSort[];
  filter?: V1MetricsViewFilter;
};

export type RuntimeServiceMetricsViewTimeSeriesBody = {
  measureNames?: string[];
  timeStart?: string;
  timeEnd?: string;
  timeGranularity?: string;
  filter?: V1MetricsViewFilter;
};

export type RuntimeServiceListCatalogObjectsType =
  typeof RuntimeServiceListCatalogObjectsType[keyof typeof RuntimeServiceListCatalogObjectsType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeServiceListCatalogObjectsType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_TABLE: "TYPE_TABLE",
  TYPE_SOURCE: "TYPE_SOURCE",
  TYPE_METRICS_VIEW: "TYPE_METRICS_VIEW",
} as const;

export type RuntimeServiceListCatalogObjectsParams = {
  type?: RuntimeServiceListCatalogObjectsType;
};

export type RuntimeServiceListInstancesParams = {
  pageSize?: number;
  pageToken?: string;
};

export interface V1TriggerSyncResponse {
  objectsCount?: number;
  objectsAddedCount?: number;
  objectsUpdatedCount?: number;
  objectsRemovedCount?: number;
}

export interface V1TriggerRefreshResponse {
  [key: string]: any;
}

export type V1TopKResponseDataItem = { [key: string]: any };

export interface V1StructType {
  fields?: StructTypeField[];
}

/**
 * Response for RuntimeService.GetTopK.
 */
export interface V1TopKResponse {
  meta?: V1StructType;
  data?: V1TopKResponseDataItem[];
}

/**
 * Table represents a table in the OLAP database. These include pre-existing tables discovered by periodically
scanning the database's information schema when the instance is created with exposed=true. Pre-existing tables
have managed = false.
 */
export interface V1Table {
  name?: string;
  schema?: V1StructType;
  /** Managed is true if the table was created through a runtime migration, false if it was discovered in by
scanning the database's information schema. */
  managed?: boolean;
}

export type V1SourceProperties = { [key: string]: any };

export interface V1Source {
  sql?: string;
  name?: string;
  connector?: string;
  properties?: V1SourceProperties;
  schema?: V1StructType;
}

/**
 * Repo represents a collection of file artifacts containing SQL statements.
It will usually by represented as a folder on disk, but may also be backed by a
database (for modelling in the cloud where no persistant file system is available).
 */
export interface V1Repo {
  repoId?: string;
  /** Driver for persisting artifacts. Supports "file" and "postgres". */
  driver?: string;
  /** DSN for driver. If the driver is "file", this should be the path to the root directory. */
  dsn?: string;
}

export type V1QueryResponseDataItem = { [key: string]: any };

export interface V1QueryResponse {
  meta?: V1StructType;
  data?: V1QueryResponseDataItem[];
}

export type V1QueryDirectResponseDataItem = { [key: string]: any };

export interface V1QueryDirectResponse {
  meta?: V1StructType;
  data?: V1QueryDirectResponseDataItem[];
}

export interface V1PutRepoObjectResponse {
  filePath?: string;
}

export interface V1PingResponse {
  version?: string;
  time?: string;
}

export interface V1MigrateSingleResponse {
  [key: string]: any;
}

export interface V1MigrateResponse {
  [key: string]: any;
}

export interface V1MigrateDeleteResponse {
  [key: string]: any;
}

export type V1MetricsViewTotalsResponseData = { [key: string]: any };

export interface V1MetricsViewTotalsResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewTotalsResponseData;
}

export type V1MetricsViewToplistResponseDataItem = { [key: string]: any };

export interface V1MetricsViewToplistResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewToplistResponseDataItem[];
}

export type V1MetricsViewTimeSeriesResponseDataItem = { [key: string]: any };

export interface V1MetricsViewTimeSeriesResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewTimeSeriesResponseDataItem[];
}

export interface V1MetricsViewSort {
  name?: string;
  ascending?: boolean;
}

export interface V1MetricsViewMetaResponse {
  metricsViewName?: string;
  fromObject?: string;
  dimensions?: MetricsViewDimension[];
  measures?: MetricsViewMeasure[];
}

export interface V1MetricsViewFilter {
  match?: string[];
  include?: MetricsViewFilterCond[];
  exclude?: MetricsViewFilterCond[];
}

export interface V1MetricsViewColumn {
  name?: string;
  type?: string;
  nullable?: boolean;
}

export interface V1MetricsView {
  sql?: string;
  name?: string;
  fromObject?: string;
  dimensions?: MetricsViewDimension[];
  measures?: MetricsViewMeasure[];
}

export interface V1MapType {
  keyType?: Runtimev1Type;
  valueType?: Runtimev1Type;
}

export interface V1ListReposResponse {
  repos?: V1Repo[];
  nextPageToken?: string;
}

export interface V1ListRepoObjectsResponse {
  paths?: string[];
}

export interface V1ListInstancesResponse {
  instances?: V1Instance[];
  nextPageToken?: string;
}

export interface V1ListConnectorsResponse {
  connectors?: V1Connector[];
}

export interface V1ListCatalogObjectsResponse {
  objects?: V1CatalogObject[];
}

/**
 * Instance represents one connection to an OLAP datastore (such as DuckDB or Druid).
Migrations and queries are issued against a specific instance. The concept of
instances enables multiple data projects to be served by one runtime.
 */
export interface V1Instance {
  instanceId?: string;
  driver?: string;
  dsn?: string;
  /** Prefix to add to all table names created through Rill SQL (such as sources, models, etc.)
Use it as an alternative to database schemas. */
  objectPrefix?: string;
  /** Indicates that the underlying infra may be manipulated directly by users.
If true, the runtime will continuously poll the infra's information schema
to discover tables not created through the runtime. They will be added to the
catalog as UnmanagedTables. */
  exposed?: boolean;
  /** If true, the runtime will store the instance's catalog data (such as sources and metrics views)
in the instance's OLAP datastore instead of in the runtime's metadata store. This is currently
only supported for the duckdb driver. */
  embedCatalog?: boolean;
}

export interface V1GetRepoResponse {
  repo?: V1Repo;
}

export interface V1GetRepoObjectResponse {
  blob?: string;
}

export interface V1GetInstanceResponse {
  instance?: V1Instance;
}

export interface V1GetCatalogObjectResponse {
  object?: V1CatalogObject;
}

export interface V1DeleteRepoResponse {
  [key: string]: any;
}

export interface V1DeleteInstanceResponse {
  [key: string]: any;
}

export interface V1CreateRepoResponse {
  repo?: V1Repo;
}

export interface V1CreateRepoRequest {
  driver?: string;
  dsn?: string;
}

export interface V1CreateInstanceResponse {
  instanceId?: string;
  instance?: V1Instance;
}

export interface V1CreateInstanceRequest {
  instanceId?: string;
  driver?: string;
  dsn?: string;
  objectPrefix?: string;
  exposed?: boolean;
  embedCatalog?: boolean;
}

/**
 * Connector represents a connector available in the runtime.
It should not be confused with a source.
 */
export interface V1Connector {
  name?: string;
  displayName?: string;
  description?: string;
  properties?: ConnectorProperty[];
}

export type V1CatalogObjectType =
  typeof V1CatalogObjectType[keyof typeof V1CatalogObjectType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1CatalogObjectType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_TABLE: "TYPE_TABLE",
  TYPE_SOURCE: "TYPE_SOURCE",
  TYPE_METRICS_VIEW: "TYPE_METRICS_VIEW",
} as const;

export interface V1CatalogObject {
  type?: V1CatalogObjectType;
  table?: V1Table;
  source?: V1Source;
  metricsView?: V1MetricsView;
  createdOn?: string;
  updatedOn?: string;
  refreshedOn?: string;
}

export interface Runtimev1Type {
  code?: TypeCode;
  nullable?: boolean;
  arrayElementType?: Runtimev1Type;
  structType?: V1StructType;
  mapType?: V1MapType;
}

export interface RpcStatus {
  code?: number;
  message?: string;
  details?: ProtobufAny[];
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

 The JSON representation for `NullValue` is JSON `null`.

 - NULL_VALUE: Null value.
 */
export type ProtobufNullValue =
  typeof ProtobufNullValue[keyof typeof ProtobufNullValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProtobufNullValue = {
  NULL_VALUE: "NULL_VALUE",
} as const;

export interface ProtobufAny {
  "@type"?: string;
  [key: string]: unknown;
}

export type TypeCode = typeof TypeCode[keyof typeof TypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypeCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_BOOL: "CODE_BOOL",
  CODE_INT8: "CODE_INT8",
  CODE_INT16: "CODE_INT16",
  CODE_INT32: "CODE_INT32",
  CODE_INT64: "CODE_INT64",
  CODE_INT128: "CODE_INT128",
  CODE_UINT8: "CODE_UINT8",
  CODE_UINT16: "CODE_UINT16",
  CODE_UINT32: "CODE_UINT32",
  CODE_UINT64: "CODE_UINT64",
  CODE_UINT128: "CODE_UINT128",
  CODE_FLOAT32: "CODE_FLOAT32",
  CODE_FLOAT64: "CODE_FLOAT64",
  CODE_TIMESTAMP: "CODE_TIMESTAMP",
  CODE_DATE: "CODE_DATE",
  CODE_TIME: "CODE_TIME",
  CODE_STRING: "CODE_STRING",
  CODE_BYTES: "CODE_BYTES",
  CODE_ARRAY: "CODE_ARRAY",
  CODE_STRUCT: "CODE_STRUCT",
  CODE_MAP: "CODE_MAP",
  CODE_DECIMAL: "CODE_DECIMAL",
  CODE_JSON: "CODE_JSON",
  CODE_UUID: "CODE_UUID",
} as const;

export interface StructTypeField {
  name?: string;
  type?: Runtimev1Type;
}

export interface MetricsViewMeasure {
  name?: string;
  type?: string;
  description?: string;
}

export interface MetricsViewFilterCond {
  name?: string;
  in?: unknown[];
  like?: unknown[];
}

export interface MetricsViewDimension {
  name?: string;
  type?: string;
  primaryTime?: boolean;
  description?: string;
}

export type ConnectorPropertyType =
  typeof ConnectorPropertyType[keyof typeof ConnectorPropertyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectorPropertyType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_STRING: "TYPE_STRING",
  TYPE_NUMBER: "TYPE_NUMBER",
  TYPE_BOOLEAN: "TYPE_BOOLEAN",
  TYPE_INFORMATIONAL: "TYPE_INFORMATIONAL",
} as const;

export interface ConnectorProperty {
  key?: string;
  displayName?: string;
  description?: string;
  placeholder?: string;
  type?: ConnectorPropertyType;
  nullable?: boolean;
  hint?: string;
  href?: string;
}
