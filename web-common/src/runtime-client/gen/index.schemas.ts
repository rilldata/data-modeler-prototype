/**
 * Generated by orval v6.21.0 üç∫
 * Do not edit manually.
 * rill/runtime/v1/schema.proto
 * OpenAPI spec version: version not set
 */
export type ConnectorServiceS3GetCredentialsInfoParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceS3ListBucketsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceS3ListObjectsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
  region?: string;
  prefix?: string;
  startAfter?: string;
  delimiter?: string;
};

export type ConnectorServiceS3GetBucketMetadataParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceOLAPListTablesParams = {
  instanceId?: string;
  connector?: string;
};

export type RuntimeServiceCreateTriggerBody = {
  pullTriggerSpec?: V1PullTriggerSpec;
  refreshTriggerSpec?: V1RefreshTriggerSpec;
};

export type RuntimeServiceWatchResources200 = {
  error?: RpcStatus;
  result?: V1WatchResourcesResponse;
};

export type RuntimeServiceWatchResourcesParams = {
  kind?: string;
  replay?: boolean;
};

export type RuntimeServiceListResourcesParams = {
  kind?: string;
};

export type RuntimeServiceGetResourceParams = {
  "name.kind"?: string;
  "name.name"?: string;
};

export type RuntimeServiceReconcileBody = {
  /** Changed paths provides a way to "hint" what files have changed in the repo, enabling
reconciliation to execute faster by not scanning all code artifacts for changes. */
  changedPaths?: string[];
  dry?: boolean;
  /** Forced paths is used to force run reconcile on certain files.
This is mainly used by UI to reconcile paths missing in catalog and get errors if any. */
  forcedPaths?: string[];
  strict?: boolean;
};

export type QueryServiceQueryBatch200 = {
  error?: RpcStatus;
  result?: V1QueryBatchResponse;
};

export type QueryServiceQueryBatchBody = {
  queries?: V1Query[];
};

export type QueryServiceQueryBody = {
  args?: unknown[];
  dryRun?: boolean;
  limit?: number;
  priority?: number;
  sql?: string;
};

export type QueryServiceColumnTopKBody = {
  agg?: string;
  columnName?: string;
  k?: number;
  priority?: number;
};

export type QueryServiceColumnTimeSeriesBody = {
  measures?: ColumnTimeSeriesRequestBasicMeasure[];
  pixels?: number;
  priority?: number;
  sampleSize?: number;
  timeRange?: V1TimeSeriesTimeRange;
  timestampColumnName?: string;
  timeZone?: string;
};

export type QueryServiceColumnTimeRangeParams = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableCardinalityParams = {
  priority?: number;
};

export type QueryServiceColumnTimeGrainParams = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceColumnRugHistogramParams = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableRowsParams = {
  limit?: number;
  priority?: number;
};

export type QueryServiceColumnRollupIntervalBody = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceColumnNumericHistogramHistogramMethod =
  (typeof QueryServiceColumnNumericHistogramHistogramMethod)[keyof typeof QueryServiceColumnNumericHistogramHistogramMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QueryServiceColumnNumericHistogramHistogramMethod = {
  HISTOGRAM_METHOD_UNSPECIFIED: "HISTOGRAM_METHOD_UNSPECIFIED",
  HISTOGRAM_METHOD_FD: "HISTOGRAM_METHOD_FD",
  HISTOGRAM_METHOD_DIAGNOSTIC: "HISTOGRAM_METHOD_DIAGNOSTIC",
} as const;

export type QueryServiceColumnNumericHistogramParams = {
  columnName?: string;
  histogramMethod?: QueryServiceColumnNumericHistogramHistogramMethod;
  priority?: number;
};

export type QueryServiceColumnNullCountParams = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceMetricsViewTotalsBody = {
  filter?: V1MetricsViewFilter;
  inlineMeasures?: V1InlineMeasure[];
  measureNames?: string[];
  priority?: number;
  timeEnd?: string;
  timeStart?: string;
  where?: V1Expression;
};

export type QueryServiceMetricsViewToplistBody = {
  dimensionName?: string;
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  inlineMeasures?: V1InlineMeasure[];
  limit?: string;
  measureNames?: string[];
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewSort[];
  timeEnd?: string;
  timeStart?: string;
  where?: V1Expression;
};

export type QueryServiceMetricsViewTimeSeriesBody = {
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  inlineMeasures?: V1InlineMeasure[];
  measureNames?: string[];
  priority?: number;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  timeStart?: string;
  timeZone?: string;
  where?: V1Expression;
};

export type QueryServiceMetricsViewTimeRangeBody = {
  priority?: number;
};

export type QueryServiceMetricsViewRowsBody = {
  filter?: V1MetricsViewFilter;
  limit?: number;
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewSort[];
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  timeStart?: string;
  timeZone?: string;
  where?: V1Expression;
};

export type QueryServiceMetricsViewComparisonBody = {
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  comparisonTimeRange?: V1TimeRange;
  dimension?: V1MetricsViewAggregationDimension;
  exact?: boolean;
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  limit?: string;
  measures?: V1MetricsViewAggregationMeasure[];
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewComparisonSort[];
  timeRange?: V1TimeRange;
  where?: V1Expression;
};

export type QueryServiceMetricsViewAggregationBody = {
  dimensions?: V1MetricsViewAggregationDimension[];
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  limit?: string;
  measures?: V1MetricsViewAggregationMeasure[];
  offset?: string;
  pivotOn?: string[];
  priority?: number;
  sort?: V1MetricsViewAggregationSort[];
  timeEnd?: string;
  timeRange?: V1TimeRange;
  timeStart?: string;
  where?: V1Expression;
};

export type QueryServiceExportBody = {
  bakedQuery?: string;
  format?: V1ExportFormat;
  limit?: string;
  query?: V1Query;
};

export type QueryServiceColumnDescriptiveStatisticsParams = {
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableColumnsParams = {
  priority?: number;
};

export type QueryServiceColumnCardinalityParams = {
  columnName?: string;
  priority?: number;
};

export type RuntimeServiceWatchLogs200 = {
  error?: RpcStatus;
  result?: V1WatchLogsResponse;
};

export type RuntimeServiceWatchLogsParams = {
  replay?: boolean;
  replayLimit?: number;
};

export type RuntimeServiceGetLogsParams = {
  ascending?: boolean;
  limit?: number;
};

export type RuntimeServiceWatchFiles200 = {
  error?: RpcStatus;
  result?: V1WatchFilesResponse;
};

export type RuntimeServiceWatchFilesParams = {
  replay?: boolean;
};

export type RuntimeServiceUnpackExampleBody = {
  force?: boolean;
  name?: string;
};

export type RuntimeServiceUnpackEmptyBody = {
  force?: boolean;
  title?: string;
};

export type RuntimeServiceRenameFileBody = {
  fromPath?: string;
  toPath?: string;
};

export type RuntimeServicePutFileBody = {
  blob?: string;
  create?: boolean;
  /** Will cause the operation to fail if the file already exists.
It should only be set when create = true. */
  createOnly?: boolean;
};

export type RuntimeServiceListFilesParams = {
  glob?: string;
};

export type RuntimeServiceListCatalogEntriesType =
  (typeof RuntimeServiceListCatalogEntriesType)[keyof typeof RuntimeServiceListCatalogEntriesType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeServiceListCatalogEntriesType = {
  OBJECT_TYPE_UNSPECIFIED: "OBJECT_TYPE_UNSPECIFIED",
  OBJECT_TYPE_TABLE: "OBJECT_TYPE_TABLE",
  OBJECT_TYPE_SOURCE: "OBJECT_TYPE_SOURCE",
  OBJECT_TYPE_MODEL: "OBJECT_TYPE_MODEL",
  OBJECT_TYPE_METRICS_VIEW: "OBJECT_TYPE_METRICS_VIEW",
} as const;

export type RuntimeServiceListCatalogEntriesParams = {
  type?: RuntimeServiceListCatalogEntriesType;
};

export type RuntimeServiceEditInstanceBodyVariables = { [key: string]: string };

export type RuntimeServiceEditInstanceBodyAnnotations = {
  [key: string]: string;
};

/**
 * Request message for RuntimeService.EditInstance.
See message Instance for field descriptions.
 */
export type RuntimeServiceEditInstanceBody = {
  adminConnector?: string;
  annotations?: RuntimeServiceEditInstanceBodyAnnotations;
  connectors?: V1Connector[];
  embedCatalog?: boolean;
  modelDefaultMaterialize?: boolean;
  modelMaterializeDelaySeconds?: number;
  olapConnector?: string;
  repoConnector?: string;
  stageChanges?: boolean;
  variables?: RuntimeServiceEditInstanceBodyVariables;
  watchRepo?: boolean;
};

export type RuntimeServiceDeleteInstanceBody = {
  dropDb?: boolean;
};

export type RuntimeServiceListInstancesParams = {
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceGCSGetCredentialsInfoParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceGCSListBucketsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceGCSListObjectsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
  prefix?: string;
  startOffset?: string;
  endOffset?: string;
  delimiter?: string;
};

export type RuntimeServiceIssueDevJWTParams = {
  name?: string;
  email?: string;
  groups?: string[];
  admin?: boolean;
};

export type ConnectorServiceScanConnectorsParams = {
  instanceId?: string;
};

export type ConnectorServiceOLAPGetTableParams = {
  instanceId?: string;
  connector?: string;
  table?: string;
};

export type ConnectorServiceBigQueryListTablesParams = {
  instanceId?: string;
  connector?: string;
  dataset?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceBigQueryListDatasetsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export interface V1WatchResourcesResponse {
  event?: V1ResourceEvent;
  name?: V1ResourceName;
  resource?: V1Resource;
}

export interface V1WatchLogsResponse {
  log?: V1Log;
}

export interface V1WatchFilesResponse {
  event?: V1FileEvent;
  path?: string;
}

export interface V1UnpackExampleResponse {
  [key: string]: any;
}

export interface V1UnpackEmptyResponse {
  [key: string]: any;
}

export type V1TypeCode = (typeof V1TypeCode)[keyof typeof V1TypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1TypeCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_BOOL: "CODE_BOOL",
  CODE_INT8: "CODE_INT8",
  CODE_INT16: "CODE_INT16",
  CODE_INT32: "CODE_INT32",
  CODE_INT64: "CODE_INT64",
  CODE_INT128: "CODE_INT128",
  CODE_UINT8: "CODE_UINT8",
  CODE_UINT16: "CODE_UINT16",
  CODE_UINT32: "CODE_UINT32",
  CODE_UINT64: "CODE_UINT64",
  CODE_UINT128: "CODE_UINT128",
  CODE_FLOAT32: "CODE_FLOAT32",
  CODE_FLOAT64: "CODE_FLOAT64",
  CODE_TIMESTAMP: "CODE_TIMESTAMP",
  CODE_DATE: "CODE_DATE",
  CODE_TIME: "CODE_TIME",
  CODE_STRING: "CODE_STRING",
  CODE_BYTES: "CODE_BYTES",
  CODE_ARRAY: "CODE_ARRAY",
  CODE_STRUCT: "CODE_STRUCT",
  CODE_MAP: "CODE_MAP",
  CODE_DECIMAL: "CODE_DECIMAL",
  CODE_JSON: "CODE_JSON",
  CODE_UUID: "CODE_UUID",
} as const;

export interface V1TriggerRefreshResponse {
  [key: string]: any;
}

export interface V1TopK {
  entries?: TopKEntry[];
}

export type V1TimeSeriesValueRecords = { [key: string]: any };

export interface V1TimeSeriesValue {
  bin?: number;
  records?: V1TimeSeriesValueRecords;
  ts?: string;
}

export interface V1TimeSeriesResponse {
  results?: V1TimeSeriesValue[];
  sampleSize?: number;
  spark?: V1TimeSeriesValue[];
}

export interface V1TimeRangeSummary {
  interval?: TimeRangeSummaryInterval;
  max?: string;
  min?: string;
}

export type V1TimeGrain = (typeof V1TimeGrain)[keyof typeof V1TimeGrain];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1TimeGrain = {
  TIME_GRAIN_UNSPECIFIED: "TIME_GRAIN_UNSPECIFIED",
  TIME_GRAIN_MILLISECOND: "TIME_GRAIN_MILLISECOND",
  TIME_GRAIN_SECOND: "TIME_GRAIN_SECOND",
  TIME_GRAIN_MINUTE: "TIME_GRAIN_MINUTE",
  TIME_GRAIN_HOUR: "TIME_GRAIN_HOUR",
  TIME_GRAIN_DAY: "TIME_GRAIN_DAY",
  TIME_GRAIN_WEEK: "TIME_GRAIN_WEEK",
  TIME_GRAIN_MONTH: "TIME_GRAIN_MONTH",
  TIME_GRAIN_QUARTER: "TIME_GRAIN_QUARTER",
  TIME_GRAIN_YEAR: "TIME_GRAIN_YEAR",
} as const;

export interface V1TimeSeriesTimeRange {
  end?: string;
  interval?: V1TimeGrain;
  start?: string;
}

export interface V1TimeRange {
  end?: string;
  isoDuration?: string;
  isoOffset?: string;
  roundToGrain?: V1TimeGrain;
  start?: string;
  timeZone?: string;
}

export interface V1ThemeState {
  [key: string]: any;
}

export interface V1ThemeSpec {
  primaryColor?: V1Color;
  secondaryColor?: V1Color;
}

export interface V1Theme {
  spec?: V1ThemeSpec;
  state?: V1ThemeState;
}

export type V1TableRowsResponseDataItem = { [key: string]: any };

export interface V1TableRowsResponse {
  data?: V1TableRowsResponseDataItem[];
}

export interface V1TableRowsRequest {
  instanceId?: string;
  limit?: number;
  priority?: number;
  tableName?: string;
}

export interface V1TableInfo {
  database?: string;
  name?: string;
}

export interface V1TableColumnsResponse {
  profileColumns?: V1ProfileColumn[];
}

export interface V1TableColumnsRequest {
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1TableCardinalityResponse {
  cardinality?: string;
}

export interface V1TableCardinalityRequest {
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1StructType {
  fields?: StructTypeField[];
}

/**
 * Table represents a table in the OLAP database. These include pre-existing tables discovered by periodically
scanning the database's information schema when the instance is created with exposed=true. Pre-existing tables
have managed = false.
 */
export interface V1Table {
  /** Managed is true if the table was created through a runtime migration, false if it was discovered in by
scanning the database's information schema. */
  managed?: boolean;
  name?: string;
  schema?: V1StructType;
}

export interface V1SourceState {
  connector?: string;
  refreshedOn?: string;
  specHash?: string;
  table?: string;
}

export interface V1SourceV2 {
  spec?: V1SourceSpec;
  state?: V1SourceState;
}

export type V1SourceSpecProperties = { [key: string]: any };

export type V1SourceProperties = { [key: string]: any };

export interface V1Source {
  connector?: string;
  name?: string;
  properties?: V1SourceProperties;
  schema?: V1StructType;
  timeoutSeconds?: number;
}

export interface V1Schedule {
  cron?: string;
  tickerSeconds?: number;
  timeZone?: string;
}

export interface V1SourceSpec {
  properties?: V1SourceSpecProperties;
  refreshSchedule?: V1Schedule;
  sinkConnector?: string;
  sourceConnector?: string;
  stageChanges?: boolean;
  streamIngestion?: boolean;
  timeoutSeconds?: number;
  trigger?: boolean;
}

export interface V1ScannedConnector {
  hasAnonymousAccess?: boolean;
  name?: string;
  type?: string;
}

export interface V1ScanConnectorsResponse {
  connectors?: V1ScannedConnector[];
}

export interface V1S3Object {
  isDir?: boolean;
  modifiedOn?: string;
  name?: string;
  size?: string;
}

export interface V1S3ListObjectsResponse {
  nextPageToken?: string;
  objects?: V1S3Object[];
}

export interface V1S3ListBucketsResponse {
  buckets?: string[];
  nextPageToken?: string;
}

export interface V1S3GetCredentialsInfoResponse {
  exist?: boolean;
  provider?: string;
}

export interface V1S3GetBucketMetadataResponse {
  region?: string;
}

export interface V1ResourceName {
  kind?: string;
  name?: string;
}

export interface V1ResourceMeta {
  createdOn?: string;
  deletedOn?: string;
  filePaths?: string[];
  hidden?: boolean;
  name?: V1ResourceName;
  owner?: V1ResourceName;
  reconcileError?: string;
  reconcileOn?: string;
  reconcileStatus?: V1ReconcileStatus;
  refs?: V1ResourceName[];
  renamedFrom?: V1ResourceName;
  specUpdatedOn?: string;
  specVersion?: string;
  stateUpdatedOn?: string;
  stateVersion?: string;
  version?: string;
}

export type V1ResourceEvent =
  (typeof V1ResourceEvent)[keyof typeof V1ResourceEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ResourceEvent = {
  RESOURCE_EVENT_UNSPECIFIED: "RESOURCE_EVENT_UNSPECIFIED",
  RESOURCE_EVENT_WRITE: "RESOURCE_EVENT_WRITE",
  RESOURCE_EVENT_DELETE: "RESOURCE_EVENT_DELETE",
} as const;

export type V1ReportSpecAnnotations = { [key: string]: string };

export interface V1ReportSpec {
  annotations?: V1ReportSpecAnnotations;
  emailRecipients?: string[];
  exportFormat?: V1ExportFormat;
  exportLimit?: string;
  queryArgsJson?: string;
  queryName?: string;
  refreshSchedule?: V1Schedule;
  timeoutSeconds?: number;
  title?: string;
  trigger?: boolean;
}

export interface V1ReportExecution {
  adhoc?: boolean;
  errorMessage?: string;
  finishedOn?: string;
  reportTime?: string;
  startedOn?: string;
}

export interface V1ReportState {
  currentExecution?: V1ReportExecution;
  executionCount?: number;
  executionHistory?: V1ReportExecution[];
  nextRunOn?: string;
}

export interface V1Report {
  spec?: V1ReportSpec;
  state?: V1ReportState;
}

export interface V1Resource {
  bucketPlanner?: V1BucketPlanner;
  meta?: V1ResourceMeta;
  metricsView?: V1MetricsViewV2;
  migration?: V1Migration;
  model?: V1ModelV2;
  projectParser?: V1ProjectParser;
  pullTrigger?: V1PullTrigger;
  refreshTrigger?: V1RefreshTrigger;
  report?: V1Report;
  source?: V1SourceV2;
  theme?: V1Theme;
}

export interface V1RenameFileResponse {
  [key: string]: any;
}

export interface V1RenameFileAndReconcileResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the reconciliation. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during reconciliation. If strict = false, any path in
affected_paths without an error can be assumed to have been reconciled succesfully. */
  errors?: V1ReconcileError[];
}

export interface V1RenameFileAndReconcileRequest {
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  fromPath?: string;
  instanceId?: string;
  strict?: boolean;
  toPath?: string;
}

export interface V1RefreshTriggerState {
  [key: string]: any;
}

export interface V1RefreshTriggerSpec {
  onlyNames?: V1ResourceName[];
}

export interface V1RefreshTrigger {
  spec?: V1RefreshTriggerSpec;
  state?: V1RefreshTriggerState;
}

export interface V1RefreshAndReconcileResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the reconciliation. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during reconciliation. If strict = false, any path in
affected_paths without an error can be assumed to have been reconciled succesfully. */
  errors?: V1ReconcileError[];
}

export interface V1RefreshAndReconcileRequest {
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  instanceId?: string;
  path?: string;
  strict?: boolean;
}

export type V1ReconcileStatus =
  (typeof V1ReconcileStatus)[keyof typeof V1ReconcileStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ReconcileStatus = {
  RECONCILE_STATUS_UNSPECIFIED: "RECONCILE_STATUS_UNSPECIFIED",
  RECONCILE_STATUS_IDLE: "RECONCILE_STATUS_IDLE",
  RECONCILE_STATUS_PENDING: "RECONCILE_STATUS_PENDING",
  RECONCILE_STATUS_RUNNING: "RECONCILE_STATUS_RUNNING",
} as const;

/**
 * - CODE_UNSPECIFIED: Unspecified error
 - CODE_SYNTAX: Code artifact failed to parse
 - CODE_VALIDATION: Code artifact has internal validation errors
 - CODE_DEPENDENCY: Code artifact is valid, but has invalid dependencies
 - CODE_OLAP: Error returned from the OLAP database
 - CODE_SOURCE: Error encountered during source inspection or ingestion
 - CODE_SOURCE_PERMISSION_DENIED: Error returned when unauthorised to access remote sources
 */
export type V1ReconcileErrorCode =
  (typeof V1ReconcileErrorCode)[keyof typeof V1ReconcileErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ReconcileErrorCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_SYNTAX: "CODE_SYNTAX",
  CODE_VALIDATION: "CODE_VALIDATION",
  CODE_DEPENDENCY: "CODE_DEPENDENCY",
  CODE_OLAP: "CODE_OLAP",
  CODE_SOURCE: "CODE_SOURCE",
  CODE_SOURCE_PERMISSION_DENIED: "CODE_SOURCE_PERMISSION_DENIED",
} as const;

export interface V1ReconcileErrorCharLocation {
  column?: number;
  line?: number;
}

/**
 * ReconcileError represents an error encountered while running Reconcile.
 */
export interface V1ReconcileError {
  code?: V1ReconcileErrorCode;
  endLocation?: V1ReconcileErrorCharLocation;
  filePath?: string;
  message?: string;
  /** Property path of the error in the code artifact (if any).
It's represented as a JS-style property path, e.g. "key0.key1[index2].key3".
It only applies to structured code artifacts (i.e. YAML).
Only applicable if file_path is set. */
  propertyPath?: string[];
  startLocation?: V1ReconcileErrorCharLocation;
}

export interface V1ReconcileResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the reconciliation. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during reconciliation. If strict = false, any path in
affected_paths without an error can be assumed to have been reconciled succesfully. */
  errors?: V1ReconcileError[];
}

export interface V1QueryResult {
  columnCardinalityResponse?: V1ColumnCardinalityResponse;
  columnDescriptiveStatisticsResponse?: V1ColumnDescriptiveStatisticsResponse;
  columnNullCountResponse?: V1ColumnNullCountResponse;
  columnNumericHistogramResponse?: V1ColumnNumericHistogramResponse;
  columnRollupIntervalResponse?: V1ColumnRollupIntervalResponse;
  columnRugHistogramResponse?: V1ColumnRugHistogramResponse;
  columnTimeGrainResponse?: V1ColumnTimeGrainResponse;
  columnTimeRangeResponse?: V1ColumnTimeRangeResponse;
  columnTimeSeriesResponse?: V1ColumnTimeSeriesResponse;
  columnTopKResponse?: V1ColumnTopKResponse;
  metricsViewAggregationResponse?: V1MetricsViewAggregationResponse;
  metricsViewComparisonResponse?: V1MetricsViewComparisonResponse;
  metricsViewRowsResponse?: V1MetricsViewRowsResponse;
  metricsViewTimeSeriesResponse?: V1MetricsViewTimeSeriesResponse;
  metricsViewToplistResponse?: V1MetricsViewToplistResponse;
  metricsViewTotalsResponse?: V1MetricsViewTotalsResponse;
  tableCardinalityResponse?: V1TableCardinalityResponse;
  tableColumnsResponse?: V1TableColumnsResponse;
  tableRowsResponse?: V1TableRowsResponse;
}

export type V1QueryResponseDataItem = { [key: string]: any };

export interface V1QueryResponse {
  data?: V1QueryResponseDataItem[];
  meta?: V1StructType;
}

export interface V1QueryBatchResponse {
  error?: string;
  index?: number;
  result?: V1QueryResult;
}

export interface V1Query {
  columnCardinalityRequest?: V1ColumnCardinalityRequest;
  columnDescriptiveStatisticsRequest?: V1ColumnDescriptiveStatisticsRequest;
  columnNullCountRequest?: V1ColumnNullCountRequest;
  columnNumericHistogramRequest?: V1ColumnNumericHistogramRequest;
  columnRollupIntervalRequest?: V1ColumnRollupIntervalRequest;
  columnRugHistogramRequest?: V1ColumnRugHistogramRequest;
  columnTimeGrainRequest?: V1ColumnTimeGrainRequest;
  columnTimeRangeRequest?: V1ColumnTimeRangeRequest;
  columnTimeSeriesRequest?: V1ColumnTimeSeriesRequest;
  columnTopKRequest?: V1ColumnTopKRequest;
  metricsViewAggregationRequest?: V1MetricsViewAggregationRequest;
  metricsViewComparisonRequest?: V1MetricsViewComparisonRequest;
  metricsViewRowsRequest?: V1MetricsViewRowsRequest;
  metricsViewTimeSeriesRequest?: V1MetricsViewTimeSeriesRequest;
  metricsViewToplistRequest?: V1MetricsViewToplistRequest;
  metricsViewTotalsRequest?: V1MetricsViewTotalsRequest;
  tableCardinalityRequest?: V1TableCardinalityRequest;
  tableColumnsRequest?: V1TableColumnsRequest;
  tableRowsRequest?: V1TableRowsRequest;
}

export interface V1PutFileResponse {
  filePath?: string;
}

export interface V1PutFileAndReconcileResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the reconciliation. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during reconciliation. If strict = false, any path in
affected_paths without an error can be assumed to have been reconciled succesfully. */
  errors?: V1ReconcileError[];
}

export interface V1PutFileAndReconcileRequest {
  blob?: string;
  create?: boolean;
  /** create_only will cause the operation to fail if a file already exists at path.
It should only be set when create = true. */
  createOnly?: boolean;
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  instanceId?: string;
  path?: string;
  strict?: boolean;
}

export interface V1PullTriggerState {
  [key: string]: any;
}

export interface V1PullTriggerSpec {
  [key: string]: any;
}

export interface V1PullTrigger {
  spec?: V1PullTriggerSpec;
  state?: V1PullTriggerState;
}

export interface V1ProjectParserState {
  currentCommitSha?: string;
  parseErrors?: V1ParseError[];
  watching?: boolean;
}

export interface V1ProjectParserSpec {
  [key: string]: any;
}

export interface V1ProjectParser {
  spec?: V1ProjectParserSpec;
  state?: V1ProjectParserState;
}

export interface V1ProfileColumn {
  largestStringLength?: number;
  name?: string;
  type?: string;
}

export interface V1PingResponse {
  time?: string;
  version?: string;
}

export interface V1ParseError {
  external?: boolean;
  filePath?: string;
  message?: string;
  startLocation?: Runtimev1CharLocation;
}

export type V1Operation = (typeof V1Operation)[keyof typeof V1Operation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1Operation = {
  OPERATION_UNSPECIFIED: "OPERATION_UNSPECIFIED",
  OPERATION_EQ: "OPERATION_EQ",
  OPERATION_NEQ: "OPERATION_NEQ",
  OPERATION_LT: "OPERATION_LT",
  OPERATION_LTE: "OPERATION_LTE",
  OPERATION_GT: "OPERATION_GT",
  OPERATION_GTE: "OPERATION_GTE",
  OPERATION_OR: "OPERATION_OR",
  OPERATION_AND: "OPERATION_AND",
  OPERATION_IN: "OPERATION_IN",
  OPERATION_NIN: "OPERATION_NIN",
  OPERATION_LIKE: "OPERATION_LIKE",
  OPERATION_NLIKE: "OPERATION_NLIKE",
} as const;

export type V1ObjectType = (typeof V1ObjectType)[keyof typeof V1ObjectType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ObjectType = {
  OBJECT_TYPE_UNSPECIFIED: "OBJECT_TYPE_UNSPECIFIED",
  OBJECT_TYPE_TABLE: "OBJECT_TYPE_TABLE",
  OBJECT_TYPE_SOURCE: "OBJECT_TYPE_SOURCE",
  OBJECT_TYPE_MODEL: "OBJECT_TYPE_MODEL",
  OBJECT_TYPE_METRICS_VIEW: "OBJECT_TYPE_METRICS_VIEW",
} as const;

export interface V1OLAPListTablesResponse {
  tables?: V1TableInfo[];
}

export interface V1OLAPGetTableResponse {
  schema?: V1StructType;
  view?: boolean;
}

export interface V1NumericStatistics {
  max?: number;
  mean?: number;
  min?: number;
  q25?: number;
  q50?: number;
  q75?: number;
  sd?: number;
}

export interface V1NumericOutliers {
  outliers?: NumericOutliersOutlier[];
}

export interface V1NumericHistogramBins {
  bins?: NumericHistogramBinsBin[];
}

export interface V1NumericSummary {
  numericHistogramBins?: V1NumericHistogramBins;
  numericOutliers?: V1NumericOutliers;
  numericStatistics?: V1NumericStatistics;
}

export interface V1ModelState {
  connector?: string;
  refreshedOn?: string;
  specHash?: string;
  table?: string;
}

export interface V1ModelSpec {
  connector?: string;
  materialize?: boolean;
  materializeDelaySeconds?: number;
  refreshSchedule?: V1Schedule;
  sql?: string;
  stageChanges?: boolean;
  timeoutSeconds?: number;
  trigger?: boolean;
  usesTemplating?: boolean;
}

export interface V1ModelV2 {
  spec?: V1ModelSpec;
  state?: V1ModelState;
}

export interface V1Model {
  dialect?: ModelDialect;
  materialize?: boolean;
  name?: string;
  schema?: V1StructType;
  sql?: string;
}

export interface V1MigrationState {
  version?: number;
}

export interface V1MigrationSpec {
  connector?: string;
  sql?: string;
  version?: number;
}

export interface V1Migration {
  spec?: V1MigrationSpec;
  state?: V1MigrationState;
}

export interface V1MetricsViewV2 {
  spec?: V1MetricsViewSpec;
  state?: V1MetricsViewState;
}

export type V1MetricsViewTotalsResponseData = { [key: string]: any };

export interface V1MetricsViewTotalsResponse {
  data?: V1MetricsViewTotalsResponseData;
  meta?: V1MetricsViewColumn[];
}

export interface V1MetricsViewTotalsRequest {
  filter?: V1MetricsViewFilter;
  inlineMeasures?: V1InlineMeasure[];
  instanceId?: string;
  measureNames?: string[];
  metricsViewName?: string;
  priority?: number;
  timeEnd?: string;
  timeStart?: string;
  where?: V1Expression;
}

export type V1MetricsViewToplistResponseDataItem = { [key: string]: any };

export interface V1MetricsViewToplistResponse {
  data?: V1MetricsViewToplistResponseDataItem[];
  meta?: V1MetricsViewColumn[];
}

export interface V1MetricsViewTimeSeriesResponse {
  data?: V1TimeSeriesValue[];
  meta?: V1MetricsViewColumn[];
}

export interface V1MetricsViewTimeSeriesRequest {
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  inlineMeasures?: V1InlineMeasure[];
  instanceId?: string;
  measureNames?: string[];
  metricsViewName?: string;
  priority?: number;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  timeStart?: string;
  timeZone?: string;
  where?: V1Expression;
}

export interface V1MetricsViewTimeRangeResponse {
  timeRangeSummary?: V1TimeRangeSummary;
}

export interface V1MetricsViewSpec {
  /** List of available time ranges with comparison ranges that would replace the default list. */
  availableTimeRanges?: MetricsViewSpecAvailableTimeRange[];
  availableTimeZones?: string[];
  connector?: string;
  defaultComparisonDimension?: string;
  defaultComparisonMode?: MetricsViewSpecComparisonMode;
  defaultTheme?: string;
  /** Default time range for the dashboard. It should be a valid ISO 8601 duration string. */
  defaultTimeRange?: string;
  description?: string;
  dimensions?: MetricsViewSpecDimensionV2[];
  /** ISO 8601 weekday number to use as the base for time aggregations by week. Defaults to 1 (Monday). */
  firstDayOfWeek?: number;
  /** Month number to use as the base for time aggregations by year. Defaults to 1 (January). */
  firstMonthOfYear?: number;
  measures?: MetricsViewSpecMeasureV2[];
  security?: MetricsViewSpecSecurityV2;
  smallestTimeGrain?: V1TimeGrain;
  table?: string;
  timeDimension?: string;
  title?: string;
}

export interface V1MetricsViewState {
  validSpec?: V1MetricsViewSpec;
}

export interface V1MetricsViewSort {
  ascending?: boolean;
  name?: string;
}

export type V1MetricsViewRowsResponseDataItem = { [key: string]: any };

export interface V1MetricsViewRowsResponse {
  data?: V1MetricsViewRowsResponseDataItem[];
  meta?: V1MetricsViewColumn[];
}

export interface V1MetricsViewFilter {
  exclude?: MetricsViewFilterCond[];
  include?: MetricsViewFilterCond[];
}

export interface V1MetricsViewToplistRequest {
  dimensionName?: string;
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  inlineMeasures?: V1InlineMeasure[];
  instanceId?: string;
  limit?: string;
  measureNames?: string[];
  metricsViewName?: string;
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewSort[];
  timeEnd?: string;
  timeStart?: string;
  where?: V1Expression;
}

export interface V1MetricsViewRowsRequest {
  filter?: V1MetricsViewFilter;
  instanceId?: string;
  limit?: number;
  metricsViewName?: string;
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewSort[];
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  timeStart?: string;
  timeZone?: string;
  where?: V1Expression;
}

export interface V1MetricsViewComparisonValue {
  baseValue?: unknown;
  comparisonValue?: unknown;
  deltaAbs?: unknown;
  deltaRel?: unknown;
  measureName?: string;
}

export type V1MetricsViewComparisonSortType =
  (typeof V1MetricsViewComparisonSortType)[keyof typeof V1MetricsViewComparisonSortType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1MetricsViewComparisonSortType = {
  METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED",
  METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE",
  METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE",
  METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA",
  METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA",
} as const;

export interface V1MetricsViewComparisonSort {
  desc?: boolean;
  name?: string;
  sortType?: V1MetricsViewComparisonMeasureType;
  type?: V1MetricsViewComparisonSortType;
}

export interface V1MetricsViewComparisonRow {
  dimensionValue?: unknown;
  measureValues?: V1MetricsViewComparisonValue[];
}

export interface V1MetricsViewComparisonResponse {
  rows?: V1MetricsViewComparisonRow[];
}

export type V1MetricsViewComparisonMeasureType =
  (typeof V1MetricsViewComparisonMeasureType)[keyof typeof V1MetricsViewComparisonMeasureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1MetricsViewComparisonMeasureType = {
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA",
} as const;

export interface V1MetricsViewComparisonMeasureAlias {
  alias?: string;
  name?: string;
  type?: V1MetricsViewComparisonMeasureType;
}

export interface V1MetricsViewColumn {
  name?: string;
  nullable?: boolean;
  type?: string;
}

export interface V1MetricsViewAggregationSort {
  desc?: boolean;
  name?: string;
}

export type V1MetricsViewAggregationResponseDataItem = { [key: string]: any };

export interface V1MetricsViewAggregationResponse {
  data?: V1MetricsViewAggregationResponseDataItem[];
  schema?: V1StructType;
}

export interface V1MetricsViewAggregationMeasure {
  builtinMeasure?: V1BuiltinMeasure;
  builtinMeasureArgs?: unknown[];
  name?: string;
}

export interface V1MetricsViewAggregationDimension {
  name?: string;
  timeGrain?: V1TimeGrain;
  timeZone?: string;
}

export interface V1MetricsViewAggregationRequest {
  dimensions?: V1MetricsViewAggregationDimension[];
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  instanceId?: string;
  limit?: string;
  measures?: V1MetricsViewAggregationMeasure[];
  metricsView?: string;
  offset?: string;
  pivotOn?: string[];
  priority?: number;
  sort?: V1MetricsViewAggregationSort[];
  timeEnd?: string;
  timeRange?: V1TimeRange;
  timeStart?: string;
  where?: V1Expression;
}

export interface V1MetricsView {
  /** Available time zones list preferred time zones using IANA location identifiers. */
  availableTimeZones?: string[];
  /** Default time range for the dashboard. It should be a valid ISO 8601 duration string. */
  defaultTimeRange?: string;
  description?: string;
  dimensions?: MetricsViewDimension[];
  firstDayOfWeek?: number;
  firstMonthOfYear?: number;
  label?: string;
  measures?: MetricsViewMeasure[];
  model?: string;
  name?: string;
  security?: MetricsViewSecurity;
  smallestTimeGrain?: V1TimeGrain;
  timeDimension?: string;
}

export interface V1MapType {
  keyType?: Runtimev1Type;
  valueType?: Runtimev1Type;
}

export type V1LogLevel = (typeof V1LogLevel)[keyof typeof V1LogLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1LogLevel = {
  LOG_LEVEL_UNSPECIFIED: "LOG_LEVEL_UNSPECIFIED",
  LOG_LEVEL_DEBUG: "LOG_LEVEL_DEBUG",
  LOG_LEVEL_INFO: "LOG_LEVEL_INFO",
  LOG_LEVEL_WARN: "LOG_LEVEL_WARN",
  LOG_LEVEL_ERROR: "LOG_LEVEL_ERROR",
} as const;

export interface V1Log {
  jsonPayload?: string;
  level?: V1LogLevel;
  message?: string;
  time?: string;
}

export interface V1ListResourcesResponse {
  resources?: V1Resource[];
}

export interface V1ListInstancesResponse {
  instances?: V1Instance[];
  nextPageToken?: string;
}

export interface V1ListFilesResponse {
  paths?: string[];
}

export interface V1ListExamplesResponse {
  examples?: V1Example[];
}

export interface V1ListConnectorsResponse {
  connectors?: V1ConnectorSpec[];
}

export interface V1ListCatalogEntriesResponse {
  entries?: V1CatalogEntry[];
}

export interface V1IssueDevJWTResponse {
  jwt?: string;
}

export type V1InstanceVariables = { [key: string]: string };

export type V1InstanceProjectVariables = { [key: string]: string };

export type V1InstanceAnnotations = { [key: string]: string };

/**
 * Instance represents a single data project, meaning one set of code artifacts,
one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
metadata (such as reconciliation state). Instances are the unit of isolation within
the runtime. They enable one runtime deployment to serve not only multiple data
projects, but also multiple tenants. On local, the runtime will usually have
just a single instance.
 */
export interface V1Instance {
  adminConnector?: string;
  annotations?: V1InstanceAnnotations;
  connectors?: V1Connector[];
  createdOn?: string;
  embedCatalog?: boolean;
  instanceId?: string;
  modelDefaultMaterialize?: boolean;
  modelMaterializeDelaySeconds?: number;
  olapConnector?: string;
  projectConnectors?: V1Connector[];
  projectVariables?: V1InstanceProjectVariables;
  repoConnector?: string;
  stageChanges?: boolean;
  updatedOn?: string;
  variables?: V1InstanceVariables;
  watchRepo?: boolean;
}

export interface V1InlineMeasure {
  expression?: string;
  name?: string;
}

export type V1HistogramMethod =
  (typeof V1HistogramMethod)[keyof typeof V1HistogramMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1HistogramMethod = {
  HISTOGRAM_METHOD_UNSPECIFIED: "HISTOGRAM_METHOD_UNSPECIFIED",
  HISTOGRAM_METHOD_FD: "HISTOGRAM_METHOD_FD",
  HISTOGRAM_METHOD_DIAGNOSTIC: "HISTOGRAM_METHOD_DIAGNOSTIC",
} as const;

export interface V1GetResourceResponse {
  resource?: V1Resource;
}

export interface V1GetLogsResponse {
  logs?: V1Log[];
}

export interface V1GetInstanceResponse {
  instance?: V1Instance;
}

export interface V1GetFileResponse {
  blob?: string;
  updatedOn?: string;
}

export interface V1GetCatalogEntryResponse {
  entry?: V1CatalogEntry;
}

export interface V1GCSObject {
  isDir?: boolean;
  modifiedOn?: string;
  name?: string;
  size?: string;
}

export interface V1GCSListObjectsResponse {
  nextPageToken?: string;
  objects?: V1GCSObject[];
}

export interface V1GCSListBucketsResponse {
  buckets?: string[];
  nextPageToken?: string;
}

export interface V1GCSGetCredentialsInfoResponse {
  exist?: boolean;
  projectId?: string;
}

/**
 * FileEvent describes a file change.
 */
export type V1FileEvent = (typeof V1FileEvent)[keyof typeof V1FileEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1FileEvent = {
  FILE_EVENT_UNSPECIFIED: "FILE_EVENT_UNSPECIFIED",
  FILE_EVENT_WRITE: "FILE_EVENT_WRITE",
  FILE_EVENT_DELETE: "FILE_EVENT_DELETE",
} as const;

export interface V1Expression {
  cond?: V1Condition;
  ident?: string;
  val?: unknown;
}

export interface V1MetricsViewComparisonRequest {
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  comparisonTimeRange?: V1TimeRange;
  dimension?: V1MetricsViewAggregationDimension;
  exact?: boolean;
  filter?: V1MetricsViewFilter;
  having?: V1Expression;
  instanceId?: string;
  limit?: string;
  measures?: V1MetricsViewAggregationMeasure[];
  metricsViewName?: string;
  offset?: string;
  priority?: number;
  sort?: V1MetricsViewComparisonSort[];
  timeRange?: V1TimeRange;
  where?: V1Expression;
}

export interface V1ExportResponse {
  downloadUrlPath?: string;
}

export type V1ExportFormat =
  (typeof V1ExportFormat)[keyof typeof V1ExportFormat];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ExportFormat = {
  EXPORT_FORMAT_UNSPECIFIED: "EXPORT_FORMAT_UNSPECIFIED",
  EXPORT_FORMAT_CSV: "EXPORT_FORMAT_CSV",
  EXPORT_FORMAT_XLSX: "EXPORT_FORMAT_XLSX",
  EXPORT_FORMAT_PARQUET: "EXPORT_FORMAT_PARQUET",
} as const;

/**
 * Example contains metadata about an example project that is available for unpacking.
 */
export interface V1Example {
  description?: string;
  name?: string;
  title?: string;
}

export interface V1EditInstanceResponse {
  instance?: V1Instance;
}

export interface V1DeleteInstanceResponse {
  [key: string]: any;
}

export interface V1DeleteFileResponse {
  [key: string]: any;
}

export interface V1DeleteFileAndReconcileResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the reconciliation. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during reconciliation. If strict = false, any path in
affected_paths without an error can be assumed to have been reconciled succesfully. */
  errors?: V1ReconcileError[];
}

export interface V1DeleteFileAndReconcileRequest {
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  instanceId?: string;
  path?: string;
  strict?: boolean;
}

export interface V1CreateTriggerResponse {
  [key: string]: any;
}

export interface V1CreateInstanceResponse {
  instance?: V1Instance;
}

export type V1CreateInstanceRequestVariables = { [key: string]: string };

export type V1CreateInstanceRequestAnnotations = { [key: string]: string };

/**
 * Request message for RuntimeService.CreateInstance.
See message Instance for field descriptions.
 */
export interface V1CreateInstanceRequest {
  adminConnector?: string;
  annotations?: V1CreateInstanceRequestAnnotations;
  connectors?: V1Connector[];
  embedCatalog?: boolean;
  instanceId?: string;
  modelDefaultMaterialize?: boolean;
  modelMaterializeDelaySeconds?: number;
  olapConnector?: string;
  repoConnector?: string;
  stageChanges?: boolean;
  variables?: V1CreateInstanceRequestVariables;
  watchRepo?: boolean;
}

/**
 * ConnectorSpec represents a connector available in the runtime.
It should not be confused with a source.
 */
export interface V1ConnectorSpec {
  description?: string;
  displayName?: string;
  name?: string;
  properties?: ConnectorSpecProperty[];
}

export type V1ConnectorConfig = { [key: string]: string };

export interface V1Connector {
  config?: V1ConnectorConfig;
  name?: string;
  /** Type of the connector. One of the infra driver supported. */
  type?: string;
}

export interface V1Condition {
  exprs?: V1Expression[];
  op?: V1Operation;
}

export interface V1ColumnTopKResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export interface V1ColumnTopKRequest {
  agg?: string;
  columnName?: string;
  instanceId?: string;
  k?: number;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnTimeSeriesResponse {
  rollup?: V1TimeSeriesResponse;
}

export interface V1ColumnTimeSeriesRequest {
  instanceId?: string;
  measures?: ColumnTimeSeriesRequestBasicMeasure[];
  pixels?: number;
  priority?: number;
  sampleSize?: number;
  tableName?: string;
  timeRange?: V1TimeSeriesTimeRange;
  timestampColumnName?: string;
  timeZone?: string;
}

export interface V1ColumnTimeRangeResponse {
  timeRangeSummary?: V1TimeRangeSummary;
}

export interface V1ColumnTimeRangeRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnTimeGrainResponse {
  timeGrain?: V1TimeGrain;
}

export interface V1ColumnTimeGrainRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnRugHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnRugHistogramRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnRollupIntervalResponse {
  end?: string;
  interval?: V1TimeGrain;
  start?: string;
}

export interface V1ColumnRollupIntervalRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnNumericHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnNumericHistogramRequest {
  columnName?: string;
  histogramMethod?: V1HistogramMethod;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnNullCountResponse {
  count?: number;
}

export interface V1ColumnNullCountRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnDescriptiveStatisticsResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnDescriptiveStatisticsRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1ColumnCardinalityResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export interface V1ColumnCardinalityRequest {
  columnName?: string;
  instanceId?: string;
  priority?: number;
  tableName?: string;
}

export interface V1Color {
  alpha?: number;
  blue?: number;
  green?: number;
  red?: number;
}

export interface V1CategoricalSummary {
  cardinality?: number;
  topK?: V1TopK;
}

export interface V1CatalogEntry {
  children?: string[];
  createdOn?: string;
  /** Marks whether this entry is embedded or not. If yes then this will not have a corresponding artifact. */
  embedded?: boolean;
  metricsView?: V1MetricsView;
  model?: V1Model;
  name?: string;
  parents?: string[];
  path?: string;
  refreshedOn?: string;
  source?: V1Source;
  table?: V1Table;
  updatedOn?: string;
}

export type V1BuiltinMeasure =
  (typeof V1BuiltinMeasure)[keyof typeof V1BuiltinMeasure];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1BuiltinMeasure = {
  BUILTIN_MEASURE_UNSPECIFIED: "BUILTIN_MEASURE_UNSPECIFIED",
  BUILTIN_MEASURE_COUNT: "BUILTIN_MEASURE_COUNT",
  BUILTIN_MEASURE_COUNT_DISTINCT: "BUILTIN_MEASURE_COUNT_DISTINCT",
} as const;

export interface V1BucketPlannerState {
  region?: string;
}

export interface V1BucketPlanner {
  spec?: V1BucketPlannerSpec;
  state?: V1BucketPlannerState;
}

export interface V1BucketExtractPolicy {
  filesLimit?: string;
  filesStrategy?: BucketExtractPolicyStrategy;
  rowsLimitBytes?: string;
  rowsStrategy?: BucketExtractPolicyStrategy;
}

export interface V1BucketPlannerSpec {
  extractPolicy?: V1BucketExtractPolicy;
}

export interface V1BigQueryListTablesResponse {
  names?: string[];
  nextPageToken?: string;
}

export interface V1BigQueryListDatasetsResponse {
  names?: string[];
  nextPageToken?: string;
}

export interface Runtimev1Type {
  arrayElementType?: Runtimev1Type;
  code?: V1TypeCode;
  mapType?: V1MapType;
  nullable?: boolean;
  structType?: V1StructType;
}

export interface Runtimev1CharLocation {
  line?: number;
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

 The JSON representation for `NullValue` is JSON `null`.

 - NULL_VALUE: Null value.
 */
export type ProtobufNullValue =
  (typeof ProtobufNullValue)[keyof typeof ProtobufNullValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProtobufNullValue = {
  NULL_VALUE: "NULL_VALUE",
} as const;

export interface ProtobufAny {
  "@type"?: string;
  [key: string]: unknown;
}

export interface RpcStatus {
  code?: number;
  details?: ProtobufAny[];
  message?: string;
}

export interface TopKEntry {
  count?: number;
  value?: unknown;
}

export interface TimeRangeSummaryInterval {
  days?: number;
  micros?: string;
  months?: number;
}

export interface StructTypeField {
  name?: string;
  type?: Runtimev1Type;
}

export interface SecurityV2FieldConditionV2 {
  condition?: string;
  names?: string[];
}

export interface SecurityFieldCondition {
  condition?: string;
  names?: string[];
}

export interface NumericOutliersOutlier {
  bucket?: number;
  count?: number;
  high?: number;
  low?: number;
  present?: boolean;
}

export interface NumericHistogramBinsBin {
  bucket?: number;
  count?: number;
  high?: number;
  low?: number;
  midpoint?: number;
}

export type ModelDialect = (typeof ModelDialect)[keyof typeof ModelDialect];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelDialect = {
  DIALECT_UNSPECIFIED: "DIALECT_UNSPECIFIED",
  DIALECT_DUCKDB: "DIALECT_DUCKDB",
} as const;

export interface MetricsViewSpecSecurityV2 {
  access?: string;
  exclude?: SecurityV2FieldConditionV2[];
  include?: SecurityV2FieldConditionV2[];
  rowFilter?: string;
}

export interface MetricsViewSpecMeasureV2 {
  description?: string;
  expression?: string;
  formatD3?: string;
  formatPreset?: string;
  label?: string;
  name?: string;
  validPercentOfTotal?: boolean;
}

export interface MetricsViewSpecDimensionV2 {
  column?: string;
  description?: string;
  expression?: string;
  label?: string;
  name?: string;
  unnest?: boolean;
}

export type MetricsViewSpecComparisonMode =
  (typeof MetricsViewSpecComparisonMode)[keyof typeof MetricsViewSpecComparisonMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsViewSpecComparisonMode = {
  COMPARISON_MODE_UNSPECIFIED: "COMPARISON_MODE_UNSPECIFIED",
  COMPARISON_MODE_NONE: "COMPARISON_MODE_NONE",
  COMPARISON_MODE_TIME: "COMPARISON_MODE_TIME",
  COMPARISON_MODE_DIMENSION: "COMPARISON_MODE_DIMENSION",
} as const;

export interface MetricsViewSpecAvailableComparisonOffset {
  offset?: string;
  /** Used to override the range for the comparison with something other than the selected range. */
  range?: string;
}

export interface MetricsViewSpecAvailableTimeRange {
  /** Available comparison offsets for this time range. */
  comparisonOffsets?: MetricsViewSpecAvailableComparisonOffset[];
  range?: string;
}

export interface MetricsViewSecurity {
  access?: string;
  exclude?: SecurityFieldCondition[];
  include?: SecurityFieldCondition[];
  rowFilter?: string;
}

export interface MetricsViewMeasure {
  description?: string;
  expression?: string;
  format?: string;
  label?: string;
  name?: string;
  validPercentOfTotal?: boolean;
}

export interface MetricsViewFilterCond {
  in?: unknown[];
  like?: string[];
  name?: string;
}

export interface MetricsViewDimension {
  column?: string;
  description?: string;
  label?: string;
  name?: string;
}

export type ConnectorSpecPropertyType =
  (typeof ConnectorSpecPropertyType)[keyof typeof ConnectorSpecPropertyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectorSpecPropertyType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_STRING: "TYPE_STRING",
  TYPE_NUMBER: "TYPE_NUMBER",
  TYPE_BOOLEAN: "TYPE_BOOLEAN",
  TYPE_INFORMATIONAL: "TYPE_INFORMATIONAL",
} as const;

export interface ConnectorSpecProperty {
  description?: string;
  displayName?: string;
  hint?: string;
  href?: string;
  key?: string;
  nullable?: boolean;
  placeholder?: string;
  type?: ConnectorSpecPropertyType;
}

export interface ColumnTimeSeriesRequestBasicMeasure {
  expression?: string;
  id?: string;
  sqlName?: string;
}

export type BucketExtractPolicyStrategy =
  (typeof BucketExtractPolicyStrategy)[keyof typeof BucketExtractPolicyStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BucketExtractPolicyStrategy = {
  STRATEGY_UNSPECIFIED: "STRATEGY_UNSPECIFIED",
  STRATEGY_HEAD: "STRATEGY_HEAD",
  STRATEGY_TAIL: "STRATEGY_TAIL",
} as const;
