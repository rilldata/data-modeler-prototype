/**
 * Generated by orval v6.12.0 üç∫
 * Do not edit manually.
 * rill/runtime/v1/colors.proto
 * OpenAPI spec version: version not set
 */
export type ConnectorServiceS3GetCredentialsInfoParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceS3ListBucketsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceS3ListObjectsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
  region?: string;
  prefix?: string;
  startAfter?: string;
  delimiter?: string;
};

export type ConnectorServiceS3GetBucketMetadataParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceOLAPListTablesParams = {
  instanceId?: string;
  connector?: string;
};

export type RuntimeServiceCreateTriggerBody = {
  pullTriggerSpec?: V1PullTriggerSpec;
  refreshTriggerSpec?: V1RefreshTriggerSpec;
};

export type RuntimeServiceWatchResources200 = {
  result?: V1WatchResourcesResponse;
  error?: RpcStatus;
};

export type RuntimeServiceWatchResourcesParams = {
  kind?: string;
  replay?: boolean;
  level?: string;
};

export type RuntimeServiceListResourcesParams = {
  kind?: string;
  path?: string;
};

export type RuntimeServiceGetResourceParams = {
  "name.kind"?: string;
  "name.name"?: string;
};

export type QueryServiceQueryBatch200 = {
  result?: V1QueryBatchResponse;
  error?: RpcStatus;
};

export type QueryServiceQueryBatchBody = {
  queries?: V1Query[];
};

export type QueryServiceQueryBody = {
  connector?: string;
  sql?: string;
  args?: unknown[];
  priority?: number;
  dryRun?: boolean;
  limit?: number;
};

export type QueryServiceColumnTopKBody = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  agg?: string;
  k?: number;
  priority?: number;
};

export type QueryServiceColumnTimeSeriesBody = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  measures?: ColumnTimeSeriesRequestBasicMeasure[];
  timestampColumnName?: string;
  timeRange?: V1TimeSeriesTimeRange;
  pixels?: number;
  sampleSize?: number;
  priority?: number;
  timeZone?: string;
};

export type QueryServiceColumnTimeRangeParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableCardinalityParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  priority?: number;
};

export type QueryServiceColumnTimeGrainParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceColumnRugHistogramParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableRowsParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  limit?: number;
  priority?: number;
};

export type QueryServiceColumnRollupIntervalBody = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceColumnNumericHistogramHistogramMethod =
  (typeof QueryServiceColumnNumericHistogramHistogramMethod)[keyof typeof QueryServiceColumnNumericHistogramHistogramMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const QueryServiceColumnNumericHistogramHistogramMethod = {
  HISTOGRAM_METHOD_UNSPECIFIED: "HISTOGRAM_METHOD_UNSPECIFIED",
  HISTOGRAM_METHOD_FD: "HISTOGRAM_METHOD_FD",
  HISTOGRAM_METHOD_DIAGNOSTIC: "HISTOGRAM_METHOD_DIAGNOSTIC",
} as const;

export type QueryServiceColumnNumericHistogramParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  histogramMethod?: QueryServiceColumnNumericHistogramHistogramMethod;
  priority?: number;
};

export type QueryServiceColumnNullCountParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceMetricsViewTotalsBody = {
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  where?: V1Expression;
  priority?: number;
  filter?: V1MetricsViewFilter;
};

export type QueryServiceMetricsViewToplistBody = {
  dimensionName?: string;
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  limit?: string;
  offset?: string;
  sort?: V1MetricsViewSort[];
  where?: V1Expression;
  having?: V1Expression;
  priority?: number;
  filter?: V1MetricsViewFilter;
};

export type QueryServiceMetricsViewTimeSeriesBody = {
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  where?: V1Expression;
  having?: V1Expression;
  timeZone?: string;
  priority?: number;
  filter?: V1MetricsViewFilter;
};

export type QueryServiceMetricsViewTimeRangeBody = {
  priority?: number;
};

export type QueryServiceMetricsViewSearchBody = {
  dimensions?: string[];
  search?: string;
  timeRange?: V1TimeRange;
  where?: V1Expression;
  having?: V1Expression;
  limit?: number;
  priority?: number;
};

export type QueryServiceMetricsViewSchemaParams = { priority?: number };

export type QueryServiceMetricsViewRowsBody = {
  timeStart?: string;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  where?: V1Expression;
  sort?: V1MetricsViewSort[];
  limit?: number;
  offset?: string;
  priority?: number;
  timeZone?: string;
  filter?: V1MetricsViewFilter;
};

export type QueryServiceMetricsViewComparisonBody = {
  dimension?: V1MetricsViewAggregationDimension;
  measures?: V1MetricsViewAggregationMeasure[];
  comparisonMeasures?: string[];
  sort?: V1MetricsViewComparisonSort[];
  timeRange?: V1TimeRange;
  comparisonTimeRange?: V1TimeRange;
  where?: V1Expression;
  having?: V1Expression;
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  limit?: string;
  offset?: string;
  priority?: number;
  exact?: boolean;
  filter?: V1MetricsViewFilter;
};

export type QueryServiceMetricsViewAggregationBody = {
  dimensions?: V1MetricsViewAggregationDimension[];
  measures?: V1MetricsViewAggregationMeasure[];
  sort?: V1MetricsViewAggregationSort[];
  timeRange?: V1TimeRange;
  comparisonTimeRange?: V1TimeRange;
  timeStart?: string;
  timeEnd?: string;
  pivotOn?: string[];
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  where?: V1Expression;
  having?: V1Expression;
  limit?: string;
  offset?: string;
  priority?: number;
  filter?: V1MetricsViewFilter;
  exact?: boolean;
};

export type QueryServiceExportBody = {
  limit?: string;
  format?: V1ExportFormat;
  query?: V1Query;
  bakedQuery?: string;
};

export type QueryServiceColumnDescriptiveStatisticsParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type QueryServiceTableColumnsParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  priority?: number;
};

export type QueryServiceColumnCardinalityParams = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  columnName?: string;
  priority?: number;
};

export type RuntimeServiceWatchLogs200 = {
  result?: V1WatchLogsResponse;
  error?: RpcStatus;
};

export type RuntimeServiceWatchLogsLevel =
  (typeof RuntimeServiceWatchLogsLevel)[keyof typeof RuntimeServiceWatchLogsLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeServiceWatchLogsLevel = {
  LOG_LEVEL_UNSPECIFIED: "LOG_LEVEL_UNSPECIFIED",
  LOG_LEVEL_DEBUG: "LOG_LEVEL_DEBUG",
  LOG_LEVEL_INFO: "LOG_LEVEL_INFO",
  LOG_LEVEL_WARN: "LOG_LEVEL_WARN",
  LOG_LEVEL_ERROR: "LOG_LEVEL_ERROR",
  LOG_LEVEL_FATAL: "LOG_LEVEL_FATAL",
} as const;

export type RuntimeServiceWatchLogsParams = {
  replay?: boolean;
  replayLimit?: number;
  level?: RuntimeServiceWatchLogsLevel;
};

export type RuntimeServiceGetLogsLevel =
  (typeof RuntimeServiceGetLogsLevel)[keyof typeof RuntimeServiceGetLogsLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeServiceGetLogsLevel = {
  LOG_LEVEL_UNSPECIFIED: "LOG_LEVEL_UNSPECIFIED",
  LOG_LEVEL_DEBUG: "LOG_LEVEL_DEBUG",
  LOG_LEVEL_INFO: "LOG_LEVEL_INFO",
  LOG_LEVEL_WARN: "LOG_LEVEL_WARN",
  LOG_LEVEL_ERROR: "LOG_LEVEL_ERROR",
  LOG_LEVEL_FATAL: "LOG_LEVEL_FATAL",
} as const;

export type RuntimeServiceGetLogsParams = {
  ascending?: boolean;
  limit?: number;
  level?: RuntimeServiceGetLogsLevel;
};

export type RuntimeServiceGenerateResolverBody = {
  prompt?: string;
  /** Both connector and table must be specified if metrics_view is not. */
  connector?: string;
  table?: string;
  /** table and connector should not be provided if metrics_view is provided. */
  metricsView?: string;
};

export type RuntimeServiceGenerateRendererBodyResolverProperties = {
  [key: string]: any;
};

export type RuntimeServiceGenerateRendererBody = {
  prompt?: string;
  resolver?: string;
  resolverProperties?: RuntimeServiceGenerateRendererBodyResolverProperties;
};

export type RuntimeServiceWatchFiles200 = {
  result?: V1WatchFilesResponse;
  error?: RpcStatus;
};

export type RuntimeServiceWatchFilesParams = { replay?: boolean };

export type RuntimeServiceUnpackExampleBody = {
  name?: string;
  force?: boolean;
};

export type RuntimeServiceUnpackEmptyBody = {
  title?: string;
  force?: boolean;
};

export type RuntimeServiceRenameFileBody = {
  fromPath?: string;
  toPath?: string;
};

export type RuntimeServiceGenerateMetricsViewFileBody = {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  table?: string;
  path?: string;
  useAi?: boolean;
};

export type RuntimeServicePutFileBody = {
  path?: string;
  blob?: string;
  create?: boolean;
  /** Will cause the operation to fail if the file already exists.
It should only be set when create = true. */
  createOnly?: boolean;
};

export type RuntimeServiceDeleteFileParams = { path?: string; force?: boolean };

export type RuntimeServiceGetFileParams = { path?: string };

export type RuntimeServiceCreateDirectoryBody = {
  path?: string;
};

export type RuntimeServiceListFilesParams = { glob?: string };

export type RuntimeServiceEditInstanceBodyAnnotations = {
  [key: string]: string;
};

export type RuntimeServiceEditInstanceBodyVariables = { [key: string]: string };

/**
 * Request message for RuntimeService.EditInstance.
See message Instance for field descriptions.
 */
export type RuntimeServiceEditInstanceBody = {
  environment?: string;
  olapConnector?: string;
  repoConnector?: string;
  adminConnector?: string;
  aiConnector?: string;
  connectors?: V1Connector[];
  variables?: RuntimeServiceEditInstanceBodyVariables;
  annotations?: RuntimeServiceEditInstanceBodyAnnotations;
  embedCatalog?: boolean;
  watchRepo?: boolean;
};

export type RuntimeServiceDeleteInstanceBody = { [key: string]: any };

export type RuntimeServiceGetInstanceParams = { sensitive?: boolean };

export type RuntimeServiceListInstancesParams = {
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceGCSGetCredentialsInfoParams = {
  instanceId?: string;
  connector?: string;
};

export type ConnectorServiceGCSListBucketsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceGCSListObjectsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
  prefix?: string;
  startOffset?: string;
  endOffset?: string;
  delimiter?: string;
};

export type RuntimeServiceIssueDevJWTParams = {
  name?: string;
  email?: string;
  groups?: string[];
  admin?: boolean;
};

export type ConnectorServiceOLAPGetTableParams = {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  table?: string;
};

export type ConnectorServiceBigQueryListTablesParams = {
  instanceId?: string;
  connector?: string;
  dataset?: string;
  pageSize?: number;
  pageToken?: string;
};

export type ConnectorServiceBigQueryListDatasetsParams = {
  instanceId?: string;
  connector?: string;
  pageSize?: number;
  pageToken?: string;
};

export interface V1WatchResourcesResponse {
  event?: V1ResourceEvent;
  name?: V1ResourceName;
  resource?: V1Resource;
}

export interface V1WatchLogsResponse {
  log?: V1Log;
}

export interface V1WatchFilesResponse {
  event?: V1FileEvent;
  path?: string;
  isDir?: boolean;
}

export interface V1UnpackExampleResponse {
  [key: string]: any;
}

export interface V1UnpackEmptyResponse {
  [key: string]: any;
}

export interface V1TopK {
  entries?: TopKEntry[];
}

export type V1TimeSeriesValueRecords = { [key: string]: any };

export interface V1TimeSeriesValue {
  ts?: string;
  bin?: number;
  records?: V1TimeSeriesValueRecords;
}

export interface V1TimeSeriesResponse {
  results?: V1TimeSeriesValue[];
  spark?: V1TimeSeriesValue[];
  sampleSize?: number;
}

export interface V1TimeRangeSummary {
  min?: string;
  max?: string;
  interval?: TimeRangeSummaryInterval;
}

export type V1TimeGrain = (typeof V1TimeGrain)[keyof typeof V1TimeGrain];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1TimeGrain = {
  TIME_GRAIN_UNSPECIFIED: "TIME_GRAIN_UNSPECIFIED",
  TIME_GRAIN_MILLISECOND: "TIME_GRAIN_MILLISECOND",
  TIME_GRAIN_SECOND: "TIME_GRAIN_SECOND",
  TIME_GRAIN_MINUTE: "TIME_GRAIN_MINUTE",
  TIME_GRAIN_HOUR: "TIME_GRAIN_HOUR",
  TIME_GRAIN_DAY: "TIME_GRAIN_DAY",
  TIME_GRAIN_WEEK: "TIME_GRAIN_WEEK",
  TIME_GRAIN_MONTH: "TIME_GRAIN_MONTH",
  TIME_GRAIN_QUARTER: "TIME_GRAIN_QUARTER",
  TIME_GRAIN_YEAR: "TIME_GRAIN_YEAR",
} as const;

export interface V1TimeSeriesTimeRange {
  start?: string;
  end?: string;
  interval?: V1TimeGrain;
}

export interface V1TimeRange {
  start?: string;
  end?: string;
  isoDuration?: string;
  isoOffset?: string;
  roundToGrain?: V1TimeGrain;
  timeZone?: string;
}

export interface V1ThemeState {
  [key: string]: any;
}

export interface V1ThemeSpec {
  primaryColor?: V1Color;
  secondaryColor?: V1Color;
}

export interface V1Theme {
  spec?: V1ThemeSpec;
  state?: V1ThemeState;
}

export type V1TableRowsResponseDataItem = { [key: string]: any };

export interface V1TableRowsResponse {
  data?: V1TableRowsResponseDataItem[];
}

export interface V1TableRowsRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  limit?: number;
  priority?: number;
}

export interface V1TableInfo {
  database?: string;
  databaseSchema?: string;
  isDefaultDatabase?: boolean;
  isDefaultDatabaseSchema?: boolean;
  name?: string;
  hasUnsupportedDataTypes?: boolean;
}

export type V1TableColumnsResponseUnsupportedColumns = {
  [key: string]: string;
};

export interface V1TableColumnsResponse {
  profileColumns?: V1ProfileColumn[];
  unsupportedColumns?: V1TableColumnsResponseUnsupportedColumns;
}

export interface V1TableColumnsRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  priority?: number;
}

export interface V1TableCardinalityResponse {
  cardinality?: string;
}

export interface V1TableCardinalityRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  priority?: number;
}

export interface V1Subquery {
  dimension?: string;
  measures?: string[];
  where?: V1Expression;
  having?: V1Expression;
}

export interface V1StructType {
  fields?: StructTypeField[];
}

export interface V1SourceState {
  connector?: string;
  table?: string;
  specHash?: string;
  refreshedOn?: string;
}

export type V1SourceSpecProperties = { [key: string]: any };

export interface V1Schedule {
  refUpdate?: boolean;
  disable?: boolean;
  cron?: string;
  tickerSeconds?: number;
  timeZone?: string;
}

export interface V1SourceSpec {
  sourceConnector?: string;
  sinkConnector?: string;
  properties?: V1SourceSpecProperties;
  refreshSchedule?: V1Schedule;
  timeoutSeconds?: number;
  stageChanges?: boolean;
  streamIngestion?: boolean;
  trigger?: boolean;
}

export interface V1SourceV2 {
  spec?: V1SourceSpec;
  state?: V1SourceState;
}

export interface V1S3Object {
  name?: string;
  modifiedOn?: string;
  size?: string;
  isDir?: boolean;
}

export interface V1S3ListObjectsResponse {
  nextPageToken?: string;
  objects?: V1S3Object[];
}

export interface V1S3ListBucketsResponse {
  nextPageToken?: string;
  buckets?: string[];
}

export interface V1S3GetCredentialsInfoResponse {
  exist?: boolean;
  provider?: string;
}

export interface V1S3GetBucketMetadataResponse {
  region?: string;
}

export interface V1ResourceName {
  kind?: string;
  name?: string;
}

export interface V1ResourceMeta {
  name?: V1ResourceName;
  refs?: V1ResourceName[];
  owner?: V1ResourceName;
  filePaths?: string[];
  hidden?: boolean;
  version?: string;
  specVersion?: string;
  stateVersion?: string;
  createdOn?: string;
  specUpdatedOn?: string;
  stateUpdatedOn?: string;
  deletedOn?: string;
  reconcileStatus?: V1ReconcileStatus;
  reconcileError?: string;
  reconcileOn?: string;
  renamedFrom?: V1ResourceName;
}

export type V1ResourceEvent =
  (typeof V1ResourceEvent)[keyof typeof V1ResourceEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ResourceEvent = {
  RESOURCE_EVENT_UNSPECIFIED: "RESOURCE_EVENT_UNSPECIFIED",
  RESOURCE_EVENT_WRITE: "RESOURCE_EVENT_WRITE",
  RESOURCE_EVENT_DELETE: "RESOURCE_EVENT_DELETE",
} as const;

export interface V1Resource {
  meta?: V1ResourceMeta;
  projectParser?: V1ProjectParser;
  source?: V1SourceV2;
  model?: V1ModelV2;
  metricsView?: V1MetricsViewV2;
  migration?: V1Migration;
  report?: V1Report;
  alert?: V1Alert;
  pullTrigger?: V1PullTrigger;
  refreshTrigger?: V1RefreshTrigger;
  bucketPlanner?: V1BucketPlanner;
  theme?: V1Theme;
  component?: V1Component;
  dashboard?: V1Dashboard;
  api?: V1API;
  connector?: V1ConnectorV2;
}

export interface V1ReportState {
  nextRunOn?: string;
  currentExecution?: V1ReportExecution;
  executionHistory?: V1ReportExecution[];
  executionCount?: number;
}

export type V1ReportSpecAnnotations = { [key: string]: string };

export interface V1ReportSpec {
  trigger?: boolean;
  title?: string;
  refreshSchedule?: V1Schedule;
  timeoutSeconds?: number;
  queryName?: string;
  queryArgsJson?: string;
  exportLimit?: string;
  exportFormat?: V1ExportFormat;
  notifiers?: V1Notifier[];
  annotations?: V1ReportSpecAnnotations;
  /** If true, will use the lowest watermark of its refs instead of the trigger time. */
  watermarkInherit?: boolean;
  intervalsIsoDuration?: string;
  intervalsLimit?: number;
  intervalsCheckUnclosed?: boolean;
}

export interface V1ReportExecution {
  adhoc?: boolean;
  errorMessage?: string;
  reportTime?: string;
  startedOn?: string;
  finishedOn?: string;
}

export interface V1Report {
  spec?: V1ReportSpec;
  state?: V1ReportState;
}

export interface V1RenameFileResponse {
  [key: string]: any;
}

export interface V1RefreshTriggerState {
  [key: string]: any;
}

export interface V1RefreshTriggerSpec {
  onlyNames?: V1ResourceName[];
}

export interface V1RefreshTrigger {
  spec?: V1RefreshTriggerSpec;
  state?: V1RefreshTriggerState;
}

export type V1ReconcileStatus =
  (typeof V1ReconcileStatus)[keyof typeof V1ReconcileStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ReconcileStatus = {
  RECONCILE_STATUS_UNSPECIFIED: "RECONCILE_STATUS_UNSPECIFIED",
  RECONCILE_STATUS_IDLE: "RECONCILE_STATUS_IDLE",
  RECONCILE_STATUS_PENDING: "RECONCILE_STATUS_PENDING",
  RECONCILE_STATUS_RUNNING: "RECONCILE_STATUS_RUNNING",
} as const;

export interface V1QueryResult {
  metricsViewAggregationResponse?: V1MetricsViewAggregationResponse;
  metricsViewToplistResponse?: V1MetricsViewToplistResponse;
  metricsViewComparisonResponse?: V1MetricsViewComparisonResponse;
  metricsViewTimeSeriesResponse?: V1MetricsViewTimeSeriesResponse;
  metricsViewTotalsResponse?: V1MetricsViewTotalsResponse;
  metricsViewRowsResponse?: V1MetricsViewRowsResponse;
  columnRollupIntervalResponse?: V1ColumnRollupIntervalResponse;
  columnTopKResponse?: V1ColumnTopKResponse;
  columnNullCountResponse?: V1ColumnNullCountResponse;
  columnDescriptiveStatisticsResponse?: V1ColumnDescriptiveStatisticsResponse;
  columnTimeGrainResponse?: V1ColumnTimeGrainResponse;
  columnNumericHistogramResponse?: V1ColumnNumericHistogramResponse;
  columnRugHistogramResponse?: V1ColumnRugHistogramResponse;
  columnTimeRangeResponse?: V1ColumnTimeRangeResponse;
  columnCardinalityResponse?: V1ColumnCardinalityResponse;
  columnTimeSeriesResponse?: V1ColumnTimeSeriesResponse;
  tableCardinalityResponse?: V1TableCardinalityResponse;
  tableColumnsResponse?: V1TableColumnsResponse;
  tableRowsResponse?: V1TableRowsResponse;
}

export type V1QueryResponseDataItem = { [key: string]: any };

export interface V1QueryResponse {
  meta?: V1StructType;
  data?: V1QueryResponseDataItem[];
}

export interface V1QueryBatchResponse {
  index?: number;
  result?: V1QueryResult;
  error?: string;
}

export interface V1Query {
  metricsViewAggregationRequest?: V1MetricsViewAggregationRequest;
  metricsViewToplistRequest?: V1MetricsViewToplistRequest;
  metricsViewComparisonRequest?: V1MetricsViewComparisonRequest;
  metricsViewTimeSeriesRequest?: V1MetricsViewTimeSeriesRequest;
  metricsViewTotalsRequest?: V1MetricsViewTotalsRequest;
  metricsViewRowsRequest?: V1MetricsViewRowsRequest;
  columnRollupIntervalRequest?: V1ColumnRollupIntervalRequest;
  columnTopKRequest?: V1ColumnTopKRequest;
  columnNullCountRequest?: V1ColumnNullCountRequest;
  columnDescriptiveStatisticsRequest?: V1ColumnDescriptiveStatisticsRequest;
  columnTimeGrainRequest?: V1ColumnTimeGrainRequest;
  columnNumericHistogramRequest?: V1ColumnNumericHistogramRequest;
  columnRugHistogramRequest?: V1ColumnRugHistogramRequest;
  columnTimeRangeRequest?: V1ColumnTimeRangeRequest;
  columnCardinalityRequest?: V1ColumnCardinalityRequest;
  columnTimeSeriesRequest?: V1ColumnTimeSeriesRequest;
  tableCardinalityRequest?: V1TableCardinalityRequest;
  tableColumnsRequest?: V1TableColumnsRequest;
  tableRowsRequest?: V1TableRowsRequest;
}

export interface V1PutFileResponse {
  filePath?: string;
}

export interface V1PullTriggerState {
  [key: string]: any;
}

export interface V1PullTriggerSpec {
  [key: string]: any;
}

export interface V1PullTrigger {
  spec?: V1PullTriggerSpec;
  state?: V1PullTriggerState;
}

export interface V1ProjectParserSpec {
  [key: string]: any;
}

export interface V1ProjectParser {
  spec?: V1ProjectParserSpec;
  state?: V1ProjectParserState;
}

export interface V1ProfileColumn {
  name?: string;
  type?: string;
  largestStringLength?: number;
}

export interface V1PingResponse {
  version?: string;
  time?: string;
}

export interface V1ParseError {
  message?: string;
  filePath?: string;
  startLocation?: V1CharLocation;
  external?: boolean;
}

export interface V1ProjectParserState {
  parseErrors?: V1ParseError[];
  currentCommitSha?: string;
  watching?: boolean;
}

export type V1Operation = (typeof V1Operation)[keyof typeof V1Operation];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1Operation = {
  OPERATION_UNSPECIFIED: "OPERATION_UNSPECIFIED",
  OPERATION_EQ: "OPERATION_EQ",
  OPERATION_NEQ: "OPERATION_NEQ",
  OPERATION_LT: "OPERATION_LT",
  OPERATION_LTE: "OPERATION_LTE",
  OPERATION_GT: "OPERATION_GT",
  OPERATION_GTE: "OPERATION_GTE",
  OPERATION_OR: "OPERATION_OR",
  OPERATION_AND: "OPERATION_AND",
  OPERATION_IN: "OPERATION_IN",
  OPERATION_NIN: "OPERATION_NIN",
  OPERATION_LIKE: "OPERATION_LIKE",
  OPERATION_NLIKE: "OPERATION_NLIKE",
} as const;

export interface V1OLAPListTablesResponse {
  tables?: V1TableInfo[];
}

export type V1OLAPGetTableResponseUnsupportedColumns = {
  [key: string]: string;
};

export interface V1OLAPGetTableResponse {
  schema?: V1StructType;
  unsupportedColumns?: V1OLAPGetTableResponseUnsupportedColumns;
  view?: boolean;
}

export interface V1NumericStatistics {
  min?: number;
  max?: number;
  mean?: number;
  q25?: number;
  q50?: number;
  q75?: number;
  sd?: number;
}

export interface V1NumericOutliers {
  outliers?: NumericOutliersOutlier[];
}

export interface V1NumericHistogramBins {
  bins?: NumericHistogramBinsBin[];
}

export interface V1NumericSummary {
  numericHistogramBins?: V1NumericHistogramBins;
  numericStatistics?: V1NumericStatistics;
  numericOutliers?: V1NumericOutliers;
}

export type V1NotifierProperties = { [key: string]: any };

export interface V1Notifier {
  connector?: string;
  properties?: V1NotifierProperties;
}

export type V1ModelStateIncrementalState = { [key: string]: any };

export type V1ModelStateResultProperties = { [key: string]: any };

export interface V1ModelState {
  executorConnector?: string;
  resultConnector?: string;
  resultProperties?: V1ModelStateResultProperties;
  resultTable?: string;
  specHash?: string;
  refsHash?: string;
  refreshedOn?: string;
  incrementalState?: V1ModelStateIncrementalState;
  incrementalStateSchema?: V1StructType;
}

export interface V1ModelV2 {
  spec?: V1ModelSpec;
  state?: V1ModelState;
}

export type V1ModelSpecOutputProperties = { [key: string]: any };

export type V1ModelSpecInputProperties = { [key: string]: any };

export type V1ModelSpecIncrementalStateResolverProperties = {
  [key: string]: any;
};

export interface V1ModelSpec {
  refreshSchedule?: V1Schedule;
  timeoutSeconds?: number;
  incremental?: boolean;
  incrementalStateResolver?: string;
  incrementalStateResolverProperties?: V1ModelSpecIncrementalStateResolverProperties;
  inputConnector?: string;
  inputProperties?: V1ModelSpecInputProperties;
  outputConnector?: string;
  outputProperties?: V1ModelSpecOutputProperties;
  trigger?: boolean;
}

export interface V1MigrationState {
  version?: number;
}

export interface V1MigrationSpec {
  connector?: string;
  sql?: string;
  version?: number;
}

export interface V1Migration {
  spec?: V1MigrationSpec;
  state?: V1MigrationState;
}

export interface V1MetricsViewV2 {
  spec?: V1MetricsViewSpec;
  state?: V1MetricsViewState;
}

export type V1MetricsViewTotalsResponseData = { [key: string]: any };

export interface V1MetricsViewTotalsResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewTotalsResponseData;
}

export interface V1MetricsViewTotalsRequest {
  instanceId?: string;
  metricsViewName?: string;
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  where?: V1Expression;
  priority?: number;
  filter?: V1MetricsViewFilter;
}

export type V1MetricsViewToplistResponseDataItem = { [key: string]: any };

export interface V1MetricsViewToplistResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewToplistResponseDataItem[];
}

export interface V1MetricsViewToplistRequest {
  instanceId?: string;
  metricsViewName?: string;
  dimensionName?: string;
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  limit?: string;
  offset?: string;
  sort?: V1MetricsViewSort[];
  where?: V1Expression;
  having?: V1Expression;
  priority?: number;
  filter?: V1MetricsViewFilter;
}

export interface V1MetricsViewTimeSeriesResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1TimeSeriesValue[];
}

export interface V1MetricsViewTimeSeriesRequest {
  instanceId?: string;
  metricsViewName?: string;
  measureNames?: string[];
  inlineMeasures?: V1InlineMeasure[];
  timeStart?: string;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  where?: V1Expression;
  having?: V1Expression;
  timeZone?: string;
  priority?: number;
  filter?: V1MetricsViewFilter;
}

export interface V1MetricsViewTimeRangeResponse {
  timeRangeSummary?: V1TimeRangeSummary;
}

export interface V1MetricsViewSpec {
  connector?: string;
  database?: string;
  databaseSchema?: string;
  table?: string;
  title?: string;
  description?: string;
  timeDimension?: string;
  /** Expression to evaluate a watermark for the metrics view. If not set, the watermark defaults to max(time_dimension). */
  watermarkExpression?: string;
  dimensions?: MetricsViewSpecDimensionV2[];
  defaultDimensions?: string[];
  measures?: MetricsViewSpecMeasureV2[];
  defaultMeasures?: string[];
  smallestTimeGrain?: V1TimeGrain;
  /** Default time range for the dashboard. It should be a valid ISO 8601 duration string. */
  defaultTimeRange?: string;
  availableTimeZones?: string[];
  security?: MetricsViewSpecSecurityV2;
  /** ISO 8601 weekday number to use as the base for time aggregations by week. Defaults to 1 (Monday). */
  firstDayOfWeek?: number;
  /** Month number to use as the base for time aggregations by year. Defaults to 1 (January). */
  firstMonthOfYear?: number;
  defaultComparisonMode?: MetricsViewSpecComparisonMode;
  defaultComparisonDimension?: string;
  /** List of available time ranges with comparison ranges that would replace the default list. */
  availableTimeRanges?: MetricsViewSpecAvailableTimeRange[];
  defaultTheme?: string;
}

export interface V1MetricsViewState {
  validSpec?: V1MetricsViewSpec;
  /** Streaming is true if the underlying data may change without the metrics view's spec/state version changing.
It's set to true if the metrics view is based on an externally managed table. */
  streaming?: boolean;
}

export interface V1MetricsViewSort {
  name?: string;
  ascending?: boolean;
}

export interface V1MetricsViewSearchResponse {
  results?: MetricsViewSearchResponseSearchResult[];
}

export interface V1MetricsViewSchemaResponse {
  schema?: V1StructType;
}

export type V1MetricsViewRowsResponseDataItem = { [key: string]: any };

export interface V1MetricsViewRowsResponse {
  meta?: V1MetricsViewColumn[];
  data?: V1MetricsViewRowsResponseDataItem[];
}

export interface V1MetricsViewFilter {
  include?: MetricsViewFilterCond[];
  exclude?: MetricsViewFilterCond[];
}

export interface V1MetricsViewRowsRequest {
  instanceId?: string;
  metricsViewName?: string;
  timeStart?: string;
  timeEnd?: string;
  timeGranularity?: V1TimeGrain;
  where?: V1Expression;
  sort?: V1MetricsViewSort[];
  limit?: number;
  offset?: string;
  priority?: number;
  timeZone?: string;
  filter?: V1MetricsViewFilter;
}

export interface V1MetricsViewComparisonValue {
  measureName?: string;
  baseValue?: unknown;
  comparisonValue?: unknown;
  deltaAbs?: unknown;
  deltaRel?: unknown;
}

export type V1MetricsViewComparisonSortType =
  (typeof V1MetricsViewComparisonSortType)[keyof typeof V1MetricsViewComparisonSortType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1MetricsViewComparisonSortType = {
  METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_UNSPECIFIED",
  METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_BASE_VALUE",
  METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_COMPARISON_VALUE",
  METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_ABS_DELTA",
  METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA:
    "METRICS_VIEW_COMPARISON_SORT_TYPE_REL_DELTA",
} as const;

export interface V1MetricsViewComparisonSort {
  name?: string;
  desc?: boolean;
  type?: V1MetricsViewComparisonSortType;
  sortType?: V1MetricsViewComparisonMeasureType;
}

export interface V1MetricsViewComparisonRow {
  dimensionValue?: unknown;
  measureValues?: V1MetricsViewComparisonValue[];
}

export interface V1MetricsViewComparisonResponse {
  rows?: V1MetricsViewComparisonRow[];
}

export type V1MetricsViewComparisonMeasureType =
  (typeof V1MetricsViewComparisonMeasureType)[keyof typeof V1MetricsViewComparisonMeasureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1MetricsViewComparisonMeasureType = {
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_UNSPECIFIED",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_BASE_VALUE",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_COMPARISON_VALUE",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_ABS_DELTA",
  METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA:
    "METRICS_VIEW_COMPARISON_MEASURE_TYPE_REL_DELTA",
} as const;

export interface V1MetricsViewComparisonMeasureAlias {
  name?: string;
  type?: V1MetricsViewComparisonMeasureType;
  alias?: string;
}

export interface V1MetricsViewComparisonRequest {
  instanceId?: string;
  metricsViewName?: string;
  dimension?: V1MetricsViewAggregationDimension;
  measures?: V1MetricsViewAggregationMeasure[];
  comparisonMeasures?: string[];
  sort?: V1MetricsViewComparisonSort[];
  timeRange?: V1TimeRange;
  comparisonTimeRange?: V1TimeRange;
  where?: V1Expression;
  having?: V1Expression;
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  limit?: string;
  offset?: string;
  priority?: number;
  exact?: boolean;
  filter?: V1MetricsViewFilter;
}

export interface V1MetricsViewColumn {
  name?: string;
  type?: string;
  nullable?: boolean;
}

export interface V1MetricsViewAggregationSort {
  name?: string;
  desc?: boolean;
}

export type V1MetricsViewAggregationResponseDataItem = { [key: string]: any };

export interface V1MetricsViewAggregationResponse {
  schema?: V1StructType;
  data?: V1MetricsViewAggregationResponseDataItem[];
}

export interface V1MetricsViewAggregationMeasureComputeCountDistinct {
  dimension?: string;
}

export interface V1MetricsViewAggregationMeasureComputeCount {
  [key: string]: any;
}

export interface V1MetricsViewAggregationMeasureComputeComparisonValue {
  measure?: string;
}

export interface V1MetricsViewAggregationMeasureComputeComparisonRatio {
  measure?: string;
}

export interface V1MetricsViewAggregationMeasureComputeComparisonDelta {
  measure?: string;
}

export interface V1MetricsViewAggregationMeasure {
  name?: string;
  builtinMeasure?: V1BuiltinMeasure;
  builtinMeasureArgs?: unknown[];
  filter?: V1Expression;
  count?: V1MetricsViewAggregationMeasureComputeCount;
  countDistinct?: V1MetricsViewAggregationMeasureComputeCountDistinct;
  comparisonValue?: V1MetricsViewAggregationMeasureComputeComparisonValue;
  comparisonDelta?: V1MetricsViewAggregationMeasureComputeComparisonDelta;
  comparisonRatio?: V1MetricsViewAggregationMeasureComputeComparisonRatio;
}

export interface V1MetricsViewAggregationDimension {
  name?: string;
  timeGrain?: V1TimeGrain;
  timeZone?: string;
  alias?: string;
}

export interface V1MetricsViewAggregationRequest {
  instanceId?: string;
  metricsView?: string;
  dimensions?: V1MetricsViewAggregationDimension[];
  measures?: V1MetricsViewAggregationMeasure[];
  sort?: V1MetricsViewAggregationSort[];
  timeRange?: V1TimeRange;
  comparisonTimeRange?: V1TimeRange;
  timeStart?: string;
  timeEnd?: string;
  pivotOn?: string[];
  aliases?: V1MetricsViewComparisonMeasureAlias[];
  where?: V1Expression;
  having?: V1Expression;
  limit?: string;
  offset?: string;
  priority?: number;
  filter?: V1MetricsViewFilter;
  exact?: boolean;
}

export interface V1MapType {
  keyType?: Runtimev1Type;
  valueType?: Runtimev1Type;
}

export type V1LogLevel = (typeof V1LogLevel)[keyof typeof V1LogLevel];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1LogLevel = {
  LOG_LEVEL_UNSPECIFIED: "LOG_LEVEL_UNSPECIFIED",
  LOG_LEVEL_DEBUG: "LOG_LEVEL_DEBUG",
  LOG_LEVEL_INFO: "LOG_LEVEL_INFO",
  LOG_LEVEL_WARN: "LOG_LEVEL_WARN",
  LOG_LEVEL_ERROR: "LOG_LEVEL_ERROR",
  LOG_LEVEL_FATAL: "LOG_LEVEL_FATAL",
} as const;

export interface V1Log {
  level?: V1LogLevel;
  time?: string;
  message?: string;
  jsonPayload?: string;
}

export interface V1ListResourcesResponse {
  resources?: V1Resource[];
}

export interface V1ListNotifierConnectorsResponse {
  /** Note: In this list, the Connector.config property will always be empty. */
  connectors?: V1Connector[];
}

export interface V1ListInstancesResponse {
  instances?: V1Instance[];
  nextPageToken?: string;
}

export interface V1ListFilesResponse {
  files?: V1DirEntry[];
}

export interface V1ListExamplesResponse {
  examples?: V1Example[];
}

export interface V1ListConnectorDriversResponse {
  connectors?: V1ConnectorDriver[];
}

export interface V1IssueDevJWTResponse {
  jwt?: string;
}

export type V1InstanceAnnotations = { [key: string]: string };

export type V1InstanceFeatureFlags = { [key: string]: boolean };

export type V1InstanceProjectVariables = { [key: string]: string };

export type V1InstanceVariables = { [key: string]: string };

/**
 * Instance represents a single data project, meaning one set of code artifacts,
one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
metadata (such as reconciliation state). Instances are the unit of isolation within
the runtime. They enable one runtime deployment to serve not only multiple data
projects, but also multiple tenants. On local, the runtime will usually have
just a single instance.
 */
export interface V1Instance {
  instanceId?: string;
  environment?: string;
  olapConnector?: string;
  repoConnector?: string;
  adminConnector?: string;
  aiConnector?: string;
  createdOn?: string;
  updatedOn?: string;
  connectors?: V1Connector[];
  projectConnectors?: V1Connector[];
  variables?: V1InstanceVariables;
  projectVariables?: V1InstanceProjectVariables;
  featureFlags?: V1InstanceFeatureFlags;
  annotations?: V1InstanceAnnotations;
  embedCatalog?: boolean;
  watchRepo?: boolean;
}

export interface V1InlineMeasure {
  name?: string;
  expression?: string;
}

export type V1HistogramMethod =
  (typeof V1HistogramMethod)[keyof typeof V1HistogramMethod];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1HistogramMethod = {
  HISTOGRAM_METHOD_UNSPECIFIED: "HISTOGRAM_METHOD_UNSPECIFIED",
  HISTOGRAM_METHOD_FD: "HISTOGRAM_METHOD_FD",
  HISTOGRAM_METHOD_DIAGNOSTIC: "HISTOGRAM_METHOD_DIAGNOSTIC",
} as const;

export interface V1GetResourceResponse {
  resource?: V1Resource;
}

export interface V1GetLogsResponse {
  logs?: V1Log[];
}

export interface V1GetInstanceResponse {
  instance?: V1Instance;
}

export interface V1GetFileResponse {
  blob?: string;
  updatedOn?: string;
}

export type V1GenerateResolverResponseResolverProperties = {
  [key: string]: any;
};

export interface V1GenerateResolverResponse {
  resolver?: string;
  resolverProperties?: V1GenerateResolverResponseResolverProperties;
}

export type V1GenerateRendererResponseRendererProperties = {
  [key: string]: any;
};

export interface V1GenerateRendererResponse {
  renderer?: string;
  rendererProperties?: V1GenerateRendererResponseRendererProperties;
}

export interface V1GenerateMetricsViewFileResponse {
  aiSucceeded?: boolean;
}

export interface V1GCSObject {
  name?: string;
  modifiedOn?: string;
  size?: string;
  isDir?: boolean;
}

export interface V1GCSListObjectsResponse {
  nextPageToken?: string;
  objects?: V1GCSObject[];
}

export interface V1GCSListBucketsResponse {
  nextPageToken?: string;
  buckets?: string[];
}

export interface V1GCSGetCredentialsInfoResponse {
  exist?: boolean;
  projectId?: string;
}

/**
 * FileEvent describes a file change.
 */
export type V1FileEvent = (typeof V1FileEvent)[keyof typeof V1FileEvent];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1FileEvent = {
  FILE_EVENT_UNSPECIFIED: "FILE_EVENT_UNSPECIFIED",
  FILE_EVENT_WRITE: "FILE_EVENT_WRITE",
  FILE_EVENT_DELETE: "FILE_EVENT_DELETE",
} as const;

export interface V1Expression {
  ident?: string;
  val?: unknown;
  cond?: V1Condition;
  subquery?: V1Subquery;
}

export interface V1ExportResponse {
  downloadUrlPath?: string;
}

export type V1ExportFormat =
  (typeof V1ExportFormat)[keyof typeof V1ExportFormat];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ExportFormat = {
  EXPORT_FORMAT_UNSPECIFIED: "EXPORT_FORMAT_UNSPECIFIED",
  EXPORT_FORMAT_CSV: "EXPORT_FORMAT_CSV",
  EXPORT_FORMAT_XLSX: "EXPORT_FORMAT_XLSX",
  EXPORT_FORMAT_PARQUET: "EXPORT_FORMAT_PARQUET",
} as const;

/**
 * Example contains metadata about an example project that is available for unpacking.
 */
export interface V1Example {
  name?: string;
  title?: string;
  description?: string;
}

export interface V1EditInstanceResponse {
  instance?: V1Instance;
}

export interface V1DirEntry {
  path?: string;
  isDir?: boolean;
}

export interface V1DeleteInstanceResponse {
  [key: string]: any;
}

export interface V1DeleteFileResponse {
  [key: string]: any;
}

export interface V1DashboardState {
  [key: string]: any;
}

export interface V1DashboardItem {
  component?: string;
  definedInDashboard?: boolean;
  x?: number;
  y?: number;
  width?: number;
  height?: number;
  fontSize?: number;
}

export interface V1DashboardSpec {
  title?: string;
  columns?: number;
  gap?: number;
  items?: V1DashboardItem[];
}

export interface V1Dashboard {
  spec?: V1DashboardSpec;
  state?: V1DashboardState;
}

export interface V1CreateTriggerResponse {
  [key: string]: any;
}

export interface V1CreateInstanceResponse {
  instance?: V1Instance;
}

export type V1CreateInstanceRequestAnnotations = { [key: string]: string };

export type V1CreateInstanceRequestVariables = { [key: string]: string };

/**
 * Request message for RuntimeService.CreateInstance.
See message Instance for field descriptions.
 */
export interface V1CreateInstanceRequest {
  instanceId?: string;
  environment?: string;
  olapConnector?: string;
  repoConnector?: string;
  adminConnector?: string;
  aiConnector?: string;
  connectors?: V1Connector[];
  variables?: V1CreateInstanceRequestVariables;
  annotations?: V1CreateInstanceRequestAnnotations;
  embedCatalog?: boolean;
  watchRepo?: boolean;
}

export interface V1CreateDirectoryResponse {
  [key: string]: any;
}

export interface V1ConnectorState {
  specHash?: string;
}

export interface V1ConnectorV2 {
  spec?: V1ConnectorSpec;
  state?: V1ConnectorState;
}

/**
 * properties_from_variables stores properties whose value is a variable.
NOTE : properties_from_variables and properties both should be used to get all properties.
 */
export type V1ConnectorSpecPropertiesFromVariables = { [key: string]: string };

export type V1ConnectorSpecProperties = { [key: string]: string };

export interface V1ConnectorSpec {
  driver?: string;
  properties?: V1ConnectorSpecProperties;
  /** properties_from_variables stores properties whose value is a variable.
NOTE : properties_from_variables and properties both should be used to get all properties. */
  propertiesFromVariables?: V1ConnectorSpecPropertiesFromVariables;
}

/**
 * ConnectorDriver represents a connector driver available in the runtime.
 */
export interface V1ConnectorDriver {
  name?: string;
  configProperties?: ConnectorDriverProperty[];
  sourceProperties?: ConnectorDriverProperty[];
  displayName?: string;
  description?: string;
  implementsRegistry?: boolean;
  implementsCatalog?: boolean;
  implementsRepo?: boolean;
  implementsAdmin?: boolean;
  implementsAi?: boolean;
  implementsSqlStore?: boolean;
  implementsOlap?: boolean;
  implementsObjectStore?: boolean;
  implementsFileStore?: boolean;
  implementsNotifier?: boolean;
}

export type V1ConnectorConfigFromVariables = { [key: string]: string };

export type V1ConnectorConfig = { [key: string]: string };

export interface V1Connector {
  /** Type of the connector. One of the infra driver supported. */
  type?: string;
  name?: string;
  config?: V1ConnectorConfig;
  configFromVariables?: V1ConnectorConfigFromVariables;
}

export interface V1Condition {
  op?: V1Operation;
  exprs?: V1Expression[];
}

export interface V1ComponentState {
  [key: string]: any;
}

export type V1ComponentSpecRendererProperties = { [key: string]: any };

export type V1ComponentSpecResolverProperties = { [key: string]: any };

export interface V1ComponentSpec {
  title?: string;
  resolver?: string;
  resolverProperties?: V1ComponentSpecResolverProperties;
  renderer?: string;
  rendererProperties?: V1ComponentSpecRendererProperties;
  definedInDashboard?: boolean;
  subtitle?: string;
}

export interface V1Component {
  spec?: V1ComponentSpec;
  state?: V1ComponentState;
}

export interface V1ColumnTopKResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export interface V1ColumnTopKRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  agg?: string;
  k?: number;
  priority?: number;
}

export interface V1ColumnTimeSeriesResponse {
  rollup?: V1TimeSeriesResponse;
}

export interface V1ColumnTimeSeriesRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  measures?: ColumnTimeSeriesRequestBasicMeasure[];
  timestampColumnName?: string;
  timeRange?: V1TimeSeriesTimeRange;
  pixels?: number;
  sampleSize?: number;
  priority?: number;
  timeZone?: string;
}

export interface V1ColumnTimeRangeResponse {
  timeRangeSummary?: V1TimeRangeSummary;
}

export interface V1ColumnTimeRangeRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnTimeGrainResponse {
  timeGrain?: V1TimeGrain;
}

export interface V1ColumnTimeGrainRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnRugHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnRugHistogramRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnRollupIntervalResponse {
  start?: string;
  end?: string;
  interval?: V1TimeGrain;
}

export interface V1ColumnRollupIntervalRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnNumericHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnNumericHistogramRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  histogramMethod?: V1HistogramMethod;
  priority?: number;
}

export interface V1ColumnNullCountResponse {
  count?: number;
}

export interface V1ColumnNullCountRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnDescriptiveStatisticsResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1ColumnDescriptiveStatisticsRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1ColumnCardinalityRequest {
  instanceId?: string;
  connector?: string;
  database?: string;
  databaseSchema?: string;
  tableName?: string;
  columnName?: string;
  priority?: number;
}

export interface V1Color {
  red?: number;
  green?: number;
  blue?: number;
  alpha?: number;
}

export interface V1CharLocation {
  line?: number;
}

export interface V1CategoricalSummary {
  topK?: V1TopK;
  cardinality?: number;
}

export interface V1ColumnCardinalityResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export type V1BuiltinMeasure =
  (typeof V1BuiltinMeasure)[keyof typeof V1BuiltinMeasure];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1BuiltinMeasure = {
  BUILTIN_MEASURE_UNSPECIFIED: "BUILTIN_MEASURE_UNSPECIFIED",
  BUILTIN_MEASURE_COUNT: "BUILTIN_MEASURE_COUNT",
  BUILTIN_MEASURE_COUNT_DISTINCT: "BUILTIN_MEASURE_COUNT_DISTINCT",
} as const;

export interface V1BucketPlannerState {
  region?: string;
}

export interface V1BucketPlanner {
  spec?: V1BucketPlannerSpec;
  state?: V1BucketPlannerState;
}

export interface V1BucketExtractPolicy {
  rowsStrategy?: BucketExtractPolicyStrategy;
  rowsLimitBytes?: string;
  filesStrategy?: BucketExtractPolicyStrategy;
  filesLimit?: string;
}

export interface V1BucketPlannerSpec {
  extractPolicy?: V1BucketExtractPolicy;
}

export interface V1BigQueryListTablesResponse {
  nextPageToken?: string;
  names?: string[];
}

export interface V1BigQueryListDatasetsResponse {
  nextPageToken?: string;
  names?: string[];
}

export type V1AssertionStatus =
  (typeof V1AssertionStatus)[keyof typeof V1AssertionStatus];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1AssertionStatus = {
  ASSERTION_STATUS_UNSPECIFIED: "ASSERTION_STATUS_UNSPECIFIED",
  ASSERTION_STATUS_PASS: "ASSERTION_STATUS_PASS",
  ASSERTION_STATUS_FAIL: "ASSERTION_STATUS_FAIL",
  ASSERTION_STATUS_ERROR: "ASSERTION_STATUS_ERROR",
} as const;

export type V1AssertionResultFailRow = { [key: string]: any };

export interface V1AssertionResult {
  status?: V1AssertionStatus;
  failRow?: V1AssertionResultFailRow;
  errorMessage?: string;
}

export type V1AnalyzedConnectorEnvConfig = { [key: string]: string };

export type V1AnalyzedConnectorProjectConfig = { [key: string]: string };

export type V1AnalyzedConnectorPresetConfig = { [key: string]: string };

export type V1AnalyzedConnectorConfig = { [key: string]: string };

/**
 * AnalyzedConnector contains information about a connector that is referenced in the project files.
 */
export interface V1AnalyzedConnector {
  name?: string;
  driver?: V1ConnectorDriver;
  config?: V1AnalyzedConnectorConfig;
  presetConfig?: V1AnalyzedConnectorPresetConfig;
  projectConfig?: V1AnalyzedConnectorProjectConfig;
  envConfig?: V1AnalyzedConnectorEnvConfig;
  hasAnonymousAccess?: boolean;
  usedBy?: V1ResourceName[];
  errorMessage?: string;
}

export interface V1AnalyzeConnectorsResponse {
  connectors?: V1AnalyzedConnector[];
}

export interface V1AlertState {
  specHash?: string;
  refsHash?: string;
  nextRunOn?: string;
  currentExecution?: V1AlertExecution;
  executionHistory?: V1AlertExecution[];
  executionCount?: number;
}

export type V1AlertSpecAnnotations = { [key: string]: string };

export type V1AlertSpecQueryForAttributes = { [key: string]: any };

export interface V1AlertSpec {
  trigger?: boolean;
  title?: string;
  refreshSchedule?: V1Schedule;
  /** If true, will use the lowest watermark of its refs instead of the trigger time. */
  watermarkInherit?: boolean;
  intervalsIsoDuration?: string;
  intervalsLimit?: number;
  intervalsCheckUnclosed?: boolean;
  timeoutSeconds?: number;
  queryName?: string;
  queryArgsJson?: string;
  queryForUserId?: string;
  queryForUserEmail?: string;
  queryForAttributes?: V1AlertSpecQueryForAttributes;
  notifyOnRecover?: boolean;
  notifyOnFail?: boolean;
  notifyOnError?: boolean;
  renotify?: boolean;
  renotifyAfterSeconds?: number;
  notifiers?: V1Notifier[];
  annotations?: V1AlertSpecAnnotations;
}

export interface V1AlertExecution {
  adhoc?: boolean;
  result?: V1AssertionResult;
  sentNotifications?: boolean;
  executionTime?: string;
  startedOn?: string;
  finishedOn?: string;
}

export interface V1Alert {
  spec?: V1AlertSpec;
  state?: V1AlertState;
}

export interface V1APIState {
  [key: string]: any;
}

export type V1APISpecResolverProperties = { [key: string]: any };

export interface V1APISpec {
  resolver?: string;
  resolverProperties?: V1APISpecResolverProperties;
}

/**
 * API defines a custom operation for querying data stored in Rill.
 */
export interface V1API {
  spec?: V1APISpec;
  state?: V1APIState;
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

 The JSON representation for `NullValue` is JSON `null`.

 - NULL_VALUE: Null value.
 */
export type ProtobufNullValue =
  (typeof ProtobufNullValue)[keyof typeof ProtobufNullValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProtobufNullValue = {
  NULL_VALUE: "NULL_VALUE",
} as const;

export interface ProtobufAny {
  "@type"?: string;
  [key: string]: unknown;
}

export interface RpcStatus {
  code?: number;
  message?: string;
  details?: ProtobufAny[];
}

export type TypeCode = (typeof TypeCode)[keyof typeof TypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const TypeCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_BOOL: "CODE_BOOL",
  CODE_INT8: "CODE_INT8",
  CODE_INT16: "CODE_INT16",
  CODE_INT32: "CODE_INT32",
  CODE_INT64: "CODE_INT64",
  CODE_INT128: "CODE_INT128",
  CODE_INT256: "CODE_INT256",
  CODE_UINT8: "CODE_UINT8",
  CODE_UINT16: "CODE_UINT16",
  CODE_UINT32: "CODE_UINT32",
  CODE_UINT64: "CODE_UINT64",
  CODE_UINT128: "CODE_UINT128",
  CODE_UINT256: "CODE_UINT256",
  CODE_FLOAT32: "CODE_FLOAT32",
  CODE_FLOAT64: "CODE_FLOAT64",
  CODE_TIMESTAMP: "CODE_TIMESTAMP",
  CODE_DATE: "CODE_DATE",
  CODE_TIME: "CODE_TIME",
  CODE_STRING: "CODE_STRING",
  CODE_BYTES: "CODE_BYTES",
  CODE_ARRAY: "CODE_ARRAY",
  CODE_STRUCT: "CODE_STRUCT",
  CODE_MAP: "CODE_MAP",
  CODE_DECIMAL: "CODE_DECIMAL",
  CODE_JSON: "CODE_JSON",
  CODE_UUID: "CODE_UUID",
} as const;

export interface Runtimev1Type {
  code?: TypeCode;
  nullable?: boolean;
  arrayElementType?: Runtimev1Type;
  structType?: V1StructType;
  mapType?: V1MapType;
}

export interface TopKEntry {
  value?: unknown;
  count?: number;
}

export interface TimeRangeSummaryInterval {
  months?: number;
  days?: number;
  micros?: string;
}

export interface StructTypeField {
  name?: string;
  type?: Runtimev1Type;
}

export interface SecurityV2FieldConditionV2 {
  condition?: string;
  names?: string[];
}

export interface NumericOutliersOutlier {
  bucket?: number;
  low?: number;
  high?: number;
  present?: boolean;
  count?: number;
}

export interface NumericHistogramBinsBin {
  bucket?: number;
  low?: number;
  midpoint?: number;
  high?: number;
  count?: number;
}

export interface MetricsViewSpecSecurityV2 {
  access?: string;
  rowFilter?: string;
  queryFilter?: V1Expression;
  include?: SecurityV2FieldConditionV2[];
  exclude?: SecurityV2FieldConditionV2[];
}

export type MetricsViewSpecMeasureType =
  (typeof MetricsViewSpecMeasureType)[keyof typeof MetricsViewSpecMeasureType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsViewSpecMeasureType = {
  MEASURE_TYPE_UNSPECIFIED: "MEASURE_TYPE_UNSPECIFIED",
  MEASURE_TYPE_SIMPLE: "MEASURE_TYPE_SIMPLE",
  MEASURE_TYPE_DERIVED: "MEASURE_TYPE_DERIVED",
  MEASURE_TYPE_TIME_COMPARISON: "MEASURE_TYPE_TIME_COMPARISON",
} as const;

export interface MetricsViewSpecMeasureV2 {
  name?: string;
  expression?: string;
  type?: MetricsViewSpecMeasureType;
  window?: MetricsViewSpecMeasureWindow;
  perDimensions?: MetricsViewSpecDimensionSelector[];
  requiredDimensions?: MetricsViewSpecDimensionSelector[];
  referencedMeasures?: string[];
  label?: string;
  description?: string;
  formatPreset?: string;
  formatD3?: string;
  validPercentOfTotal?: boolean;
}

export interface MetricsViewSpecDimensionV2 {
  name?: string;
  column?: string;
  expression?: string;
  label?: string;
  description?: string;
  unnest?: boolean;
}

export interface MetricsViewSpecDimensionSelector {
  name?: string;
  timeGrain?: V1TimeGrain;
  desc?: boolean;
}

export interface MetricsViewSpecMeasureWindow {
  partition?: boolean;
  /** Dimensions to order the window by. Must be present in required_dimensions. */
  orderBy?: MetricsViewSpecDimensionSelector[];
  frameExpression?: string;
}

export type MetricsViewSpecComparisonMode =
  (typeof MetricsViewSpecComparisonMode)[keyof typeof MetricsViewSpecComparisonMode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const MetricsViewSpecComparisonMode = {
  COMPARISON_MODE_UNSPECIFIED: "COMPARISON_MODE_UNSPECIFIED",
  COMPARISON_MODE_NONE: "COMPARISON_MODE_NONE",
  COMPARISON_MODE_TIME: "COMPARISON_MODE_TIME",
  COMPARISON_MODE_DIMENSION: "COMPARISON_MODE_DIMENSION",
} as const;

export interface MetricsViewSpecAvailableComparisonOffset {
  offset?: string;
  /** Used to override the range for the comparison with something other than the selected range. */
  range?: string;
}

export interface MetricsViewSpecAvailableTimeRange {
  range?: string;
  /** Available comparison offsets for this time range. */
  comparisonOffsets?: MetricsViewSpecAvailableComparisonOffset[];
}

export interface MetricsViewSearchResponseSearchResult {
  dimension?: string;
  value?: unknown;
}

export interface MetricsViewFilterCond {
  name?: string;
  in?: unknown[];
  like?: string[];
}

export type ConnectorDriverPropertyType =
  (typeof ConnectorDriverPropertyType)[keyof typeof ConnectorDriverPropertyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectorDriverPropertyType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_NUMBER: "TYPE_NUMBER",
  TYPE_BOOLEAN: "TYPE_BOOLEAN",
  TYPE_STRING: "TYPE_STRING",
  TYPE_FILE: "TYPE_FILE",
  TYPE_INFORMATIONAL: "TYPE_INFORMATIONAL",
} as const;

export interface ConnectorDriverProperty {
  key?: string;
  type?: ConnectorDriverPropertyType;
  required?: boolean;
  displayName?: string;
  description?: string;
  docsUrl?: string;
  hint?: string;
  default?: string;
  placeholder?: string;
  secret?: boolean;
}

export interface ColumnTimeSeriesRequestBasicMeasure {
  id?: string;
  expression?: string;
  sqlName?: string;
}

export type BucketExtractPolicyStrategy =
  (typeof BucketExtractPolicyStrategy)[keyof typeof BucketExtractPolicyStrategy];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const BucketExtractPolicyStrategy = {
  STRATEGY_UNSPECIFIED: "STRATEGY_UNSPECIFIED",
  STRATEGY_HEAD: "STRATEGY_HEAD",
  STRATEGY_TAIL: "STRATEGY_TAIL",
} as const;
