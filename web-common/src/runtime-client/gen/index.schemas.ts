/**
 * Generated by orval v6.10.1 üç∫
 * Do not edit manually.
 * rill/runtime/v1/schema.proto
 * OpenAPI spec version: version not set
 */
export type RuntimeServiceRenameFileBody = {
  fromPath?: string;
  toPath?: string;
};

export type RuntimeServicePutFileBody = {
  blob?: string;
  create?: boolean;
  /** Will cause the operation to fail if the file already exists.
It should only be set when create = true. */
  createOnly?: boolean;
};

export type RuntimeServiceListFilesParams = { glob?: string };

export type RuntimeServiceListReposParams = {
  pageSize?: number;
  pageToken?: string;
};

/**
 * Request for RuntimeService.GetTopK. Returns the top K values for a given column using agg function for table table_name.
 */
export type RuntimeServiceGetTopKBody = {
  agg?: string;
  k?: number;
};

export type RuntimeServiceGetTableRowsParams = { limit?: number };

export type RuntimeServiceQueryDirectBody = {
  args?: unknown[];
  dryRun?: boolean;
  priority?: string;
  sql?: string;
};

export type RuntimeServiceQueryBody = {
  args?: unknown[];
  dryRun?: boolean;
  priority?: string;
  sql?: string;
};

export type RuntimeServiceMigrateBody = {
  /** Changed paths provides a way to "hint" what files have changed in the repo, enabling
migrations to execute faster by not scanning all code artifacts for changes. */
  changedPaths?: string[];
  dry?: boolean;
  repoId?: string;
  strict?: boolean;
};

export interface V1MetricsViewFilter {
  exclude?: MetricsViewFilterCond[];
  include?: MetricsViewFilterCond[];
  match?: string[];
}

export type RuntimeServiceMetricsViewTotalsBody = {
  filter?: V1MetricsViewFilter;
  measureNames?: string[];
  timeEnd?: string;
  timeStart?: string;
};

export type RuntimeServiceMetricsViewToplistBody = {
  filter?: V1MetricsViewFilter;
  limit?: string;
  measureNames?: string[];
  offset?: string;
  sort?: V1MetricsViewSort[];
  timeEnd?: string;
  timeStart?: string;
};

export type RuntimeServiceMetricsViewTimeSeriesBody = {
  filter?: V1MetricsViewFilter;
  measureNames?: string[];
  timeEnd?: string;
  timeGranularity?: string;
  timeStart?: string;
};

export type RuntimeServiceGenerateTimeSeriesBody = {
  filters?: V1MetricsViewRequestFilter;
  measures?: GenerateTimeSeriesRequestBasicMeasures;
  pixels?: number;
  sampleSize?: number;
  tableName?: string;
  timeRange?: V1TimeSeriesTimeRange;
  timestampColumnName?: string;
};

export type RuntimeServiceEstimateRollupIntervalBody = {
  columnName?: string;
};

export type RuntimeServiceListCatalogEntriesType =
  typeof RuntimeServiceListCatalogEntriesType[keyof typeof RuntimeServiceListCatalogEntriesType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const RuntimeServiceListCatalogEntriesType = {
  OBJECT_TYPE_UNSPECIFIED: "OBJECT_TYPE_UNSPECIFIED",
  OBJECT_TYPE_TABLE: "OBJECT_TYPE_TABLE",
  OBJECT_TYPE_SOURCE: "OBJECT_TYPE_SOURCE",
  OBJECT_TYPE_MODEL: "OBJECT_TYPE_MODEL",
  OBJECT_TYPE_METRICS_VIEW: "OBJECT_TYPE_METRICS_VIEW",
} as const;

export type RuntimeServiceListCatalogEntriesParams = {
  type?: RuntimeServiceListCatalogEntriesType;
};

export type RuntimeServiceListInstancesParams = {
  pageSize?: number;
  pageToken?: string;
};

export type V1TypeCode = typeof V1TypeCode[keyof typeof V1TypeCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1TypeCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_BOOL: "CODE_BOOL",
  CODE_INT8: "CODE_INT8",
  CODE_INT16: "CODE_INT16",
  CODE_INT32: "CODE_INT32",
  CODE_INT64: "CODE_INT64",
  CODE_INT128: "CODE_INT128",
  CODE_UINT8: "CODE_UINT8",
  CODE_UINT16: "CODE_UINT16",
  CODE_UINT32: "CODE_UINT32",
  CODE_UINT64: "CODE_UINT64",
  CODE_UINT128: "CODE_UINT128",
  CODE_FLOAT32: "CODE_FLOAT32",
  CODE_FLOAT64: "CODE_FLOAT64",
  CODE_TIMESTAMP: "CODE_TIMESTAMP",
  CODE_DATE: "CODE_DATE",
  CODE_TIME: "CODE_TIME",
  CODE_STRING: "CODE_STRING",
  CODE_BYTES: "CODE_BYTES",
  CODE_ARRAY: "CODE_ARRAY",
  CODE_STRUCT: "CODE_STRUCT",
  CODE_MAP: "CODE_MAP",
  CODE_DECIMAL: "CODE_DECIMAL",
  CODE_JSON: "CODE_JSON",
  CODE_UUID: "CODE_UUID",
} as const;

export interface V1TriggerSyncResponse {
  objectsAddedCount?: number;
  objectsCount?: number;
  objectsRemovedCount?: number;
  objectsUpdatedCount?: number;
}

export interface V1TriggerRefreshResponse {
  [key: string]: any;
}

export interface V1TopK {
  entries?: TopKTopKEntry[];
}

export type V1TimeSeriesValueRecords = { [key: string]: number };

export interface V1TimeSeriesValue {
  bin?: number;
  records?: V1TimeSeriesValueRecords;
  ts?: string;
}

export interface V1TimeSeriesResponse {
  error?: string;
  id?: string;
  results?: V1TimeSeriesValue[];
  sampleSize?: number;
  spark?: TimeSeriesResponseTimeSeriesValues;
  timeRange?: V1TimeSeriesTimeRange;
}

export interface V1TimeRangeSummary {
  interval?: TimeRangeSummaryInterval;
  max?: string;
  min?: string;
}

export type V1TimeGrain = typeof V1TimeGrain[keyof typeof V1TimeGrain];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1TimeGrain = {
  TIME_GRAIN_UNSPECIFIED: "TIME_GRAIN_UNSPECIFIED",
  TIME_GRAIN_MILLISECOND: "TIME_GRAIN_MILLISECOND",
  TIME_GRAIN_SECOND: "TIME_GRAIN_SECOND",
  TIME_GRAIN_MINUTE: "TIME_GRAIN_MINUTE",
  TIME_GRAIN_HOUR: "TIME_GRAIN_HOUR",
  TIME_GRAIN_DAY: "TIME_GRAIN_DAY",
  TIME_GRAIN_WEEK: "TIME_GRAIN_WEEK",
  TIME_GRAIN_MONTH: "TIME_GRAIN_MONTH",
  TIME_GRAIN_YEAR: "TIME_GRAIN_YEAR",
} as const;

export interface V1TimeSeriesTimeRange {
  end?: string;
  interval?: V1TimeGrain;
  start?: string;
}

export interface V1StructType {
  fields?: StructTypeField[];
}

/**
 * Table represents a table in the OLAP database. These include pre-existing tables discovered by periodically
scanning the database's information schema when the instance is created with exposed=true. Pre-existing tables
have managed = false.
 */
export interface V1Table {
  /** Managed is true if the table was created through a runtime migration, false if it was discovered in by
scanning the database's information schema. */
  managed?: boolean;
  name?: string;
  schema?: V1StructType;
}

export type V1SourceProperties = { [key: string]: any };

export interface V1Source {
  connector?: string;
  name?: string;
  properties?: V1SourceProperties;
  schema?: V1StructType;
}

/**
 * Repo represents a collection of file artifacts containing SQL statements.
It will usually by represented as a folder on disk, but may also be backed by a
database (for modelling in the cloud where no persistant file system is available).
 */
export interface V1Repo {
  /** Driver for persisting artifacts. Supports "file" and "postgres". */
  driver?: string;
  /** DSN for driver. If the driver is "file", this should be the path to the root directory. */
  dsn?: string;
  repoId?: string;
}

export interface V1RenameFileResponse {
  [key: string]: any;
}

export interface V1RenameFileAndMigrateResponse {
  /** affected_paths lists all the file paths that were considered while
executing the migration. For a PutFileAndMigrate, this includes the put file
as well as any file artifacts that rely on objects declared in it. */
  affectedPaths?: string[];
  /** Errors encountered during the migration. If strict = false, any path in
affected_paths without an error can be assumed to have been migrated succesfully. */
  errors?: V1MigrationError[];
}

export interface V1RenameFileAndMigrateRequest {
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  fromPath?: string;
  instanceId?: string;
  repoId?: string;
  strict?: boolean;
  toPath?: string;
}

export type V1QueryResponseDataItem = { [key: string]: any };

export interface V1QueryResponse {
  data?: V1QueryResponseDataItem[];
  meta?: V1StructType;
}

export type V1QueryDirectResponseDataItem = { [key: string]: any };

export interface V1QueryDirectResponse {
  data?: V1QueryDirectResponseDataItem[];
  meta?: V1StructType;
}

export interface V1PutFileResponse {
  filePath?: string;
}

export interface V1PutFileAndMigrateResponse {
  /** affected_paths lists all the file paths that were considered while
executing the migration. For a PutFileAndMigrate, this includes the put file
as well as any file artifacts that rely on objects declared in it. */
  affectedPaths?: string[];
  /** Errors encountered during the migration. If strict = false, any path in
affected_paths without an error can be assumed to have been migrated succesfully. */
  errors?: V1MigrationError[];
}

export interface V1PutFileAndMigrateRequest {
  blob?: string;
  create?: boolean;
  /** create_only will cause the operation to fail if a file already exists at path.
It should only be set when create = true. */
  createOnly?: boolean;
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  instanceId?: string;
  path?: string;
  repoId?: string;
  strict?: boolean;
}

export interface V1ProfileColumn {
  largestStringLength?: number;
  name?: string;
  type?: string;
}

export interface V1ProfileColumnsResponse {
  profileColumns?: V1ProfileColumn[];
}

export interface V1PingResponse {
  time?: string;
  version?: string;
}

export type V1ObjectType = typeof V1ObjectType[keyof typeof V1ObjectType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1ObjectType = {
  OBJECT_TYPE_UNSPECIFIED: "OBJECT_TYPE_UNSPECIFIED",
  OBJECT_TYPE_TABLE: "OBJECT_TYPE_TABLE",
  OBJECT_TYPE_SOURCE: "OBJECT_TYPE_SOURCE",
  OBJECT_TYPE_MODEL: "OBJECT_TYPE_MODEL",
  OBJECT_TYPE_METRICS_VIEW: "OBJECT_TYPE_METRICS_VIEW",
} as const;

export interface V1NumericStatistics {
  max?: number;
  mean?: number;
  min?: number;
  q25?: number;
  q50?: number;
  q75?: number;
  sd?: number;
}

export interface V1NumericOutliers {
  outliers?: NumericOutliersOutlier[];
}

export interface V1NumericHistogramBins {
  bins?: NumericHistogramBinsBin[];
}

/**
 * Response for RuntimeService.GetNumericHistogram, RuntimeService.GetDescriptiveStatistics and RuntimeService.GetCardinalityOfColumn.
Message will have either numericHistogramBins, numericStatistics or numericOutliers set.
 */
export interface V1NumericSummary {
  numericHistogramBins?: V1NumericHistogramBins;
  numericOutliers?: V1NumericOutliers;
  numericStatistics?: V1NumericStatistics;
}

export interface V1Model {
  dialect?: ModelDialect;
  name?: string;
  schema?: V1StructType;
  sql?: string;
}

/**
 * - CODE_UNSPECIFIED: Unspecified error
 - CODE_SYNTAX: Code artifact failed to parse
 - CODE_VALIDATION: Code artifact has internal validation errors
 - CODE_DEPENDENCY: Code artifact is valid, but has invalid dependencies
 - CODE_OLAP: Error returned from the OLAP database
 - CODE_SOURCE: Error encountered during source inspection or ingestion
 */
export type V1MigrationErrorCode =
  typeof V1MigrationErrorCode[keyof typeof V1MigrationErrorCode];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const V1MigrationErrorCode = {
  CODE_UNSPECIFIED: "CODE_UNSPECIFIED",
  CODE_SYNTAX: "CODE_SYNTAX",
  CODE_VALIDATION: "CODE_VALIDATION",
  CODE_DEPENDENCY: "CODE_DEPENDENCY",
  CODE_OLAP: "CODE_OLAP",
  CODE_SOURCE: "CODE_SOURCE",
} as const;

/**
 * MigrationError represents an error encountered while running Migrate.
 */
export interface V1MigrationError {
  code?: V1MigrationErrorCode;
  endLocation?: MigrationErrorCharLocation;
  filePath?: string;
  message?: string;
  /** Property path of the error in the code artifact (if any).
It's represented as a JS-style property path, e.g. "key0.key1[index2].key3".
It only applies to structured code artifacts (i.e. YAML).
Only applicable if file_path is set. */
  propertyPath?: string;
  startLocation?: MigrationErrorCharLocation;
}

export interface V1MigrateResponse {
  /** affected_paths lists all the file artifact paths that were considered while
executing the migration. If changed_paths was empty, this will include all
code artifacts in the repo. */
  affectedPaths?: string[];
  /** Errors encountered during the migration. If strict = false, any path in
affected_paths without an error can be assumed to have been migrated succesfully. */
  errors?: V1MigrationError[];
}

export type V1MetricsViewTotalsResponseData = { [key: string]: any };

export interface V1MetricsViewTotalsResponse {
  data?: V1MetricsViewTotalsResponseData;
  meta?: V1MetricsViewColumn[];
}

export type V1MetricsViewToplistResponseDataItem = { [key: string]: any };

export interface V1MetricsViewToplistResponse {
  data?: V1MetricsViewToplistResponseDataItem[];
  meta?: V1MetricsViewColumn[];
}

export type V1MetricsViewTimeSeriesResponseDataItem = { [key: string]: any };

export interface V1MetricsViewTimeSeriesResponse {
  data?: V1MetricsViewTimeSeriesResponseDataItem[];
  meta?: V1MetricsViewColumn[];
}

export interface V1MetricsViewSort {
  ascending?: boolean;
  name?: string;
}

export interface V1MetricsViewDimensionValue {
  in?: unknown[];
  like?: MetricsViewDimensionValueValues;
  name?: string;
}

export interface V1MetricsViewRequestFilter {
  exclude?: V1MetricsViewDimensionValue[];
  include?: V1MetricsViewDimensionValue[];
}

export interface V1MetricsViewColumn {
  name?: string;
  nullable?: boolean;
  type?: string;
}

export interface V1MetricsView {
  dimensions?: MetricsViewDimension[];
  from?: string;
  measures?: MetricsViewMeasure[];
  name?: string;
  timeDimension?: string;
  /** Recommended granularities for rolling up the time dimension.
Should be a valid SQL INTERVAL value. */
  timeGrains?: string[];
}

export interface V1MapType {
  keyType?: Runtimev1Type;
  valueType?: Runtimev1Type;
}

export interface V1ListReposResponse {
  nextPageToken?: string;
  repos?: V1Repo[];
}

export interface V1ListFilesResponse {
  paths?: string[];
}

export interface V1ListConnectorsResponse {
  connectors?: V1Connector[];
}

export interface V1ListCatalogEntriesResponse {
  entries?: V1CatalogEntry[];
}

/**
 * Instance represents one connection to an OLAP datastore (such as DuckDB or Druid).
Migrations and queries are issued against a specific instance. The concept of
instances enables multiple data projects to be served by one runtime.
 */
export interface V1Instance {
  driver?: string;
  dsn?: string;
  /** If true, the runtime will store the instance's catalog data (such as sources and metrics views)
in the instance's OLAP datastore instead of in the runtime's metadata store. This is currently
only supported for the duckdb driver. */
  embedCatalog?: boolean;
  /** Indicates that the underlying infra may be manipulated directly by users.
If true, the runtime will continuously poll the infra's information schema
to discover tables not created through the runtime. They will be added to the
catalog as UnmanagedTables. */
  exposed?: boolean;
  instanceId?: string;
  /** Prefix to add to all table names created through Rill SQL (such as sources, models, etc.)
Use it as an alternative to database schemas. */
  objectPrefix?: string;
}

export interface V1ListInstancesResponse {
  instances?: V1Instance[];
  nextPageToken?: string;
}

export interface V1GetTopKResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export interface V1GetTimeRangeSummaryResponse {
  timeRangeSummary?: V1TimeRangeSummary;
}

export type V1GetTableRowsResponseDataItem = { [key: string]: any };

export interface V1GetTableRowsResponse {
  data?: V1GetTableRowsResponseDataItem[];
}

export interface V1GetTableCardinalityResponse {
  cardinality?: string;
}

export interface V1GetRugHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1GetRepoResponse {
  repo?: V1Repo;
}

export interface V1GetNumericHistogramResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1GetNullCountResponse {
  count?: number;
}

export interface V1GetInstanceResponse {
  instance?: V1Instance;
}

export interface V1GetFileResponse {
  blob?: string;
  updatedOn?: string;
}

export interface V1GetDescriptiveStatisticsResponse {
  numericSummary?: V1NumericSummary;
}

export interface V1GetCatalogEntryResponse {
  entry?: V1CatalogEntry;
}

export interface V1GetCardinalityOfColumnResponse {
  categoricalSummary?: V1CategoricalSummary;
}

export interface V1GenerateTimeSeriesResponse {
  rollup?: V1TimeSeriesResponse;
}

export interface V1EstimateSmallestTimeGrainResponse {
  timeGrain?: V1TimeGrain;
}

export interface V1EstimateRollupIntervalResponse {
  end?: string;
  interval?: V1TimeGrain;
  start?: string;
}

export interface V1DeleteRepoResponse {
  [key: string]: any;
}

export interface V1DeleteInstanceResponse {
  [key: string]: any;
}

export interface V1DeleteFileResponse {
  [key: string]: any;
}

export interface V1DeleteFileAndMigrateResponse {
  /** affected_paths lists all the file paths that were considered while
executing the migration. For a PutFileAndMigrate, this includes the put file
as well as any file artifacts that rely on objects declared in it. */
  affectedPaths?: string[];
  /** Errors encountered during the migration. If strict = false, any path in
affected_paths without an error can be assumed to have been migrated succesfully. */
  errors?: V1MigrationError[];
}

export interface V1DeleteFileAndMigrateRequest {
  /** If true, will save the file and validate it and related file artifacts, but not actually execute any migrations. */
  dry?: boolean;
  instanceId?: string;
  path?: string;
  repoId?: string;
  strict?: boolean;
}

export interface V1CreateRepoResponse {
  repo?: V1Repo;
}

export interface V1CreateRepoRequest {
  driver?: string;
  dsn?: string;
  repoId?: string;
}

export interface V1CreateInstanceResponse {
  instance?: V1Instance;
  instanceId?: string;
}

export interface V1CreateInstanceRequest {
  driver?: string;
  dsn?: string;
  embedCatalog?: boolean;
  exposed?: boolean;
  instanceId?: string;
  objectPrefix?: string;
}

/**
 * Connector represents a connector available in the runtime.
It should not be confused with a source.
 */
export interface V1Connector {
  description?: string;
  displayName?: string;
  name?: string;
  properties?: ConnectorProperty[];
}

/**
 * Response for RuntimeService.GetTopK and RuntimeService.GetCardinalityOfColumn. Message will have either topK or cardinality set.
 */
export interface V1CategoricalSummary {
  cardinality?: number;
  topK?: V1TopK;
}

export interface V1CatalogEntry {
  createdOn?: string;
  metricsView?: V1MetricsView;
  model?: V1Model;
  name?: string;
  path?: string;
  refreshedOn?: string;
  source?: V1Source;
  table?: V1Table;
  updatedOn?: string;
}

export interface V1BasicMeasureDefinition {
  expression?: string;
  id?: string;
  sqlName?: string;
}

export interface Runtimev1Type {
  arrayElementType?: Runtimev1Type;
  code?: V1TypeCode;
  mapType?: V1MapType;
  nullable?: boolean;
  structType?: V1StructType;
}

export interface RpcStatus {
  code?: number;
  details?: ProtobufAny[];
  message?: string;
}

/**
 * `NullValue` is a singleton enumeration to represent the null value for the
`Value` type union.

 The JSON representation for `NullValue` is JSON `null`.

 - NULL_VALUE: Null value.
 */
export type ProtobufNullValue =
  typeof ProtobufNullValue[keyof typeof ProtobufNullValue];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ProtobufNullValue = {
  NULL_VALUE: "NULL_VALUE",
} as const;

export interface ProtobufAny {
  "@type"?: string;
  [key: string]: unknown;
}

export interface TopKTopKEntry {
  count?: number;
  /** value is optional so that null values from the database can be represented. */
  value?: string;
}

export interface TimeSeriesResponseTimeSeriesValues {
  values?: V1TimeSeriesValue[];
}

export interface TimeRangeSummaryInterval {
  days?: number;
  micros?: string;
  months?: number;
}

export interface StructTypeField {
  name?: string;
  type?: Runtimev1Type;
}

export interface NumericOutliersOutlier {
  bucket?: number;
  high?: number;
  low?: number;
  present?: boolean;
}

export interface NumericHistogramBinsBin {
  bucket?: number;
  count?: number;
  high?: number;
  low?: number;
}

export type ModelDialect = typeof ModelDialect[keyof typeof ModelDialect];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ModelDialect = {
  DIALECT_UNSPECIFIED: "DIALECT_UNSPECIFIED",
  DIALECT_DUCKDB: "DIALECT_DUCKDB",
} as const;

export interface MigrationErrorCharLocation {
  column?: number;
  line?: number;
}

export interface MetricsViewMeasure {
  description?: string;
  enabled?: string;
  expression?: string;
  format?: string;
  label?: string;
  name?: string;
}

export interface MetricsViewFilterCond {
  in?: unknown[];
  like?: unknown[];
  name?: string;
}

export interface MetricsViewDimensionValueValues {
  values?: unknown[];
}

export interface MetricsViewDimension {
  description?: string;
  enabled?: string;
  label?: string;
  name?: string;
}

export interface GenerateTimeSeriesRequestBasicMeasures {
  basicMeasures?: V1BasicMeasureDefinition[];
}

export type ConnectorPropertyType =
  typeof ConnectorPropertyType[keyof typeof ConnectorPropertyType];

// eslint-disable-next-line @typescript-eslint/no-redeclare
export const ConnectorPropertyType = {
  TYPE_UNSPECIFIED: "TYPE_UNSPECIFIED",
  TYPE_STRING: "TYPE_STRING",
  TYPE_NUMBER: "TYPE_NUMBER",
  TYPE_BOOLEAN: "TYPE_BOOLEAN",
  TYPE_INFORMATIONAL: "TYPE_INFORMATIONAL",
} as const;

export interface ConnectorProperty {
  description?: string;
  displayName?: string;
  hint?: string;
  href?: string;
  key?: string;
  nullable?: boolean;
  placeholder?: string;
  type?: ConnectorPropertyType;
}
