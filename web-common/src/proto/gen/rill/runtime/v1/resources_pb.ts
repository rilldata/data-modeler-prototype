// @generated by protoc-gen-es v1.3.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/resources.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp } from "@bufbuild/protobuf";
import { TimeGrain } from "./time_grain_pb.js";

/**
 * @generated from message rill.runtime.v1.Resource
 */
export class Resource extends Message<Resource> {
  /**
   * @generated from field: rill.runtime.v1.ResourceMeta meta = 1;
   */
  meta?: ResourceMeta;

  /**
   * @generated from oneof rill.runtime.v1.Resource.resource
   */
  resource: {
    /**
     * Well-known types only, for now. If required, we can add support for a google.protobuf.Any later.
     *
     * @generated from field: rill.runtime.v1.ProjectParser project_parser = 2;
     */
    value: ProjectParser;
    case: "projectParser";
  } | {
    /**
     * @generated from field: rill.runtime.v1.SourceV2 source = 3;
     */
    value: SourceV2;
    case: "source";
  } | {
    /**
     * @generated from field: rill.runtime.v1.ModelV2 model = 4;
     */
    value: ModelV2;
    case: "model";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsViewV2 metrics_view = 5;
     */
    value: MetricsViewV2;
    case: "metricsView";
  } | {
    /**
     * @generated from field: rill.runtime.v1.Migration migration = 9;
     */
    value: Migration;
    case: "migration";
  } | {
    /**
     * @generated from field: rill.runtime.v1.PullTrigger pull_trigger = 6;
     */
    value: PullTrigger;
    case: "pullTrigger";
  } | {
    /**
     * @generated from field: rill.runtime.v1.RefreshTrigger refresh_trigger = 7;
     */
    value: RefreshTrigger;
    case: "refreshTrigger";
  } | {
    /**
     * @generated from field: rill.runtime.v1.BucketPlanner bucket_planner = 8;
     */
    value: BucketPlanner;
    case: "bucketPlanner";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<Resource>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Resource";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: ResourceMeta },
    { no: 2, name: "project_parser", kind: "message", T: ProjectParser, oneof: "resource" },
    { no: 3, name: "source", kind: "message", T: SourceV2, oneof: "resource" },
    { no: 4, name: "model", kind: "message", T: ModelV2, oneof: "resource" },
    { no: 5, name: "metrics_view", kind: "message", T: MetricsViewV2, oneof: "resource" },
    { no: 9, name: "migration", kind: "message", T: Migration, oneof: "resource" },
    { no: 6, name: "pull_trigger", kind: "message", T: PullTrigger, oneof: "resource" },
    { no: 7, name: "refresh_trigger", kind: "message", T: RefreshTrigger, oneof: "resource" },
    { no: 8, name: "bucket_planner", kind: "message", T: BucketPlanner, oneof: "resource" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Resource {
    return new Resource().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Resource {
    return new Resource().fromJsonString(jsonString, options);
  }

  static equals(a: Resource | PlainMessage<Resource> | undefined, b: Resource | PlainMessage<Resource> | undefined): boolean {
    return proto3.util.equals(Resource, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResourceMeta
 */
export class ResourceMeta extends Message<ResourceMeta> {
  /**
   * @generated from field: rill.runtime.v1.ResourceName name = 1;
   */
  name?: ResourceName;

  /**
   * @generated from field: repeated rill.runtime.v1.ResourceName refs = 2;
   */
  refs: ResourceName[] = [];

  /**
   * @generated from field: optional rill.runtime.v1.ResourceName owner = 3;
   */
  owner?: ResourceName;

  /**
   * @generated from field: repeated string file_paths = 4;
   */
  filePaths: string[] = [];

  /**
   * @generated from field: bool deleted = 7;
   */
  deleted = false;

  /**
   * @generated from field: optional rill.runtime.v1.ResourceName renamed_from = 13;
   */
  renamedFrom?: ResourceName;

  /**
   * @generated from field: string reconcile_error = 8;
   */
  reconcileError = "";

  /**
   * @generated from field: int64 version = 15;
   */
  version = protoInt64.zero;

  /**
   * @generated from field: int64 meta_version = 14;
   */
  metaVersion = protoInt64.zero;

  /**
   * @generated from field: int64 spec_version = 5;
   */
  specVersion = protoInt64.zero;

  /**
   * @generated from field: int64 state_version = 6;
   */
  stateVersion = protoInt64.zero;

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 9;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp spec_updated_on = 10;
   */
  specUpdatedOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp state_updated_on = 11;
   */
  stateUpdatedOn?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp deleted_on = 12;
   */
  deletedOn?: Timestamp;

  constructor(data?: PartialMessage<ResourceMeta>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResourceMeta";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "message", T: ResourceName },
    { no: 2, name: "refs", kind: "message", T: ResourceName, repeated: true },
    { no: 3, name: "owner", kind: "message", T: ResourceName, opt: true },
    { no: 4, name: "file_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 7, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "renamed_from", kind: "message", T: ResourceName, opt: true },
    { no: 8, name: "reconcile_error", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 14, name: "meta_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 5, name: "spec_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "state_version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "created_on", kind: "message", T: Timestamp },
    { no: 10, name: "spec_updated_on", kind: "message", T: Timestamp },
    { no: 11, name: "state_updated_on", kind: "message", T: Timestamp },
    { no: 12, name: "deleted_on", kind: "message", T: Timestamp, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceMeta {
    return new ResourceMeta().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceMeta {
    return new ResourceMeta().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceMeta {
    return new ResourceMeta().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceMeta | PlainMessage<ResourceMeta> | undefined, b: ResourceMeta | PlainMessage<ResourceMeta> | undefined): boolean {
    return proto3.util.equals(ResourceMeta, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ResourceName
 */
export class ResourceName extends Message<ResourceName> {
  /**
   * @generated from field: string kind = 1;
   */
  kind = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<ResourceName>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ResourceName";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ResourceName {
    return new ResourceName().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ResourceName {
    return new ResourceName().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ResourceName {
    return new ResourceName().fromJsonString(jsonString, options);
  }

  static equals(a: ResourceName | PlainMessage<ResourceName> | undefined, b: ResourceName | PlainMessage<ResourceName> | undefined): boolean {
    return proto3.util.equals(ResourceName, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProjectParser
 */
export class ProjectParser extends Message<ProjectParser> {
  /**
   * @generated from field: rill.runtime.v1.ProjectParserSpec spec = 1;
   */
  spec?: ProjectParserSpec;

  /**
   * @generated from field: rill.runtime.v1.ProjectParserState state = 2;
   */
  state?: ProjectParserState;

  constructor(data?: PartialMessage<ProjectParser>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ProjectParser";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: ProjectParserSpec },
    { no: 2, name: "state", kind: "message", T: ProjectParserState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectParser {
    return new ProjectParser().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectParser {
    return new ProjectParser().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectParser {
    return new ProjectParser().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectParser | PlainMessage<ProjectParser> | undefined, b: ProjectParser | PlainMessage<ProjectParser> | undefined): boolean {
    return proto3.util.equals(ProjectParser, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProjectParserSpec
 */
export class ProjectParserSpec extends Message<ProjectParserSpec> {
  /**
   * compiler identifies the project parser to use
   *
   * @generated from field: string compiler = 1;
   */
  compiler = "";

  /**
   * watch makes the project parser watch for and incrementally parse changed files
   *
   * @generated from field: bool watch = 2;
   */
  watch = false;

  /**
   * stage_changes sets stage_changes on created sources and models 
   *
   * @generated from field: bool stage_changes = 3;
   */
  stageChanges = false;

  /**
   * stream_source_ingestion
   *
   * @generated from field: bool source_stream_ingestion = 4;
   */
  sourceStreamIngestion = false;

  /**
   * model_default_materialize sets a default for whether or not to materialize a model, if not explicitly set in the model
   *
   * @generated from field: bool model_default_materialize = 5;
   */
  modelDefaultMaterialize = false;

  /**
   * materialize_model_delay_seconds makes the project parser delay materialization of updated models
   *
   * @generated from field: uint32 model_materialize_delay_seconds = 6;
   */
  modelMaterializeDelaySeconds = 0;

  /**
   * duckdb_connectors is a list of connectors that use DuckDB
   *
   * @generated from field: repeated string duckdb_connectors = 7;
   */
  duckdbConnectors: string[] = [];

  constructor(data?: PartialMessage<ProjectParserSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ProjectParserSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "compiler", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "watch", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "source_stream_ingestion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "model_default_materialize", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "model_materialize_delay_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "duckdb_connectors", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectParserSpec {
    return new ProjectParserSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectParserSpec {
    return new ProjectParserSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectParserSpec {
    return new ProjectParserSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectParserSpec | PlainMessage<ProjectParserSpec> | undefined, b: ProjectParserSpec | PlainMessage<ProjectParserSpec> | undefined): boolean {
    return proto3.util.equals(ProjectParserSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProjectParserState
 */
export class ProjectParserState extends Message<ProjectParserState> {
  /**
   * @generated from field: repeated rill.runtime.v1.ParseError parse_errors = 1;
   */
  parseErrors: ParseError[] = [];

  /**
   * @generated from field: string current_commit_sha = 2;
   */
  currentCommitSha = "";

  /**
   * @generated from field: repeated string changed_paths = 3;
   */
  changedPaths: string[] = [];

  constructor(data?: PartialMessage<ProjectParserState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ProjectParserState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "parse_errors", kind: "message", T: ParseError, repeated: true },
    { no: 2, name: "current_commit_sha", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "changed_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectParserState {
    return new ProjectParserState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectParserState {
    return new ProjectParserState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectParserState {
    return new ProjectParserState().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectParserState | PlainMessage<ProjectParserState> | undefined, b: ProjectParserState | PlainMessage<ProjectParserState> | undefined): boolean {
    return proto3.util.equals(ProjectParserState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.SourceV2
 */
export class SourceV2 extends Message<SourceV2> {
  /**
   * @generated from field: rill.runtime.v1.SourceSpec spec = 1;
   */
  spec?: SourceSpec;

  /**
   * @generated from field: rill.runtime.v1.SourceState state = 2;
   */
  state?: SourceState;

  constructor(data?: PartialMessage<SourceV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.SourceV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: SourceSpec },
    { no: 2, name: "state", kind: "message", T: SourceState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceV2 {
    return new SourceV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceV2 {
    return new SourceV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceV2 {
    return new SourceV2().fromJsonString(jsonString, options);
  }

  static equals(a: SourceV2 | PlainMessage<SourceV2> | undefined, b: SourceV2 | PlainMessage<SourceV2> | undefined): boolean {
    return proto3.util.equals(SourceV2, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.SourceSpec
 */
export class SourceSpec extends Message<SourceSpec> {
  /**
   * @generated from field: string source_connector = 1;
   */
  sourceConnector = "";

  /**
   * @generated from field: string sink_connector = 2;
   */
  sinkConnector = "";

  /**
   * @generated from field: google.protobuf.Struct properties = 3;
   */
  properties?: Struct;

  /**
   * @generated from field: rill.runtime.v1.Schedule refresh_schedule = 5;
   */
  refreshSchedule?: Schedule;

  /**
   * @generated from field: uint32 timeout_seconds = 6;
   */
  timeoutSeconds = 0;

  /**
   * Fields not derived from code files
   *
   * @generated from field: bool stage_changes = 7;
   */
  stageChanges = false;

  /**
   * @generated from field: bool stream_ingestion = 8;
   */
  streamIngestion = false;

  /**
   * @generated from field: bool trigger = 9;
   */
  trigger = false;

  constructor(data?: PartialMessage<SourceSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.SourceSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "source_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sink_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "properties", kind: "message", T: Struct },
    { no: 5, name: "refresh_schedule", kind: "message", T: Schedule },
    { no: 6, name: "timeout_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 7, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "stream_ingestion", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "trigger", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceSpec {
    return new SourceSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceSpec {
    return new SourceSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceSpec {
    return new SourceSpec().fromJsonString(jsonString, options);
  }

  static equals(a: SourceSpec | PlainMessage<SourceSpec> | undefined, b: SourceSpec | PlainMessage<SourceSpec> | undefined): boolean {
    return proto3.util.equals(SourceSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.SourceState
 */
export class SourceState extends Message<SourceState> {
  /**
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * @generated from field: string table = 2;
   */
  table = "";

  /**
   * @generated from field: string spec_hash = 3;
   */
  specHash = "";

  /**
   * @generated from field: google.protobuf.Timestamp refreshed_on = 4;
   */
  refreshedOn?: Timestamp;

  constructor(data?: PartialMessage<SourceState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.SourceState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spec_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "refreshed_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SourceState {
    return new SourceState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SourceState {
    return new SourceState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SourceState {
    return new SourceState().fromJsonString(jsonString, options);
  }

  static equals(a: SourceState | PlainMessage<SourceState> | undefined, b: SourceState | PlainMessage<SourceState> | undefined): boolean {
    return proto3.util.equals(SourceState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ModelV2
 */
export class ModelV2 extends Message<ModelV2> {
  /**
   * @generated from field: rill.runtime.v1.ModelSpec spec = 1;
   */
  spec?: ModelSpec;

  /**
   * @generated from field: rill.runtime.v1.ModelState state = 2;
   */
  state?: ModelState;

  constructor(data?: PartialMessage<ModelV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ModelV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: ModelSpec },
    { no: 2, name: "state", kind: "message", T: ModelState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelV2 {
    return new ModelV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelV2 {
    return new ModelV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelV2 {
    return new ModelV2().fromJsonString(jsonString, options);
  }

  static equals(a: ModelV2 | PlainMessage<ModelV2> | undefined, b: ModelV2 | PlainMessage<ModelV2> | undefined): boolean {
    return proto3.util.equals(ModelV2, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ModelSpec
 */
export class ModelSpec extends Message<ModelSpec> {
  /**
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * @generated from field: optional bool materialize = 3;
   */
  materialize?: boolean;

  /**
   * @generated from field: rill.runtime.v1.Schedule refresh_schedule = 4;
   */
  refreshSchedule?: Schedule;

  /**
   * @generated from field: uint32 timeout_seconds = 5;
   */
  timeoutSeconds = 0;

  /**
   * @generated from field: bool uses_templating = 6;
   */
  usesTemplating = false;

  /**
   * Fields not derived from code files
   *
   * @generated from field: bool stage_changes = 7;
   */
  stageChanges = false;

  /**
   * @generated from field: uint32 materialize_delay_seconds = 8;
   */
  materializeDelaySeconds = 0;

  /**
   * @generated from field: bool trigger = 9;
   */
  trigger = false;

  constructor(data?: PartialMessage<ModelSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ModelSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "materialize", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 4, name: "refresh_schedule", kind: "message", T: Schedule },
    { no: 5, name: "timeout_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 6, name: "uses_templating", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "materialize_delay_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 9, name: "trigger", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelSpec {
    return new ModelSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelSpec {
    return new ModelSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelSpec {
    return new ModelSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ModelSpec | PlainMessage<ModelSpec> | undefined, b: ModelSpec | PlainMessage<ModelSpec> | undefined): boolean {
    return proto3.util.equals(ModelSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ModelState
 */
export class ModelState extends Message<ModelState> {
  /**
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * @generated from field: string table = 2;
   */
  table = "";

  /**
   * @generated from field: string spec_hash = 3;
   */
  specHash = "";

  /**
   * @generated from field: google.protobuf.Timestamp refreshed_on = 4;
   */
  refreshedOn?: Timestamp;

  constructor(data?: PartialMessage<ModelState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ModelState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "spec_hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "refreshed_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ModelState {
    return new ModelState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ModelState {
    return new ModelState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ModelState {
    return new ModelState().fromJsonString(jsonString, options);
  }

  static equals(a: ModelState | PlainMessage<ModelState> | undefined, b: ModelState | PlainMessage<ModelState> | undefined): boolean {
    return proto3.util.equals(ModelState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewV2
 */
export class MetricsViewV2 extends Message<MetricsViewV2> {
  /**
   * @generated from field: rill.runtime.v1.MetricsViewSpec spec = 1;
   */
  spec?: MetricsViewSpec;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewState state = 2;
   */
  state?: MetricsViewState;

  constructor(data?: PartialMessage<MetricsViewV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: MetricsViewSpec },
    { no: 2, name: "state", kind: "message", T: MetricsViewState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewV2 {
    return new MetricsViewV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewV2 {
    return new MetricsViewV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewV2 {
    return new MetricsViewV2().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewV2 | PlainMessage<MetricsViewV2> | undefined, b: MetricsViewV2 | PlainMessage<MetricsViewV2> | undefined): boolean {
    return proto3.util.equals(MetricsViewV2, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewSpec
 */
export class MetricsViewSpec extends Message<MetricsViewSpec> {
  /**
   * Connector containing the table
   *
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * Name of the table the metrics view is based on
   *
   * @generated from field: string table = 2;
   */
  table = "";

  /**
   * User friendly label for the dashboard
   *
   * @generated from field: string title = 3;
   */
  title = "";

  /**
   * Description of the dashboard
   *
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * Name of the primary time dimension, used for rendering time series
   *
   * @generated from field: string time_dimension = 5;
   */
  timeDimension = "";

  /**
   * Dimensions in the metrics view
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewSpec.DimensionV2 dimensions = 6;
   */
  dimensions: MetricsViewSpec_DimensionV2[] = [];

  /**
   * Measures in the metrics view
   *
   * @generated from field: repeated rill.runtime.v1.MetricsViewSpec.MeasureV2 measures = 7;
   */
  measures: MetricsViewSpec_MeasureV2[] = [];

  /**
   * Smallest time grain to show in the dashboard
   *
   * @generated from field: rill.runtime.v1.TimeGrain smallest_time_grain = 8;
   */
  smallestTimeGrain = TimeGrain.UNSPECIFIED;

  /**
   * Default time range for the dashboard. It should be a valid ISO 8601 duration string.
   *
   * @generated from field: string default_time_range = 9;
   */
  defaultTimeRange = "";

  /**
   * Available time zones list preferred time zones using IANA location identifiers
   *
   * @generated from field: repeated string available_time_zones = 10;
   */
  availableTimeZones: string[] = [];

  constructor(data?: PartialMessage<MetricsViewSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time_dimension", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "dimensions", kind: "message", T: MetricsViewSpec_DimensionV2, repeated: true },
    { no: 7, name: "measures", kind: "message", T: MetricsViewSpec_MeasureV2, repeated: true },
    { no: 8, name: "smallest_time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 9, name: "default_time_range", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "available_time_zones", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSpec {
    return new MetricsViewSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSpec {
    return new MetricsViewSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSpec {
    return new MetricsViewSpec().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSpec | PlainMessage<MetricsViewSpec> | undefined, b: MetricsViewSpec | PlainMessage<MetricsViewSpec> | undefined): boolean {
    return proto3.util.equals(MetricsViewSpec, a, b);
  }
}

/**
 * Dimensions are columns to filter and group by
 *
 * @generated from message rill.runtime.v1.MetricsViewSpec.DimensionV2
 */
export class MetricsViewSpec_DimensionV2 extends Message<MetricsViewSpec_DimensionV2> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string column = 2;
   */
  column = "";

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  constructor(data?: PartialMessage<MetricsViewSpec_DimensionV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSpec.DimensionV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "column", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSpec_DimensionV2 {
    return new MetricsViewSpec_DimensionV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSpec_DimensionV2 {
    return new MetricsViewSpec_DimensionV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSpec_DimensionV2 {
    return new MetricsViewSpec_DimensionV2().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSpec_DimensionV2 | PlainMessage<MetricsViewSpec_DimensionV2> | undefined, b: MetricsViewSpec_DimensionV2 | PlainMessage<MetricsViewSpec_DimensionV2> | undefined): boolean {
    return proto3.util.equals(MetricsViewSpec_DimensionV2, a, b);
  }
}

/**
 * Measures are aggregated computed values
 *
 * @generated from message rill.runtime.v1.MetricsViewSpec.MeasureV2
 */
export class MetricsViewSpec_MeasureV2 extends Message<MetricsViewSpec_MeasureV2> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string expression = 2;
   */
  expression = "";

  /**
   * @generated from field: string label = 3;
   */
  label = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: string format = 5;
   */
  format = "";

  /**
   * @generated from field: bool valid_percent_of_total = 6;
   */
  validPercentOfTotal = false;

  constructor(data?: PartialMessage<MetricsViewSpec_MeasureV2>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSpec.MeasureV2";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "label", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "format", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "valid_percent_of_total", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSpec_MeasureV2 {
    return new MetricsViewSpec_MeasureV2().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSpec_MeasureV2 {
    return new MetricsViewSpec_MeasureV2().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSpec_MeasureV2 {
    return new MetricsViewSpec_MeasureV2().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSpec_MeasureV2 | PlainMessage<MetricsViewSpec_MeasureV2> | undefined, b: MetricsViewSpec_MeasureV2 | PlainMessage<MetricsViewSpec_MeasureV2> | undefined): boolean {
    return proto3.util.equals(MetricsViewSpec_MeasureV2, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewState
 */
export class MetricsViewState extends Message<MetricsViewState> {
  /**
   * @generated from field: rill.runtime.v1.MetricsViewSpec valid_spec = 1;
   */
  validSpec?: MetricsViewSpec;

  constructor(data?: PartialMessage<MetricsViewState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valid_spec", kind: "message", T: MetricsViewSpec },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewState {
    return new MetricsViewState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewState {
    return new MetricsViewState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewState {
    return new MetricsViewState().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewState | PlainMessage<MetricsViewState> | undefined, b: MetricsViewState | PlainMessage<MetricsViewState> | undefined): boolean {
    return proto3.util.equals(MetricsViewState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Migration
 */
export class Migration extends Message<Migration> {
  /**
   * @generated from field: rill.runtime.v1.MigrationSpec spec = 1;
   */
  spec?: MigrationSpec;

  /**
   * @generated from field: rill.runtime.v1.MigrationState state = 2;
   */
  state?: MigrationState;

  constructor(data?: PartialMessage<Migration>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Migration";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: MigrationSpec },
    { no: 2, name: "state", kind: "message", T: MigrationState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Migration {
    return new Migration().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Migration {
    return new Migration().fromJsonString(jsonString, options);
  }

  static equals(a: Migration | PlainMessage<Migration> | undefined, b: Migration | PlainMessage<Migration> | undefined): boolean {
    return proto3.util.equals(Migration, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MigrationSpec
 */
export class MigrationSpec extends Message<MigrationSpec> {
  /**
   * @generated from field: string connector = 1;
   */
  connector = "";

  /**
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * @generated from field: uint32 version = 3;
   */
  version = 0;

  constructor(data?: PartialMessage<MigrationSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MigrationSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrationSpec {
    return new MigrationSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrationSpec {
    return new MigrationSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrationSpec {
    return new MigrationSpec().fromJsonString(jsonString, options);
  }

  static equals(a: MigrationSpec | PlainMessage<MigrationSpec> | undefined, b: MigrationSpec | PlainMessage<MigrationSpec> | undefined): boolean {
    return proto3.util.equals(MigrationSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MigrationState
 */
export class MigrationState extends Message<MigrationState> {
  /**
   * @generated from field: uint32 version = 1;
   */
  version = 0;

  constructor(data?: PartialMessage<MigrationState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MigrationState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MigrationState {
    return new MigrationState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MigrationState {
    return new MigrationState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MigrationState {
    return new MigrationState().fromJsonString(jsonString, options);
  }

  static equals(a: MigrationState | PlainMessage<MigrationState> | undefined, b: MigrationState | PlainMessage<MigrationState> | undefined): boolean {
    return proto3.util.equals(MigrationState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PullTrigger
 */
export class PullTrigger extends Message<PullTrigger> {
  /**
   * @generated from field: rill.runtime.v1.PullTriggerSpec spec = 1;
   */
  spec?: PullTriggerSpec;

  /**
   * @generated from field: rill.runtime.v1.PullTriggerState state = 2;
   */
  state?: PullTriggerState;

  constructor(data?: PartialMessage<PullTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PullTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: PullTriggerSpec },
    { no: 2, name: "state", kind: "message", T: PullTriggerState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullTrigger {
    return new PullTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullTrigger {
    return new PullTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullTrigger {
    return new PullTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: PullTrigger | PlainMessage<PullTrigger> | undefined, b: PullTrigger | PlainMessage<PullTrigger> | undefined): boolean {
    return proto3.util.equals(PullTrigger, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PullTriggerSpec
 */
export class PullTriggerSpec extends Message<PullTriggerSpec> {
  constructor(data?: PartialMessage<PullTriggerSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PullTriggerSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullTriggerSpec {
    return new PullTriggerSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullTriggerSpec {
    return new PullTriggerSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullTriggerSpec {
    return new PullTriggerSpec().fromJsonString(jsonString, options);
  }

  static equals(a: PullTriggerSpec | PlainMessage<PullTriggerSpec> | undefined, b: PullTriggerSpec | PlainMessage<PullTriggerSpec> | undefined): boolean {
    return proto3.util.equals(PullTriggerSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PullTriggerState
 */
export class PullTriggerState extends Message<PullTriggerState> {
  constructor(data?: PartialMessage<PullTriggerState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PullTriggerState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PullTriggerState {
    return new PullTriggerState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PullTriggerState {
    return new PullTriggerState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PullTriggerState {
    return new PullTriggerState().fromJsonString(jsonString, options);
  }

  static equals(a: PullTriggerState | PlainMessage<PullTriggerState> | undefined, b: PullTriggerState | PlainMessage<PullTriggerState> | undefined): boolean {
    return proto3.util.equals(PullTriggerState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshTrigger
 */
export class RefreshTrigger extends Message<RefreshTrigger> {
  /**
   * @generated from field: rill.runtime.v1.RefreshTriggerSpec spec = 1;
   */
  spec?: RefreshTriggerSpec;

  /**
   * @generated from field: rill.runtime.v1.RefreshTriggerState state = 2;
   */
  state?: RefreshTriggerState;

  constructor(data?: PartialMessage<RefreshTrigger>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshTrigger";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: RefreshTriggerSpec },
    { no: 2, name: "state", kind: "message", T: RefreshTriggerState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTrigger {
    return new RefreshTrigger().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTrigger {
    return new RefreshTrigger().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTrigger {
    return new RefreshTrigger().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTrigger | PlainMessage<RefreshTrigger> | undefined, b: RefreshTrigger | PlainMessage<RefreshTrigger> | undefined): boolean {
    return proto3.util.equals(RefreshTrigger, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshTriggerSpec
 */
export class RefreshTriggerSpec extends Message<RefreshTriggerSpec> {
  /**
   * @generated from field: repeated rill.runtime.v1.ResourceName only_names = 1;
   */
  onlyNames: ResourceName[] = [];

  constructor(data?: PartialMessage<RefreshTriggerSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshTriggerSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "only_names", kind: "message", T: ResourceName, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTriggerSpec {
    return new RefreshTriggerSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTriggerSpec {
    return new RefreshTriggerSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTriggerSpec {
    return new RefreshTriggerSpec().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTriggerSpec | PlainMessage<RefreshTriggerSpec> | undefined, b: RefreshTriggerSpec | PlainMessage<RefreshTriggerSpec> | undefined): boolean {
    return proto3.util.equals(RefreshTriggerSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshTriggerState
 */
export class RefreshTriggerState extends Message<RefreshTriggerState> {
  constructor(data?: PartialMessage<RefreshTriggerState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshTriggerState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshTriggerState {
    return new RefreshTriggerState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshTriggerState {
    return new RefreshTriggerState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshTriggerState {
    return new RefreshTriggerState().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshTriggerState | PlainMessage<RefreshTriggerState> | undefined, b: RefreshTriggerState | PlainMessage<RefreshTriggerState> | undefined): boolean {
    return proto3.util.equals(RefreshTriggerState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.BucketPlanner
 */
export class BucketPlanner extends Message<BucketPlanner> {
  /**
   * @generated from field: rill.runtime.v1.BucketPlannerSpec spec = 1;
   */
  spec?: BucketPlannerSpec;

  /**
   * @generated from field: rill.runtime.v1.BucketPlannerState state = 2;
   */
  state?: BucketPlannerState;

  constructor(data?: PartialMessage<BucketPlanner>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.BucketPlanner";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spec", kind: "message", T: BucketPlannerSpec },
    { no: 2, name: "state", kind: "message", T: BucketPlannerState },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BucketPlanner {
    return new BucketPlanner().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BucketPlanner {
    return new BucketPlanner().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BucketPlanner {
    return new BucketPlanner().fromJsonString(jsonString, options);
  }

  static equals(a: BucketPlanner | PlainMessage<BucketPlanner> | undefined, b: BucketPlanner | PlainMessage<BucketPlanner> | undefined): boolean {
    return proto3.util.equals(BucketPlanner, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.BucketPlannerSpec
 */
export class BucketPlannerSpec extends Message<BucketPlannerSpec> {
  /**
   * @generated from field: rill.runtime.v1.BucketExtractPolicy extract_policy = 1;
   */
  extractPolicy?: BucketExtractPolicy;

  constructor(data?: PartialMessage<BucketPlannerSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.BucketPlannerSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "extract_policy", kind: "message", T: BucketExtractPolicy },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BucketPlannerSpec {
    return new BucketPlannerSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BucketPlannerSpec {
    return new BucketPlannerSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BucketPlannerSpec {
    return new BucketPlannerSpec().fromJsonString(jsonString, options);
  }

  static equals(a: BucketPlannerSpec | PlainMessage<BucketPlannerSpec> | undefined, b: BucketPlannerSpec | PlainMessage<BucketPlannerSpec> | undefined): boolean {
    return proto3.util.equals(BucketPlannerSpec, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.BucketPlannerState
 */
export class BucketPlannerState extends Message<BucketPlannerState> {
  /**
   * @generated from field: string region = 1;
   */
  region = "";

  constructor(data?: PartialMessage<BucketPlannerState>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.BucketPlannerState";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BucketPlannerState {
    return new BucketPlannerState().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BucketPlannerState {
    return new BucketPlannerState().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BucketPlannerState {
    return new BucketPlannerState().fromJsonString(jsonString, options);
  }

  static equals(a: BucketPlannerState | PlainMessage<BucketPlannerState> | undefined, b: BucketPlannerState | PlainMessage<BucketPlannerState> | undefined): boolean {
    return proto3.util.equals(BucketPlannerState, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.BucketExtractPolicy
 */
export class BucketExtractPolicy extends Message<BucketExtractPolicy> {
  /**
   * @generated from field: rill.runtime.v1.BucketExtractPolicy.Strategy rows_strategy = 1;
   */
  rowsStrategy = BucketExtractPolicy_Strategy.UNSPECIFIED;

  /**
   * @generated from field: uint64 rows_limit_bytes = 2;
   */
  rowsLimitBytes = protoInt64.zero;

  /**
   * @generated from field: rill.runtime.v1.BucketExtractPolicy.Strategy files_strategy = 3;
   */
  filesStrategy = BucketExtractPolicy_Strategy.UNSPECIFIED;

  /**
   * @generated from field: uint64 files_limit = 4;
   */
  filesLimit = protoInt64.zero;

  constructor(data?: PartialMessage<BucketExtractPolicy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.BucketExtractPolicy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rows_strategy", kind: "enum", T: proto3.getEnumType(BucketExtractPolicy_Strategy) },
    { no: 2, name: "rows_limit_bytes", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "files_strategy", kind: "enum", T: proto3.getEnumType(BucketExtractPolicy_Strategy) },
    { no: 4, name: "files_limit", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): BucketExtractPolicy {
    return new BucketExtractPolicy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): BucketExtractPolicy {
    return new BucketExtractPolicy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): BucketExtractPolicy {
    return new BucketExtractPolicy().fromJsonString(jsonString, options);
  }

  static equals(a: BucketExtractPolicy | PlainMessage<BucketExtractPolicy> | undefined, b: BucketExtractPolicy | PlainMessage<BucketExtractPolicy> | undefined): boolean {
    return proto3.util.equals(BucketExtractPolicy, a, b);
  }
}

/**
 * @generated from enum rill.runtime.v1.BucketExtractPolicy.Strategy
 */
export enum BucketExtractPolicy_Strategy {
  /**
   * @generated from enum value: STRATEGY_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: STRATEGY_HEAD = 1;
   */
  HEAD = 1,

  /**
   * @generated from enum value: STRATEGY_TAIL = 2;
   */
  TAIL = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(BucketExtractPolicy_Strategy)
proto3.util.setEnumType(BucketExtractPolicy_Strategy, "rill.runtime.v1.BucketExtractPolicy.Strategy", [
  { no: 0, name: "STRATEGY_UNSPECIFIED" },
  { no: 1, name: "STRATEGY_HEAD" },
  { no: 2, name: "STRATEGY_TAIL" },
]);

/**
 * @generated from message rill.runtime.v1.Schedule
 */
export class Schedule extends Message<Schedule> {
  /**
   * @generated from field: string cron = 1;
   */
  cron = "";

  /**
   * @generated from field: uint32 ticker_seconds = 2;
   */
  tickerSeconds = 0;

  constructor(data?: PartialMessage<Schedule>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Schedule";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cron", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ticker_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Schedule {
    return new Schedule().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Schedule {
    return new Schedule().fromJsonString(jsonString, options);
  }

  static equals(a: Schedule | PlainMessage<Schedule> | undefined, b: Schedule | PlainMessage<Schedule> | undefined): boolean {
    return proto3.util.equals(Schedule, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ParseError
 */
export class ParseError extends Message<ParseError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string file_path = 2;
   */
  filePath = "";

  /**
   * @generated from field: rill.runtime.v1.CharLocation start_location = 3;
   */
  startLocation?: CharLocation;

  constructor(data?: PartialMessage<ParseError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ParseError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "start_location", kind: "message", T: CharLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ParseError {
    return new ParseError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ParseError {
    return new ParseError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ParseError {
    return new ParseError().fromJsonString(jsonString, options);
  }

  static equals(a: ParseError | PlainMessage<ParseError> | undefined, b: ParseError | PlainMessage<ParseError> | undefined): boolean {
    return proto3.util.equals(ParseError, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ValidationError
 */
export class ValidationError extends Message<ValidationError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: repeated string property_path = 2;
   */
  propertyPath: string[] = [];

  constructor(data?: PartialMessage<ValidationError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ValidationError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "property_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ValidationError {
    return new ValidationError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ValidationError {
    return new ValidationError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ValidationError {
    return new ValidationError().fromJsonString(jsonString, options);
  }

  static equals(a: ValidationError | PlainMessage<ValidationError> | undefined, b: ValidationError | PlainMessage<ValidationError> | undefined): boolean {
    return proto3.util.equals(ValidationError, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DependencyError
 */
export class DependencyError extends Message<DependencyError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  /**
   * @generated from field: string dependency = 2;
   */
  dependency = "";

  constructor(data?: PartialMessage<DependencyError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DependencyError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "dependency", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DependencyError {
    return new DependencyError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DependencyError {
    return new DependencyError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DependencyError {
    return new DependencyError().fromJsonString(jsonString, options);
  }

  static equals(a: DependencyError | PlainMessage<DependencyError> | undefined, b: DependencyError | PlainMessage<DependencyError> | undefined): boolean {
    return proto3.util.equals(DependencyError, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ExecutionError
 */
export class ExecutionError extends Message<ExecutionError> {
  /**
   * @generated from field: string message = 1;
   */
  message = "";

  constructor(data?: PartialMessage<ExecutionError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ExecutionError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ExecutionError {
    return new ExecutionError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ExecutionError {
    return new ExecutionError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ExecutionError {
    return new ExecutionError().fromJsonString(jsonString, options);
  }

  static equals(a: ExecutionError | PlainMessage<ExecutionError> | undefined, b: ExecutionError | PlainMessage<ExecutionError> | undefined): boolean {
    return proto3.util.equals(ExecutionError, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CharLocation
 */
export class CharLocation extends Message<CharLocation> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line = 0;

  constructor(data?: PartialMessage<CharLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CharLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CharLocation {
    return new CharLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CharLocation {
    return new CharLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CharLocation {
    return new CharLocation().fromJsonString(jsonString, options);
  }

  static equals(a: CharLocation | PlainMessage<CharLocation> | undefined, b: CharLocation | PlainMessage<CharLocation> | undefined): boolean {
    return proto3.util.equals(CharLocation, a, b);
  }
}

