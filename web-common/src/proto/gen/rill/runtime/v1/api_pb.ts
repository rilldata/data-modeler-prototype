// @generated by protoc-gen-es v1.6.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/api.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";
import { PullTriggerSpec, RefreshTriggerSpec, Resource, ResourceName } from "./resources_pb.js";
import { MetricsView, Model, ObjectType, Source, Table } from "./catalog_pb.js";

/**
 * FileEvent describes a file change.
 *
 * @generated from enum rill.runtime.v1.FileEvent
 */
export enum FileEvent {
  /**
   * @generated from enum value: FILE_EVENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: FILE_EVENT_WRITE = 1;
   */
  WRITE = 1,

  /**
   * @generated from enum value: FILE_EVENT_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(FileEvent)
proto3.util.setEnumType(FileEvent, "rill.runtime.v1.FileEvent", [
  { no: 0, name: "FILE_EVENT_UNSPECIFIED" },
  { no: 1, name: "FILE_EVENT_WRITE" },
  { no: 2, name: "FILE_EVENT_DELETE" },
]);

/**
 * @generated from enum rill.runtime.v1.LogLevel
 */
export enum LogLevel {
  /**
   * @generated from enum value: LOG_LEVEL_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LOG_LEVEL_DEBUG = 4;
   */
  DEBUG = 4,

  /**
   * @generated from enum value: LOG_LEVEL_INFO = 8;
   */
  INFO = 8,

  /**
   * @generated from enum value: LOG_LEVEL_WARN = 12;
   */
  WARN = 12,

  /**
   * @generated from enum value: LOG_LEVEL_ERROR = 16;
   */
  ERROR = 16,
}
// Retrieve enum metadata with: proto3.getEnumType(LogLevel)
proto3.util.setEnumType(LogLevel, "rill.runtime.v1.LogLevel", [
  { no: 0, name: "LOG_LEVEL_UNSPECIFIED" },
  { no: 4, name: "LOG_LEVEL_DEBUG" },
  { no: 8, name: "LOG_LEVEL_INFO" },
  { no: 12, name: "LOG_LEVEL_WARN" },
  { no: 16, name: "LOG_LEVEL_ERROR" },
]);

/**
 * @generated from enum rill.runtime.v1.ResourceEvent
 */
export enum ResourceEvent {
  /**
   * @generated from enum value: RESOURCE_EVENT_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: RESOURCE_EVENT_WRITE = 1;
   */
  WRITE = 1,

  /**
   * @generated from enum value: RESOURCE_EVENT_DELETE = 2;
   */
  DELETE = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(ResourceEvent)
proto3.util.setEnumType(ResourceEvent, "rill.runtime.v1.ResourceEvent", [
  { no: 0, name: "RESOURCE_EVENT_UNSPECIFIED" },
  { no: 1, name: "RESOURCE_EVENT_WRITE" },
  { no: 2, name: "RESOURCE_EVENT_DELETE" },
]);

/**
 * Request message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * Runtime version
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * Runtime server time
   *
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * Instance represents a single data project, meaning one set of code artifacts,
 * one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
 * metadata (such as reconciliation state). Instances are the unit of isolation within
 * the runtime. They enable one runtime deployment to serve not only multiple data
 * projects, but also multiple tenants. On local, the runtime will usually have
 * just a single instance.
 *
 * @generated from message rill.runtime.v1.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string olap_connector = 2;
   */
  olapConnector = "";

  /**
   * @generated from field: string repo_connector = 4;
   */
  repoConnector = "";

  /**
   * @generated from field: string admin_connector = 19;
   */
  adminConnector = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 11;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 12;
   */
  updatedOn?: Timestamp;

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 10;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.Connector project_connectors = 13;
   */
  projectConnectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 7;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> project_variables = 8;
   */
  projectVariables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 14;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * @generated from field: bool watch_repo = 15;
   */
  watchRepo = false;

  /**
   * @generated from field: bool stage_changes = 16;
   */
  stageChanges = false;

  /**
   * @generated from field: bool model_default_materialize = 17;
   */
  modelDefaultMaterialize = false;

  /**
   * @generated from field: uint32 model_materialize_delay_seconds = 18;
   */
  modelMaterializeDelaySeconds = 0;

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 19, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "created_on", kind: "message", T: Timestamp },
    { no: 12, name: "updated_on", kind: "message", T: Timestamp },
    { no: 10, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 13, name: "project_connectors", kind: "message", T: Connector, repeated: true },
    { no: 7, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "project_variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 14, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 15, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 16, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 17, name: "model_default_materialize", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 18, name: "model_materialize_delay_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Connector
 */
export class Connector extends Message<Connector> {
  /**
   * Type of the connector. One of the infra driver supported.
   *
   * @generated from field: string type = 1;
   */
  type = "";

  /**
   * Name of the connector
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Config for the connector
   *
   * @generated from field: map<string, string> config = 3;
   */
  config: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Connector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Connector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "config", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connector {
    return new Connector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJsonString(jsonString, options);
  }

  static equals(a: Connector | PlainMessage<Connector> | undefined, b: Connector | PlainMessage<Connector> | undefined): boolean {
    return proto3.util.equals(Connector, a, b);
  }
}

/**
 * Request message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceResponse
 */
export class GetInstanceResponse extends Message<GetInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<GetInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined, b: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.CreateInstance.
 * See message Instance for field descriptions.
 *
 * @generated from message rill.runtime.v1.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string olap_connector = 2;
   */
  olapConnector = "";

  /**
   * @generated from field: string repo_connector = 4;
   */
  repoConnector = "";

  /**
   * @generated from field: string admin_connector = 15;
   */
  adminConnector = "";

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 10;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 7;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 9;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * @generated from field: bool watch_repo = 11;
   */
  watchRepo = false;

  /**
   * @generated from field: bool stage_changes = 12;
   */
  stageChanges = false;

  /**
   * @generated from field: bool model_default_materialize = 13;
   */
  modelDefaultMaterialize = false;

  /**
   * @generated from field: uint32 model_materialize_delay_seconds = 14;
   */
  modelMaterializeDelaySeconds = 0;

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 15, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 7, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 9, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 13, name: "model_default_materialize", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "model_materialize_delay_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.CreateInstance
 *
 * @generated from message rill.runtime.v1.CreateInstanceResponse
 */
export class CreateInstanceResponse extends Message<CreateInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<CreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool drop_db = 2;
   */
  dropDb = false;

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "drop_db", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceResponse
 */
export class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {
  constructor(data?: PartialMessage<DeleteInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.EditInstance.
 * See message Instance for field descriptions.
 *
 * @generated from message rill.runtime.v1.EditInstanceRequest
 */
export class EditInstanceRequest extends Message<EditInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: optional string olap_connector = 2;
   */
  olapConnector?: string;

  /**
   * @generated from field: optional string repo_connector = 4;
   */
  repoConnector?: string;

  /**
   * @generated from field: optional string admin_connector = 16;
   */
  adminConnector?: string;

  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 9;
   */
  connectors: Connector[] = [];

  /**
   * @generated from field: map<string, string> variables = 15;
   */
  variables: { [key: string]: string } = {};

  /**
   * @generated from field: map<string, string> annotations = 10;
   */
  annotations: { [key: string]: string } = {};

  /**
   * @generated from field: optional bool embed_catalog = 6;
   */
  embedCatalog?: boolean;

  /**
   * @generated from field: optional bool watch_repo = 11;
   */
  watchRepo?: boolean;

  /**
   * @generated from field: optional bool stage_changes = 12;
   */
  stageChanges?: boolean;

  /**
   * @generated from field: optional bool model_default_materialize = 13;
   */
  modelDefaultMaterialize?: boolean;

  /**
   * @generated from field: optional uint32 model_materialize_delay_seconds = 14;
   */
  modelMaterializeDelaySeconds?: number;

  constructor(data?: PartialMessage<EditInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.EditInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 4, name: "repo_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 16, name: "admin_connector", kind: "scalar", T: 9 /* ScalarType.STRING */, opt: true },
    { no: 9, name: "connectors", kind: "message", T: Connector, repeated: true },
    { no: 15, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 10, name: "annotations", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 11, name: "watch_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 12, name: "stage_changes", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 13, name: "model_default_materialize", kind: "scalar", T: 8 /* ScalarType.BOOL */, opt: true },
    { no: 14, name: "model_materialize_delay_seconds", kind: "scalar", T: 13 /* ScalarType.UINT32 */, opt: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditInstanceRequest {
    return new EditInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EditInstanceRequest | PlainMessage<EditInstanceRequest> | undefined, b: EditInstanceRequest | PlainMessage<EditInstanceRequest> | undefined): boolean {
    return proto3.util.equals(EditInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.EditInstance
 *
 * @generated from message rill.runtime.v1.EditInstanceResponse
 */
export class EditInstanceResponse extends Message<EditInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<EditInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.EditInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EditInstanceResponse {
    return new EditInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EditInstanceResponse | PlainMessage<EditInstanceResponse> | undefined, b: EditInstanceResponse | PlainMessage<EditInstanceResponse> | undefined): boolean {
    return proto3.util.equals(EditInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesRequest
 */
export class ListFilesRequest extends Message<ListFilesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string glob = 2;
   */
  glob = "";

  constructor(data?: PartialMessage<ListFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "glob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined, b: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListFilesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesResponse
 */
export class ListFilesResponse extends Message<ListFilesResponse> {
  /**
   * @generated from field: repeated string paths = 1;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<ListFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined, b: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListFilesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.WatchFiles
 *
 * @generated from message rill.runtime.v1.WatchFilesRequest
 */
export class WatchFilesRequest extends Message<WatchFilesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool replay = 2;
   */
  replay = false;

  constructor(data?: PartialMessage<WatchFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchFilesRequest {
    return new WatchFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchFilesRequest | PlainMessage<WatchFilesRequest> | undefined, b: WatchFilesRequest | PlainMessage<WatchFilesRequest> | undefined): boolean {
    return proto3.util.equals(WatchFilesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.WatchFiles
 *
 * @generated from message rill.runtime.v1.WatchFilesResponse
 */
export class WatchFilesResponse extends Message<WatchFilesResponse> {
  /**
   * @generated from field: rill.runtime.v1.FileEvent event = 1;
   */
  event = FileEvent.UNSPECIFIED;

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<WatchFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "enum", T: proto3.getEnumType(FileEvent) },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchFilesResponse {
    return new WatchFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchFilesResponse | PlainMessage<WatchFilesResponse> | undefined, b: WatchFilesResponse | PlainMessage<WatchFilesResponse> | undefined): boolean {
    return proto3.util.equals(WatchFilesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileRequest
 */
export class GetFileRequest extends Message<GetFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<GetFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileRequest {
    return new GetFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileRequest | PlainMessage<GetFileRequest> | undefined, b: GetFileRequest | PlainMessage<GetFileRequest> | undefined): boolean {
    return proto3.util.equals(GetFileRequest, a, b);
  }
}

/**
 * Reponse message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileResponse
 */
export class GetFileResponse extends Message<GetFileResponse> {
  /**
   * @generated from field: string blob = 1;
   */
  blob = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 2;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<GetFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileResponse {
    return new GetFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileResponse | PlainMessage<GetFileResponse> | undefined, b: GetFileResponse | PlainMessage<GetFileResponse> | undefined): boolean {
    return proto3.util.equals(GetFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileRequest
 */
export class PutFileRequest extends Message<PutFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string blob = 3;
   */
  blob = "";

  /**
   * Create indicates whether to create the file if it doesn't already exist
   *
   * @generated from field: bool create = 4;
   */
  create = false;

  /**
   * Will cause the operation to fail if the file already exists.
   * It should only be set when create = true.
   *
   * @generated from field: bool create_only = 5;
   */
  createOnly = false;

  constructor(data?: PartialMessage<PutFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileRequest {
    return new PutFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileRequest | PlainMessage<PutFileRequest> | undefined, b: PutFileRequest | PlainMessage<PutFileRequest> | undefined): boolean {
    return proto3.util.equals(PutFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileResponse
 */
export class PutFileResponse extends Message<PutFileResponse> {
  /**
   * TODO: Redundant, should be removed (but frontend currently uses it)
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  constructor(data?: PartialMessage<PutFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileResponse {
    return new PutFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileResponse | PlainMessage<PutFileResponse> | undefined, b: PutFileResponse | PlainMessage<PutFileResponse> | undefined): boolean {
    return proto3.util.equals(PutFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileRequest
 */
export class DeleteFileRequest extends Message<DeleteFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<DeleteFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined, b: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileResponse
 */
export class DeleteFileResponse extends Message<DeleteFileResponse> {
  constructor(data?: PartialMessage<DeleteFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined, b: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileRequest
 */
export class RenameFileRequest extends Message<RenameFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * @generated from field: string to_path = 3;
   */
  toPath = "";

  constructor(data?: PartialMessage<RenameFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined, b: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined): boolean {
    return proto3.util.equals(RenameFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileResponse
 */
export class RenameFileResponse extends Message<RenameFileResponse> {
  constructor(data?: PartialMessage<RenameFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined, b: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined): boolean {
    return proto3.util.equals(RenameFileResponse, a, b);
  }
}

/**
 * Example contains metadata about an example project that is available for unpacking.
 *
 * @generated from message rill.runtime.v1.Example
 */
export class Example extends Message<Example> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<Example>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Example";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Example {
    return new Example().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Example {
    return new Example().fromJsonString(jsonString, options);
  }

  static equals(a: Example | PlainMessage<Example> | undefined, b: Example | PlainMessage<Example> | undefined): boolean {
    return proto3.util.equals(Example, a, b);
  }
}

/**
 * Request message for RuntimeService.ListExamples
 *
 * @generated from message rill.runtime.v1.ListExamplesRequest
 */
export class ListExamplesRequest extends Message<ListExamplesRequest> {
  constructor(data?: PartialMessage<ListExamplesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListExamplesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExamplesRequest {
    return new ListExamplesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListExamplesRequest | PlainMessage<ListExamplesRequest> | undefined, b: ListExamplesRequest | PlainMessage<ListExamplesRequest> | undefined): boolean {
    return proto3.util.equals(ListExamplesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListExamples
 *
 * @generated from message rill.runtime.v1.ListExamplesResponse
 */
export class ListExamplesResponse extends Message<ListExamplesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Example examples = 1;
   */
  examples: Example[] = [];

  constructor(data?: PartialMessage<ListExamplesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListExamplesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "examples", kind: "message", T: Example, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListExamplesResponse {
    return new ListExamplesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListExamplesResponse | PlainMessage<ListExamplesResponse> | undefined, b: ListExamplesResponse | PlainMessage<ListExamplesResponse> | undefined): boolean {
    return proto3.util.equals(ListExamplesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.UnpackExample
 *
 * @generated from message rill.runtime.v1.UnpackExampleRequest
 */
export class UnpackExampleRequest extends Message<UnpackExampleRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<UnpackExampleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackExampleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackExampleRequest {
    return new UnpackExampleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackExampleRequest | PlainMessage<UnpackExampleRequest> | undefined, b: UnpackExampleRequest | PlainMessage<UnpackExampleRequest> | undefined): boolean {
    return proto3.util.equals(UnpackExampleRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.UnpackExample
 *
 * @generated from message rill.runtime.v1.UnpackExampleResponse
 */
export class UnpackExampleResponse extends Message<UnpackExampleResponse> {
  constructor(data?: PartialMessage<UnpackExampleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackExampleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackExampleResponse {
    return new UnpackExampleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackExampleResponse | PlainMessage<UnpackExampleResponse> | undefined, b: UnpackExampleResponse | PlainMessage<UnpackExampleResponse> | undefined): boolean {
    return proto3.util.equals(UnpackExampleResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.UnpackEmpty
 *
 * @generated from message rill.runtime.v1.UnpackEmptyRequest
 */
export class UnpackEmptyRequest extends Message<UnpackEmptyRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string title = 2;
   */
  title = "";

  /**
   * @generated from field: bool force = 3;
   */
  force = false;

  constructor(data?: PartialMessage<UnpackEmptyRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackEmptyRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "title", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "force", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackEmptyRequest {
    return new UnpackEmptyRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackEmptyRequest | PlainMessage<UnpackEmptyRequest> | undefined, b: UnpackEmptyRequest | PlainMessage<UnpackEmptyRequest> | undefined): boolean {
    return proto3.util.equals(UnpackEmptyRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.UnpackEmpty
 *
 * @generated from message rill.runtime.v1.UnpackEmptyResponse
 */
export class UnpackEmptyResponse extends Message<UnpackEmptyResponse> {
  constructor(data?: PartialMessage<UnpackEmptyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.UnpackEmptyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UnpackEmptyResponse {
    return new UnpackEmptyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UnpackEmptyResponse | PlainMessage<UnpackEmptyResponse> | undefined, b: UnpackEmptyResponse | PlainMessage<UnpackEmptyResponse> | undefined): boolean {
    return proto3.util.equals(UnpackEmptyResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.Log
 */
export class Log extends Message<Log> {
  /**
   * @generated from field: rill.runtime.v1.LogLevel level = 1;
   */
  level = LogLevel.UNSPECIFIED;

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  /**
   * @generated from field: string message = 3;
   */
  message = "";

  /**
   * @generated from field: string json_payload = 4;
   */
  jsonPayload = "";

  constructor(data?: PartialMessage<Log>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.Log";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "level", kind: "enum", T: proto3.getEnumType(LogLevel) },
    { no: 2, name: "time", kind: "message", T: Timestamp },
    { no: 3, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "json_payload", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Log {
    return new Log().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Log {
    return new Log().fromJsonString(jsonString, options);
  }

  static equals(a: Log | PlainMessage<Log> | undefined, b: Log | PlainMessage<Log> | undefined): boolean {
    return proto3.util.equals(Log, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetLogsRequest
 */
export class GetLogsRequest extends Message<GetLogsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  constructor(data?: PartialMessage<GetLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLogsRequest {
    return new GetLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetLogsRequest | PlainMessage<GetLogsRequest> | undefined, b: GetLogsRequest | PlainMessage<GetLogsRequest> | undefined): boolean {
    return proto3.util.equals(GetLogsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetLogsResponse
 */
export class GetLogsResponse extends Message<GetLogsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Log logs = 1;
   */
  logs: Log[] = [];

  constructor(data?: PartialMessage<GetLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "logs", kind: "message", T: Log, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetLogsResponse {
    return new GetLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetLogsResponse | PlainMessage<GetLogsResponse> | undefined, b: GetLogsResponse | PlainMessage<GetLogsResponse> | undefined): boolean {
    return proto3.util.equals(GetLogsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchLogsRequest
 */
export class WatchLogsRequest extends Message<WatchLogsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: bool replay = 2;
   */
  replay = false;

  /**
   * @generated from field: int32 replay_limit = 3;
   */
  replayLimit = 0;

  constructor(data?: PartialMessage<WatchLogsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchLogsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "replay_limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchLogsRequest {
    return new WatchLogsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchLogsRequest | PlainMessage<WatchLogsRequest> | undefined, b: WatchLogsRequest | PlainMessage<WatchLogsRequest> | undefined): boolean {
    return proto3.util.equals(WatchLogsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchLogsResponse
 */
export class WatchLogsResponse extends Message<WatchLogsResponse> {
  /**
   * @generated from field: rill.runtime.v1.Log log = 1;
   */
  log?: Log;

  constructor(data?: PartialMessage<WatchLogsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchLogsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "log", kind: "message", T: Log },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchLogsResponse {
    return new WatchLogsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchLogsResponse | PlainMessage<WatchLogsResponse> | undefined, b: WatchLogsResponse | PlainMessage<WatchLogsResponse> | undefined): boolean {
    return proto3.util.equals(WatchLogsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ListResourcesRequest
 */
export class ListResourcesRequest extends Message<ListResourcesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  constructor(data?: PartialMessage<ListResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourcesRequest {
    return new ListResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourcesRequest | PlainMessage<ListResourcesRequest> | undefined, b: ListResourcesRequest | PlainMessage<ListResourcesRequest> | undefined): boolean {
    return proto3.util.equals(ListResourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ListResourcesResponse
 */
export class ListResourcesResponse extends Message<ListResourcesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Resource resources = 1;
   */
  resources: Resource[] = [];

  constructor(data?: PartialMessage<ListResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resources", kind: "message", T: Resource, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListResourcesResponse {
    return new ListResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListResourcesResponse | PlainMessage<ListResourcesResponse> | undefined, b: ListResourcesResponse | PlainMessage<ListResourcesResponse> | undefined): boolean {
    return proto3.util.equals(ListResourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchResourcesRequest
 */
export class WatchResourcesRequest extends Message<WatchResourcesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string kind = 2;
   */
  kind = "";

  /**
   * @generated from field: bool replay = 3;
   */
  replay = false;

  constructor(data?: PartialMessage<WatchResourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchResourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "kind", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "replay", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesRequest {
    return new WatchResourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined, b: WatchResourcesRequest | PlainMessage<WatchResourcesRequest> | undefined): boolean {
    return proto3.util.equals(WatchResourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.WatchResourcesResponse
 */
export class WatchResourcesResponse extends Message<WatchResourcesResponse> {
  /**
   * @generated from field: rill.runtime.v1.ResourceEvent event = 1;
   */
  event = ResourceEvent.UNSPECIFIED;

  /**
   * @generated from field: rill.runtime.v1.ResourceName name = 2;
   */
  name?: ResourceName;

  /**
   * @generated from field: rill.runtime.v1.Resource resource = 3;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<WatchResourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.WatchResourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "event", kind: "enum", T: proto3.getEnumType(ResourceEvent) },
    { no: 2, name: "name", kind: "message", T: ResourceName },
    { no: 3, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WatchResourcesResponse {
    return new WatchResourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined, b: WatchResourcesResponse | PlainMessage<WatchResourcesResponse> | undefined): boolean {
    return proto3.util.equals(WatchResourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetResourceRequest
 */
export class GetResourceRequest extends Message<GetResourceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: rill.runtime.v1.ResourceName name = 2;
   */
  name?: ResourceName;

  constructor(data?: PartialMessage<GetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "message", T: ResourceName },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceRequest {
    return new GetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined, b: GetResourceRequest | PlainMessage<GetResourceRequest> | undefined): boolean {
    return proto3.util.equals(GetResourceRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetResourceResponse
 */
export class GetResourceResponse extends Message<GetResourceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Resource resource = 1;
   */
  resource?: Resource;

  constructor(data?: PartialMessage<GetResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "resource", kind: "message", T: Resource },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetResourceResponse {
    return new GetResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined, b: GetResourceResponse | PlainMessage<GetResourceResponse> | undefined): boolean {
    return proto3.util.equals(GetResourceResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CreateTriggerRequest
 */
export class CreateTriggerRequest extends Message<CreateTriggerRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from oneof rill.runtime.v1.CreateTriggerRequest.trigger
   */
  trigger: {
    /**
     * @generated from field: rill.runtime.v1.PullTriggerSpec pull_trigger_spec = 2;
     */
    value: PullTriggerSpec;
    case: "pullTriggerSpec";
  } | {
    /**
     * @generated from field: rill.runtime.v1.RefreshTriggerSpec refresh_trigger_spec = 3;
     */
    value: RefreshTriggerSpec;
    case: "refreshTriggerSpec";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CreateTriggerRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateTriggerRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pull_trigger_spec", kind: "message", T: PullTriggerSpec, oneof: "trigger" },
    { no: 3, name: "refresh_trigger_spec", kind: "message", T: RefreshTriggerSpec, oneof: "trigger" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTriggerRequest {
    return new CreateTriggerRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTriggerRequest | PlainMessage<CreateTriggerRequest> | undefined, b: CreateTriggerRequest | PlainMessage<CreateTriggerRequest> | undefined): boolean {
    return proto3.util.equals(CreateTriggerRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.CreateTriggerResponse
 */
export class CreateTriggerResponse extends Message<CreateTriggerResponse> {
  constructor(data?: PartialMessage<CreateTriggerResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CreateTriggerResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateTriggerResponse {
    return new CreateTriggerResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateTriggerResponse | PlainMessage<CreateTriggerResponse> | undefined, b: CreateTriggerResponse | PlainMessage<CreateTriggerResponse> | undefined): boolean {
    return proto3.util.equals(CreateTriggerResponse, a, b);
  }
}

/**
 * CatalogEntry contains information about an object in the catalog
 *
 * @generated from message rill.runtime.v1.CatalogEntry
 */
export class CatalogEntry extends Message<CatalogEntry> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from oneof rill.runtime.v1.CatalogEntry.object
   */
  object: {
    /**
     * @generated from field: rill.runtime.v1.Table table = 2;
     */
    value: Table;
    case: "table";
  } | {
    /**
     * @generated from field: rill.runtime.v1.Source source = 3;
     */
    value: Source;
    case: "source";
  } | {
    /**
     * @generated from field: rill.runtime.v1.Model model = 4;
     */
    value: Model;
    case: "model";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsView metrics_view = 5;
     */
    value: MetricsView;
    case: "metricsView";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string path = 6;
   */
  path = "";

  /**
   * Marks whether this entry is embedded or not. If yes then this will not have a corresponding artifact.
   *
   * @generated from field: bool embedded = 7;
   */
  embedded = false;

  /**
   * Immediate parent entries in the DAG
   *
   * @generated from field: repeated string parents = 8;
   */
  parents: string[] = [];

  /**
   * Immediate child entries in the DAG
   *
   * @generated from field: repeated string children = 9;
   */
  children: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 10;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 11;
   */
  updatedOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp refreshed_on = 12;
   */
  refreshedOn?: Timestamp;

  constructor(data?: PartialMessage<CatalogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CatalogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "message", T: Table, oneof: "object" },
    { no: 3, name: "source", kind: "message", T: Source, oneof: "object" },
    { no: 4, name: "model", kind: "message", T: Model, oneof: "object" },
    { no: 5, name: "metrics_view", kind: "message", T: MetricsView, oneof: "object" },
    { no: 6, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "embedded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "parents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "children", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "created_on", kind: "message", T: Timestamp },
    { no: 11, name: "updated_on", kind: "message", T: Timestamp },
    { no: 12, name: "refreshed_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CatalogEntry {
    return new CatalogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CatalogEntry {
    return new CatalogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CatalogEntry {
    return new CatalogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: CatalogEntry | PlainMessage<CatalogEntry> | undefined, b: CatalogEntry | PlainMessage<CatalogEntry> | undefined): boolean {
    return proto3.util.equals(CatalogEntry, a, b);
  }
}

/**
 * Request message for RuntimeService.ListCatalogEntries
 *
 * @generated from message rill.runtime.v1.ListCatalogEntriesRequest
 */
export class ListCatalogEntriesRequest extends Message<ListCatalogEntriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: rill.runtime.v1.ObjectType type = 2;
   */
  type = ObjectType.UNSPECIFIED;

  constructor(data?: PartialMessage<ListCatalogEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListCatalogEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCatalogEntriesRequest | PlainMessage<ListCatalogEntriesRequest> | undefined, b: ListCatalogEntriesRequest | PlainMessage<ListCatalogEntriesRequest> | undefined): boolean {
    return proto3.util.equals(ListCatalogEntriesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListCatalogEntries
 *
 * @generated from message rill.runtime.v1.ListCatalogEntriesResponse
 */
export class ListCatalogEntriesResponse extends Message<ListCatalogEntriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.CatalogEntry entries = 1;
   */
  entries: CatalogEntry[] = [];

  constructor(data?: PartialMessage<ListCatalogEntriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListCatalogEntriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: CatalogEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCatalogEntriesResponse | PlainMessage<ListCatalogEntriesResponse> | undefined, b: ListCatalogEntriesResponse | PlainMessage<ListCatalogEntriesResponse> | undefined): boolean {
    return proto3.util.equals(ListCatalogEntriesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetCatalogEntry
 *
 * @generated from message rill.runtime.v1.GetCatalogEntryRequest
 */
export class GetCatalogEntryRequest extends Message<GetCatalogEntryRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetCatalogEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetCatalogEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCatalogEntryRequest | PlainMessage<GetCatalogEntryRequest> | undefined, b: GetCatalogEntryRequest | PlainMessage<GetCatalogEntryRequest> | undefined): boolean {
    return proto3.util.equals(GetCatalogEntryRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetCatalogEntry
 *
 * @generated from message rill.runtime.v1.GetCatalogEntryResponse
 */
export class GetCatalogEntryResponse extends Message<GetCatalogEntryResponse> {
  /**
   * @generated from field: rill.runtime.v1.CatalogEntry entry = 1;
   */
  entry?: CatalogEntry;

  constructor(data?: PartialMessage<GetCatalogEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.GetCatalogEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: CatalogEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCatalogEntryResponse | PlainMessage<GetCatalogEntryResponse> | undefined, b: GetCatalogEntryResponse | PlainMessage<GetCatalogEntryResponse> | undefined): boolean {
    return proto3.util.equals(GetCatalogEntryResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.TriggerRefresh
 *
 * @generated from message rill.runtime.v1.TriggerRefreshRequest
 */
export class TriggerRefreshRequest extends Message<TriggerRefreshRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<TriggerRefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerRefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshRequest | PlainMessage<TriggerRefreshRequest> | undefined, b: TriggerRefreshRequest | PlainMessage<TriggerRefreshRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.TriggerRefresh
 *
 * @generated from message rill.runtime.v1.TriggerRefreshResponse
 */
export class TriggerRefreshResponse extends Message<TriggerRefreshResponse> {
  constructor(data?: PartialMessage<TriggerRefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerRefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshResponse | PlainMessage<TriggerRefreshResponse> | undefined, b: TriggerRefreshResponse | PlainMessage<TriggerRefreshResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.TriggerSync
 *
 * @generated from message rill.runtime.v1.TriggerSyncRequest
 */
export class TriggerSyncRequest extends Message<TriggerSyncRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<TriggerSyncRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerSyncRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerSyncRequest | PlainMessage<TriggerSyncRequest> | undefined, b: TriggerSyncRequest | PlainMessage<TriggerSyncRequest> | undefined): boolean {
    return proto3.util.equals(TriggerSyncRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.TriggerSync
 *
 * @generated from message rill.runtime.v1.TriggerSyncResponse
 */
export class TriggerSyncResponse extends Message<TriggerSyncResponse> {
  /**
   * @generated from field: uint32 objects_count = 1;
   */
  objectsCount = 0;

  /**
   * @generated from field: uint32 objects_added_count = 2;
   */
  objectsAddedCount = 0;

  /**
   * @generated from field: uint32 objects_updated_count = 3;
   */
  objectsUpdatedCount = 0;

  /**
   * @generated from field: uint32 objects_removed_count = 4;
   */
  objectsRemovedCount = 0;

  constructor(data?: PartialMessage<TriggerSyncResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerSyncResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objects_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "objects_added_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "objects_updated_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "objects_removed_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerSyncResponse | PlainMessage<TriggerSyncResponse> | undefined, b: TriggerSyncResponse | PlainMessage<TriggerSyncResponse> | undefined): boolean {
    return proto3.util.equals(TriggerSyncResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.Reconcile
 *
 * @generated from message rill.runtime.v1.ReconcileRequest
 */
export class ReconcileRequest extends Message<ReconcileRequest> {
  /**
   * Instance to reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Changed paths provides a way to "hint" what files have changed in the repo, enabling
   * reconciliation to execute faster by not scanning all code artifacts for changes.
   *
   * @generated from field: repeated string changed_paths = 2;
   */
  changedPaths: string[] = [];

  /**
   * Forced paths is used to force run reconcile on certain files.
   * This is mainly used by UI to reconcile paths missing in catalog and get errors if any.
   *
   * @generated from field: repeated string forced_paths = 3;
   */
  forcedPaths: string[] = [];

  /**
   * If true, will validate the file artifacts, but not actually execute any migrations
   *
   * @generated from field: bool dry = 4;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<ReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changed_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "forced_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileRequest | PlainMessage<ReconcileRequest> | undefined, b: ReconcileRequest | PlainMessage<ReconcileRequest> | undefined): boolean {
    return proto3.util.equals(ReconcileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Reconcile
 *
 * @generated from message rill.runtime.v1.ReconcileResponse
 */
export class ReconcileResponse extends Message<ReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<ReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileResponse | PlainMessage<ReconcileResponse> | undefined, b: ReconcileResponse | PlainMessage<ReconcileResponse> | undefined): boolean {
    return proto3.util.equals(ReconcileResponse, a, b);
  }
}

/**
 * ReconcileError represents an error encountered while running Reconcile.
 *
 * @generated from message rill.runtime.v1.ReconcileError
 */
export class ReconcileError extends Message<ReconcileError> {
  /**
   * Code denotes the category of error
   *
   * @generated from field: rill.runtime.v1.ReconcileError.Code code = 1;
   */
  code = ReconcileError_Code.UNSPECIFIED;

  /**
   * Message is a developer-friendly error message
   *
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * File path of the code artifact that this error relates to (if any)
   *
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * Property path of the error in the code artifact (if any).
   * It's represented as a JS-style property path, e.g. "key0.key1[index2].key3".
   * It only applies to structured code artifacts (i.e. YAML).
   * Only applicable if file_path is set.
   *
   * @generated from field: repeated string property_path = 4;
   */
  propertyPath: string[] = [];

  /**
   * Start location of the error in the code artifact (if any).
   * Only applicable if file_path is set.
   *
   * @generated from field: rill.runtime.v1.ReconcileError.CharLocation start_location = 5;
   */
  startLocation?: ReconcileError_CharLocation;

  /**
   * End location of the error in the code artifact (if any).
   * Only applicable if file_path and start_location is set.
   *
   * @generated from field: rill.runtime.v1.ReconcileError.CharLocation end_location = 6;
   */
  endLocation?: ReconcileError_CharLocation;

  constructor(data?: PartialMessage<ReconcileError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ReconcileError_Code) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "property_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "start_location", kind: "message", T: ReconcileError_CharLocation },
    { no: 6, name: "end_location", kind: "message", T: ReconcileError_CharLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileError {
    return new ReconcileError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileError {
    return new ReconcileError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileError {
    return new ReconcileError().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileError | PlainMessage<ReconcileError> | undefined, b: ReconcileError | PlainMessage<ReconcileError> | undefined): boolean {
    return proto3.util.equals(ReconcileError, a, b);
  }
}

/**
 * Code represents different categories of reconciliation errors
 *
 * @generated from enum rill.runtime.v1.ReconcileError.Code
 */
export enum ReconcileError_Code {
  /**
   * Unspecified error
   *
   * @generated from enum value: CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Code artifact failed to parse
   *
   * @generated from enum value: CODE_SYNTAX = 1;
   */
  SYNTAX = 1,

  /**
   * Code artifact has internal validation errors
   *
   * @generated from enum value: CODE_VALIDATION = 2;
   */
  VALIDATION = 2,

  /**
   * Code artifact is valid, but has invalid dependencies
   *
   * @generated from enum value: CODE_DEPENDENCY = 3;
   */
  DEPENDENCY = 3,

  /**
   * Error returned from the OLAP database
   *
   * @generated from enum value: CODE_OLAP = 4;
   */
  OLAP = 4,

  /**
   * Error encountered during source inspection or ingestion
   *
   * @generated from enum value: CODE_SOURCE = 5;
   */
  SOURCE = 5,

  /**
   * Error returned when unauthorised to access remote sources
   *
   * @generated from enum value: CODE_SOURCE_PERMISSION_DENIED = 6;
   */
  SOURCE_PERMISSION_DENIED = 6,
}
// Retrieve enum metadata with: proto3.getEnumType(ReconcileError_Code)
proto3.util.setEnumType(ReconcileError_Code, "rill.runtime.v1.ReconcileError.Code", [
  { no: 0, name: "CODE_UNSPECIFIED" },
  { no: 1, name: "CODE_SYNTAX" },
  { no: 2, name: "CODE_VALIDATION" },
  { no: 3, name: "CODE_DEPENDENCY" },
  { no: 4, name: "CODE_OLAP" },
  { no: 5, name: "CODE_SOURCE" },
  { no: 6, name: "CODE_SOURCE_PERMISSION_DENIED" },
]);

/**
 * CharLocation is a line and column in a code artifact
 *
 * @generated from message rill.runtime.v1.ReconcileError.CharLocation
 */
export class ReconcileError_CharLocation extends Message<ReconcileError_CharLocation> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: uint32 column = 2;
   */
  column = 0;

  constructor(data?: PartialMessage<ReconcileError_CharLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileError.CharLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "column", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileError_CharLocation | PlainMessage<ReconcileError_CharLocation> | undefined, b: ReconcileError_CharLocation | PlainMessage<ReconcileError_CharLocation> | undefined): boolean {
    return proto3.util.equals(ReconcileError_CharLocation, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PutFileAndReconcileRequest
 */
export class PutFileAndReconcileRequest extends Message<PutFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Path to store the file at
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * Contents to save to the file
   *
   * @generated from field: string blob = 3;
   */
  blob = "";

  /**
   * Create indicates whether to create the file if it doesn't already exist
   *
   * @generated from field: bool create = 4;
   */
  create = false;

  /**
   * create_only will cause the operation to fail if a file already exists at path.
   * It should only be set when create = true.
   *
   * @generated from field: bool create_only = 5;
   */
  createOnly = false;

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 6;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 7;
   */
  strict = false;

  constructor(data?: PartialMessage<PutFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileAndReconcileRequest | PlainMessage<PutFileAndReconcileRequest> | undefined, b: PutFileAndReconcileRequest | PlainMessage<PutFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(PutFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PutFileAndReconcileResponse
 */
export class PutFileAndReconcileResponse extends Message<PutFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<PutFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileAndReconcileResponse | PlainMessage<PutFileAndReconcileResponse> | undefined, b: PutFileAndReconcileResponse | PlainMessage<PutFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(PutFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DeleteFileAndReconcileRequest
 */
export class DeleteFileAndReconcileRequest extends Message<DeleteFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Path to store the file at
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 3;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 4;
   */
  strict = false;

  constructor(data?: PartialMessage<DeleteFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileAndReconcileRequest | PlainMessage<DeleteFileAndReconcileRequest> | undefined, b: DeleteFileAndReconcileRequest | PlainMessage<DeleteFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DeleteFileAndReconcileResponse
 */
export class DeleteFileAndReconcileResponse extends Message<DeleteFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<DeleteFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileAndReconcileResponse | PlainMessage<DeleteFileAndReconcileResponse> | undefined, b: DeleteFileAndReconcileResponse | PlainMessage<DeleteFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RenameFileAndReconcileRequest
 */
export class RenameFileAndReconcileRequest extends Message<RenameFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Current path of the file
   *
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * New path of the file
   *
   * @generated from field: string to_path = 3;
   */
  toPath = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 4;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<RenameFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileAndReconcileRequest | PlainMessage<RenameFileAndReconcileRequest> | undefined, b: RenameFileAndReconcileRequest | PlainMessage<RenameFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(RenameFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RenameFileAndReconcileResponse
 */
export class RenameFileAndReconcileResponse extends Message<RenameFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<RenameFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileAndReconcileResponse | PlainMessage<RenameFileAndReconcileResponse> | undefined, b: RenameFileAndReconcileResponse | PlainMessage<RenameFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(RenameFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshAndReconcileRequest
 */
export class RefreshAndReconcileRequest extends Message<RefreshAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Current path of the file
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 3;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<RefreshAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshAndReconcileRequest | PlainMessage<RefreshAndReconcileRequest> | undefined, b: RefreshAndReconcileRequest | PlainMessage<RefreshAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(RefreshAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshAndReconcileResponse
 */
export class RefreshAndReconcileResponse extends Message<RefreshAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<RefreshAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshAndReconcileResponse | PlainMessage<RefreshAndReconcileResponse> | undefined, b: RefreshAndReconcileResponse | PlainMessage<RefreshAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(RefreshAndReconcileResponse, a, b);
  }
}

/**
 * ConnectorSpec represents a connector available in the runtime.
 * It should not be confused with a source.
 *
 * @generated from message rill.runtime.v1.ConnectorSpec
 */
export class ConnectorSpec extends Message<ConnectorSpec> {
  /**
   * Name is the name of the connector (e.g. "CREATE SOURCE foo WITH connector = 'name'")
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Pretty display name for use in UIs
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Human readable description of the connector
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Properties accepted by the connector
   *
   * @generated from field: repeated rill.runtime.v1.ConnectorSpec.Property properties = 4;
   */
  properties: ConnectorSpec_Property[] = [];

  constructor(data?: PartialMessage<ConnectorSpec>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ConnectorSpec";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "properties", kind: "message", T: ConnectorSpec_Property, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorSpec {
    return new ConnectorSpec().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorSpec | PlainMessage<ConnectorSpec> | undefined, b: ConnectorSpec | PlainMessage<ConnectorSpec> | undefined): boolean {
    return proto3.util.equals(ConnectorSpec, a, b);
  }
}

/**
 * Property represents one of the connector's config properties
 *
 * @generated from message rill.runtime.v1.ConnectorSpec.Property
 */
export class ConnectorSpec_Property extends Message<ConnectorSpec_Property> {
  /**
   * The property key
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * Pretty name for the property
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Human readable description of the field
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Placeholder value for use in UIs
   *
   * @generated from field: string placeholder = 4;
   */
  placeholder = "";

  /**
   * The type expected for this property
   *
   * @generated from field: rill.runtime.v1.ConnectorSpec.Property.Type type = 5;
   */
  type = ConnectorSpec_Property_Type.UNSPECIFIED;

  /**
   * Nullable is true if the field is optional
   *
   * @generated from field: bool nullable = 6;
   */
  nullable = false;

  /**
   * Additional textual explanation for use in UIs
   *
   * @generated from field: string hint = 7;
   */
  hint = "";

  /**
   * Link to documentation for this property
   *
   * @generated from field: string href = 8;
   */
  href = "";

  constructor(data?: PartialMessage<ConnectorSpec_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ConnectorSpec.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(ConnectorSpec_Property_Type) },
    { no: 6, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "hint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "href", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ConnectorSpec_Property {
    return new ConnectorSpec_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ConnectorSpec_Property {
    return new ConnectorSpec_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ConnectorSpec_Property {
    return new ConnectorSpec_Property().fromJsonString(jsonString, options);
  }

  static equals(a: ConnectorSpec_Property | PlainMessage<ConnectorSpec_Property> | undefined, b: ConnectorSpec_Property | PlainMessage<ConnectorSpec_Property> | undefined): boolean {
    return proto3.util.equals(ConnectorSpec_Property, a, b);
  }
}

/**
 * Type represents the field type
 *
 * @generated from enum rill.runtime.v1.ConnectorSpec.Property.Type
 */
export enum ConnectorSpec_Property_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_STRING = 1;
   */
  STRING = 1,

  /**
   * @generated from enum value: TYPE_NUMBER = 2;
   */
  NUMBER = 2,

  /**
   * @generated from enum value: TYPE_BOOLEAN = 3;
   */
  BOOLEAN = 3,

  /**
   * @generated from enum value: TYPE_INFORMATIONAL = 4;
   */
  INFORMATIONAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(ConnectorSpec_Property_Type)
proto3.util.setEnumType(ConnectorSpec_Property_Type, "rill.runtime.v1.ConnectorSpec.Property.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_STRING" },
  { no: 2, name: "TYPE_NUMBER" },
  { no: 3, name: "TYPE_BOOLEAN" },
  { no: 4, name: "TYPE_INFORMATIONAL" },
]);

/**
 * Request message for RuntimeService.ListConnectors
 *
 * @generated from message rill.runtime.v1.ListConnectorsRequest
 */
export class ListConnectorsRequest extends Message<ListConnectorsRequest> {
  constructor(data?: PartialMessage<ListConnectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined, b: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectorsRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListConnectors
 *
 * @generated from message rill.runtime.v1.ListConnectorsResponse
 */
export class ListConnectorsResponse extends Message<ListConnectorsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ConnectorSpec connectors = 1;
   */
  connectors: ConnectorSpec[] = [];

  constructor(data?: PartialMessage<ListConnectorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: ConnectorSpec, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined, b: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectorsResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.IssueDevJWT
 *
 * @generated from message rill.runtime.v1.IssueDevJWTRequest
 */
export class IssueDevJWTRequest extends Message<IssueDevJWTRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: repeated string groups = 3;
   */
  groups: string[] = [];

  /**
   * @generated from field: bool admin = 4;
   */
  admin = false;

  constructor(data?: PartialMessage<IssueDevJWTRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.IssueDevJWTRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "groups", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "admin", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueDevJWTRequest {
    return new IssueDevJWTRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueDevJWTRequest | PlainMessage<IssueDevJWTRequest> | undefined, b: IssueDevJWTRequest | PlainMessage<IssueDevJWTRequest> | undefined): boolean {
    return proto3.util.equals(IssueDevJWTRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.IssueDevJWT
 *
 * @generated from message rill.runtime.v1.IssueDevJWTResponse
 */
export class IssueDevJWTResponse extends Message<IssueDevJWTResponse> {
  /**
   * @generated from field: string jwt = 1;
   */
  jwt = "";

  constructor(data?: PartialMessage<IssueDevJWTResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.IssueDevJWTResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueDevJWTResponse {
    return new IssueDevJWTResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueDevJWTResponse | PlainMessage<IssueDevJWTResponse> | undefined, b: IssueDevJWTResponse | PlainMessage<IssueDevJWTResponse> | undefined): boolean {
    return proto3.util.equals(IssueDevJWTResponse, a, b);
  }
}

