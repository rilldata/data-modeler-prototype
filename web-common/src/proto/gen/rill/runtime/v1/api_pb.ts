// @generated by protoc-gen-es v1.0.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/api.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp, Value } from "@bufbuild/protobuf";
import { MetricsView, Model, ObjectType, Source, Table, TimeGrain } from "./catalog_pb.js";
import { StructType } from "./schema_pb.js";

/**
 * @generated from enum rill.runtime.v1.TimeRangeName
 */
export enum TimeRangeName {
  /**
   * @generated from enum value: TIME_RANGE_NAME_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_HOUR = 1;
   */
  LAST_HOUR = 1,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_6_HOUR = 2;
   */
  LAST_6_HOUR = 2,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_DAY = 3;
   */
  LAST_DAY = 3,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_2_DAYS = 4;
   */
  LAST_2_DAYS = 4,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_5_DAYS = 5;
   */
  LAST_5_DAYS = 5,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_WEEK = 6;
   */
  LAST_WEEK = 6,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_2_WEEKS = 7;
   */
  LAST_2_WEEKS = 7,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_30_DAYS = 8;
   */
  LAST_30_DAYS = 8,

  /**
   * @generated from enum value: TIME_RANGE_NAME_LAST_60_DAYS = 9;
   */
  LAST_60_DAYS = 9,

  /**
   * Today
   * MonthToDate
   * CustomRange
   *
   * @generated from enum value: TIME_RANGE_NAME_ALL_TIME = 10;
   */
  ALL_TIME = 10,
}
// Retrieve enum metadata with: proto3.getEnumType(TimeRangeName)
proto3.util.setEnumType(TimeRangeName, "rill.runtime.v1.TimeRangeName", [
  { no: 0, name: "TIME_RANGE_NAME_UNSPECIFIED" },
  { no: 1, name: "TIME_RANGE_NAME_LAST_HOUR" },
  { no: 2, name: "TIME_RANGE_NAME_LAST_6_HOUR" },
  { no: 3, name: "TIME_RANGE_NAME_LAST_DAY" },
  { no: 4, name: "TIME_RANGE_NAME_LAST_2_DAYS" },
  { no: 5, name: "TIME_RANGE_NAME_LAST_5_DAYS" },
  { no: 6, name: "TIME_RANGE_NAME_LAST_WEEK" },
  { no: 7, name: "TIME_RANGE_NAME_LAST_2_WEEKS" },
  { no: 8, name: "TIME_RANGE_NAME_LAST_30_DAYS" },
  { no: 9, name: "TIME_RANGE_NAME_LAST_60_DAYS" },
  { no: 10, name: "TIME_RANGE_NAME_ALL_TIME" },
]);

/**
 * @generated from enum rill.runtime.v1.DatabaseObjectType
 */
export enum DatabaseObjectType {
  /**
   * @generated from enum value: DATABASE_OBJECT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DATABASE_OBJECT_TYPE_TABLE = 1;
   */
  TABLE = 1,

  /**
   * @generated from enum value: DATABASE_OBJECT_TYPE_VIEW = 2;
   */
  VIEW = 2,

  /**
   * @generated from enum value: DATABASE_OBJECT_TYPE_FUNCTION = 3;
   */
  FUNCTION = 3,
}
// Retrieve enum metadata with: proto3.getEnumType(DatabaseObjectType)
proto3.util.setEnumType(DatabaseObjectType, "rill.runtime.v1.DatabaseObjectType", [
  { no: 0, name: "DATABASE_OBJECT_TYPE_UNSPECIFIED" },
  { no: 1, name: "DATABASE_OBJECT_TYPE_TABLE" },
  { no: 2, name: "DATABASE_OBJECT_TYPE_VIEW" },
  { no: 3, name: "DATABASE_OBJECT_TYPE_FUNCTION" },
]);

/**
 * Request message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Ping
 *
 * @generated from message rill.runtime.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * Runtime version
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * Runtime server time
   *
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * Instance represents a single data project, meaning one set of code artifacts,
 * one connection to an OLAP datastore (DuckDB, Druid), and one catalog of related
 * metadata (such as reconciliation state). Instances are the unit of isolation within
 * the runtime. They enable one runtime deployment to serve not only multiple data
 * projects, but also multiple tenants. On local, the runtime will usually have
 * just a single instance.
 *
 * @generated from message rill.runtime.v1.Instance
 */
export class Instance extends Message<Instance> {
  /**
   * Identifier (UUID)
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Driver to connect to for OLAP (options: duckdb, druid)
   *
   * @generated from field: string olap_driver = 2;
   */
  olapDriver = "";

  /**
   * DSN for connection to OLAP
   *
   * @generated from field: string olap_dsn = 3;
   */
  olapDsn = "";

  /**
   * Driver for reading/editing code artifacts (options: file, metastore).
   * This enables virtualizing a file system in a cloud setting.
   *
   * @generated from field: string repo_driver = 4;
   */
  repoDriver = "";

  /**
   * DSN for connecting to repo
   *
   * @generated from field: string repo_dsn = 5;
   */
  repoDsn = "";

  /**
   * If true, the runtime will store the instance's catalog in its OLAP store instead
   * of in the runtime's metadata store. Currently only supported for the duckdb driver.
   *
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * instance specific environment variables
   *
   * @generated from field: map<string, string> env = 7;
   */
  env: { [key: string]: string } = {};

  /**
   * project defaults
   *
   * @generated from field: map<string, string> project_env = 8;
   */
  projectEnv: { [key: string]: string } = {};

  constructor(data?: PartialMessage<Instance>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.Instance";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "repo_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "env", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
    { no: 8, name: "project_env", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Instance {
    return new Instance().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Instance {
    return new Instance().fromJsonString(jsonString, options);
  }

  static equals(a: Instance | PlainMessage<Instance> | undefined, b: Instance | PlainMessage<Instance> | undefined): boolean {
    return proto3.util.equals(Instance, a, b);
  }
}

/**
 * Request message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesRequest
 */
export class ListInstancesRequest extends Message<ListInstancesRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListInstancesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesRequest {
    return new ListInstancesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined, b: ListInstancesRequest | PlainMessage<ListInstancesRequest> | undefined): boolean {
    return proto3.util.equals(ListInstancesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListInstances
 *
 * @generated from message rill.runtime.v1.ListInstancesResponse
 */
export class ListInstancesResponse extends Message<ListInstancesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Instance instances = 1;
   */
  instances: Instance[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListInstancesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListInstancesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instances", kind: "message", T: Instance, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListInstancesResponse {
    return new ListInstancesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined, b: ListInstancesResponse | PlainMessage<ListInstancesResponse> | undefined): boolean {
    return proto3.util.equals(ListInstancesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceRequest
 */
export class GetInstanceRequest extends Message<GetInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<GetInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceRequest {
    return new GetInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined, b: GetInstanceRequest | PlainMessage<GetInstanceRequest> | undefined): boolean {
    return proto3.util.equals(GetInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetInstance
 *
 * @generated from message rill.runtime.v1.GetInstanceResponse
 */
export class GetInstanceResponse extends Message<GetInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<GetInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetInstanceResponse {
    return new GetInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined, b: GetInstanceResponse | PlainMessage<GetInstanceResponse> | undefined): boolean {
    return proto3.util.equals(GetInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.CreateInstance.
 * See message Instance for field descriptions.
 *
 * @generated from message rill.runtime.v1.CreateInstanceRequest
 */
export class CreateInstanceRequest extends Message<CreateInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string olap_driver = 2;
   */
  olapDriver = "";

  /**
   * @generated from field: string olap_dsn = 3;
   */
  olapDsn = "";

  /**
   * @generated from field: string repo_driver = 4;
   */
  repoDriver = "";

  /**
   * @generated from field: string repo_dsn = 5;
   */
  repoDsn = "";

  /**
   * @generated from field: bool embed_catalog = 6;
   */
  embedCatalog = false;

  /**
   * @generated from field: map<string, string> env = 7;
   */
  env: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "repo_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "repo_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "embed_catalog", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "env", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceRequest {
    return new CreateInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined, b: CreateInstanceRequest | PlainMessage<CreateInstanceRequest> | undefined): boolean {
    return proto3.util.equals(CreateInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.CreateInstance
 *
 * @generated from message rill.runtime.v1.CreateInstanceResponse
 */
export class CreateInstanceResponse extends Message<CreateInstanceResponse> {
  /**
   * @generated from field: rill.runtime.v1.Instance instance = 1;
   */
  instance?: Instance;

  constructor(data?: PartialMessage<CreateInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.CreateInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance", kind: "message", T: Instance },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateInstanceResponse {
    return new CreateInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined, b: CreateInstanceResponse | PlainMessage<CreateInstanceResponse> | undefined): boolean {
    return proto3.util.equals(CreateInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceRequest
 */
export class DeleteInstanceRequest extends Message<DeleteInstanceRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<DeleteInstanceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceRequest {
    return new DeleteInstanceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined, b: DeleteInstanceRequest | PlainMessage<DeleteInstanceRequest> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteInstance
 *
 * @generated from message rill.runtime.v1.DeleteInstanceResponse
 */
export class DeleteInstanceResponse extends Message<DeleteInstanceResponse> {
  constructor(data?: PartialMessage<DeleteInstanceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteInstanceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteInstanceResponse {
    return new DeleteInstanceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined, b: DeleteInstanceResponse | PlainMessage<DeleteInstanceResponse> | undefined): boolean {
    return proto3.util.equals(DeleteInstanceResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesRequest
 */
export class ListFilesRequest extends Message<ListFilesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string glob = 2;
   */
  glob = "";

  constructor(data?: PartialMessage<ListFilesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "glob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesRequest {
    return new ListFilesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined, b: ListFilesRequest | PlainMessage<ListFilesRequest> | undefined): boolean {
    return proto3.util.equals(ListFilesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListFiles
 *
 * @generated from message rill.runtime.v1.ListFilesResponse
 */
export class ListFilesResponse extends Message<ListFilesResponse> {
  /**
   * @generated from field: repeated string paths = 1;
   */
  paths: string[] = [];

  constructor(data?: PartialMessage<ListFilesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListFilesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListFilesResponse {
    return new ListFilesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined, b: ListFilesResponse | PlainMessage<ListFilesResponse> | undefined): boolean {
    return proto3.util.equals(ListFilesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileRequest
 */
export class GetFileRequest extends Message<GetFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<GetFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileRequest {
    return new GetFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileRequest {
    return new GetFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileRequest | PlainMessage<GetFileRequest> | undefined, b: GetFileRequest | PlainMessage<GetFileRequest> | undefined): boolean {
    return proto3.util.equals(GetFileRequest, a, b);
  }
}

/**
 * Reponse message for RuntimeService.GetFile
 *
 * @generated from message rill.runtime.v1.GetFileResponse
 */
export class GetFileResponse extends Message<GetFileResponse> {
  /**
   * @generated from field: string blob = 1;
   */
  blob = "";

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 2;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<GetFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetFileResponse {
    return new GetFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetFileResponse {
    return new GetFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetFileResponse | PlainMessage<GetFileResponse> | undefined, b: GetFileResponse | PlainMessage<GetFileResponse> | undefined): boolean {
    return proto3.util.equals(GetFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileRequest
 */
export class PutFileRequest extends Message<PutFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * @generated from field: string blob = 3;
   */
  blob = "";

  /**
   * Create indicates whether to create the file if it doesn't already exist
   *
   * @generated from field: bool create = 4;
   */
  create = false;

  /**
   * Will cause the operation to fail if the file already exists.
   * It should only be set when create = true.
   *
   * @generated from field: bool create_only = 5;
   */
  createOnly = false;

  constructor(data?: PartialMessage<PutFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileRequest {
    return new PutFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileRequest {
    return new PutFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileRequest | PlainMessage<PutFileRequest> | undefined, b: PutFileRequest | PlainMessage<PutFileRequest> | undefined): boolean {
    return proto3.util.equals(PutFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.PutFile
 *
 * @generated from message rill.runtime.v1.PutFileResponse
 */
export class PutFileResponse extends Message<PutFileResponse> {
  /**
   * TODO: Redundant, should be removed (but frontend currently uses it)
   *
   * @generated from field: string file_path = 1;
   */
  filePath = "";

  constructor(data?: PartialMessage<PutFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileResponse {
    return new PutFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileResponse {
    return new PutFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileResponse | PlainMessage<PutFileResponse> | undefined, b: PutFileResponse | PlainMessage<PutFileResponse> | undefined): boolean {
    return proto3.util.equals(PutFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileRequest
 */
export class DeleteFileRequest extends Message<DeleteFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string path = 2;
   */
  path = "";

  constructor(data?: PartialMessage<DeleteFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileRequest {
    return new DeleteFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined, b: DeleteFileRequest | PlainMessage<DeleteFileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.DeleteFile
 *
 * @generated from message rill.runtime.v1.DeleteFileResponse
 */
export class DeleteFileResponse extends Message<DeleteFileResponse> {
  constructor(data?: PartialMessage<DeleteFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileResponse {
    return new DeleteFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined, b: DeleteFileResponse | PlainMessage<DeleteFileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileRequest
 */
export class RenameFileRequest extends Message<RenameFileRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * @generated from field: string to_path = 3;
   */
  toPath = "";

  constructor(data?: PartialMessage<RenameFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileRequest {
    return new RenameFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined, b: RenameFileRequest | PlainMessage<RenameFileRequest> | undefined): boolean {
    return proto3.util.equals(RenameFileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.RenameFile
 *
 * @generated from message rill.runtime.v1.RenameFileResponse
 */
export class RenameFileResponse extends Message<RenameFileResponse> {
  constructor(data?: PartialMessage<RenameFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileResponse {
    return new RenameFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined, b: RenameFileResponse | PlainMessage<RenameFileResponse> | undefined): boolean {
    return proto3.util.equals(RenameFileResponse, a, b);
  }
}

/**
 * CatalogEntry contains information about an object in the catalog
 *
 * @generated from message rill.runtime.v1.CatalogEntry
 */
export class CatalogEntry extends Message<CatalogEntry> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from oneof rill.runtime.v1.CatalogEntry.object
   */
  object: {
    /**
     * @generated from field: rill.runtime.v1.Table table = 2;
     */
    value: Table;
    case: "table";
  } | {
    /**
     * @generated from field: rill.runtime.v1.Source source = 3;
     */
    value: Source;
    case: "source";
  } | {
    /**
     * @generated from field: rill.runtime.v1.Model model = 4;
     */
    value: Model;
    case: "model";
  } | {
    /**
     * @generated from field: rill.runtime.v1.MetricsView metrics_view = 5;
     */
    value: MetricsView;
    case: "metricsView";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * @generated from field: string path = 6;
   */
  path = "";

  /**
   * Marks whether this entry is embedded or not. If yes then this will not have a corresponding artifact.
   *
   * @generated from field: bool embedded = 7;
   */
  embedded = false;

  /**
   * Immediate parent entries in the DAG
   *
   * @generated from field: repeated string parents = 8;
   */
  parents: string[] = [];

  /**
   * Immediate child entries in the DAG
   *
   * @generated from field: repeated string children = 9;
   */
  children: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 10;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 11;
   */
  updatedOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp refreshed_on = 12;
   */
  refreshedOn?: Timestamp;

  constructor(data?: PartialMessage<CatalogEntry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.CatalogEntry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table", kind: "message", T: Table, oneof: "object" },
    { no: 3, name: "source", kind: "message", T: Source, oneof: "object" },
    { no: 4, name: "model", kind: "message", T: Model, oneof: "object" },
    { no: 5, name: "metrics_view", kind: "message", T: MetricsView, oneof: "object" },
    { no: 6, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "embedded", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "parents", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 9, name: "children", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 10, name: "created_on", kind: "message", T: Timestamp },
    { no: 11, name: "updated_on", kind: "message", T: Timestamp },
    { no: 12, name: "refreshed_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CatalogEntry {
    return new CatalogEntry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CatalogEntry {
    return new CatalogEntry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CatalogEntry {
    return new CatalogEntry().fromJsonString(jsonString, options);
  }

  static equals(a: CatalogEntry | PlainMessage<CatalogEntry> | undefined, b: CatalogEntry | PlainMessage<CatalogEntry> | undefined): boolean {
    return proto3.util.equals(CatalogEntry, a, b);
  }
}

/**
 * Request message for RuntimeService.ListCatalogEntries
 *
 * @generated from message rill.runtime.v1.ListCatalogEntriesRequest
 */
export class ListCatalogEntriesRequest extends Message<ListCatalogEntriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: rill.runtime.v1.ObjectType type = 2;
   */
  type = ObjectType.UNSPECIFIED;

  constructor(data?: PartialMessage<ListCatalogEntriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListCatalogEntriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "enum", T: proto3.getEnumType(ObjectType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCatalogEntriesRequest {
    return new ListCatalogEntriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListCatalogEntriesRequest | PlainMessage<ListCatalogEntriesRequest> | undefined, b: ListCatalogEntriesRequest | PlainMessage<ListCatalogEntriesRequest> | undefined): boolean {
    return proto3.util.equals(ListCatalogEntriesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListCatalogEntries
 *
 * @generated from message rill.runtime.v1.ListCatalogEntriesResponse
 */
export class ListCatalogEntriesResponse extends Message<ListCatalogEntriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.CatalogEntry entries = 1;
   */
  entries: CatalogEntry[] = [];

  constructor(data?: PartialMessage<ListCatalogEntriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListCatalogEntriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: CatalogEntry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListCatalogEntriesResponse {
    return new ListCatalogEntriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListCatalogEntriesResponse | PlainMessage<ListCatalogEntriesResponse> | undefined, b: ListCatalogEntriesResponse | PlainMessage<ListCatalogEntriesResponse> | undefined): boolean {
    return proto3.util.equals(ListCatalogEntriesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.GetCatalogEntry
 *
 * @generated from message rill.runtime.v1.GetCatalogEntryRequest
 */
export class GetCatalogEntryRequest extends Message<GetCatalogEntryRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetCatalogEntryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetCatalogEntryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogEntryRequest {
    return new GetCatalogEntryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCatalogEntryRequest | PlainMessage<GetCatalogEntryRequest> | undefined, b: GetCatalogEntryRequest | PlainMessage<GetCatalogEntryRequest> | undefined): boolean {
    return proto3.util.equals(GetCatalogEntryRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.GetCatalogEntry
 *
 * @generated from message rill.runtime.v1.GetCatalogEntryResponse
 */
export class GetCatalogEntryResponse extends Message<GetCatalogEntryResponse> {
  /**
   * @generated from field: rill.runtime.v1.CatalogEntry entry = 1;
   */
  entry?: CatalogEntry;

  constructor(data?: PartialMessage<GetCatalogEntryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetCatalogEntryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entry", kind: "message", T: CatalogEntry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCatalogEntryResponse {
    return new GetCatalogEntryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCatalogEntryResponse | PlainMessage<GetCatalogEntryResponse> | undefined, b: GetCatalogEntryResponse | PlainMessage<GetCatalogEntryResponse> | undefined): boolean {
    return proto3.util.equals(GetCatalogEntryResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.TriggerRefresh
 *
 * @generated from message rill.runtime.v1.TriggerRefreshRequest
 */
export class TriggerRefreshRequest extends Message<TriggerRefreshRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<TriggerRefreshRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerRefreshRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshRequest {
    return new TriggerRefreshRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshRequest | PlainMessage<TriggerRefreshRequest> | undefined, b: TriggerRefreshRequest | PlainMessage<TriggerRefreshRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.TriggerRefresh
 *
 * @generated from message rill.runtime.v1.TriggerRefreshResponse
 */
export class TriggerRefreshResponse extends Message<TriggerRefreshResponse> {
  constructor(data?: PartialMessage<TriggerRefreshResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerRefreshResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshResponse {
    return new TriggerRefreshResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshResponse | PlainMessage<TriggerRefreshResponse> | undefined, b: TriggerRefreshResponse | PlainMessage<TriggerRefreshResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.TriggerSync
 *
 * @generated from message rill.runtime.v1.TriggerSyncRequest
 */
export class TriggerSyncRequest extends Message<TriggerSyncRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  constructor(data?: PartialMessage<TriggerSyncRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerSyncRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerSyncRequest {
    return new TriggerSyncRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerSyncRequest | PlainMessage<TriggerSyncRequest> | undefined, b: TriggerSyncRequest | PlainMessage<TriggerSyncRequest> | undefined): boolean {
    return proto3.util.equals(TriggerSyncRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.TriggerSync
 *
 * @generated from message rill.runtime.v1.TriggerSyncResponse
 */
export class TriggerSyncResponse extends Message<TriggerSyncResponse> {
  /**
   * @generated from field: uint32 objects_count = 1;
   */
  objectsCount = 0;

  /**
   * @generated from field: uint32 objects_added_count = 2;
   */
  objectsAddedCount = 0;

  /**
   * @generated from field: uint32 objects_updated_count = 3;
   */
  objectsUpdatedCount = 0;

  /**
   * @generated from field: uint32 objects_removed_count = 4;
   */
  objectsRemovedCount = 0;

  constructor(data?: PartialMessage<TriggerSyncResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TriggerSyncResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "objects_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "objects_added_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "objects_updated_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "objects_removed_count", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerSyncResponse {
    return new TriggerSyncResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerSyncResponse | PlainMessage<TriggerSyncResponse> | undefined, b: TriggerSyncResponse | PlainMessage<TriggerSyncResponse> | undefined): boolean {
    return proto3.util.equals(TriggerSyncResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.Reconcile
 *
 * @generated from message rill.runtime.v1.ReconcileRequest
 */
export class ReconcileRequest extends Message<ReconcileRequest> {
  /**
   * Instance to reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Changed paths provides a way to "hint" what files have changed in the repo, enabling
   * reconciliation to execute faster by not scanning all code artifacts for changes.
   *
   * @generated from field: repeated string changed_paths = 2;
   */
  changedPaths: string[] = [];

  /**
   * Forced paths is used to force run reconcile on certain files.
   * This is mainly used by UI to reconcile paths missing in catalog and get errors if any.
   *
   * @generated from field: repeated string forced_paths = 3;
   */
  forcedPaths: string[] = [];

  /**
   * If true, will validate the file artifacts, but not actually execute any migrations
   *
   * @generated from field: bool dry = 4;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<ReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "changed_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 3, name: "forced_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileRequest {
    return new ReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileRequest | PlainMessage<ReconcileRequest> | undefined, b: ReconcileRequest | PlainMessage<ReconcileRequest> | undefined): boolean {
    return proto3.util.equals(ReconcileRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Reconcile
 *
 * @generated from message rill.runtime.v1.ReconcileResponse
 */
export class ReconcileResponse extends Message<ReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<ReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileResponse {
    return new ReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileResponse | PlainMessage<ReconcileResponse> | undefined, b: ReconcileResponse | PlainMessage<ReconcileResponse> | undefined): boolean {
    return proto3.util.equals(ReconcileResponse, a, b);
  }
}

/**
 * ReconcileError represents an error encountered while running Reconcile.
 *
 * @generated from message rill.runtime.v1.ReconcileError
 */
export class ReconcileError extends Message<ReconcileError> {
  /**
   * Code denotes the category of error
   *
   * @generated from field: rill.runtime.v1.ReconcileError.Code code = 1;
   */
  code = ReconcileError_Code.UNSPECIFIED;

  /**
   * Message is a developer-friendly error message
   *
   * @generated from field: string message = 2;
   */
  message = "";

  /**
   * File path of the code artifact that this error relates to (if any)
   *
   * @generated from field: string file_path = 3;
   */
  filePath = "";

  /**
   * Property path of the error in the code artifact (if any).
   * It's represented as a JS-style property path, e.g. "key0.key1[index2].key3".
   * It only applies to structured code artifacts (i.e. YAML).
   * Only applicable if file_path is set.
   *
   * @generated from field: repeated string property_path = 4;
   */
  propertyPath: string[] = [];

  /**
   * Start location of the error in the code artifact (if any).
   * Only applicable if file_path is set.
   *
   * @generated from field: rill.runtime.v1.ReconcileError.CharLocation start_location = 5;
   */
  startLocation?: ReconcileError_CharLocation;

  /**
   * End location of the error in the code artifact (if any).
   * Only applicable if file_path and start_location is set.
   *
   * @generated from field: rill.runtime.v1.ReconcileError.CharLocation end_location = 6;
   */
  endLocation?: ReconcileError_CharLocation;

  constructor(data?: PartialMessage<ReconcileError>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileError";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "enum", T: proto3.getEnumType(ReconcileError_Code) },
    { no: 2, name: "message", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "file_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "property_path", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "start_location", kind: "message", T: ReconcileError_CharLocation },
    { no: 6, name: "end_location", kind: "message", T: ReconcileError_CharLocation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileError {
    return new ReconcileError().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileError {
    return new ReconcileError().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileError {
    return new ReconcileError().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileError | PlainMessage<ReconcileError> | undefined, b: ReconcileError | PlainMessage<ReconcileError> | undefined): boolean {
    return proto3.util.equals(ReconcileError, a, b);
  }
}

/**
 * Code represents different categories of reconciliation errors
 *
 * @generated from enum rill.runtime.v1.ReconcileError.Code
 */
export enum ReconcileError_Code {
  /**
   * Unspecified error
   *
   * @generated from enum value: CODE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * Code artifact failed to parse
   *
   * @generated from enum value: CODE_SYNTAX = 1;
   */
  SYNTAX = 1,

  /**
   * Code artifact has internal validation errors
   *
   * @generated from enum value: CODE_VALIDATION = 2;
   */
  VALIDATION = 2,

  /**
   * Code artifact is valid, but has invalid dependencies
   *
   * @generated from enum value: CODE_DEPENDENCY = 3;
   */
  DEPENDENCY = 3,

  /**
   * Error returned from the OLAP database
   *
   * @generated from enum value: CODE_OLAP = 4;
   */
  OLAP = 4,

  /**
   * Error encountered during source inspection or ingestion
   *
   * @generated from enum value: CODE_SOURCE = 5;
   */
  SOURCE = 5,
}
// Retrieve enum metadata with: proto3.getEnumType(ReconcileError_Code)
proto3.util.setEnumType(ReconcileError_Code, "rill.runtime.v1.ReconcileError.Code", [
  { no: 0, name: "CODE_UNSPECIFIED" },
  { no: 1, name: "CODE_SYNTAX" },
  { no: 2, name: "CODE_VALIDATION" },
  { no: 3, name: "CODE_DEPENDENCY" },
  { no: 4, name: "CODE_OLAP" },
  { no: 5, name: "CODE_SOURCE" },
]);

/**
 * CharLocation is a line and column in a code artifact
 *
 * @generated from message rill.runtime.v1.ReconcileError.CharLocation
 */
export class ReconcileError_CharLocation extends Message<ReconcileError_CharLocation> {
  /**
   * @generated from field: uint32 line = 1;
   */
  line = 0;

  /**
   * @generated from field: uint32 column = 2;
   */
  column = 0;

  constructor(data?: PartialMessage<ReconcileError_CharLocation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ReconcileError.CharLocation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "line", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "column", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ReconcileError_CharLocation {
    return new ReconcileError_CharLocation().fromJsonString(jsonString, options);
  }

  static equals(a: ReconcileError_CharLocation | PlainMessage<ReconcileError_CharLocation> | undefined, b: ReconcileError_CharLocation | PlainMessage<ReconcileError_CharLocation> | undefined): boolean {
    return proto3.util.equals(ReconcileError_CharLocation, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PutFileAndReconcileRequest
 */
export class PutFileAndReconcileRequest extends Message<PutFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Path to store the file at
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * Contents to save to the file
   *
   * @generated from field: string blob = 3;
   */
  blob = "";

  /**
   * Create indicates whether to create the file if it doesn't already exist
   *
   * @generated from field: bool create = 4;
   */
  create = false;

  /**
   * create_only will cause the operation to fail if a file already exists at path.
   * It should only be set when create = true.
   *
   * @generated from field: bool create_only = 5;
   */
  createOnly = false;

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 6;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 7;
   */
  strict = false;

  constructor(data?: PartialMessage<PutFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "blob", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "create", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "create_only", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileAndReconcileRequest {
    return new PutFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileAndReconcileRequest | PlainMessage<PutFileAndReconcileRequest> | undefined, b: PutFileAndReconcileRequest | PlainMessage<PutFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(PutFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.PutFileAndReconcileResponse
 */
export class PutFileAndReconcileResponse extends Message<PutFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<PutFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.PutFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PutFileAndReconcileResponse {
    return new PutFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PutFileAndReconcileResponse | PlainMessage<PutFileAndReconcileResponse> | undefined, b: PutFileAndReconcileResponse | PlainMessage<PutFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(PutFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DeleteFileAndReconcileRequest
 */
export class DeleteFileAndReconcileRequest extends Message<DeleteFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Path to store the file at
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 3;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 4;
   */
  strict = false;

  constructor(data?: PartialMessage<DeleteFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileRequest {
    return new DeleteFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileAndReconcileRequest | PlainMessage<DeleteFileAndReconcileRequest> | undefined, b: DeleteFileAndReconcileRequest | PlainMessage<DeleteFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(DeleteFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.DeleteFileAndReconcileResponse
 */
export class DeleteFileAndReconcileResponse extends Message<DeleteFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<DeleteFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.DeleteFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteFileAndReconcileResponse {
    return new DeleteFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteFileAndReconcileResponse | PlainMessage<DeleteFileAndReconcileResponse> | undefined, b: DeleteFileAndReconcileResponse | PlainMessage<DeleteFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(DeleteFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RenameFileAndReconcileRequest
 */
export class RenameFileAndReconcileRequest extends Message<RenameFileAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Current path of the file
   *
   * @generated from field: string from_path = 2;
   */
  fromPath = "";

  /**
   * New path of the file
   *
   * @generated from field: string to_path = 3;
   */
  toPath = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 4;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<RenameFileAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "from_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "to_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileAndReconcileRequest {
    return new RenameFileAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileAndReconcileRequest | PlainMessage<RenameFileAndReconcileRequest> | undefined, b: RenameFileAndReconcileRequest | PlainMessage<RenameFileAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(RenameFileAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RenameFileAndReconcileResponse
 */
export class RenameFileAndReconcileResponse extends Message<RenameFileAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<RenameFileAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RenameFileAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RenameFileAndReconcileResponse {
    return new RenameFileAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RenameFileAndReconcileResponse | PlainMessage<RenameFileAndReconcileResponse> | undefined, b: RenameFileAndReconcileResponse | PlainMessage<RenameFileAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(RenameFileAndReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshAndReconcileRequest
 */
export class RefreshAndReconcileRequest extends Message<RefreshAndReconcileRequest> {
  /**
   * Instance to store file in and reconcile
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * Current path of the file
   *
   * @generated from field: string path = 2;
   */
  path = "";

  /**
   * If true, will save the file and validate it and related file artifacts, but not actually execute any migrations.
   *
   * @generated from field: bool dry = 3;
   */
  dry = false;

  /**
   * If true, will not execute any migrations if any artifact fails to validate.
   * Otherwise, it will execute a best-effort reconciliation (including dropping objects with
   * artifacts that fail to validate.)
   *
   * @generated from field: bool strict = 5;
   */
  strict = false;

  constructor(data?: PartialMessage<RefreshAndReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshAndReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dry", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "strict", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshAndReconcileRequest {
    return new RefreshAndReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshAndReconcileRequest | PlainMessage<RefreshAndReconcileRequest> | undefined, b: RefreshAndReconcileRequest | PlainMessage<RefreshAndReconcileRequest> | undefined): boolean {
    return proto3.util.equals(RefreshAndReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.RefreshAndReconcileResponse
 */
export class RefreshAndReconcileResponse extends Message<RefreshAndReconcileResponse> {
  /**
   * Errors encountered during reconciliation. If strict = false, any path in
   * affected_paths without an error can be assumed to have been reconciled succesfully.
   *
   * @generated from field: repeated rill.runtime.v1.ReconcileError errors = 1;
   */
  errors: ReconcileError[] = [];

  /**
   * affected_paths lists all the file artifact paths that were considered while
   * executing the reconciliation. If changed_paths was empty, this will include all
   * code artifacts in the repo.
   *
   * @generated from field: repeated string affected_paths = 2;
   */
  affectedPaths: string[] = [];

  constructor(data?: PartialMessage<RefreshAndReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.RefreshAndReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "errors", kind: "message", T: ReconcileError, repeated: true },
    { no: 2, name: "affected_paths", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RefreshAndReconcileResponse {
    return new RefreshAndReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RefreshAndReconcileResponse | PlainMessage<RefreshAndReconcileResponse> | undefined, b: RefreshAndReconcileResponse | PlainMessage<RefreshAndReconcileResponse> | undefined): boolean {
    return proto3.util.equals(RefreshAndReconcileResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.Query
 *
 * @generated from message rill.runtime.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * Instance to query
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * SELECT statement
   *
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * Args to interpolate into the statement
   *
   * @generated from field: repeated google.protobuf.Value args = 3;
   */
  args: Value[] = [];

  /**
   * Query priority (not supported by all backends)
   *
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  /**
   * If true, will only validate the query, not execute it
   *
   * @generated from field: bool dry_run = 5;
   */
  dryRun = false;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "message", T: Value, repeated: true },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.Query
 *
 * @generated from message rill.runtime.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * Schema of result data
   *
   * @generated from field: rill.runtime.v1.StructType meta = 1;
   */
  meta?: StructType;

  /**
   * Result data
   *
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: StructType },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.MetricsViewToplist
 *
 * @generated from message rill.runtime.v1.MetricsViewToplistRequest
 */
export class MetricsViewToplistRequest extends Message<MetricsViewToplistRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: string dimension_name = 3;
   */
  dimensionName = "";

  /**
   * @generated from field: repeated string measure_names = 4;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 5;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 6;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: int64 limit = 7;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 8;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewSort sort = 9;
   */
  sort: MetricsViewSort[] = [];

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 10;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 11;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewToplistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimension_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "time_start", kind: "message", T: Timestamp },
    { no: 6, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "sort", kind: "message", T: MetricsViewSort, repeated: true },
    { no: 10, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 11, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined, b: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.MetricsViewToplist
 *
 * @generated from message rill.runtime.v1.MetricsViewToplistResponse
 */
export class MetricsViewToplistResponse extends Message<MetricsViewToplistResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewToplistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined, b: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.MetricsViewTimeSeries
 *
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesRequest
 */
export class MetricsViewTimeSeriesRequest extends Message<MetricsViewTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain time_granularity = 6;
   */
  timeGranularity = TimeGrain.UNSPECIFIED;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 7;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 6, name: "time_granularity", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 7, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined, b: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.MetricsViewTimeSeries
 *
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesResponse
 */
export class MetricsViewTimeSeriesResponse extends Message<MetricsViewTimeSeriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue data = 2;
   */
  data: TimeSeriesValue[] = [];

  constructor(data?: PartialMessage<MetricsViewTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: TimeSeriesValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined, b: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesResponse, a, b);
  }
}

/**
 * Request message for RuntimeService.MetricsViewTotals
 *
 * @generated from message rill.runtime.v1.MetricsViewTotalsRequest
 */
export class MetricsViewTotalsRequest extends Message<MetricsViewTotalsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 7;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewTotalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined, b: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.MetricsViewTotals
 *
 * @generated from message rill.runtime.v1.MetricsViewTotalsResponse
 */
export class MetricsViewTotalsResponse extends Message<MetricsViewTotalsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: google.protobuf.Struct data = 2;
   */
  data?: Struct;

  constructor(data?: PartialMessage<MetricsViewTotalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined, b: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsResponse, a, b);
  }
}

/**
 * Sort clause for metrics view requests
 *
 * @generated from message rill.runtime.v1.MetricsViewSort
 */
export class MetricsViewSort extends Message<MetricsViewSort> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  constructor(data?: PartialMessage<MetricsViewSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined, b: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined): boolean {
    return proto3.util.equals(MetricsViewSort, a, b);
  }
}

/**
 * Filter clause for metrics view requests
 *
 * @generated from message rill.runtime.v1.MetricsViewFilter
 */
export class MetricsViewFilter extends Message<MetricsViewFilter> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond include = 2;
   */
  include: MetricsViewFilter_Cond[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond exclude = 3;
   */
  exclude: MetricsViewFilter_Cond[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "include", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
    { no: 3, name: "exclude", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined, b: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewFilter.Cond
 */
export class MetricsViewFilter_Cond extends Message<MetricsViewFilter_Cond> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated google.protobuf.Value in = 2;
   */
  in: Value[] = [];

  /**
   * @generated from field: repeated string like = 3;
   */
  like: string[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter_Cond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter.Cond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "in", kind: "message", T: Value, repeated: true },
    { no: 3, name: "like", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined, b: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter_Cond, a, b);
  }
}

/**
 * MetricsViewColumn represents a column in a metrics view
 *
 * @generated from message rill.runtime.v1.MetricsViewColumn
 */
export class MetricsViewColumn extends Message<MetricsViewColumn> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: bool nullable = 3;
   */
  nullable = false;

  constructor(data?: PartialMessage<MetricsViewColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined, b: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined): boolean {
    return proto3.util.equals(MetricsViewColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.EstimateRollupIntervalRequest
 */
export class EstimateRollupIntervalRequest extends Message<EstimateRollupIntervalRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<EstimateRollupIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.EstimateRollupIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateRollupIntervalRequest {
    return new EstimateRollupIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateRollupIntervalRequest {
    return new EstimateRollupIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateRollupIntervalRequest {
    return new EstimateRollupIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateRollupIntervalRequest | PlainMessage<EstimateRollupIntervalRequest> | undefined, b: EstimateRollupIntervalRequest | PlainMessage<EstimateRollupIntervalRequest> | undefined): boolean {
    return proto3.util.equals(EstimateRollupIntervalRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.EstimateRollupIntervalResponse
 */
export class EstimateRollupIntervalResponse extends Message<EstimateRollupIntervalResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain interval = 3;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<EstimateRollupIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.EstimateRollupIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateRollupIntervalResponse {
    return new EstimateRollupIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateRollupIntervalResponse {
    return new EstimateRollupIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateRollupIntervalResponse {
    return new EstimateRollupIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateRollupIntervalResponse | PlainMessage<EstimateRollupIntervalResponse> | undefined, b: EstimateRollupIntervalResponse | PlainMessage<EstimateRollupIntervalResponse> | undefined): boolean {
    return proto3.util.equals(EstimateRollupIntervalResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumnSummary
 */
export class ProfileColumnSummary extends Message<ProfileColumnSummary> {
  /**
   * @generated from oneof rill.runtime.v1.ProfileColumnSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
     */
    value: CategoricalSummary;
    case: "categoricalSummary";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 2;
     */
    value: NumericSummary;
    case: "numericSummary";
  } | {
    /**
     * @generated from field: rill.runtime.v1.TimeRangeSummary time_range_summary = 3;
     */
    value: TimeRangeSummary;
    case: "timeRangeSummary";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<ProfileColumnSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumnSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary, oneof: "case" },
    { no: 2, name: "numeric_summary", kind: "message", T: NumericSummary, oneof: "case" },
    { no: 3, name: "time_range_summary", kind: "message", T: TimeRangeSummary, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumnSummary {
    return new ProfileColumnSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumnSummary {
    return new ProfileColumnSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumnSummary {
    return new ProfileColumnSummary().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumnSummary | PlainMessage<ProfileColumnSummary> | undefined, b: ProfileColumnSummary | PlainMessage<ProfileColumnSummary> | undefined): boolean {
    return proto3.util.equals(ProfileColumnSummary, a, b);
  }
}

/**
 * Response for RuntimeService.GetTopK and RuntimeService.GetCardinalityOfColumn. Message will have either topK or cardinality set.
 *
 * @generated from message rill.runtime.v1.CategoricalSummary
 */
export class CategoricalSummary extends Message<CategoricalSummary> {
  /**
   * @generated from oneof rill.runtime.v1.CategoricalSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.TopK top_k = 1;
     */
    value: TopK;
    case: "topK";
  } | {
    /**
     * @generated from field: double cardinality = 2;
     */
    value: number;
    case: "cardinality";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CategoricalSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.CategoricalSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "top_k", kind: "message", T: TopK, oneof: "case" },
    { no: 2, name: "cardinality", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJsonString(jsonString, options);
  }

  static equals(a: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined, b: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined): boolean {
    return proto3.util.equals(CategoricalSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetCardinalityOfColumnResponse
 */
export class GetCardinalityOfColumnResponse extends Message<GetCardinalityOfColumnResponse> {
  /**
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<GetCardinalityOfColumnResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetCardinalityOfColumnResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCardinalityOfColumnResponse {
    return new GetCardinalityOfColumnResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCardinalityOfColumnResponse {
    return new GetCardinalityOfColumnResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCardinalityOfColumnResponse {
    return new GetCardinalityOfColumnResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCardinalityOfColumnResponse | PlainMessage<GetCardinalityOfColumnResponse> | undefined, b: GetCardinalityOfColumnResponse | PlainMessage<GetCardinalityOfColumnResponse> | undefined): boolean {
    return proto3.util.equals(GetCardinalityOfColumnResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTopKResponse
 */
export class GetTopKResponse extends Message<GetTopKResponse> {
  /**
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<GetTopKResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTopKResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopKResponse {
    return new GetTopKResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopKResponse {
    return new GetTopKResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopKResponse {
    return new GetTopKResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopKResponse | PlainMessage<GetTopKResponse> | undefined, b: GetTopKResponse | PlainMessage<GetTopKResponse> | undefined): boolean {
    return proto3.util.equals(GetTopKResponse, a, b);
  }
}

/**
 * Response for RuntimeService.GetNumericHistogram, RuntimeService.GetDescriptiveStatistics and RuntimeService.GetCardinalityOfColumn.
 * Message will have either numericHistogramBins, numericStatistics or numericOutliers set.
 *
 * @generated from message rill.runtime.v1.NumericSummary
 */
export class NumericSummary extends Message<NumericSummary> {
  /**
   * @generated from oneof rill.runtime.v1.NumericSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.NumericHistogramBins numeric_histogram_bins = 1;
     */
    value: NumericHistogramBins;
    case: "numericHistogramBins";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericStatistics numeric_statistics = 2;
     */
    value: NumericStatistics;
    case: "numericStatistics";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericOutliers numeric_outliers = 3;
     */
    value: NumericOutliers;
    case: "numericOutliers";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NumericSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_histogram_bins", kind: "message", T: NumericHistogramBins, oneof: "case" },
    { no: 2, name: "numeric_statistics", kind: "message", T: NumericStatistics, oneof: "case" },
    { no: 3, name: "numeric_outliers", kind: "message", T: NumericOutliers, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericSummary {
    return new NumericSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJsonString(jsonString, options);
  }

  static equals(a: NumericSummary | PlainMessage<NumericSummary> | undefined, b: NumericSummary | PlainMessage<NumericSummary> | undefined): boolean {
    return proto3.util.equals(NumericSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetRugHistogramResponse
 */
export class GetRugHistogramResponse extends Message<GetRugHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<GetRugHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetRugHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRugHistogramResponse {
    return new GetRugHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRugHistogramResponse {
    return new GetRugHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRugHistogramResponse {
    return new GetRugHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetRugHistogramResponse | PlainMessage<GetRugHistogramResponse> | undefined, b: GetRugHistogramResponse | PlainMessage<GetRugHistogramResponse> | undefined): boolean {
    return proto3.util.equals(GetRugHistogramResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetNumericHistogramResponse
 */
export class GetNumericHistogramResponse extends Message<GetNumericHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<GetNumericHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetNumericHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNumericHistogramResponse {
    return new GetNumericHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNumericHistogramResponse {
    return new GetNumericHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNumericHistogramResponse {
    return new GetNumericHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNumericHistogramResponse | PlainMessage<GetNumericHistogramResponse> | undefined, b: GetNumericHistogramResponse | PlainMessage<GetNumericHistogramResponse> | undefined): boolean {
    return proto3.util.equals(GetNumericHistogramResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetDescriptiveStatisticsResponse
 */
export class GetDescriptiveStatisticsResponse extends Message<GetDescriptiveStatisticsResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<GetDescriptiveStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetDescriptiveStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDescriptiveStatisticsResponse {
    return new GetDescriptiveStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDescriptiveStatisticsResponse {
    return new GetDescriptiveStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDescriptiveStatisticsResponse {
    return new GetDescriptiveStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetDescriptiveStatisticsResponse | PlainMessage<GetDescriptiveStatisticsResponse> | undefined, b: GetDescriptiveStatisticsResponse | PlainMessage<GetDescriptiveStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(GetDescriptiveStatisticsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTimeRangeSummaryResponse
 */
export class GetTimeRangeSummaryResponse extends Message<GetTimeRangeSummaryResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeRangeSummary time_range_summary = 1;
   */
  timeRangeSummary?: TimeRangeSummary;

  constructor(data?: PartialMessage<GetTimeRangeSummaryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTimeRangeSummaryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_range_summary", kind: "message", T: TimeRangeSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimeRangeSummaryResponse {
    return new GetTimeRangeSummaryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimeRangeSummaryResponse {
    return new GetTimeRangeSummaryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimeRangeSummaryResponse {
    return new GetTimeRangeSummaryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimeRangeSummaryResponse | PlainMessage<GetTimeRangeSummaryResponse> | undefined, b: GetTimeRangeSummaryResponse | PlainMessage<GetTimeRangeSummaryResponse> | undefined): boolean {
    return proto3.util.equals(GetTimeRangeSummaryResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeRangeSummary
 */
export class TimeRangeSummary extends Message<TimeRangeSummary> {
  /**
   * @generated from field: google.protobuf.Timestamp min = 1;
   */
  min?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp max = 2;
   */
  max?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeRangeSummary.Interval interval = 3;
   */
  interval?: TimeRangeSummary_Interval;

  constructor(data?: PartialMessage<TimeRangeSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRangeSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "message", T: Timestamp },
    { no: 2, name: "max", kind: "message", T: Timestamp },
    { no: 3, name: "interval", kind: "message", T: TimeRangeSummary_Interval },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined, b: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined): boolean {
    return proto3.util.equals(TimeRangeSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeRangeSummary.Interval
 */
export class TimeRangeSummary_Interval extends Message<TimeRangeSummary_Interval> {
  /**
   * @generated from field: int32 months = 1;
   */
  months = 0;

  /**
   * @generated from field: int32 days = 2;
   */
  days = 0;

  /**
   * @generated from field: int64 micros = 3;
   */
  micros = protoInt64.zero;

  constructor(data?: PartialMessage<TimeRangeSummary_Interval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRangeSummary.Interval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "months", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "micros", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRangeSummary_Interval | PlainMessage<TimeRangeSummary_Interval> | undefined, b: TimeRangeSummary_Interval | PlainMessage<TimeRangeSummary_Interval> | undefined): boolean {
    return proto3.util.equals(TimeRangeSummary_Interval, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericOutliers
 */
export class NumericOutliers extends Message<NumericOutliers> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericOutliers.Outlier outliers = 1;
   */
  outliers: NumericOutliers_Outlier[] = [];

  constructor(data?: PartialMessage<NumericOutliers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outliers", kind: "message", T: NumericOutliers_Outlier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers {
    return new NumericOutliers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers | PlainMessage<NumericOutliers> | undefined, b: NumericOutliers | PlainMessage<NumericOutliers> | undefined): boolean {
    return proto3.util.equals(NumericOutliers, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericOutliers.Outlier
 */
export class NumericOutliers_Outlier extends Message<NumericOutliers_Outlier> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double high = 3;
   */
  high = 0;

  /**
   * @generated from field: bool present = 4;
   */
  present = false;

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericOutliers_Outlier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers.Outlier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "present", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined, b: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined): boolean {
    return proto3.util.equals(NumericOutliers_Outlier, a, b);
  }
}

/**
 * Request for RuntimeService.GetTopK. Returns the top K values for a given column using agg function for table table_name.
 *
 * @generated from message rill.runtime.v1.GetTopKRequest
 */
export class GetTopKRequest extends Message<GetTopKRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * default is count(*)
   *
   * @generated from field: string agg = 4;
   */
  agg = "";

  /**
   * default is 50
   *
   * @generated from field: int32 k = 5;
   */
  k = 0;

  /**
   * @generated from field: int32 priority = 6;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetTopKRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTopKRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "agg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "k", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTopKRequest {
    return new GetTopKRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTopKRequest {
    return new GetTopKRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTopKRequest {
    return new GetTopKRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTopKRequest | PlainMessage<GetTopKRequest> | undefined, b: GetTopKRequest | PlainMessage<GetTopKRequest> | undefined): boolean {
    return proto3.util.equals(GetTopKRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK
 */
export class TopK extends Message<TopK> {
  /**
   * @generated from field: repeated rill.runtime.v1.TopK.Entry entries = 1;
   */
  entries: TopK_Entry[] = [];

  constructor(data?: PartialMessage<TopK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TopK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: TopK_Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK {
    return new TopK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJsonString(jsonString, options);
  }

  static equals(a: TopK | PlainMessage<TopK> | undefined, b: TopK | PlainMessage<TopK> | undefined): boolean {
    return proto3.util.equals(TopK, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK.Entry
 */
export class TopK_Entry extends Message<TopK_Entry> {
  /**
   * @generated from field: google.protobuf.Value value = 1;
   */
  value?: Value;

  /**
   * @generated from field: double count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<TopK_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TopK.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
    { no: 2, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK_Entry {
    return new TopK_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: TopK_Entry | PlainMessage<TopK_Entry> | undefined, b: TopK_Entry | PlainMessage<TopK_Entry> | undefined): boolean {
    return proto3.util.equals(TopK_Entry, a, b);
  }
}

/**
 * Request for RuntimeService.GetNullCount. Returns the null count for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.GetNullCountRequest
 */
export class GetNullCountRequest extends Message<GetNullCountRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetNullCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetNullCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNullCountRequest {
    return new GetNullCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNullCountRequest {
    return new GetNullCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNullCountRequest {
    return new GetNullCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNullCountRequest | PlainMessage<GetNullCountRequest> | undefined, b: GetNullCountRequest | PlainMessage<GetNullCountRequest> | undefined): boolean {
    return proto3.util.equals(GetNullCountRequest, a, b);
  }
}

/**
 * Response for RuntimeService.GetNullCount
 *
 * @generated from message rill.runtime.v1.GetNullCountResponse
 */
export class GetNullCountResponse extends Message<GetNullCountResponse> {
  /**
   * @generated from field: double count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<GetNullCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetNullCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNullCountResponse {
    return new GetNullCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNullCountResponse {
    return new GetNullCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNullCountResponse {
    return new GetNullCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetNullCountResponse | PlainMessage<GetNullCountResponse> | undefined, b: GetNullCountResponse | PlainMessage<GetNullCountResponse> | undefined): boolean {
    return proto3.util.equals(GetNullCountResponse, a, b);
  }
}

/**
 * Request for RuntimeService.GetGetDescriptiveStatisticsRequest. Returns the stats for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.GetDescriptiveStatisticsRequest
 */
export class GetDescriptiveStatisticsRequest extends Message<GetDescriptiveStatisticsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetDescriptiveStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetDescriptiveStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetDescriptiveStatisticsRequest {
    return new GetDescriptiveStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetDescriptiveStatisticsRequest {
    return new GetDescriptiveStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetDescriptiveStatisticsRequest {
    return new GetDescriptiveStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetDescriptiveStatisticsRequest | PlainMessage<GetDescriptiveStatisticsRequest> | undefined, b: GetDescriptiveStatisticsRequest | PlainMessage<GetDescriptiveStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(GetDescriptiveStatisticsRequest, a, b);
  }
}

/**
 * Response for RuntimeService.GetDescriptiveStatistics
 *
 * @generated from message rill.runtime.v1.NumericStatistics
 */
export class NumericStatistics extends Message<NumericStatistics> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  /**
   * @generated from field: double mean = 3;
   */
  mean = 0;

  /**
   * @generated from field: double q25 = 4;
   */
  q25 = 0;

  /**
   * @generated from field: double q50 = 5;
   */
  q50 = 0;

  /**
   * @generated from field: double q75 = 6;
   */
  q75 = 0;

  /**
   * @generated from field: double sd = 7;
   */
  sd = 0;

  constructor(data?: PartialMessage<NumericStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "mean", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "q25", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "q50", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "q75", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "sd", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericStatistics {
    return new NumericStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: NumericStatistics | PlainMessage<NumericStatistics> | undefined, b: NumericStatistics | PlainMessage<NumericStatistics> | undefined): boolean {
    return proto3.util.equals(NumericStatistics, a, b);
  }
}

/**
 * Request for RuntimeService.EstimateSmallestTimeGrainRequest
 *
 * @generated from message rill.runtime.v1.EstimateSmallestTimeGrainRequest
 */
export class EstimateSmallestTimeGrainRequest extends Message<EstimateSmallestTimeGrainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<EstimateSmallestTimeGrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.EstimateSmallestTimeGrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSmallestTimeGrainRequest {
    return new EstimateSmallestTimeGrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSmallestTimeGrainRequest {
    return new EstimateSmallestTimeGrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSmallestTimeGrainRequest {
    return new EstimateSmallestTimeGrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSmallestTimeGrainRequest | PlainMessage<EstimateSmallestTimeGrainRequest> | undefined, b: EstimateSmallestTimeGrainRequest | PlainMessage<EstimateSmallestTimeGrainRequest> | undefined): boolean {
    return proto3.util.equals(EstimateSmallestTimeGrainRequest, a, b);
  }
}

/**
 * Response for RuntimeService.EstimateSmallestTimeGrain
 *
 * @generated from message rill.runtime.v1.EstimateSmallestTimeGrainResponse
 */
export class EstimateSmallestTimeGrainResponse extends Message<EstimateSmallestTimeGrainResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 1;
   */
  timeGrain = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<EstimateSmallestTimeGrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.EstimateSmallestTimeGrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): EstimateSmallestTimeGrainResponse {
    return new EstimateSmallestTimeGrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): EstimateSmallestTimeGrainResponse {
    return new EstimateSmallestTimeGrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): EstimateSmallestTimeGrainResponse {
    return new EstimateSmallestTimeGrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: EstimateSmallestTimeGrainResponse | PlainMessage<EstimateSmallestTimeGrainResponse> | undefined, b: EstimateSmallestTimeGrainResponse | PlainMessage<EstimateSmallestTimeGrainResponse> | undefined): boolean {
    return proto3.util.equals(EstimateSmallestTimeGrainResponse, a, b);
  }
}

/**
 * Request for RuntimeService.GetNumericHistogram. Returns the histogram for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.GetNumericHistogramRequest
 */
export class GetNumericHistogramRequest extends Message<GetNumericHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetNumericHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetNumericHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetNumericHistogramRequest {
    return new GetNumericHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetNumericHistogramRequest {
    return new GetNumericHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetNumericHistogramRequest {
    return new GetNumericHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetNumericHistogramRequest | PlainMessage<GetNumericHistogramRequest> | undefined, b: GetNumericHistogramRequest | PlainMessage<GetNumericHistogramRequest> | undefined): boolean {
    return proto3.util.equals(GetNumericHistogramRequest, a, b);
  }
}

/**
 * Response for RuntimeService.GetNumericHistogram
 *
 * @generated from message rill.runtime.v1.NumericHistogramBins
 */
export class NumericHistogramBins extends Message<NumericHistogramBins> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericHistogramBins.Bin bins = 1;
   */
  bins: NumericHistogramBins_Bin[] = [];

  constructor(data?: PartialMessage<NumericHistogramBins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bins", kind: "message", T: NumericHistogramBins_Bin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined, b: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericHistogramBins.Bin
 */
export class NumericHistogramBins_Bin extends Message<NumericHistogramBins_Bin> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double high = 3;
   */
  high = 0;

  /**
   * @generated from field: double count = 4;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericHistogramBins_Bin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins.Bin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined, b: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins_Bin, a, b);
  }
}

/**
 * Request for RuntimeService.GetRugHistogram
 *
 * @generated from message rill.runtime.v1.GetRugHistogramRequest
 */
export class GetRugHistogramRequest extends Message<GetRugHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetRugHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetRugHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetRugHistogramRequest {
    return new GetRugHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetRugHistogramRequest {
    return new GetRugHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetRugHistogramRequest {
    return new GetRugHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetRugHistogramRequest | PlainMessage<GetRugHistogramRequest> | undefined, b: GetRugHistogramRequest | PlainMessage<GetRugHistogramRequest> | undefined): boolean {
    return proto3.util.equals(GetRugHistogramRequest, a, b);
  }
}

/**
 * Request for RuntimeService.GetTimeRangeSummary
 *
 * @generated from message rill.runtime.v1.GetTimeRangeSummaryRequest
 */
export class GetTimeRangeSummaryRequest extends Message<GetTimeRangeSummaryRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetTimeRangeSummaryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTimeRangeSummaryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTimeRangeSummaryRequest {
    return new GetTimeRangeSummaryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTimeRangeSummaryRequest {
    return new GetTimeRangeSummaryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTimeRangeSummaryRequest {
    return new GetTimeRangeSummaryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTimeRangeSummaryRequest | PlainMessage<GetTimeRangeSummaryRequest> | undefined, b: GetTimeRangeSummaryRequest | PlainMessage<GetTimeRangeSummaryRequest> | undefined): boolean {
    return proto3.util.equals(GetTimeRangeSummaryRequest, a, b);
  }
}

/**
 * Request for RuntimeService.GetCardinalityOfColumn. Returns the cardinality for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.GetCardinalityOfColumnRequest
 */
export class GetCardinalityOfColumnRequest extends Message<GetCardinalityOfColumnRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetCardinalityOfColumnRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetCardinalityOfColumnRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCardinalityOfColumnRequest {
    return new GetCardinalityOfColumnRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCardinalityOfColumnRequest {
    return new GetCardinalityOfColumnRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCardinalityOfColumnRequest {
    return new GetCardinalityOfColumnRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCardinalityOfColumnRequest | PlainMessage<GetCardinalityOfColumnRequest> | undefined, b: GetCardinalityOfColumnRequest | PlainMessage<GetCardinalityOfColumnRequest> | undefined): boolean {
    return proto3.util.equals(GetCardinalityOfColumnRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateTimeSeriesRequest
 */
export class GenerateTimeSeriesRequest extends Message<GenerateTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: repeated rill.runtime.v1.GenerateTimeSeriesRequest.BasicMeasure measures = 3;
   */
  measures: GenerateTimeSeriesRequest_BasicMeasure[] = [];

  /**
   * @generated from field: string timestamp_column_name = 4;
   */
  timestampColumnName = "";

  /**
   * @generated from field: rill.runtime.v1.TimeSeriesTimeRange time_range = 5;
   */
  timeRange?: TimeSeriesTimeRange;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filters = 6;
   */
  filters?: MetricsViewFilter;

  /**
   * @generated from field: int32 pixels = 7;
   */
  pixels = 0;

  /**
   * @generated from field: int32 sample_size = 8;
   */
  sampleSize = 0;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  constructor(data?: PartialMessage<GenerateTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measures", kind: "message", T: GenerateTimeSeriesRequest_BasicMeasure, repeated: true },
    { no: 4, name: "timestamp_column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time_range", kind: "message", T: TimeSeriesTimeRange },
    { no: 6, name: "filters", kind: "message", T: MetricsViewFilter },
    { no: 7, name: "pixels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTimeSeriesRequest {
    return new GenerateTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTimeSeriesRequest {
    return new GenerateTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTimeSeriesRequest {
    return new GenerateTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTimeSeriesRequest | PlainMessage<GenerateTimeSeriesRequest> | undefined, b: GenerateTimeSeriesRequest | PlainMessage<GenerateTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(GenerateTimeSeriesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateTimeSeriesRequest.BasicMeasure
 */
export class GenerateTimeSeriesRequest_BasicMeasure extends Message<GenerateTimeSeriesRequest_BasicMeasure> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * mandatory user defined metadata
   *
   * @generated from field: string expression = 2;
   */
  expression = "";

  /**
   * optional user defined metadata
   *
   * @generated from field: string sql_name = 3;
   */
  sqlName = "";

  constructor(data?: PartialMessage<GenerateTimeSeriesRequest_BasicMeasure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateTimeSeriesRequest.BasicMeasure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sql_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTimeSeriesRequest_BasicMeasure {
    return new GenerateTimeSeriesRequest_BasicMeasure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTimeSeriesRequest_BasicMeasure {
    return new GenerateTimeSeriesRequest_BasicMeasure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTimeSeriesRequest_BasicMeasure {
    return new GenerateTimeSeriesRequest_BasicMeasure().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTimeSeriesRequest_BasicMeasure | PlainMessage<GenerateTimeSeriesRequest_BasicMeasure> | undefined, b: GenerateTimeSeriesRequest_BasicMeasure | PlainMessage<GenerateTimeSeriesRequest_BasicMeasure> | undefined): boolean {
    return proto3.util.equals(GenerateTimeSeriesRequest_BasicMeasure, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesTimeRange
 */
export class TimeSeriesTimeRange extends Message<TimeSeriesTimeRange> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 3;
   */
  end?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain interval = 4;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<TimeSeriesTimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesTimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "end", kind: "message", T: Timestamp },
    { no: 4, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined, b: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined): boolean {
    return proto3.util.equals(TimeSeriesTimeRange, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesResponse
 */
export class TimeSeriesResponse extends Message<TimeSeriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue results = 1;
   */
  results: TimeSeriesValue[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue spark = 2;
   */
  spark: TimeSeriesValue[] = [];

  /**
   * @generated from field: rill.runtime.v1.TimeSeriesTimeRange time_range = 3;
   */
  timeRange?: TimeSeriesTimeRange;

  /**
   * @generated from field: int32 sample_size = 4;
   */
  sampleSize = 0;

  constructor(data?: PartialMessage<TimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 2, name: "spark", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 3, name: "time_range", kind: "message", T: TimeSeriesTimeRange },
    { no: 4, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined, b: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(TimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GenerateTimeSeriesResponse
 */
export class GenerateTimeSeriesResponse extends Message<GenerateTimeSeriesResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeSeriesResponse rollup = 1;
   */
  rollup?: TimeSeriesResponse;

  constructor(data?: PartialMessage<GenerateTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GenerateTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollup", kind: "message", T: TimeSeriesResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GenerateTimeSeriesResponse {
    return new GenerateTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GenerateTimeSeriesResponse {
    return new GenerateTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GenerateTimeSeriesResponse {
    return new GenerateTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GenerateTimeSeriesResponse | PlainMessage<GenerateTimeSeriesResponse> | undefined, b: GenerateTimeSeriesResponse | PlainMessage<GenerateTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(GenerateTimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesValue
 */
export class TimeSeriesValue extends Message<TimeSeriesValue> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: double bin = 2;
   */
  bin = 0;

  /**
   * @generated from field: google.protobuf.Struct records = 3;
   */
  records?: Struct;

  constructor(data?: PartialMessage<TimeSeriesValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "bin", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "records", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined, b: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined): boolean {
    return proto3.util.equals(TimeSeriesValue, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTableCardinalityRequest
 */
export class GetTableCardinalityRequest extends Message<GetTableCardinalityRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetTableCardinalityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTableCardinalityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableCardinalityRequest {
    return new GetTableCardinalityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableCardinalityRequest {
    return new GetTableCardinalityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableCardinalityRequest {
    return new GetTableCardinalityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableCardinalityRequest | PlainMessage<GetTableCardinalityRequest> | undefined, b: GetTableCardinalityRequest | PlainMessage<GetTableCardinalityRequest> | undefined): boolean {
    return proto3.util.equals(GetTableCardinalityRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTableCardinalityResponse
 */
export class GetTableCardinalityResponse extends Message<GetTableCardinalityResponse> {
  /**
   * @generated from field: int64 cardinality = 1;
   */
  cardinality = protoInt64.zero;

  constructor(data?: PartialMessage<GetTableCardinalityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTableCardinalityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cardinality", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableCardinalityResponse {
    return new GetTableCardinalityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableCardinalityResponse {
    return new GetTableCardinalityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableCardinalityResponse {
    return new GetTableCardinalityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableCardinalityResponse | PlainMessage<GetTableCardinalityResponse> | undefined, b: GetTableCardinalityResponse | PlainMessage<GetTableCardinalityResponse> | undefined): boolean {
    return proto3.util.equals(GetTableCardinalityResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumnsRequest
 */
export class ProfileColumnsRequest extends Message<ProfileColumnsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<ProfileColumnsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumnsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumnsRequest {
    return new ProfileColumnsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumnsRequest {
    return new ProfileColumnsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumnsRequest {
    return new ProfileColumnsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumnsRequest | PlainMessage<ProfileColumnsRequest> | undefined, b: ProfileColumnsRequest | PlainMessage<ProfileColumnsRequest> | undefined): boolean {
    return proto3.util.equals(ProfileColumnsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumnsResponse
 */
export class ProfileColumnsResponse extends Message<ProfileColumnsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ProfileColumn profile_columns = 1;
   */
  profileColumns: ProfileColumn[] = [];

  constructor(data?: PartialMessage<ProfileColumnsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumnsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_columns", kind: "message", T: ProfileColumn, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumnsResponse {
    return new ProfileColumnsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumnsResponse {
    return new ProfileColumnsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumnsResponse {
    return new ProfileColumnsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumnsResponse | PlainMessage<ProfileColumnsResponse> | undefined, b: ProfileColumnsResponse | PlainMessage<ProfileColumnsResponse> | undefined): boolean {
    return proto3.util.equals(ProfileColumnsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumn
 */
export class ProfileColumn extends Message<ProfileColumn> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: int32 largest_string_length = 3;
   */
  largestStringLength = 0;

  constructor(data?: PartialMessage<ProfileColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "largest_string_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumn {
    return new ProfileColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumn | PlainMessage<ProfileColumn> | undefined, b: ProfileColumn | PlainMessage<ProfileColumn> | undefined): boolean {
    return proto3.util.equals(ProfileColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTableRowsRequest
 */
export class GetTableRowsRequest extends Message<GetTableRowsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<GetTableRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTableRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableRowsRequest {
    return new GetTableRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableRowsRequest {
    return new GetTableRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableRowsRequest {
    return new GetTableRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableRowsRequest | PlainMessage<GetTableRowsRequest> | undefined, b: GetTableRowsRequest | PlainMessage<GetTableRowsRequest> | undefined): boolean {
    return proto3.util.equals(GetTableRowsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.GetTableRowsResponse
 */
export class GetTableRowsResponse extends Message<GetTableRowsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct data = 1;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<GetTableRowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.GetTableRowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTableRowsResponse {
    return new GetTableRowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTableRowsResponse {
    return new GetTableRowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTableRowsResponse {
    return new GetTableRowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTableRowsResponse | PlainMessage<GetTableRowsResponse> | undefined, b: GetTableRowsResponse | PlainMessage<GetTableRowsResponse> | undefined): boolean {
    return proto3.util.equals(GetTableRowsResponse, a, b);
  }
}

/**
 * Connector represents a connector available in the runtime.
 * It should not be confused with a source.
 *
 * @generated from message rill.runtime.v1.Connector
 */
export class Connector extends Message<Connector> {
  /**
   * Name is the name of the connector (e.g. "CREATE SOURCE foo WITH connector = 'name'")
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * Pretty display name for use in UIs
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Human readable description of the connector
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Properties accepted by the connector
   *
   * @generated from field: repeated rill.runtime.v1.Connector.Property properties = 4;
   */
  properties: Connector_Property[] = [];

  constructor(data?: PartialMessage<Connector>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.Connector";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "properties", kind: "message", T: Connector_Property, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connector {
    return new Connector().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connector {
    return new Connector().fromJsonString(jsonString, options);
  }

  static equals(a: Connector | PlainMessage<Connector> | undefined, b: Connector | PlainMessage<Connector> | undefined): boolean {
    return proto3.util.equals(Connector, a, b);
  }
}

/**
 * Property represents one of the connector's config properties
 *
 * @generated from message rill.runtime.v1.Connector.Property
 */
export class Connector_Property extends Message<Connector_Property> {
  /**
   * The property key
   *
   * @generated from field: string key = 1;
   */
  key = "";

  /**
   * Pretty name for the property
   *
   * @generated from field: string display_name = 2;
   */
  displayName = "";

  /**
   * Human readable description of the field
   *
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * Placeholder value for use in UIs
   *
   * @generated from field: string placeholder = 4;
   */
  placeholder = "";

  /**
   * The type expected for this property
   *
   * @generated from field: rill.runtime.v1.Connector.Property.Type type = 5;
   */
  type = Connector_Property_Type.UNSPECIFIED;

  /**
   * Nullable is true if the field is optional
   *
   * @generated from field: bool nullable = 6;
   */
  nullable = false;

  /**
   * Additional textual explanation for use in UIs
   *
   * @generated from field: string hint = 7;
   */
  hint = "";

  /**
   * Link to documentation for this property
   *
   * @generated from field: string href = 8;
   */
  href = "";

  constructor(data?: PartialMessage<Connector_Property>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.Connector.Property";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "key", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "placeholder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(Connector_Property_Type) },
    { no: 6, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "hint", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "href", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Connector_Property {
    return new Connector_Property().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Connector_Property {
    return new Connector_Property().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Connector_Property {
    return new Connector_Property().fromJsonString(jsonString, options);
  }

  static equals(a: Connector_Property | PlainMessage<Connector_Property> | undefined, b: Connector_Property | PlainMessage<Connector_Property> | undefined): boolean {
    return proto3.util.equals(Connector_Property, a, b);
  }
}

/**
 * Type represents the field type
 *
 * @generated from enum rill.runtime.v1.Connector.Property.Type
 */
export enum Connector_Property_Type {
  /**
   * @generated from enum value: TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: TYPE_STRING = 1;
   */
  STRING = 1,

  /**
   * @generated from enum value: TYPE_NUMBER = 2;
   */
  NUMBER = 2,

  /**
   * @generated from enum value: TYPE_BOOLEAN = 3;
   */
  BOOLEAN = 3,

  /**
   * @generated from enum value: TYPE_INFORMATIONAL = 4;
   */
  INFORMATIONAL = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(Connector_Property_Type)
proto3.util.setEnumType(Connector_Property_Type, "rill.runtime.v1.Connector.Property.Type", [
  { no: 0, name: "TYPE_UNSPECIFIED" },
  { no: 1, name: "TYPE_STRING" },
  { no: 2, name: "TYPE_NUMBER" },
  { no: 3, name: "TYPE_BOOLEAN" },
  { no: 4, name: "TYPE_INFORMATIONAL" },
]);

/**
 * Request message for RuntimeService.ListConnectors
 *
 * @generated from message rill.runtime.v1.ListConnectorsRequest
 */
export class ListConnectorsRequest extends Message<ListConnectorsRequest> {
  constructor(data?: PartialMessage<ListConnectorsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsRequest {
    return new ListConnectorsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined, b: ListConnectorsRequest | PlainMessage<ListConnectorsRequest> | undefined): boolean {
    return proto3.util.equals(ListConnectorsRequest, a, b);
  }
}

/**
 * Response message for RuntimeService.ListConnectors
 *
 * @generated from message rill.runtime.v1.ListConnectorsResponse
 */
export class ListConnectorsResponse extends Message<ListConnectorsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.Connector connectors = 1;
   */
  connectors: Connector[] = [];

  constructor(data?: PartialMessage<ListConnectorsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime = proto3;
  static readonly typeName = "rill.runtime.v1.ListConnectorsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "connectors", kind: "message", T: Connector, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListConnectorsResponse {
    return new ListConnectorsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined, b: ListConnectorsResponse | PlainMessage<ListConnectorsResponse> | undefined): boolean {
    return proto3.util.equals(ListConnectorsResponse, a, b);
  }
}

