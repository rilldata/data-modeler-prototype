// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file rill/runtime/v1/queries.proto (package rill.runtime.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Struct, Timestamp, Value } from "@bufbuild/protobuf";
import { StructType } from "./schema_pb.js";
import { TimeGrain } from "./catalog_pb.js";

/**
 * @generated from enum rill.runtime.v1.HistogramMethod
 */
export enum HistogramMethod {
  /**
   * @generated from enum value: HISTOGRAM_METHOD_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: HISTOGRAM_METHOD_FD = 1;
   */
  FD = 1,

  /**
   * @generated from enum value: HISTOGRAM_METHOD_DIAGNOSTIC = 2;
   */
  DIAGNOSTIC = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(HistogramMethod)
proto3.util.setEnumType(HistogramMethod, "rill.runtime.v1.HistogramMethod", [
  { no: 0, name: "HISTOGRAM_METHOD_UNSPECIFIED" },
  { no: 1, name: "HISTOGRAM_METHOD_FD" },
  { no: 2, name: "HISTOGRAM_METHOD_DIAGNOSTIC" },
]);

/**
 * Request message for QueryService.Query
 *
 * @generated from message rill.runtime.v1.QueryRequest
 */
export class QueryRequest extends Message<QueryRequest> {
  /**
   * Instance to query
   *
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * SELECT statement
   *
   * @generated from field: string sql = 2;
   */
  sql = "";

  /**
   * Args to interpolate into the statement
   *
   * @generated from field: repeated google.protobuf.Value args = 3;
   */
  args: Value[] = [];

  /**
   * Query priority (not supported by all backends)
   *
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  /**
   * If true, will only validate the query, not execute it
   *
   * @generated from field: bool dry_run = 5;
   */
  dryRun = false;

  constructor(data?: PartialMessage<QueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sql", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "args", kind: "message", T: Value, repeated: true },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "dry_run", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryRequest {
    return new QueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryRequest {
    return new QueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: QueryRequest | PlainMessage<QueryRequest> | undefined, b: QueryRequest | PlainMessage<QueryRequest> | undefined): boolean {
    return proto3.util.equals(QueryRequest, a, b);
  }
}

/**
 * Response message for QueryService.Query
 *
 * @generated from message rill.runtime.v1.QueryResponse
 */
export class QueryResponse extends Message<QueryResponse> {
  /**
   * Schema of result data
   *
   * @generated from field: rill.runtime.v1.StructType meta = 1;
   */
  meta?: StructType;

  /**
   * Result data
   *
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<QueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.QueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: StructType },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): QueryResponse {
    return new QueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): QueryResponse {
    return new QueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: QueryResponse | PlainMessage<QueryResponse> | undefined, b: QueryResponse | PlainMessage<QueryResponse> | undefined): boolean {
    return proto3.util.equals(QueryResponse, a, b);
  }
}

/**
 * Request message for QueryService.MetricsViewToplist
 *
 * @generated from message rill.runtime.v1.MetricsViewToplistRequest
 */
export class MetricsViewToplistRequest extends Message<MetricsViewToplistRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: string dimension_name = 3;
   */
  dimensionName = "";

  /**
   * @generated from field: repeated string measure_names = 4;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 5;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 6;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: int64 limit = 7;
   */
  limit = protoInt64.zero;

  /**
   * @generated from field: int64 offset = 8;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewSort sort = 9;
   */
  sort: MetricsViewSort[] = [];

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 10;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 11;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewToplistRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "dimension_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "time_start", kind: "message", T: Timestamp },
    { no: 6, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "limit", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "sort", kind: "message", T: MetricsViewSort, repeated: true },
    { no: 10, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 11, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistRequest {
    return new MetricsViewToplistRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined, b: MetricsViewToplistRequest | PlainMessage<MetricsViewToplistRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistRequest, a, b);
  }
}

/**
 * Response message for QueryService.MetricsViewToplist
 *
 * @generated from message rill.runtime.v1.MetricsViewToplistResponse
 */
export class MetricsViewToplistResponse extends Message<MetricsViewToplistResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewToplistResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewToplistResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewToplistResponse {
    return new MetricsViewToplistResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined, b: MetricsViewToplistResponse | PlainMessage<MetricsViewToplistResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewToplistResponse, a, b);
  }
}

/**
 * Request message for QueryService.MetricsViewTimeSeries
 *
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesRequest
 */
export class MetricsViewTimeSeriesRequest extends Message<MetricsViewTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain time_granularity = 6;
   */
  timeGranularity = TimeGrain.UNSPECIFIED;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 7;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 6, name: "time_granularity", kind: "enum", T: proto3.getEnumType(TimeGrain) },
    { no: 7, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesRequest {
    return new MetricsViewTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined, b: MetricsViewTimeSeriesRequest | PlainMessage<MetricsViewTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesRequest, a, b);
  }
}

/**
 * Response message for QueryService.MetricsViewTimeSeries
 *
 * @generated from message rill.runtime.v1.MetricsViewTimeSeriesResponse
 */
export class MetricsViewTimeSeriesResponse extends Message<MetricsViewTimeSeriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue data = 2;
   */
  data: TimeSeriesValue[] = [];

  constructor(data?: PartialMessage<MetricsViewTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: TimeSeriesValue, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTimeSeriesResponse {
    return new MetricsViewTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined, b: MetricsViewTimeSeriesResponse | PlainMessage<MetricsViewTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTimeSeriesResponse, a, b);
  }
}

/**
 * Request message for QueryService.MetricsViewTotals
 *
 * @generated from message rill.runtime.v1.MetricsViewTotalsRequest
 */
export class MetricsViewTotalsRequest extends Message<MetricsViewTotalsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: repeated string measure_names = 3;
   */
  measureNames: string[] = [];

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 4;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 5;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 7;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: int32 priority = 8;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewTotalsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measure_names", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "time_start", kind: "message", T: Timestamp },
    { no: 5, name: "time_end", kind: "message", T: Timestamp },
    { no: 7, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 8, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsRequest {
    return new MetricsViewTotalsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined, b: MetricsViewTotalsRequest | PlainMessage<MetricsViewTotalsRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsRequest, a, b);
  }
}

/**
 * Response message for QueryService.MetricsViewTotals
 *
 * @generated from message rill.runtime.v1.MetricsViewTotalsResponse
 */
export class MetricsViewTotalsResponse extends Message<MetricsViewTotalsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: google.protobuf.Struct data = 2;
   */
  data?: Struct;

  constructor(data?: PartialMessage<MetricsViewTotalsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewTotalsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewTotalsResponse {
    return new MetricsViewTotalsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined, b: MetricsViewTotalsResponse | PlainMessage<MetricsViewTotalsResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewTotalsResponse, a, b);
  }
}

/**
 * Request message for QueryService.MetricsViewRows
 *
 * @generated from message rill.runtime.v1.MetricsViewRowsRequest
 */
export class MetricsViewRowsRequest extends Message<MetricsViewRowsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string metrics_view_name = 2;
   */
  metricsViewName = "";

  /**
   * @generated from field: google.protobuf.Timestamp time_start = 3;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp time_end = 4;
   */
  timeEnd?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filter = 5;
   */
  filter?: MetricsViewFilter;

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewSort sort = 6;
   */
  sort: MetricsViewSort[] = [];

  /**
   * @generated from field: int32 limit = 7;
   */
  limit = 0;

  /**
   * @generated from field: int64 offset = 8;
   */
  offset = protoInt64.zero;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  constructor(data?: PartialMessage<MetricsViewRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "metrics_view_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "time_start", kind: "message", T: Timestamp },
    { no: 4, name: "time_end", kind: "message", T: Timestamp },
    { no: 5, name: "filter", kind: "message", T: MetricsViewFilter },
    { no: 6, name: "sort", kind: "message", T: MetricsViewSort, repeated: true },
    { no: 7, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "offset", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewRowsRequest {
    return new MetricsViewRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewRowsRequest | PlainMessage<MetricsViewRowsRequest> | undefined, b: MetricsViewRowsRequest | PlainMessage<MetricsViewRowsRequest> | undefined): boolean {
    return proto3.util.equals(MetricsViewRowsRequest, a, b);
  }
}

/**
 * Response message for QueryService.MetricsViewRows
 *
 * @generated from message rill.runtime.v1.MetricsViewRowsResponse
 */
export class MetricsViewRowsResponse extends Message<MetricsViewRowsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewColumn meta = 1;
   */
  meta: MetricsViewColumn[] = [];

  /**
   * @generated from field: repeated google.protobuf.Struct data = 2;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<MetricsViewRowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewRowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "meta", kind: "message", T: MetricsViewColumn, repeated: true },
    { no: 2, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewRowsResponse {
    return new MetricsViewRowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewRowsResponse | PlainMessage<MetricsViewRowsResponse> | undefined, b: MetricsViewRowsResponse | PlainMessage<MetricsViewRowsResponse> | undefined): boolean {
    return proto3.util.equals(MetricsViewRowsResponse, a, b);
  }
}

/**
 * Sort clause for metrics view requests
 *
 * @generated from message rill.runtime.v1.MetricsViewSort
 */
export class MetricsViewSort extends Message<MetricsViewSort> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: bool ascending = 2;
   */
  ascending = false;

  constructor(data?: PartialMessage<MetricsViewSort>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewSort";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ascending", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewSort {
    return new MetricsViewSort().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined, b: MetricsViewSort | PlainMessage<MetricsViewSort> | undefined): boolean {
    return proto3.util.equals(MetricsViewSort, a, b);
  }
}

/**
 * Filter clause for metrics view requests
 *
 * @generated from message rill.runtime.v1.MetricsViewFilter
 */
export class MetricsViewFilter extends Message<MetricsViewFilter> {
  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond include = 2;
   */
  include: MetricsViewFilter_Cond[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.MetricsViewFilter.Cond exclude = 3;
   */
  exclude: MetricsViewFilter_Cond[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "include", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
    { no: 3, name: "exclude", kind: "message", T: MetricsViewFilter_Cond, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter {
    return new MetricsViewFilter().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined, b: MetricsViewFilter | PlainMessage<MetricsViewFilter> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.MetricsViewFilter.Cond
 */
export class MetricsViewFilter_Cond extends Message<MetricsViewFilter_Cond> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: repeated google.protobuf.Value in = 2;
   */
  in: Value[] = [];

  /**
   * @generated from field: repeated string like = 3;
   */
  like: string[] = [];

  constructor(data?: PartialMessage<MetricsViewFilter_Cond>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewFilter.Cond";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "in", kind: "message", T: Value, repeated: true },
    { no: 3, name: "like", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewFilter_Cond {
    return new MetricsViewFilter_Cond().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined, b: MetricsViewFilter_Cond | PlainMessage<MetricsViewFilter_Cond> | undefined): boolean {
    return proto3.util.equals(MetricsViewFilter_Cond, a, b);
  }
}

/**
 * MetricsViewColumn represents a column in a metrics view
 *
 * @generated from message rill.runtime.v1.MetricsViewColumn
 */
export class MetricsViewColumn extends Message<MetricsViewColumn> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: bool nullable = 3;
   */
  nullable = false;

  constructor(data?: PartialMessage<MetricsViewColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.MetricsViewColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "nullable", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): MetricsViewColumn {
    return new MetricsViewColumn().fromJsonString(jsonString, options);
  }

  static equals(a: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined, b: MetricsViewColumn | PlainMessage<MetricsViewColumn> | undefined): boolean {
    return proto3.util.equals(MetricsViewColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRollupIntervalRequest
 */
export class ColumnRollupIntervalRequest extends Message<ColumnRollupIntervalRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnRollupIntervalRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRollupIntervalRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRollupIntervalRequest {
    return new ColumnRollupIntervalRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRollupIntervalRequest | PlainMessage<ColumnRollupIntervalRequest> | undefined, b: ColumnRollupIntervalRequest | PlainMessage<ColumnRollupIntervalRequest> | undefined): boolean {
    return proto3.util.equals(ColumnRollupIntervalRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRollupIntervalResponse
 */
export class ColumnRollupIntervalResponse extends Message<ColumnRollupIntervalResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 1;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 2;
   */
  end?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain interval = 3;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<ColumnRollupIntervalResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRollupIntervalResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "start", kind: "message", T: Timestamp },
    { no: 2, name: "end", kind: "message", T: Timestamp },
    { no: 3, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRollupIntervalResponse {
    return new ColumnRollupIntervalResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRollupIntervalResponse | PlainMessage<ColumnRollupIntervalResponse> | undefined, b: ColumnRollupIntervalResponse | PlainMessage<ColumnRollupIntervalResponse> | undefined): boolean {
    return proto3.util.equals(ColumnRollupIntervalResponse, a, b);
  }
}

/**
 * Request for QueryService.ColumnTopK. Returns the top K values for a given column using agg function for table table_name.
 *
 * @generated from message rill.runtime.v1.ColumnTopKRequest
 */
export class ColumnTopKRequest extends Message<ColumnTopKRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * default is count(*)
   *
   * @generated from field: string agg = 4;
   */
  agg = "";

  /**
   * default is 50
   *
   * @generated from field: int32 k = 5;
   */
  k = 0;

  /**
   * @generated from field: int32 priority = 6;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTopKRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTopKRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "agg", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "k", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTopKRequest {
    return new ColumnTopKRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTopKRequest | PlainMessage<ColumnTopKRequest> | undefined, b: ColumnTopKRequest | PlainMessage<ColumnTopKRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTopKRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTopKResponse
 */
export class ColumnTopKResponse extends Message<ColumnTopKResponse> {
  /**
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<ColumnTopKResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTopKResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTopKResponse {
    return new ColumnTopKResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTopKResponse | PlainMessage<ColumnTopKResponse> | undefined, b: ColumnTopKResponse | PlainMessage<ColumnTopKResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTopKResponse, a, b);
  }
}

/**
 * Response for QueryService.ColumnTopK and QueryService.ColumnCardinality. Message will have either topK or cardinality set.
 *
 * @generated from message rill.runtime.v1.CategoricalSummary
 */
export class CategoricalSummary extends Message<CategoricalSummary> {
  /**
   * @generated from oneof rill.runtime.v1.CategoricalSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.TopK top_k = 1;
     */
    value: TopK;
    case: "topK";
  } | {
    /**
     * @generated from field: double cardinality = 2;
     */
    value: number;
    case: "cardinality";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<CategoricalSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.CategoricalSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "top_k", kind: "message", T: TopK, oneof: "case" },
    { no: 2, name: "cardinality", kind: "scalar", T: 1 /* ScalarType.DOUBLE */, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CategoricalSummary {
    return new CategoricalSummary().fromJsonString(jsonString, options);
  }

  static equals(a: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined, b: CategoricalSummary | PlainMessage<CategoricalSummary> | undefined): boolean {
    return proto3.util.equals(CategoricalSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK
 */
export class TopK extends Message<TopK> {
  /**
   * @generated from field: repeated rill.runtime.v1.TopK.Entry entries = 1;
   */
  entries: TopK_Entry[] = [];

  constructor(data?: PartialMessage<TopK>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TopK";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entries", kind: "message", T: TopK_Entry, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK {
    return new TopK().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK {
    return new TopK().fromJsonString(jsonString, options);
  }

  static equals(a: TopK | PlainMessage<TopK> | undefined, b: TopK | PlainMessage<TopK> | undefined): boolean {
    return proto3.util.equals(TopK, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TopK.Entry
 */
export class TopK_Entry extends Message<TopK_Entry> {
  /**
   * @generated from field: google.protobuf.Value value = 1;
   */
  value?: Value;

  /**
   * @generated from field: double count = 2;
   */
  count = 0;

  constructor(data?: PartialMessage<TopK_Entry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TopK.Entry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: Value },
    { no: 2, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TopK_Entry {
    return new TopK_Entry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TopK_Entry {
    return new TopK_Entry().fromJsonString(jsonString, options);
  }

  static equals(a: TopK_Entry | PlainMessage<TopK_Entry> | undefined, b: TopK_Entry | PlainMessage<TopK_Entry> | undefined): boolean {
    return proto3.util.equals(TopK_Entry, a, b);
  }
}

/**
 * Request for QueryService.ColumnNullCount. Returns the null count for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.ColumnNullCountRequest
 */
export class ColumnNullCountRequest extends Message<ColumnNullCountRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnNullCountRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNullCountRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNullCountRequest {
    return new ColumnNullCountRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNullCountRequest | PlainMessage<ColumnNullCountRequest> | undefined, b: ColumnNullCountRequest | PlainMessage<ColumnNullCountRequest> | undefined): boolean {
    return proto3.util.equals(ColumnNullCountRequest, a, b);
  }
}

/**
 * Response for QueryService.ColumnNullCount
 *
 * @generated from message rill.runtime.v1.ColumnNullCountResponse
 */
export class ColumnNullCountResponse extends Message<ColumnNullCountResponse> {
  /**
   * @generated from field: double count = 1;
   */
  count = 0;

  constructor(data?: PartialMessage<ColumnNullCountResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNullCountResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNullCountResponse {
    return new ColumnNullCountResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNullCountResponse | PlainMessage<ColumnNullCountResponse> | undefined, b: ColumnNullCountResponse | PlainMessage<ColumnNullCountResponse> | undefined): boolean {
    return proto3.util.equals(ColumnNullCountResponse, a, b);
  }
}

/**
 * Request for QueryService.GetColumnDescriptiveStatisticsRequest. Returns the stats for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.ColumnDescriptiveStatisticsRequest
 */
export class ColumnDescriptiveStatisticsRequest extends Message<ColumnDescriptiveStatisticsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnDescriptiveStatisticsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnDescriptiveStatisticsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsRequest {
    return new ColumnDescriptiveStatisticsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnDescriptiveStatisticsRequest | PlainMessage<ColumnDescriptiveStatisticsRequest> | undefined, b: ColumnDescriptiveStatisticsRequest | PlainMessage<ColumnDescriptiveStatisticsRequest> | undefined): boolean {
    return proto3.util.equals(ColumnDescriptiveStatisticsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnDescriptiveStatisticsResponse
 */
export class ColumnDescriptiveStatisticsResponse extends Message<ColumnDescriptiveStatisticsResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnDescriptiveStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnDescriptiveStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnDescriptiveStatisticsResponse {
    return new ColumnDescriptiveStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnDescriptiveStatisticsResponse | PlainMessage<ColumnDescriptiveStatisticsResponse> | undefined, b: ColumnDescriptiveStatisticsResponse | PlainMessage<ColumnDescriptiveStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(ColumnDescriptiveStatisticsResponse, a, b);
  }
}

/**
 * Response for QueryService.ColumnNumericHistogram, QueryService.ColumnDescriptiveStatistics and QueryService.ColumnCardinality.
 * Message will have either numericHistogramBins, numericStatistics or numericOutliers set.
 *
 * @generated from message rill.runtime.v1.NumericSummary
 */
export class NumericSummary extends Message<NumericSummary> {
  /**
   * @generated from oneof rill.runtime.v1.NumericSummary.case
   */
  case: {
    /**
     * @generated from field: rill.runtime.v1.NumericHistogramBins numeric_histogram_bins = 1;
     */
    value: NumericHistogramBins;
    case: "numericHistogramBins";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericStatistics numeric_statistics = 2;
     */
    value: NumericStatistics;
    case: "numericStatistics";
  } | {
    /**
     * @generated from field: rill.runtime.v1.NumericOutliers numeric_outliers = 3;
     */
    value: NumericOutliers;
    case: "numericOutliers";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<NumericSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_histogram_bins", kind: "message", T: NumericHistogramBins, oneof: "case" },
    { no: 2, name: "numeric_statistics", kind: "message", T: NumericStatistics, oneof: "case" },
    { no: 3, name: "numeric_outliers", kind: "message", T: NumericOutliers, oneof: "case" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericSummary {
    return new NumericSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericSummary {
    return new NumericSummary().fromJsonString(jsonString, options);
  }

  static equals(a: NumericSummary | PlainMessage<NumericSummary> | undefined, b: NumericSummary | PlainMessage<NumericSummary> | undefined): boolean {
    return proto3.util.equals(NumericSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericHistogramBins
 */
export class NumericHistogramBins extends Message<NumericHistogramBins> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericHistogramBins.Bin bins = 1;
   */
  bins: NumericHistogramBins_Bin[] = [];

  constructor(data?: PartialMessage<NumericHistogramBins>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bins", kind: "message", T: NumericHistogramBins_Bin, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins {
    return new NumericHistogramBins().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined, b: NumericHistogramBins | PlainMessage<NumericHistogramBins> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericHistogramBins.Bin
 */
export class NumericHistogramBins_Bin extends Message<NumericHistogramBins_Bin> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double midpoint = 3;
   */
  midpoint = 0;

  /**
   * @generated from field: double high = 4;
   */
  high = 0;

  /**
   * @generated from field: double count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericHistogramBins_Bin>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericHistogramBins.Bin";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "midpoint", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "count", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericHistogramBins_Bin {
    return new NumericHistogramBins_Bin().fromJsonString(jsonString, options);
  }

  static equals(a: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined, b: NumericHistogramBins_Bin | PlainMessage<NumericHistogramBins_Bin> | undefined): boolean {
    return proto3.util.equals(NumericHistogramBins_Bin, a, b);
  }
}

/**
 * Response for QueryService.ColumnDescriptiveStatistics
 *
 * @generated from message rill.runtime.v1.NumericStatistics
 */
export class NumericStatistics extends Message<NumericStatistics> {
  /**
   * @generated from field: double min = 1;
   */
  min = 0;

  /**
   * @generated from field: double max = 2;
   */
  max = 0;

  /**
   * @generated from field: double mean = 3;
   */
  mean = 0;

  /**
   * @generated from field: double q25 = 4;
   */
  q25 = 0;

  /**
   * @generated from field: double q50 = 5;
   */
  q50 = 0;

  /**
   * @generated from field: double q75 = 6;
   */
  q75 = 0;

  /**
   * @generated from field: double sd = 7;
   */
  sd = 0;

  constructor(data?: PartialMessage<NumericStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 2, name: "max", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "mean", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "q25", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 5, name: "q50", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 6, name: "q75", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 7, name: "sd", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericStatistics {
    return new NumericStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericStatistics {
    return new NumericStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: NumericStatistics | PlainMessage<NumericStatistics> | undefined, b: NumericStatistics | PlainMessage<NumericStatistics> | undefined): boolean {
    return proto3.util.equals(NumericStatistics, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericOutliers
 */
export class NumericOutliers extends Message<NumericOutliers> {
  /**
   * @generated from field: repeated rill.runtime.v1.NumericOutliers.Outlier outliers = 1;
   */
  outliers: NumericOutliers_Outlier[] = [];

  constructor(data?: PartialMessage<NumericOutliers>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "outliers", kind: "message", T: NumericOutliers_Outlier, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers {
    return new NumericOutliers().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers {
    return new NumericOutliers().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers | PlainMessage<NumericOutliers> | undefined, b: NumericOutliers | PlainMessage<NumericOutliers> | undefined): boolean {
    return proto3.util.equals(NumericOutliers, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.NumericOutliers.Outlier
 */
export class NumericOutliers_Outlier extends Message<NumericOutliers_Outlier> {
  /**
   * @generated from field: int32 bucket = 1;
   */
  bucket = 0;

  /**
   * @generated from field: double low = 2;
   */
  low = 0;

  /**
   * @generated from field: double high = 3;
   */
  high = 0;

  /**
   * @generated from field: bool present = 4;
   */
  present = false;

  /**
   * @generated from field: int32 count = 5;
   */
  count = 0;

  constructor(data?: PartialMessage<NumericOutliers_Outlier>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.NumericOutliers.Outlier";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "bucket", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "low", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "high", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 4, name: "present", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): NumericOutliers_Outlier {
    return new NumericOutliers_Outlier().fromJsonString(jsonString, options);
  }

  static equals(a: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined, b: NumericOutliers_Outlier | PlainMessage<NumericOutliers_Outlier> | undefined): boolean {
    return proto3.util.equals(NumericOutliers_Outlier, a, b);
  }
}

/**
 * Request for QueryService.ColumnTimeGrainRequest
 *
 * @generated from message rill.runtime.v1.ColumnTimeGrainRequest
 */
export class ColumnTimeGrainRequest extends Message<ColumnTimeGrainRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTimeGrainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeGrainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeGrainRequest {
    return new ColumnTimeGrainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeGrainRequest | PlainMessage<ColumnTimeGrainRequest> | undefined, b: ColumnTimeGrainRequest | PlainMessage<ColumnTimeGrainRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeGrainRequest, a, b);
  }
}

/**
 * Response for QueryService.ColumnTimeGrain
 *
 * @generated from message rill.runtime.v1.ColumnTimeGrainResponse
 */
export class ColumnTimeGrainResponse extends Message<ColumnTimeGrainResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 1;
   */
  timeGrain = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<ColumnTimeGrainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeGrainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_grain", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeGrainResponse {
    return new ColumnTimeGrainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeGrainResponse | PlainMessage<ColumnTimeGrainResponse> | undefined, b: ColumnTimeGrainResponse | PlainMessage<ColumnTimeGrainResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeGrainResponse, a, b);
  }
}

/**
 * Request for QueryService.ColumnNumericHistogram. Returns the histogram for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.ColumnNumericHistogramRequest
 */
export class ColumnNumericHistogramRequest extends Message<ColumnNumericHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: rill.runtime.v1.HistogramMethod histogram_method = 4;
   */
  histogramMethod = HistogramMethod.UNSPECIFIED;

  /**
   * @generated from field: int32 priority = 5;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnNumericHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNumericHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "histogram_method", kind: "enum", T: proto3.getEnumType(HistogramMethod) },
    { no: 5, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNumericHistogramRequest {
    return new ColumnNumericHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNumericHistogramRequest | PlainMessage<ColumnNumericHistogramRequest> | undefined, b: ColumnNumericHistogramRequest | PlainMessage<ColumnNumericHistogramRequest> | undefined): boolean {
    return proto3.util.equals(ColumnNumericHistogramRequest, a, b);
  }
}

/**
 * Response for QueryService.ColumnNumericHistogram
 *
 * @generated from message rill.runtime.v1.ColumnNumericHistogramResponse
 */
export class ColumnNumericHistogramResponse extends Message<ColumnNumericHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnNumericHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnNumericHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnNumericHistogramResponse {
    return new ColumnNumericHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnNumericHistogramResponse | PlainMessage<ColumnNumericHistogramResponse> | undefined, b: ColumnNumericHistogramResponse | PlainMessage<ColumnNumericHistogramResponse> | undefined): boolean {
    return proto3.util.equals(ColumnNumericHistogramResponse, a, b);
  }
}

/**
 * Request for QueryService.ColumnRugHistogram
 *
 * @generated from message rill.runtime.v1.ColumnRugHistogramRequest
 */
export class ColumnRugHistogramRequest extends Message<ColumnRugHistogramRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnRugHistogramRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRugHistogramRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRugHistogramRequest {
    return new ColumnRugHistogramRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRugHistogramRequest | PlainMessage<ColumnRugHistogramRequest> | undefined, b: ColumnRugHistogramRequest | PlainMessage<ColumnRugHistogramRequest> | undefined): boolean {
    return proto3.util.equals(ColumnRugHistogramRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnRugHistogramResponse
 */
export class ColumnRugHistogramResponse extends Message<ColumnRugHistogramResponse> {
  /**
   * @generated from field: rill.runtime.v1.NumericSummary numeric_summary = 1;
   */
  numericSummary?: NumericSummary;

  constructor(data?: PartialMessage<ColumnRugHistogramResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnRugHistogramResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "numeric_summary", kind: "message", T: NumericSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnRugHistogramResponse {
    return new ColumnRugHistogramResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnRugHistogramResponse | PlainMessage<ColumnRugHistogramResponse> | undefined, b: ColumnRugHistogramResponse | PlainMessage<ColumnRugHistogramResponse> | undefined): boolean {
    return proto3.util.equals(ColumnRugHistogramResponse, a, b);
  }
}

/**
 * Request for QueryService.ColumnTimeRange
 *
 * @generated from message rill.runtime.v1.ColumnTimeRangeRequest
 */
export class ColumnTimeRangeRequest extends Message<ColumnTimeRangeRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTimeRangeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeRangeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeRangeRequest {
    return new ColumnTimeRangeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeRangeRequest | PlainMessage<ColumnTimeRangeRequest> | undefined, b: ColumnTimeRangeRequest | PlainMessage<ColumnTimeRangeRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeRangeRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeRangeResponse
 */
export class ColumnTimeRangeResponse extends Message<ColumnTimeRangeResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeRangeSummary time_range_summary = 1;
   */
  timeRangeSummary?: TimeRangeSummary;

  constructor(data?: PartialMessage<ColumnTimeRangeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeRangeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time_range_summary", kind: "message", T: TimeRangeSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeRangeResponse {
    return new ColumnTimeRangeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeRangeResponse | PlainMessage<ColumnTimeRangeResponse> | undefined, b: ColumnTimeRangeResponse | PlainMessage<ColumnTimeRangeResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeRangeResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeRangeSummary
 */
export class TimeRangeSummary extends Message<TimeRangeSummary> {
  /**
   * @generated from field: google.protobuf.Timestamp min = 1;
   */
  min?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp max = 2;
   */
  max?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeRangeSummary.Interval interval = 3;
   */
  interval?: TimeRangeSummary_Interval;

  constructor(data?: PartialMessage<TimeRangeSummary>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRangeSummary";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "message", T: Timestamp },
    { no: 2, name: "max", kind: "message", T: Timestamp },
    { no: 3, name: "interval", kind: "message", T: TimeRangeSummary_Interval },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeSummary {
    return new TimeRangeSummary().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined, b: TimeRangeSummary | PlainMessage<TimeRangeSummary> | undefined): boolean {
    return proto3.util.equals(TimeRangeSummary, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeRangeSummary.Interval
 */
export class TimeRangeSummary_Interval extends Message<TimeRangeSummary_Interval> {
  /**
   * @generated from field: int32 months = 1;
   */
  months = 0;

  /**
   * @generated from field: int32 days = 2;
   */
  days = 0;

  /**
   * @generated from field: int64 micros = 3;
   */
  micros = protoInt64.zero;

  constructor(data?: PartialMessage<TimeRangeSummary_Interval>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeRangeSummary.Interval";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "months", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "days", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "micros", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeRangeSummary_Interval {
    return new TimeRangeSummary_Interval().fromJsonString(jsonString, options);
  }

  static equals(a: TimeRangeSummary_Interval | PlainMessage<TimeRangeSummary_Interval> | undefined, b: TimeRangeSummary_Interval | PlainMessage<TimeRangeSummary_Interval> | undefined): boolean {
    return proto3.util.equals(TimeRangeSummary_Interval, a, b);
  }
}

/**
 * Request for QueryService.ColumnCardinality. Returns the cardinality for a given column for table table_name
 *
 * @generated from message rill.runtime.v1.ColumnCardinalityRequest
 */
export class ColumnCardinalityRequest extends Message<ColumnCardinalityRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: string column_name = 3;
   */
  columnName = "";

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnCardinalityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnCardinalityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnCardinalityRequest {
    return new ColumnCardinalityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnCardinalityRequest | PlainMessage<ColumnCardinalityRequest> | undefined, b: ColumnCardinalityRequest | PlainMessage<ColumnCardinalityRequest> | undefined): boolean {
    return proto3.util.equals(ColumnCardinalityRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnCardinalityResponse
 */
export class ColumnCardinalityResponse extends Message<ColumnCardinalityResponse> {
  /**
   * @generated from field: rill.runtime.v1.CategoricalSummary categorical_summary = 1;
   */
  categoricalSummary?: CategoricalSummary;

  constructor(data?: PartialMessage<ColumnCardinalityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnCardinalityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "categorical_summary", kind: "message", T: CategoricalSummary },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnCardinalityResponse {
    return new ColumnCardinalityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnCardinalityResponse | PlainMessage<ColumnCardinalityResponse> | undefined, b: ColumnCardinalityResponse | PlainMessage<ColumnCardinalityResponse> | undefined): boolean {
    return proto3.util.equals(ColumnCardinalityResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesRequest
 */
export class ColumnTimeSeriesRequest extends Message<ColumnTimeSeriesRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: repeated rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure measures = 3;
   */
  measures: ColumnTimeSeriesRequest_BasicMeasure[] = [];

  /**
   * @generated from field: string timestamp_column_name = 4;
   */
  timestampColumnName = "";

  /**
   * @generated from field: rill.runtime.v1.TimeSeriesTimeRange time_range = 5;
   */
  timeRange?: TimeSeriesTimeRange;

  /**
   * @generated from field: rill.runtime.v1.MetricsViewFilter filters = 6;
   */
  filters?: MetricsViewFilter;

  /**
   * @generated from field: int32 pixels = 7;
   */
  pixels = 0;

  /**
   * @generated from field: int32 sample_size = 8;
   */
  sampleSize = 0;

  /**
   * @generated from field: int32 priority = 9;
   */
  priority = 0;

  constructor(data?: PartialMessage<ColumnTimeSeriesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "measures", kind: "message", T: ColumnTimeSeriesRequest_BasicMeasure, repeated: true },
    { no: 4, name: "timestamp_column_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "time_range", kind: "message", T: TimeSeriesTimeRange },
    { no: 6, name: "filters", kind: "message", T: MetricsViewFilter },
    { no: 7, name: "pixels", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest {
    return new ColumnTimeSeriesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesRequest | PlainMessage<ColumnTimeSeriesRequest> | undefined, b: ColumnTimeSeriesRequest | PlainMessage<ColumnTimeSeriesRequest> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure
 */
export class ColumnTimeSeriesRequest_BasicMeasure extends Message<ColumnTimeSeriesRequest_BasicMeasure> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * mandatory user defined metadata
   *
   * @generated from field: string expression = 2;
   */
  expression = "";

  /**
   * optional user defined metadata
   *
   * @generated from field: string sql_name = 3;
   */
  sqlName = "";

  constructor(data?: PartialMessage<ColumnTimeSeriesRequest_BasicMeasure>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesRequest.BasicMeasure";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "expression", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "sql_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesRequest_BasicMeasure {
    return new ColumnTimeSeriesRequest_BasicMeasure().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesRequest_BasicMeasure | PlainMessage<ColumnTimeSeriesRequest_BasicMeasure> | undefined, b: ColumnTimeSeriesRequest_BasicMeasure | PlainMessage<ColumnTimeSeriesRequest_BasicMeasure> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesRequest_BasicMeasure, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ColumnTimeSeriesResponse
 */
export class ColumnTimeSeriesResponse extends Message<ColumnTimeSeriesResponse> {
  /**
   * @generated from field: rill.runtime.v1.TimeSeriesResponse rollup = 1;
   */
  rollup?: TimeSeriesResponse;

  constructor(data?: PartialMessage<ColumnTimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ColumnTimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rollup", kind: "message", T: TimeSeriesResponse },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ColumnTimeSeriesResponse {
    return new ColumnTimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ColumnTimeSeriesResponse | PlainMessage<ColumnTimeSeriesResponse> | undefined, b: ColumnTimeSeriesResponse | PlainMessage<ColumnTimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(ColumnTimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesTimeRange
 */
export class TimeSeriesTimeRange extends Message<TimeSeriesTimeRange> {
  /**
   * @generated from field: google.protobuf.Timestamp start = 2;
   */
  start?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp end = 3;
   */
  end?: Timestamp;

  /**
   * @generated from field: rill.runtime.v1.TimeGrain interval = 4;
   */
  interval = TimeGrain.UNSPECIFIED;

  constructor(data?: PartialMessage<TimeSeriesTimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesTimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "start", kind: "message", T: Timestamp },
    { no: 3, name: "end", kind: "message", T: Timestamp },
    { no: 4, name: "interval", kind: "enum", T: proto3.getEnumType(TimeGrain) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesTimeRange {
    return new TimeSeriesTimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined, b: TimeSeriesTimeRange | PlainMessage<TimeSeriesTimeRange> | undefined): boolean {
    return proto3.util.equals(TimeSeriesTimeRange, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesResponse
 */
export class TimeSeriesResponse extends Message<TimeSeriesResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue results = 1;
   */
  results: TimeSeriesValue[] = [];

  /**
   * @generated from field: repeated rill.runtime.v1.TimeSeriesValue spark = 2;
   */
  spark: TimeSeriesValue[] = [];

  /**
   * @generated from field: rill.runtime.v1.TimeSeriesTimeRange time_range = 3;
   */
  timeRange?: TimeSeriesTimeRange;

  /**
   * @generated from field: int32 sample_size = 4;
   */
  sampleSize = 0;

  constructor(data?: PartialMessage<TimeSeriesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "results", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 2, name: "spark", kind: "message", T: TimeSeriesValue, repeated: true },
    { no: 3, name: "time_range", kind: "message", T: TimeSeriesTimeRange },
    { no: 4, name: "sample_size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesResponse {
    return new TimeSeriesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined, b: TimeSeriesResponse | PlainMessage<TimeSeriesResponse> | undefined): boolean {
    return proto3.util.equals(TimeSeriesResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TimeSeriesValue
 */
export class TimeSeriesValue extends Message<TimeSeriesValue> {
  /**
   * @generated from field: google.protobuf.Timestamp ts = 1;
   */
  ts?: Timestamp;

  /**
   * @generated from field: double bin = 2;
   */
  bin = 0;

  /**
   * @generated from field: google.protobuf.Struct records = 3;
   */
  records?: Struct;

  constructor(data?: PartialMessage<TimeSeriesValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TimeSeriesValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ts", kind: "message", T: Timestamp },
    { no: 2, name: "bin", kind: "scalar", T: 1 /* ScalarType.DOUBLE */ },
    { no: 3, name: "records", kind: "message", T: Struct },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TimeSeriesValue {
    return new TimeSeriesValue().fromJsonString(jsonString, options);
  }

  static equals(a: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined, b: TimeSeriesValue | PlainMessage<TimeSeriesValue> | undefined): boolean {
    return proto3.util.equals(TimeSeriesValue, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableCardinalityRequest
 */
export class TableCardinalityRequest extends Message<TableCardinalityRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableCardinalityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableCardinalityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableCardinalityRequest {
    return new TableCardinalityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableCardinalityRequest | PlainMessage<TableCardinalityRequest> | undefined, b: TableCardinalityRequest | PlainMessage<TableCardinalityRequest> | undefined): boolean {
    return proto3.util.equals(TableCardinalityRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableCardinalityResponse
 */
export class TableCardinalityResponse extends Message<TableCardinalityResponse> {
  /**
   * @generated from field: int64 cardinality = 1;
   */
  cardinality = protoInt64.zero;

  constructor(data?: PartialMessage<TableCardinalityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableCardinalityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cardinality", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableCardinalityResponse {
    return new TableCardinalityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableCardinalityResponse | PlainMessage<TableCardinalityResponse> | undefined, b: TableCardinalityResponse | PlainMessage<TableCardinalityResponse> | undefined): boolean {
    return proto3.util.equals(TableCardinalityResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableColumnsRequest
 */
export class TableColumnsRequest extends Message<TableColumnsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 priority = 3;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableColumnsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableColumnsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableColumnsRequest {
    return new TableColumnsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableColumnsRequest | PlainMessage<TableColumnsRequest> | undefined, b: TableColumnsRequest | PlainMessage<TableColumnsRequest> | undefined): boolean {
    return proto3.util.equals(TableColumnsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableColumnsResponse
 */
export class TableColumnsResponse extends Message<TableColumnsResponse> {
  /**
   * @generated from field: repeated rill.runtime.v1.ProfileColumn profile_columns = 1;
   */
  profileColumns: ProfileColumn[] = [];

  constructor(data?: PartialMessage<TableColumnsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableColumnsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "profile_columns", kind: "message", T: ProfileColumn, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableColumnsResponse {
    return new TableColumnsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableColumnsResponse | PlainMessage<TableColumnsResponse> | undefined, b: TableColumnsResponse | PlainMessage<TableColumnsResponse> | undefined): boolean {
    return proto3.util.equals(TableColumnsResponse, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.ProfileColumn
 */
export class ProfileColumn extends Message<ProfileColumn> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * @generated from field: string type = 2;
   */
  type = "";

  /**
   * @generated from field: int32 largest_string_length = 3;
   */
  largestStringLength = 0;

  constructor(data?: PartialMessage<ProfileColumn>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.ProfileColumn";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "type", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "largest_string_length", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProfileColumn {
    return new ProfileColumn().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProfileColumn {
    return new ProfileColumn().fromJsonString(jsonString, options);
  }

  static equals(a: ProfileColumn | PlainMessage<ProfileColumn> | undefined, b: ProfileColumn | PlainMessage<ProfileColumn> | undefined): boolean {
    return proto3.util.equals(ProfileColumn, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableRowsRequest
 */
export class TableRowsRequest extends Message<TableRowsRequest> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string table_name = 2;
   */
  tableName = "";

  /**
   * @generated from field: int32 limit = 3;
   */
  limit = 0;

  /**
   * @generated from field: int32 priority = 4;
   */
  priority = 0;

  constructor(data?: PartialMessage<TableRowsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableRowsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "table_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "priority", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableRowsRequest {
    return new TableRowsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TableRowsRequest | PlainMessage<TableRowsRequest> | undefined, b: TableRowsRequest | PlainMessage<TableRowsRequest> | undefined): boolean {
    return proto3.util.equals(TableRowsRequest, a, b);
  }
}

/**
 * @generated from message rill.runtime.v1.TableRowsResponse
 */
export class TableRowsResponse extends Message<TableRowsResponse> {
  /**
   * @generated from field: repeated google.protobuf.Struct data = 1;
   */
  data: Struct[] = [];

  constructor(data?: PartialMessage<TableRowsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.runtime.v1.TableRowsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "message", T: Struct, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TableRowsResponse {
    return new TableRowsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TableRowsResponse | PlainMessage<TableRowsResponse> | undefined, b: TableRowsResponse | PlainMessage<TableRowsResponse> | undefined): boolean {
    return proto3.util.equals(TableRowsResponse, a, b);
  }
}

