// @generated by protoc-gen-es v2.0.0 with parameter "target=ts"
// @generated from file rill/ui/v1/dashboard.proto (package rill.ui.v1, syntax proto3)
/* eslint-disable */

import type { GenEnum, GenFile, GenMessage } from "@bufbuild/protobuf/codegenv1";
import { enumDesc, fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv1";
import type { Timestamp } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_timestamp } from "@bufbuild/protobuf/wkt";
import type { TimeGrain } from "../../runtime/v1/time_grain_pb";
import { file_rill_runtime_v1_time_grain } from "../../runtime/v1/time_grain_pb";
import type { MetricsViewFilter } from "../../runtime/v1/queries_pb";
import { file_rill_runtime_v1_queries } from "../../runtime/v1/queries_pb";
import type { Expression } from "../../runtime/v1/expression_pb";
import { file_rill_runtime_v1_expression } from "../../runtime/v1/expression_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file rill/ui/v1/dashboard.proto.
 */
export const file_rill_ui_v1_dashboard: GenFile = /*@__PURE__*/
  fileDesc("ChpyaWxsL3VpL3YxL2Rhc2hib2FyZC5wcm90bxIKcmlsbC51aS52MSLQFwoORGFzaGJvYXJkU3RhdGUSMgoKdGltZV9yYW5nZRgBIAEoCzIeLnJpbGwudWkudjEuRGFzaGJvYXJkVGltZVJhbmdlEjMKB2ZpbHRlcnMYAiABKAsyIi5yaWxsLnJ1bnRpbWUudjEuTWV0cmljc1ZpZXdGaWx0ZXISKgoFd2hlcmUYFCABKAsyGy5yaWxsLnJ1bnRpbWUudjEuRXhwcmVzc2lvbhI0CgZoYXZpbmcYFSADKAsyJC5yaWxsLnVpLnYxLkRhc2hib2FyZERpbWVuc2lvbkZpbHRlchIuCgp0aW1lX2dyYWluGAMgASgOMhoucmlsbC5ydW50aW1lLnYxLlRpbWVHcmFpbhI6ChJjb21wYXJlX3RpbWVfcmFuZ2UYBCABKAsyHi5yaWxsLnVpLnYxLkRhc2hib2FyZFRpbWVSYW5nZRI6CgthY3RpdmVfcGFnZRggIAEoDjIlLnJpbGwudWkudjEuRGFzaGJvYXJkU3RhdGUuQWN0aXZlUGFnZRIgChNsZWFkZXJib2FyZF9tZWFzdXJlGAUgASgJSACIAQESHwoSc2VsZWN0ZWRfZGltZW5zaW9uGAYgASgJSAGIAQESIQoUc2hvd190aW1lX2NvbXBhcmlzb24YByABKAhIAogBARIYChB2aXNpYmxlX21lYXN1cmVzGAggAygJEiEKFGFsbF9tZWFzdXJlc192aXNpYmxlGAkgASgISAOIAQESGgoSdmlzaWJsZV9kaW1lbnNpb25zGAogAygJEiMKFmFsbF9kaW1lbnNpb25zX3Zpc2libGUYCyABKAhIBIgBARJcChpsZWFkZXJib2FyZF9jb250ZXh0X2NvbHVtbhgMIAEoDjIzLnJpbGwudWkudjEuRGFzaGJvYXJkU3RhdGUuTGVhZGVyYm9hcmRDb250ZXh0Q29sdW1uSAWIAQESHgoRc2VsZWN0ZWRfdGltZXpvbmUYDSABKAlIBogBARI4CgtzY3J1Yl9yYW5nZRgOIAEoCzIeLnJpbGwudWkudjEuRGFzaGJvYXJkVGltZVJhbmdlSAeIAQESXAoabGVhZGVyYm9hcmRfc29ydF9kaXJlY3Rpb24YDyABKA4yMy5yaWxsLnVpLnYxLkRhc2hib2FyZFN0YXRlLkxlYWRlcmJvYXJkU29ydERpcmVjdGlvbkgIiAEBElIKFWxlYWRlcmJvYXJkX3NvcnRfdHlwZRgQIAEoDjIuLnJpbGwudWkudjEuRGFzaGJvYXJkU3RhdGUuTGVhZGVyYm9hcmRTb3J0VHlwZUgJiAEBEiEKFGNvbXBhcmlzb25fZGltZW5zaW9uGBEgASgJSAqIAQESHQoQZXhwYW5kZWRfbWVhc3VyZRgSIAEoCUgLiAEBEhYKCXBpbl9pbmRleBgTIAEoBUgMiAEBEhcKCmNoYXJ0X3R5cGUYISABKAlIDYgBARIcCg9waXZvdF9pc19hY3RpdmUYFiABKAhIDogBARI9ChlwaXZvdF9yb3dfdGltZV9kaW1lbnNpb25zGBcgAygOMhoucmlsbC5ydW50aW1lLnYxLlRpbWVHcmFpbhIcChRwaXZvdF9yb3dfZGltZW5zaW9ucxgYIAMoCRJAChxwaXZvdF9jb2x1bW5fdGltZV9kaW1lbnNpb25zGBkgAygOMhoucmlsbC5ydW50aW1lLnYxLlRpbWVHcmFpbhIfChdwaXZvdF9jb2x1bW5fZGltZW5zaW9ucxgaIAMoCRIdChVwaXZvdF9jb2x1bW5fbWVhc3VyZXMYGyADKAkSRQoOcGl2b3RfZXhwYW5kZWQYHCADKAsyLS5yaWxsLnVpLnYxLkRhc2hib2FyZFN0YXRlLlBpdm90RXhwYW5kZWRFbnRyeRIvCgpwaXZvdF9zb3J0GB0gAygLMhsucmlsbC51aS52MS5QaXZvdENvbHVtblNvcnQSHgoRcGl2b3RfY29sdW1uX3BhZ2UYHiABKAVID4gBARJNChNwaXZvdF9yb3dfam9pbl90eXBlGB8gASgOMisucmlsbC51aS52MS5EYXNoYm9hcmRTdGF0ZS5QaXZvdFJvd0pvaW5UeXBlSBCIAQESJAoXcGl2b3RfZW5hYmxlX2NvbXBhcmlzb24YIiABKAhIEYgBARo0ChJQaXZvdEV4cGFuZGVkRW50cnkSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgIOgI4ASLyAQoYTGVhZGVyYm9hcmRDb250ZXh0Q29sdW1uEioKJkxFQURFUkJPQVJEX0NPTlRFWFRfQ09MVU1OX1VOU1BFQ0lGSUVEEAASJgoiTEVBREVSQk9BUkRfQ09OVEVYVF9DT0xVTU5fUEVSQ0VOVBABEiwKKExFQURFUkJPQVJEX0NPTlRFWFRfQ09MVU1OX0RFTFRBX1BFUkNFTlQQAhItCilMRUFERVJCT0FSRF9DT05URVhUX0NPTFVNTl9ERUxUQV9BQlNPTFVURRADEiUKIUxFQURFUkJPQVJEX0NPTlRFWFRfQ09MVU1OX0hJRERFThAEIpsBChhMZWFkZXJib2FyZFNvcnREaXJlY3Rpb24SKgomTEVBREVSQk9BUkRfU09SVF9ESVJFQ1RJT05fVU5TUEVDSUZJRUQQABIoCiRMRUFERVJCT0FSRF9TT1JUX0RJUkVDVElPTl9BU0NFTkRJTkcQARIpCiVMRUFERVJCT0FSRF9TT1JUX0RJUkVDVElPTl9ERVNDRU5ESU5HEAIi+AEKE0xlYWRlcmJvYXJkU29ydFR5cGUSJQohTEVBREVSQk9BUkRfU09SVF9UWVBFX1VOU1BFQ0lGSUVEEAASHwobTEVBREVSQk9BUkRfU09SVF9UWVBFX1ZBTFVFEAESIwofTEVBREVSQk9BUkRfU09SVF9UWVBFX0RJTUVOU0lPThACEiEKHUxFQURFUkJPQVJEX1NPUlRfVFlQRV9QRVJDRU5UEAMSJwojTEVBREVSQk9BUkRfU09SVF9UWVBFX0RFTFRBX1BFUkNFTlQQBBIoCiRMRUFERVJCT0FSRF9TT1JUX1RZUEVfREVMVEFfQUJTT0xVVEUQBSJzChBQaXZvdFJvd0pvaW5UeXBlEiMKH1BJVk9UX1JPV19KT0lOX1RZUEVfVU5TUEVDSUZJRUQQABIcChhQSVZPVF9ST1dfSk9JTl9UWVBFX0ZMQVQQARIcChhQSVZPVF9ST1dfSk9JTl9UWVBFX05FU1QQAiKjAQoKQWN0aXZlUGFnZRIbChdBQ1RJVkVfUEFHRV9VTlNQRUNJRklFRBAAEhcKE0FDVElWRV9QQUdFX0RFRkFVTFQQARIfChtBQ1RJVkVfUEFHRV9ESU1FTlNJT05fVEFCTEUQAhInCiNBQ1RJVkVfUEFHRV9USU1FX0RJTUVOU0lPTkFMX0RFVEFJTBADEhUKEUFDVElWRV9QQUdFX1BJVk9UEARCFgoUX2xlYWRlcmJvYXJkX21lYXN1cmVCFQoTX3NlbGVjdGVkX2RpbWVuc2lvbkIXChVfc2hvd190aW1lX2NvbXBhcmlzb25CFwoVX2FsbF9tZWFzdXJlc192aXNpYmxlQhkKF19hbGxfZGltZW5zaW9uc192aXNpYmxlQh0KG19sZWFkZXJib2FyZF9jb250ZXh0X2NvbHVtbkIUChJfc2VsZWN0ZWRfdGltZXpvbmVCDgoMX3NjcnViX3JhbmdlQh0KG19sZWFkZXJib2FyZF9zb3J0X2RpcmVjdGlvbkIYChZfbGVhZGVyYm9hcmRfc29ydF90eXBlQhcKFV9jb21wYXJpc29uX2RpbWVuc2lvbkITChFfZXhwYW5kZWRfbWVhc3VyZUIMCgpfcGluX2luZGV4Qg0KC19jaGFydF90eXBlQhIKEF9waXZvdF9pc19hY3RpdmVCFAoSX3Bpdm90X2NvbHVtbl9wYWdlQhYKFF9waXZvdF9yb3dfam9pbl90eXBlQhoKGF9waXZvdF9lbmFibGVfY29tcGFyaXNvbiK0AQoSRGFzaGJvYXJkVGltZVJhbmdlEhEKBG5hbWUYASABKAlIAIgBARIzCgp0aW1lX3N0YXJ0GAIgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgBiAEBEjEKCHRpbWVfZW5kGAMgASgLMhouZ29vZ2xlLnByb3RvYnVmLlRpbWVzdGFtcEgCiAEBQgcKBV9uYW1lQg0KC190aW1lX3N0YXJ0QgsKCV90aW1lX2VuZCJVChhEYXNoYm9hcmREaW1lbnNpb25GaWx0ZXISDAoEbmFtZRgBIAEoCRIrCgZmaWx0ZXIYAiABKAsyGy5yaWxsLnJ1bnRpbWUudjEuRXhwcmVzc2lvbiIrCg9QaXZvdENvbHVtblNvcnQSDAoEZGVzYxgBIAEoCBIKCgJpZBgCIAEoCUKUAQoOY29tLnJpbGwudWkudjFCDkRhc2hib2FyZFByb3RvUAFaKGdpdGh1Yi5jb20vcmlsbGRhdGEvcmlsbC9yaWxsL3VpL3YxO3VpdjGiAgNSVViqAgpSaWxsLlVpLlYxygIKUmlsbFxVaVxWMeICFlJpbGxcVWlcVjFcR1BCTWV0YWRhdGHqAgxSaWxsOjpVaTo6VjFiBnByb3RvMw", [file_google_protobuf_timestamp, file_rill_runtime_v1_time_grain, file_rill_runtime_v1_queries, file_rill_runtime_v1_expression]);

/**
 * DashboardState represents the dashboard as seen by the user
 *
 * @generated from message rill.ui.v1.DashboardState
 */
export type DashboardState = Message<"rill.ui.v1.DashboardState"> & {
  /**
   * Selected time range
   *
   * @generated from field: rill.ui.v1.DashboardTimeRange time_range = 1;
   */
  timeRange?: DashboardTimeRange;

  /**
   * Dimension filters applied
   *
   * @generated from field: rill.runtime.v1.MetricsViewFilter filters = 2;
   */
  filters?: MetricsViewFilter;

  /**
   * Expression format for dimension filters
   *
   * @generated from field: rill.runtime.v1.Expression where = 20;
   */
  where?: Expression;

  /**
   * Expression format for measure filters
   *
   * @generated from field: repeated rill.ui.v1.DashboardDimensionFilter having = 21;
   */
  having: DashboardDimensionFilter[];

  /**
   * Selected time granularity
   *
   * @generated from field: rill.runtime.v1.TimeGrain time_grain = 3;
   */
  timeGrain: TimeGrain;

  /**
   * @generated from field: rill.ui.v1.DashboardTimeRange compare_time_range = 4;
   */
  compareTimeRange?: DashboardTimeRange;

  /**
   * Determines the active page. This is cleaner than using setting `selected_dimension` or `expanded_measure`
   *
   * @generated from field: rill.ui.v1.DashboardState.ActivePage active_page = 32;
   */
  activePage: DashboardState_ActivePage;

  /**
   * Selected measure for the leaderboard
   *
   * @generated from field: optional string leaderboard_measure = 5;
   */
  leaderboardMeasure?: string;

  /**
   * Focused dimension
   *
   * @generated from field: optional string selected_dimension = 6;
   */
  selectedDimension?: string;

  /**
   * @generated from field: optional bool show_time_comparison = 7;
   */
  showTimeComparison?: boolean;

  /**
   * Selected measures and dimensions to be shown
   *
   * @generated from field: repeated string visible_measures = 8;
   */
  visibleMeasures: string[];

  /**
   * @generated from field: optional bool all_measures_visible = 9;
   */
  allMeasuresVisible?: boolean;

  /**
   * @generated from field: repeated string visible_dimensions = 10;
   */
  visibleDimensions: string[];

  /**
   * @generated from field: optional bool all_dimensions_visible = 11;
   */
  allDimensionsVisible?: boolean;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardContextColumn leaderboard_context_column = 12;
   */
  leaderboardContextColumn?: DashboardState_LeaderboardContextColumn;

  /**
   * Selected timezone for the dashboard
   *
   * @generated from field: optional string selected_timezone = 13;
   */
  selectedTimezone?: string;

  /**
   * Scrub time range
   *
   * @generated from field: optional rill.ui.v1.DashboardTimeRange scrub_range = 14;
   */
  scrubRange?: DashboardTimeRange;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardSortDirection leaderboard_sort_direction = 15;
   */
  leaderboardSortDirection?: DashboardState_LeaderboardSortDirection;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.LeaderboardSortType leaderboard_sort_type = 16;
   */
  leaderboardSortType?: DashboardState_LeaderboardSortType;

  /**
   * @generated from field: optional string comparison_dimension = 17;
   */
  comparisonDimension?: string;

  /**
   * Expanded measure for TDD view
   *
   * @generated from field: optional string expanded_measure = 18;
   */
  expandedMeasure?: string;

  /**
   * Pin index for TDD table selected values
   *
   * @generated from field: optional int32 pin_index = 19;
   */
  pinIndex?: number;

  /**
   * Type of visualization for TDD view
   *
   * @generated from field: optional string chart_type = 33;
   */
  chartType?: string;

  /**
   * *
   * Pivot related fields
   *
   * @generated from field: optional bool pivot_is_active = 22;
   */
  pivotIsActive?: boolean;

  /**
   * List of time dimensions selected for rows
   *
   * @generated from field: repeated rill.runtime.v1.TimeGrain pivot_row_time_dimensions = 23;
   */
  pivotRowTimeDimensions: TimeGrain[];

  /**
   * List of dimensions selected for rows
   *
   * @generated from field: repeated string pivot_row_dimensions = 24;
   */
  pivotRowDimensions: string[];

  /**
   * List of time dimensions selected for columns
   *
   * @generated from field: repeated rill.runtime.v1.TimeGrain pivot_column_time_dimensions = 25;
   */
  pivotColumnTimeDimensions: TimeGrain[];

  /**
   * List of time dimensions selected for columns
   *
   * @generated from field: repeated string pivot_column_dimensions = 26;
   */
  pivotColumnDimensions: string[];

  /**
   * List of time measures selected for columns
   *
   * @generated from field: repeated string pivot_column_measures = 27;
   */
  pivotColumnMeasures: string[];

  /**
   * Map of dimensions that are expanded
   *
   * @generated from field: map<string, bool> pivot_expanded = 28;
   */
  pivotExpanded: { [key: string]: boolean };

  /**
   * Sort settings
   *
   * @generated from field: repeated rill.ui.v1.PivotColumnSort pivot_sort = 29;
   */
  pivotSort: PivotColumnSort[];

  /**
   * Pagination data
   *
   * @generated from field: optional int32 pivot_column_page = 30;
   */
  pivotColumnPage?: number;

  /**
   * @generated from field: optional rill.ui.v1.DashboardState.PivotRowJoinType pivot_row_join_type = 31;
   */
  pivotRowJoinType?: DashboardState_PivotRowJoinType;

  /**
   * Enable comparison for pivot
   *
   * @generated from field: optional bool pivot_enable_comparison = 34;
   */
  pivotEnableComparison?: boolean;
};

/**
 * Describes the message rill.ui.v1.DashboardState.
 * Use `create(DashboardStateSchema)` to create a new message.
 */
export const DashboardStateSchema: GenMessage<DashboardState> = /*@__PURE__*/
  messageDesc(file_rill_ui_v1_dashboard, 0);

/**
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardContextColumn
 */
export enum DashboardState_LeaderboardContextColumn {
  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_PERCENT = 1;
   */
  PERCENT = 1,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_DELTA_PERCENT = 2;
   */
  DELTA_PERCENT = 2,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_DELTA_ABSOLUTE = 3;
   */
  DELTA_ABSOLUTE = 3,

  /**
   * @generated from enum value: LEADERBOARD_CONTEXT_COLUMN_HIDDEN = 4;
   */
  HIDDEN = 4,
}

/**
 * Describes the enum rill.ui.v1.DashboardState.LeaderboardContextColumn.
 */
export const DashboardState_LeaderboardContextColumnSchema: GenEnum<DashboardState_LeaderboardContextColumn> = /*@__PURE__*/
  enumDesc(file_rill_ui_v1_dashboard, 0, 0);

/**
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardSortDirection
 */
export enum DashboardState_LeaderboardSortDirection {
  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_ASCENDING = 1;
   */
  ASCENDING = 1,

  /**
   * @generated from enum value: LEADERBOARD_SORT_DIRECTION_DESCENDING = 2;
   */
  DESCENDING = 2,
}

/**
 * Describes the enum rill.ui.v1.DashboardState.LeaderboardSortDirection.
 */
export const DashboardState_LeaderboardSortDirectionSchema: GenEnum<DashboardState_LeaderboardSortDirection> = /*@__PURE__*/
  enumDesc(file_rill_ui_v1_dashboard, 0, 1);

/**
 * *
 * SortType is used to determine how to sort the leaderboard
 * and dimension detail table, as well as where to place the
 * sort arrow.
 *
 * By default, the leaderboards+table will be sorted by VALUE,
 * using the value of the currently selected dashboard measure.
 *
 * If DELTA_ABSOLUTE or DELTA_PERCENT is selected, the
 * leaderboards+table will be sorted by the absolute or percentage
 * delta change of the currently selected dashboard measure.
 *
 * If PERCENT is selected, the table will be sorted by the value
 * of the currently selected dashboard measure, which will return
 * the same ordering as the percent-of-total sort for measures
 * with valid percent-of-total. However, the sort arrow will be
 * placed next to the percent-of-total icon.
 *
 * As of 2023-08, DIMENSION is not implemented, but at that time
 * the plan was to only apply DIMENSTION sort to the dimension
 * detail table, and not the leaderboards.
 *
 * @generated from enum rill.ui.v1.DashboardState.LeaderboardSortType
 */
export enum DashboardState_LeaderboardSortType {
  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_VALUE = 1;
   */
  VALUE = 1,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DIMENSION = 2;
   */
  DIMENSION = 2,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_PERCENT = 3;
   */
  PERCENT = 3,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DELTA_PERCENT = 4;
   */
  DELTA_PERCENT = 4,

  /**
   * @generated from enum value: LEADERBOARD_SORT_TYPE_DELTA_ABSOLUTE = 5;
   */
  DELTA_ABSOLUTE = 5,
}

/**
 * Describes the enum rill.ui.v1.DashboardState.LeaderboardSortType.
 */
export const DashboardState_LeaderboardSortTypeSchema: GenEnum<DashboardState_LeaderboardSortType> = /*@__PURE__*/
  enumDesc(file_rill_ui_v1_dashboard, 0, 2);

/**
 * @generated from enum rill.ui.v1.DashboardState.PivotRowJoinType
 */
export enum DashboardState_PivotRowJoinType {
  /**
   * @generated from enum value: PIVOT_ROW_JOIN_TYPE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: PIVOT_ROW_JOIN_TYPE_FLAT = 1;
   */
  FLAT = 1,

  /**
   * @generated from enum value: PIVOT_ROW_JOIN_TYPE_NEST = 2;
   */
  NEST = 2,
}

/**
 * Describes the enum rill.ui.v1.DashboardState.PivotRowJoinType.
 */
export const DashboardState_PivotRowJoinTypeSchema: GenEnum<DashboardState_PivotRowJoinType> = /*@__PURE__*/
  enumDesc(file_rill_ui_v1_dashboard, 0, 3);

/**
 * @generated from enum rill.ui.v1.DashboardState.ActivePage
 */
export enum DashboardState_ActivePage {
  /**
   * @generated from enum value: ACTIVE_PAGE_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: ACTIVE_PAGE_DEFAULT = 1;
   */
  DEFAULT = 1,

  /**
   * @generated from enum value: ACTIVE_PAGE_DIMENSION_TABLE = 2;
   */
  DIMENSION_TABLE = 2,

  /**
   * @generated from enum value: ACTIVE_PAGE_TIME_DIMENSIONAL_DETAIL = 3;
   */
  TIME_DIMENSIONAL_DETAIL = 3,

  /**
   * @generated from enum value: ACTIVE_PAGE_PIVOT = 4;
   */
  PIVOT = 4,
}

/**
 * Describes the enum rill.ui.v1.DashboardState.ActivePage.
 */
export const DashboardState_ActivePageSchema: GenEnum<DashboardState_ActivePage> = /*@__PURE__*/
  enumDesc(file_rill_ui_v1_dashboard, 0, 4);

/**
 * @generated from message rill.ui.v1.DashboardTimeRange
 */
export type DashboardTimeRange = Message<"rill.ui.v1.DashboardTimeRange"> & {
  /**
   * @generated from field: optional string name = 1;
   */
  name?: string;

  /**
   * @generated from field: optional google.protobuf.Timestamp time_start = 2;
   */
  timeStart?: Timestamp;

  /**
   * @generated from field: optional google.protobuf.Timestamp time_end = 3;
   */
  timeEnd?: Timestamp;
};

/**
 * Describes the message rill.ui.v1.DashboardTimeRange.
 * Use `create(DashboardTimeRangeSchema)` to create a new message.
 */
export const DashboardTimeRangeSchema: GenMessage<DashboardTimeRange> = /*@__PURE__*/
  messageDesc(file_rill_ui_v1_dashboard, 1);

/**
 * @generated from message rill.ui.v1.DashboardDimensionFilter
 */
export type DashboardDimensionFilter = Message<"rill.ui.v1.DashboardDimensionFilter"> & {
  /**
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * @generated from field: rill.runtime.v1.Expression filter = 2;
   */
  filter?: Expression;
};

/**
 * Describes the message rill.ui.v1.DashboardDimensionFilter.
 * Use `create(DashboardDimensionFilterSchema)` to create a new message.
 */
export const DashboardDimensionFilterSchema: GenMessage<DashboardDimensionFilter> = /*@__PURE__*/
  messageDesc(file_rill_ui_v1_dashboard, 2);

/**
 * @generated from message rill.ui.v1.PivotColumnSort
 */
export type PivotColumnSort = Message<"rill.ui.v1.PivotColumnSort"> & {
  /**
   * @generated from field: bool desc = 1;
   */
  desc: boolean;

  /**
   * @generated from field: string id = 2;
   */
  id: string;
};

/**
 * Describes the message rill.ui.v1.PivotColumnSort.
 * Use `create(PivotColumnSortSchema)` to create a new message.
 */
export const PivotColumnSortSchema: GenMessage<PivotColumnSort> = /*@__PURE__*/
  messageDesc(file_rill_ui_v1_dashboard, 3);

