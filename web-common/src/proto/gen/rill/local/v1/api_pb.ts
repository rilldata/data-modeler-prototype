// @generated by protoc-gen-es v1.9.0 with parameter "target=ts"
// @generated from file rill/local/v1/api.proto (package rill.local.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum rill.local.v1.UncommittedChanges
 */
export enum UncommittedChanges {
  /**
   * @generated from enum value: UNCOMMITTED_CHANGES_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: UNCOMMITTED_CHANGES_YES = 1;
   */
  YES = 1,

  /**
   * @generated from enum value: UNCOMMITTED_CHANGES_NO = 2;
   */
  NO = 2,
}
// Retrieve enum metadata with: proto3.getEnumType(UncommittedChanges)
proto3.util.setEnumType(UncommittedChanges, "rill.local.v1.UncommittedChanges", [
  { no: 0, name: "UNCOMMITTED_CHANGES_UNSPECIFIED" },
  { no: 1, name: "UNCOMMITTED_CHANGES_YES" },
  { no: 2, name: "UNCOMMITTED_CHANGES_NO" },
]);

/**
 * @generated from message rill.local.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: google.protobuf.Timestamp time = 1;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetMetadataRequest
 */
export class GetMetadataRequest extends Message<GetMetadataRequest> {
  constructor(data?: PartialMessage<GetMetadataRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetMetadataRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataRequest {
    return new GetMetadataRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined, b: GetMetadataRequest | PlainMessage<GetMetadataRequest> | undefined): boolean {
    return proto3.util.equals(GetMetadataRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetMetadataResponse
 */
export class GetMetadataResponse extends Message<GetMetadataResponse> {
  /**
   * @generated from field: string instance_id = 1;
   */
  instanceId = "";

  /**
   * @generated from field: string project_path = 2;
   */
  projectPath = "";

  /**
   * @generated from field: string install_id = 3;
   */
  installId = "";

  /**
   * @generated from field: string user_id = 4;
   */
  userId = "";

  /**
   * @generated from field: string version = 5;
   */
  version = "";

  /**
   * @generated from field: string build_commit = 6;
   */
  buildCommit = "";

  /**
   * @generated from field: string build_time = 7;
   */
  buildTime = "";

  /**
   * @generated from field: bool is_dev = 8;
   */
  isDev = false;

  /**
   * @generated from field: bool analytics_enabled = 9;
   */
  analyticsEnabled = false;

  /**
   * @generated from field: bool readonly = 10;
   */
  readonly = false;

  /**
   * @generated from field: int32 grpc_port = 11;
   */
  grpcPort = 0;

  constructor(data?: PartialMessage<GetMetadataResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetMetadataResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_path", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "install_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "build_commit", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "build_time", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "is_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "analytics_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "readonly", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "grpc_port", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMetadataResponse {
    return new GetMetadataResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined, b: GetMetadataResponse | PlainMessage<GetMetadataResponse> | undefined): boolean {
    return proto3.util.equals(GetMetadataResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetVersionRequest
 */
export class GetVersionRequest extends Message<GetVersionRequest> {
  constructor(data?: PartialMessage<GetVersionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetVersionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionRequest {
    return new GetVersionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined, b: GetVersionRequest | PlainMessage<GetVersionRequest> | undefined): boolean {
    return proto3.util.equals(GetVersionRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.GetVersionResponse
 */
export class GetVersionResponse extends Message<GetVersionResponse> {
  /**
   * @generated from field: string current = 1;
   */
  current = "";

  /**
   * @generated from field: string latest = 2;
   */
  latest = "";

  constructor(data?: PartialMessage<GetVersionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.GetVersionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "latest", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetVersionResponse {
    return new GetVersionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined, b: GetVersionResponse | PlainMessage<GetVersionResponse> | undefined): boolean {
    return proto3.util.equals(GetVersionResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployValidationRequest
 */
export class DeployValidationRequest extends Message<DeployValidationRequest> {
  constructor(data?: PartialMessage<DeployValidationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployValidationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployValidationRequest {
    return new DeployValidationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployValidationRequest {
    return new DeployValidationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployValidationRequest {
    return new DeployValidationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployValidationRequest | PlainMessage<DeployValidationRequest> | undefined, b: DeployValidationRequest | PlainMessage<DeployValidationRequest> | undefined): boolean {
    return proto3.util.equals(DeployValidationRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployValidationResponse
 */
export class DeployValidationResponse extends Message<DeployValidationResponse> {
  /**
   * if true below fields are relevant after login
   *
   * @generated from field: bool is_authenticated = 1;
   */
  isAuthenticated = false;

  /**
   * if true below fields are relevant after git install
   *
   * @generated from field: bool is_github_connected = 2;
   */
  isGithubConnected = false;

  /**
   * redirect to this if is_github_connected or is_repo_access_granted is false
   *
   * @generated from field: string git_grant_access_url = 3;
   */
  gitGrantAccessUrl = "";

  /**
   * @generated from field: string git_user_name = 4;
   */
  gitUserName = "";

  /**
   * if rill git app is installed on user account
   *
   * @generated from field: bool is_user_app_installed = 5;
   */
  isUserAppInstalled = false;

  /**
   * @generated from field: string user_app_permission = 6;
   */
  userAppPermission = "";

  /**
   * @generated from field: repeated string git_user_orgs = 7;
   */
  gitUserOrgs: string[] = [];

  /**
   * @generated from field: bool is_git_repo = 8;
   */
  isGitRepo = false;

  /**
   * only applicable when is_git_repo is true
   *
   * @generated from field: bool git_remote_found = 9;
   */
  gitRemoteFound = false;

  /**
   * relevant only when is_git_repo is true and remote found, if false redirect to git_grant_access_url
   *
   * @generated from field: bool is_repo_access_granted = 10;
   */
  isRepoAccessGranted = false;

  /**
   * only applicable when is_git_repo is true and remote found
   *
   * @generated from field: string git_url = 11;
   */
  gitUrl = "";

  /**
   * only applicable when is_git_repo is true and remote found
   *
   * @generated from field: rill.local.v1.UncommittedChanges uncommitted_changes = 12;
   */
  uncommittedChanges = UncommittedChanges.UNSPECIFIED;

  /**
   * only applicable when user does not have any orgs
   *
   * @generated from field: bool rill_org_exists_as_git_user_name = 13;
   */
  rillOrgExistsAsGitUserName = false;

  /**
   * @generated from field: repeated string rill_user_orgs = 14;
   */
  rillUserOrgs: string[] = [];

  /**
   * @generated from field: string local_project_name = 15;
   */
  localProjectName = "";

  /**
   * @generated from field: repeated rill.local.v1.OrganizationWithApp organizations_with_app = 16;
   */
  organizationsWithApp: OrganizationWithApp[] = [];

  constructor(data?: PartialMessage<DeployValidationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployValidationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "is_authenticated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "is_github_connected", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "git_grant_access_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "git_user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "is_user_app_installed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "user_app_permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "git_user_orgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 8, name: "is_git_repo", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "git_remote_found", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "is_repo_access_granted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "git_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "uncommitted_changes", kind: "enum", T: proto3.getEnumType(UncommittedChanges) },
    { no: 13, name: "rill_org_exists_as_git_user_name", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 14, name: "rill_user_orgs", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 15, name: "local_project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "organizations_with_app", kind: "message", T: OrganizationWithApp, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployValidationResponse {
    return new DeployValidationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployValidationResponse {
    return new DeployValidationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployValidationResponse {
    return new DeployValidationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployValidationResponse | PlainMessage<DeployValidationResponse> | undefined, b: DeployValidationResponse | PlainMessage<DeployValidationResponse> | undefined): boolean {
    return proto3.util.equals(DeployValidationResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.OrganizationWithApp
 */
export class OrganizationWithApp extends Message<OrganizationWithApp> {
  /**
   * @generated from field: string org = 1;
   */
  org = "";

  /**
   * @generated from field: string permission = 2;
   */
  permission = "";

  constructor(data?: PartialMessage<OrganizationWithApp>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.OrganizationWithApp";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "permission", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationWithApp {
    return new OrganizationWithApp().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationWithApp {
    return new OrganizationWithApp().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationWithApp {
    return new OrganizationWithApp().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationWithApp | PlainMessage<OrganizationWithApp> | undefined, b: OrganizationWithApp | PlainMessage<OrganizationWithApp> | undefined): boolean {
    return proto3.util.equals(OrganizationWithApp, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PushToGitRequest
 */
export class PushToGitRequest extends Message<PushToGitRequest> {
  /**
   * @generated from field: string org = 1;
   */
  org = "";

  /**
   * @generated from field: string repo = 2;
   */
  repo = "";

  constructor(data?: PartialMessage<PushToGitRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PushToGitRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "repo", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushToGitRequest {
    return new PushToGitRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushToGitRequest {
    return new PushToGitRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushToGitRequest {
    return new PushToGitRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PushToGitRequest | PlainMessage<PushToGitRequest> | undefined, b: PushToGitRequest | PlainMessage<PushToGitRequest> | undefined): boolean {
    return proto3.util.equals(PushToGitRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.PushToGitResponse
 */
export class PushToGitResponse extends Message<PushToGitResponse> {
  /**
   * @generated from field: string git_url = 1;
   */
  gitUrl = "";

  constructor(data?: PartialMessage<PushToGitResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.PushToGitResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "git_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PushToGitResponse {
    return new PushToGitResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PushToGitResponse {
    return new PushToGitResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PushToGitResponse {
    return new PushToGitResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PushToGitResponse | PlainMessage<PushToGitResponse> | undefined, b: PushToGitResponse | PlainMessage<PushToGitResponse> | undefined): boolean {
    return proto3.util.equals(PushToGitResponse, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployRequest
 */
export class DeployRequest extends Message<DeployRequest> {
  /**
   * creates the org if does not exists, no validation
   *
   * @generated from field: string rill_org = 1;
   */
  rillOrg = "";

  /**
   * no validation, assuming user provided correct name as per the prompts
   *
   * @generated from field: string rill_project_name = 2;
   */
  rillProjectName = "";

  constructor(data?: PartialMessage<DeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "rill_org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rill_project_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployRequest {
    return new DeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployRequest {
    return new DeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeployRequest | PlainMessage<DeployRequest> | undefined, b: DeployRequest | PlainMessage<DeployRequest> | undefined): boolean {
    return proto3.util.equals(DeployRequest, a, b);
  }
}

/**
 * @generated from message rill.local.v1.DeployResponse
 */
export class DeployResponse extends Message<DeployResponse> {
  /**
   * @generated from field: string deploy_id = 1;
   */
  deployId = "";

  /**
   * @generated from field: string org = 2;
   */
  org = "";

  /**
   * @generated from field: string project = 3;
   */
  project = "";

  /**
   * @generated from field: string frontend_url = 4;
   */
  frontendUrl = "";

  constructor(data?: PartialMessage<DeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.local.v1.DeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deploy_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "org", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "frontend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeployResponse {
    return new DeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeployResponse {
    return new DeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeployResponse | PlainMessage<DeployResponse> | undefined, b: DeployResponse | PlainMessage<DeployResponse> | undefined): boolean {
    return proto3.util.equals(DeployResponse, a, b);
  }
}

