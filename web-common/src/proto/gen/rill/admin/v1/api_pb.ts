// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file rill/admin/v1/api.proto (package rill.admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, Timestamp } from "@bufbuild/protobuf";

/**
 * @generated from enum rill.admin.v1.DeploymentStatus
 */
export enum DeploymentStatus {
  /**
   * @generated from enum value: DEPLOYMENT_STATUS_UNSPECIFIED = 0;
   */
  UNSPECIFIED = 0,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_PENDING = 1;
   */
  PENDING = 1,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_OK = 2;
   */
  OK = 2,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_RECONCILING = 3;
   */
  RECONCILING = 3,

  /**
   * @generated from enum value: DEPLOYMENT_STATUS_ERROR = 4;
   */
  ERROR = 4,
}
// Retrieve enum metadata with: proto3.getEnumType(DeploymentStatus)
proto3.util.setEnumType(DeploymentStatus, "rill.admin.v1.DeploymentStatus", [
  { no: 0, name: "DEPLOYMENT_STATUS_UNSPECIFIED" },
  { no: 1, name: "DEPLOYMENT_STATUS_PENDING" },
  { no: 2, name: "DEPLOYMENT_STATUS_OK" },
  { no: 3, name: "DEPLOYMENT_STATUS_RECONCILING" },
  { no: 4, name: "DEPLOYMENT_STATUS_ERROR" },
]);

/**
 * @generated from message rill.admin.v1.PingRequest
 */
export class PingRequest extends Message<PingRequest> {
  constructor(data?: PartialMessage<PingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingRequest {
    return new PingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingRequest {
    return new PingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: PingRequest | PlainMessage<PingRequest> | undefined, b: PingRequest | PlainMessage<PingRequest> | undefined): boolean {
    return proto3.util.equals(PingRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.PingResponse
 */
export class PingResponse extends Message<PingResponse> {
  /**
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * @generated from field: google.protobuf.Timestamp time = 2;
   */
  time?: Timestamp;

  constructor(data?: PartialMessage<PingResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PingResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "time", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PingResponse {
    return new PingResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PingResponse {
    return new PingResponse().fromJsonString(jsonString, options);
  }

  static equals(a: PingResponse | PlainMessage<PingResponse> | undefined, b: PingResponse | PlainMessage<PingResponse> | undefined): boolean {
    return proto3.util.equals(PingResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationsRequest
 */
export class ListOrganizationsRequest extends Message<ListOrganizationsRequest> {
  /**
   * @generated from field: uint32 page_size = 1;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 2;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 2, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsRequest {
    return new ListOrganizationsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined, b: ListOrganizationsRequest | PlainMessage<ListOrganizationsRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationsResponse
 */
export class ListOrganizationsResponse extends Message<ListOrganizationsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Organization organizations = 1;
   */
  organizations: Organization[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organizations", kind: "message", T: Organization, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationsResponse {
    return new ListOrganizationsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined, b: ListOrganizationsResponse | PlainMessage<ListOrganizationsResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationRequest
 */
export class GetOrganizationRequest extends Message<GetOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GetOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationRequest {
    return new GetOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined, b: GetOrganizationRequest | PlainMessage<GetOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(GetOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetOrganizationResponse
 */
export class GetOrganizationResponse extends Message<GetOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  /**
   * @generated from field: rill.admin.v1.OrganizationPermissions permissions = 2;
   */
  permissions?: OrganizationPermissions;

  constructor(data?: PartialMessage<GetOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
    { no: 2, name: "permissions", kind: "message", T: OrganizationPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetOrganizationResponse {
    return new GetOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined, b: GetOrganizationResponse | PlainMessage<GetOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(GetOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateOrganizationRequest
 */
export class CreateOrganizationRequest extends Message<CreateOrganizationRequest> {
  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<CreateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationRequest {
    return new CreateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined, b: CreateOrganizationRequest | PlainMessage<CreateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateOrganizationResponse
 */
export class CreateOrganizationResponse extends Message<CreateOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<CreateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateOrganizationResponse {
    return new CreateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined, b: CreateOrganizationResponse | PlainMessage<CreateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(CreateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteOrganizationRequest
 */
export class DeleteOrganizationRequest extends Message<DeleteOrganizationRequest> {
  /**
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationRequest {
    return new DeleteOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined, b: DeleteOrganizationRequest | PlainMessage<DeleteOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteOrganizationResponse
 */
export class DeleteOrganizationResponse extends Message<DeleteOrganizationResponse> {
  constructor(data?: PartialMessage<DeleteOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteOrganizationResponse {
    return new DeleteOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined, b: DeleteOrganizationResponse | PlainMessage<DeleteOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(DeleteOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateOrganizationRequest
 */
export class UpdateOrganizationRequest extends Message<UpdateOrganizationRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  constructor(data?: PartialMessage<UpdateOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationRequest {
    return new UpdateOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined, b: UpdateOrganizationRequest | PlainMessage<UpdateOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateOrganizationResponse
 */
export class UpdateOrganizationResponse extends Message<UpdateOrganizationResponse> {
  /**
   * @generated from field: rill.admin.v1.Organization organization = 1;
   */
  organization?: Organization;

  constructor(data?: PartialMessage<UpdateOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "message", T: Organization },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateOrganizationResponse {
    return new UpdateOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined, b: UpdateOrganizationResponse | PlainMessage<UpdateOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(UpdateOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectsForOrganizationRequest
 */
export class ListProjectsForOrganizationRequest extends Message<ListProjectsForOrganizationRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectsForOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectsForOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationRequest {
    return new ListProjectsForOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrganizationRequest | PlainMessage<ListProjectsForOrganizationRequest> | undefined, b: ListProjectsForOrganizationRequest | PlainMessage<ListProjectsForOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectsForOrganizationResponse
 */
export class ListProjectsForOrganizationResponse extends Message<ListProjectsForOrganizationResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Project projects = 1;
   */
  projects: Project[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectsForOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectsForOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "projects", kind: "message", T: Project, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectsForOrganizationResponse {
    return new ListProjectsForOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectsForOrganizationResponse | PlainMessage<ListProjectsForOrganizationResponse> | undefined, b: ListProjectsForOrganizationResponse | PlainMessage<ListProjectsForOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectsForOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectRequest
 */
export class GetProjectRequest extends Message<GetProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectRequest {
    return new GetProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined, b: GetProjectRequest | PlainMessage<GetProjectRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectResponse
 */
export class GetProjectResponse extends Message<GetProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  /**
   * @generated from field: rill.admin.v1.Deployment prod_deployment = 2;
   */
  prodDeployment?: Deployment;

  /**
   * @generated from field: string jwt = 3;
   */
  jwt = "";

  /**
   * @generated from field: rill.admin.v1.ProjectPermissions project_permissions = 4;
   */
  projectPermissions?: ProjectPermissions;

  constructor(data?: PartialMessage<GetProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
    { no: 2, name: "prod_deployment", kind: "message", T: Deployment },
    { no: 3, name: "jwt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "project_permissions", kind: "message", T: ProjectPermissions },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectResponse {
    return new GetProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined, b: GetProjectResponse | PlainMessage<GetProjectResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectVariablesRequest
 */
export class GetProjectVariablesRequest extends Message<GetProjectVariablesRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GetProjectVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectVariablesRequest {
    return new GetProjectVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectVariablesRequest | PlainMessage<GetProjectVariablesRequest> | undefined, b: GetProjectVariablesRequest | PlainMessage<GetProjectVariablesRequest> | undefined): boolean {
    return proto3.util.equals(GetProjectVariablesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetProjectVariablesResponse
 */
export class GetProjectVariablesResponse extends Message<GetProjectVariablesResponse> {
  /**
   * @generated from field: map<string, string> variables = 1;
   */
  variables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<GetProjectVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetProjectVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetProjectVariablesResponse {
    return new GetProjectVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetProjectVariablesResponse | PlainMessage<GetProjectVariablesResponse> | undefined, b: GetProjectVariablesResponse | PlainMessage<GetProjectVariablesResponse> | undefined): boolean {
    return proto3.util.equals(GetProjectVariablesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectRequest
 */
export class CreateProjectRequest extends Message<CreateProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: bool public = 4;
   */
  public = false;

  /**
   * @generated from field: string region = 5;
   */
  region = "";

  /**
   * @generated from field: string prod_olap_driver = 6;
   */
  prodOlapDriver = "";

  /**
   * @generated from field: string prod_olap_dsn = 7;
   */
  prodOlapDsn = "";

  /**
   * @generated from field: int64 prod_slots = 8;
   */
  prodSlots = protoInt64.zero;

  /**
   * @generated from field: string subpath = 12;
   */
  subpath = "";

  /**
   * @generated from field: string prod_branch = 9;
   */
  prodBranch = "";

  /**
   * @generated from field: string github_url = 10;
   */
  githubUrl = "";

  /**
   * @generated from field: map<string, string> variables = 11;
   */
  variables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<CreateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "prod_olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "prod_olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 12, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectRequest {
    return new CreateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined, b: CreateProjectRequest | PlainMessage<CreateProjectRequest> | undefined): boolean {
    return proto3.util.equals(CreateProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateProjectResponse
 */
export class CreateProjectResponse extends Message<CreateProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<CreateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateProjectResponse {
    return new CreateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined, b: CreateProjectResponse | PlainMessage<CreateProjectResponse> | undefined): boolean {
    return proto3.util.equals(CreateProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteProjectRequest
 */
export class DeleteProjectRequest extends Message<DeleteProjectRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<DeleteProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectRequest {
    return new DeleteProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined, b: DeleteProjectRequest | PlainMessage<DeleteProjectRequest> | undefined): boolean {
    return proto3.util.equals(DeleteProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.DeleteProjectResponse
 */
export class DeleteProjectResponse extends Message<DeleteProjectResponse> {
  constructor(data?: PartialMessage<DeleteProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.DeleteProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DeleteProjectResponse {
    return new DeleteProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined, b: DeleteProjectResponse | PlainMessage<DeleteProjectResponse> | undefined): boolean {
    return proto3.util.equals(DeleteProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectRequest
 */
export class UpdateProjectRequest extends Message<UpdateProjectRequest> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string organization_name = 2;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 3;
   */
  name = "";

  /**
   * @generated from field: string description = 4;
   */
  description = "";

  /**
   * @generated from field: bool public = 5;
   */
  public = false;

  /**
   * @generated from field: string prod_branch = 6;
   */
  prodBranch = "";

  /**
   * @generated from field: string github_url = 7;
   */
  githubUrl = "";

  /**
   * @generated from field: int64 prod_slots = 8;
   */
  prodSlots = protoInt64.zero;

  /**
   * @generated from field: string region = 9;
   */
  region = "";

  constructor(data?: PartialMessage<UpdateProjectRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectRequest {
    return new UpdateProjectRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined, b: UpdateProjectRequest | PlainMessage<UpdateProjectRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectResponse
 */
export class UpdateProjectResponse extends Message<UpdateProjectResponse> {
  /**
   * @generated from field: rill.admin.v1.Project project = 1;
   */
  project?: Project;

  constructor(data?: PartialMessage<UpdateProjectResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "project", kind: "message", T: Project },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectResponse {
    return new UpdateProjectResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined, b: UpdateProjectResponse | PlainMessage<UpdateProjectResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProjectResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectVariablesRequest
 */
export class UpdateProjectVariablesRequest extends Message<UpdateProjectVariablesRequest> {
  /**
   * @generated from field: string organization_name = 1;
   */
  organizationName = "";

  /**
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: map<string, string> variables = 3;
   */
  variables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateProjectVariablesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectVariablesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectVariablesRequest {
    return new UpdateProjectVariablesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectVariablesRequest | PlainMessage<UpdateProjectVariablesRequest> | undefined, b: UpdateProjectVariablesRequest | PlainMessage<UpdateProjectVariablesRequest> | undefined): boolean {
    return proto3.util.equals(UpdateProjectVariablesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UpdateProjectVariablesResponse
 */
export class UpdateProjectVariablesResponse extends Message<UpdateProjectVariablesResponse> {
  /**
   * @generated from field: map<string, string> variables = 1;
   */
  variables: { [key: string]: string } = {};

  constructor(data?: PartialMessage<UpdateProjectVariablesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UpdateProjectVariablesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "variables", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "scalar", T: 9 /* ScalarType.STRING */} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UpdateProjectVariablesResponse {
    return new UpdateProjectVariablesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: UpdateProjectVariablesResponse | PlainMessage<UpdateProjectVariablesResponse> | undefined, b: UpdateProjectVariablesResponse | PlainMessage<UpdateProjectVariablesResponse> | undefined): boolean {
    return proto3.util.equals(UpdateProjectVariablesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReconcileRequest
 */
export class TriggerReconcileRequest extends Message<TriggerReconcileRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<TriggerReconcileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReconcileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReconcileRequest {
    return new TriggerReconcileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReconcileRequest | PlainMessage<TriggerReconcileRequest> | undefined, b: TriggerReconcileRequest | PlainMessage<TriggerReconcileRequest> | undefined): boolean {
    return proto3.util.equals(TriggerReconcileRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerReconcileResponse
 */
export class TriggerReconcileResponse extends Message<TriggerReconcileResponse> {
  constructor(data?: PartialMessage<TriggerReconcileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerReconcileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerReconcileResponse {
    return new TriggerReconcileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerReconcileResponse | PlainMessage<TriggerReconcileResponse> | undefined, b: TriggerReconcileResponse | PlainMessage<TriggerReconcileResponse> | undefined): boolean {
    return proto3.util.equals(TriggerReconcileResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRefreshSourcesRequest
 */
export class TriggerRefreshSourcesRequest extends Message<TriggerRefreshSourcesRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  /**
   * @generated from field: repeated string sources = 2;
   */
  sources: string[] = [];

  constructor(data?: PartialMessage<TriggerRefreshSourcesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRefreshSourcesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sources", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesRequest {
    return new TriggerRefreshSourcesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshSourcesRequest | PlainMessage<TriggerRefreshSourcesRequest> | undefined, b: TriggerRefreshSourcesRequest | PlainMessage<TriggerRefreshSourcesRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshSourcesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRefreshSourcesResponse
 */
export class TriggerRefreshSourcesResponse extends Message<TriggerRefreshSourcesResponse> {
  constructor(data?: PartialMessage<TriggerRefreshSourcesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRefreshSourcesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRefreshSourcesResponse {
    return new TriggerRefreshSourcesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRefreshSourcesResponse | PlainMessage<TriggerRefreshSourcesResponse> | undefined, b: TriggerRefreshSourcesResponse | PlainMessage<TriggerRefreshSourcesResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRefreshSourcesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRedeployRequest
 */
export class TriggerRedeployRequest extends Message<TriggerRedeployRequest> {
  /**
   * @generated from field: string deployment_id = 1;
   */
  deploymentId = "";

  constructor(data?: PartialMessage<TriggerRedeployRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRedeployRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRedeployRequest {
    return new TriggerRedeployRequest().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRedeployRequest | PlainMessage<TriggerRedeployRequest> | undefined, b: TriggerRedeployRequest | PlainMessage<TriggerRedeployRequest> | undefined): boolean {
    return proto3.util.equals(TriggerRedeployRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.TriggerRedeployResponse
 */
export class TriggerRedeployResponse extends Message<TriggerRedeployResponse> {
  constructor(data?: PartialMessage<TriggerRedeployResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.TriggerRedeployResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): TriggerRedeployResponse {
    return new TriggerRedeployResponse().fromJsonString(jsonString, options);
  }

  static equals(a: TriggerRedeployResponse | PlainMessage<TriggerRedeployResponse> | undefined, b: TriggerRedeployResponse | PlainMessage<TriggerRedeployResponse> | undefined): boolean {
    return proto3.util.equals(TriggerRedeployResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMembersRequest
 */
export class ListOrganizationMembersRequest extends Message<ListOrganizationMembersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMembersRequest {
    return new ListOrganizationMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined, b: ListOrganizationMembersRequest | PlainMessage<ListOrganizationMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMembersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationMembersResponse
 */
export class ListOrganizationMembersResponse extends Message<ListOrganizationMembersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Member members = 1;
   */
  members: Member[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationMembersResponse {
    return new ListOrganizationMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationMembersResponse | PlainMessage<ListOrganizationMembersResponse> | undefined, b: ListOrganizationMembersResponse | PlainMessage<ListOrganizationMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationMembersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationInvitesRequest
 */
export class ListOrganizationInvitesRequest extends Message<ListOrganizationInvitesRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListOrganizationInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationInvitesRequest {
    return new ListOrganizationInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationInvitesRequest | PlainMessage<ListOrganizationInvitesRequest> | undefined, b: ListOrganizationInvitesRequest | PlainMessage<ListOrganizationInvitesRequest> | undefined): boolean {
    return proto3.util.equals(ListOrganizationInvitesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListOrganizationInvitesResponse
 */
export class ListOrganizationInvitesResponse extends Message<ListOrganizationInvitesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.UserInvite invites = 1;
   */
  invites: UserInvite[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListOrganizationInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListOrganizationInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: UserInvite, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListOrganizationInvitesResponse {
    return new ListOrganizationInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListOrganizationInvitesResponse | PlainMessage<ListOrganizationInvitesResponse> | undefined, b: ListOrganizationInvitesResponse | PlainMessage<ListOrganizationInvitesResponse> | undefined): boolean {
    return proto3.util.equals(ListOrganizationInvitesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberRequest
 */
export class AddOrganizationMemberRequest extends Message<AddOrganizationMemberRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<AddOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberRequest {
    return new AddOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberRequest | PlainMessage<AddOrganizationMemberRequest> | undefined, b: AddOrganizationMemberRequest | PlainMessage<AddOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddOrganizationMemberResponse
 */
export class AddOrganizationMemberResponse extends Message<AddOrganizationMemberResponse> {
  /**
   * @generated from field: bool pending_signup = 1;
   */
  pendingSignup = false;

  constructor(data?: PartialMessage<AddOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_signup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddOrganizationMemberResponse {
    return new AddOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddOrganizationMemberResponse | PlainMessage<AddOrganizationMemberResponse> | undefined, b: AddOrganizationMemberResponse | PlainMessage<AddOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(AddOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberRequest
 */
export class RemoveOrganizationMemberRequest extends Message<RemoveOrganizationMemberRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: bool keep_project_roles = 3;
   */
  keepProjectRoles = false;

  constructor(data?: PartialMessage<RemoveOrganizationMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "keep_project_roles", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberRequest {
    return new RemoveOrganizationMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined, b: RemoveOrganizationMemberRequest | PlainMessage<RemoveOrganizationMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveOrganizationMemberResponse
 */
export class RemoveOrganizationMemberResponse extends Message<RemoveOrganizationMemberResponse> {
  constructor(data?: PartialMessage<RemoveOrganizationMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveOrganizationMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveOrganizationMemberResponse {
    return new RemoveOrganizationMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined, b: RemoveOrganizationMemberResponse | PlainMessage<RemoveOrganizationMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveOrganizationMemberResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.LeaveOrganizationRequest
 */
export class LeaveOrganizationRequest extends Message<LeaveOrganizationRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<LeaveOrganizationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.LeaveOrganizationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationRequest {
    return new LeaveOrganizationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined, b: LeaveOrganizationRequest | PlainMessage<LeaveOrganizationRequest> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.LeaveOrganizationResponse
 */
export class LeaveOrganizationResponse extends Message<LeaveOrganizationResponse> {
  constructor(data?: PartialMessage<LeaveOrganizationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.LeaveOrganizationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): LeaveOrganizationResponse {
    return new LeaveOrganizationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined, b: LeaveOrganizationResponse | PlainMessage<LeaveOrganizationResponse> | undefined): boolean {
    return proto3.util.equals(LeaveOrganizationResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberRoleRequest
 */
export class SetOrganizationMemberRoleRequest extends Message<SetOrganizationMemberRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<SetOrganizationMemberRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberRoleRequest {
    return new SetOrganizationMemberRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberRoleRequest {
    return new SetOrganizationMemberRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberRoleRequest {
    return new SetOrganizationMemberRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberRoleRequest | PlainMessage<SetOrganizationMemberRoleRequest> | undefined, b: SetOrganizationMemberRoleRequest | PlainMessage<SetOrganizationMemberRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetOrganizationMemberRoleResponse
 */
export class SetOrganizationMemberRoleResponse extends Message<SetOrganizationMemberRoleResponse> {
  constructor(data?: PartialMessage<SetOrganizationMemberRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetOrganizationMemberRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetOrganizationMemberRoleResponse {
    return new SetOrganizationMemberRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetOrganizationMemberRoleResponse {
    return new SetOrganizationMemberRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetOrganizationMemberRoleResponse {
    return new SetOrganizationMemberRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetOrganizationMemberRoleResponse | PlainMessage<SetOrganizationMemberRoleResponse> | undefined, b: SetOrganizationMemberRoleResponse | PlainMessage<SetOrganizationMemberRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetOrganizationMemberRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListSuperusersRequest
 */
export class ListSuperusersRequest extends Message<ListSuperusersRequest> {
  constructor(data?: PartialMessage<ListSuperusersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListSuperusersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSuperusersRequest {
    return new ListSuperusersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListSuperusersRequest | PlainMessage<ListSuperusersRequest> | undefined, b: ListSuperusersRequest | PlainMessage<ListSuperusersRequest> | undefined): boolean {
    return proto3.util.equals(ListSuperusersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListSuperusersResponse
 */
export class ListSuperusersResponse extends Message<ListSuperusersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.User users = 1;
   */
  users: User[] = [];

  constructor(data?: PartialMessage<ListSuperusersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListSuperusersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListSuperusersResponse {
    return new ListSuperusersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListSuperusersResponse | PlainMessage<ListSuperusersResponse> | undefined, b: ListSuperusersResponse | PlainMessage<ListSuperusersResponse> | undefined): boolean {
    return proto3.util.equals(ListSuperusersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetSuperuserRequest
 */
export class SetSuperuserRequest extends Message<SetSuperuserRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: bool superuser = 2;
   */
  superuser = false;

  constructor(data?: PartialMessage<SetSuperuserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetSuperuserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "superuser", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSuperuserRequest {
    return new SetSuperuserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetSuperuserRequest | PlainMessage<SetSuperuserRequest> | undefined, b: SetSuperuserRequest | PlainMessage<SetSuperuserRequest> | undefined): boolean {
    return proto3.util.equals(SetSuperuserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetSuperuserResponse
 */
export class SetSuperuserResponse extends Message<SetSuperuserResponse> {
  constructor(data?: PartialMessage<SetSuperuserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetSuperuserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetSuperuserResponse {
    return new SetSuperuserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetSuperuserResponse | PlainMessage<SetSuperuserResponse> | undefined, b: SetSuperuserResponse | PlainMessage<SetSuperuserResponse> | undefined): boolean {
    return proto3.util.equals(SetSuperuserResponse, a, b);
  }
}

/**
 * SudoGetResourceRequest
 *
 * @generated from message rill.admin.v1.SudoGetResourceRequest
 */
export class SudoGetResourceRequest extends Message<SudoGetResourceRequest> {
  /**
   * @generated from oneof rill.admin.v1.SudoGetResourceRequest.id
   */
  id: {
    /**
     * @generated from field: string user_id = 1;
     */
    value: string;
    case: "userId";
  } | {
    /**
     * @generated from field: string org_id = 2;
     */
    value: string;
    case: "orgId";
  } | {
    /**
     * @generated from field: string project_id = 3;
     */
    value: string;
    case: "projectId";
  } | {
    /**
     * @generated from field: string deployment_id = 4;
     */
    value: string;
    case: "deploymentId";
  } | {
    /**
     * @generated from field: string instance_id = 5;
     */
    value: string;
    case: "instanceId";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SudoGetResourceRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoGetResourceRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 2, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 3, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 4, name: "deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
    { no: 5, name: "instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "id" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoGetResourceRequest {
    return new SudoGetResourceRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SudoGetResourceRequest | PlainMessage<SudoGetResourceRequest> | undefined, b: SudoGetResourceRequest | PlainMessage<SudoGetResourceRequest> | undefined): boolean {
    return proto3.util.equals(SudoGetResourceRequest, a, b);
  }
}

/**
 * SudoGetResourceResponse
 *
 * @generated from message rill.admin.v1.SudoGetResourceResponse
 */
export class SudoGetResourceResponse extends Message<SudoGetResourceResponse> {
  /**
   * @generated from oneof rill.admin.v1.SudoGetResourceResponse.resource
   */
  resource: {
    /**
     * @generated from field: rill.admin.v1.User user = 1;
     */
    value: User;
    case: "user";
  } | {
    /**
     * @generated from field: rill.admin.v1.Organization org = 2;
     */
    value: Organization;
    case: "org";
  } | {
    /**
     * @generated from field: rill.admin.v1.Project project = 3;
     */
    value: Project;
    case: "project";
  } | {
    /**
     * @generated from field: rill.admin.v1.Deployment deployment = 4;
     */
    value: Deployment;
    case: "deployment";
  } | {
    /**
     * @generated from field: rill.admin.v1.Deployment instance = 5;
     */
    value: Deployment;
    case: "instance";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<SudoGetResourceResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SudoGetResourceResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User, oneof: "resource" },
    { no: 2, name: "org", kind: "message", T: Organization, oneof: "resource" },
    { no: 3, name: "project", kind: "message", T: Project, oneof: "resource" },
    { no: 4, name: "deployment", kind: "message", T: Deployment, oneof: "resource" },
    { no: 5, name: "instance", kind: "message", T: Deployment, oneof: "resource" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SudoGetResourceResponse {
    return new SudoGetResourceResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SudoGetResourceResponse | PlainMessage<SudoGetResourceResponse> | undefined, b: SudoGetResourceResponse | PlainMessage<SudoGetResourceResponse> | undefined): boolean {
    return proto3.util.equals(SudoGetResourceResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMembersRequest
 */
export class ListProjectMembersRequest extends Message<ListProjectMembersRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectMembersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMembersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMembersRequest {
    return new ListProjectMembersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMembersRequest {
    return new ListProjectMembersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMembersRequest {
    return new ListProjectMembersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMembersRequest | PlainMessage<ListProjectMembersRequest> | undefined, b: ListProjectMembersRequest | PlainMessage<ListProjectMembersRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectMembersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectMembersResponse
 */
export class ListProjectMembersResponse extends Message<ListProjectMembersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.Member members = 1;
   */
  members: Member[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectMembersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectMembersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "members", kind: "message", T: Member, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectMembersResponse {
    return new ListProjectMembersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectMembersResponse {
    return new ListProjectMembersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectMembersResponse {
    return new ListProjectMembersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectMembersResponse | PlainMessage<ListProjectMembersResponse> | undefined, b: ListProjectMembersResponse | PlainMessage<ListProjectMembersResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectMembersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectInvitesRequest
 */
export class ListProjectInvitesRequest extends Message<ListProjectInvitesRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: uint32 page_size = 3;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 4;
   */
  pageToken = "";

  constructor(data?: PartialMessage<ListProjectInvitesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectInvitesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 4, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectInvitesRequest {
    return new ListProjectInvitesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectInvitesRequest | PlainMessage<ListProjectInvitesRequest> | undefined, b: ListProjectInvitesRequest | PlainMessage<ListProjectInvitesRequest> | undefined): boolean {
    return proto3.util.equals(ListProjectInvitesRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListProjectInvitesResponse
 */
export class ListProjectInvitesResponse extends Message<ListProjectInvitesResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.UserInvite invites = 1;
   */
  invites: UserInvite[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<ListProjectInvitesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListProjectInvitesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "invites", kind: "message", T: UserInvite, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListProjectInvitesResponse {
    return new ListProjectInvitesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListProjectInvitesResponse | PlainMessage<ListProjectInvitesResponse> | undefined, b: ListProjectInvitesResponse | PlainMessage<ListProjectInvitesResponse> | undefined): boolean {
    return proto3.util.equals(ListProjectInvitesResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberRequest
 */
export class AddProjectMemberRequest extends Message<AddProjectMemberRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<AddProjectMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberRequest {
    return new AddProjectMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberRequest {
    return new AddProjectMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberRequest {
    return new AddProjectMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberRequest | PlainMessage<AddProjectMemberRequest> | undefined, b: AddProjectMemberRequest | PlainMessage<AddProjectMemberRequest> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.AddProjectMemberResponse
 */
export class AddProjectMemberResponse extends Message<AddProjectMemberResponse> {
  /**
   * @generated from field: bool pending_signup = 1;
   */
  pendingSignup = false;

  constructor(data?: PartialMessage<AddProjectMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.AddProjectMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pending_signup", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): AddProjectMemberResponse {
    return new AddProjectMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): AddProjectMemberResponse {
    return new AddProjectMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): AddProjectMemberResponse {
    return new AddProjectMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: AddProjectMemberResponse | PlainMessage<AddProjectMemberResponse> | undefined, b: AddProjectMemberResponse | PlainMessage<AddProjectMemberResponse> | undefined): boolean {
    return proto3.util.equals(AddProjectMemberResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberRequest
 */
export class RemoveProjectMemberRequest extends Message<RemoveProjectMemberRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  constructor(data?: PartialMessage<RemoveProjectMemberRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberRequest {
    return new RemoveProjectMemberRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberRequest {
    return new RemoveProjectMemberRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberRequest {
    return new RemoveProjectMemberRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberRequest | PlainMessage<RemoveProjectMemberRequest> | undefined, b: RemoveProjectMemberRequest | PlainMessage<RemoveProjectMemberRequest> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveProjectMemberResponse
 */
export class RemoveProjectMemberResponse extends Message<RemoveProjectMemberResponse> {
  constructor(data?: PartialMessage<RemoveProjectMemberResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveProjectMemberResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveProjectMemberResponse {
    return new RemoveProjectMemberResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveProjectMemberResponse {
    return new RemoveProjectMemberResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveProjectMemberResponse {
    return new RemoveProjectMemberResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveProjectMemberResponse | PlainMessage<RemoveProjectMemberResponse> | undefined, b: RemoveProjectMemberResponse | PlainMessage<RemoveProjectMemberResponse> | undefined): boolean {
    return proto3.util.equals(RemoveProjectMemberResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberRoleRequest
 */
export class SetProjectMemberRoleRequest extends Message<SetProjectMemberRoleRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  /**
   * @generated from field: string email = 3;
   */
  email = "";

  /**
   * @generated from field: string role = 4;
   */
  role = "";

  constructor(data?: PartialMessage<SetProjectMemberRoleRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberRoleRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberRoleRequest {
    return new SetProjectMemberRoleRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberRoleRequest {
    return new SetProjectMemberRoleRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberRoleRequest {
    return new SetProjectMemberRoleRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberRoleRequest | PlainMessage<SetProjectMemberRoleRequest> | undefined, b: SetProjectMemberRoleRequest | PlainMessage<SetProjectMemberRoleRequest> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberRoleRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SetProjectMemberRoleResponse
 */
export class SetProjectMemberRoleResponse extends Message<SetProjectMemberRoleResponse> {
  constructor(data?: PartialMessage<SetProjectMemberRoleResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SetProjectMemberRoleResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SetProjectMemberRoleResponse {
    return new SetProjectMemberRoleResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SetProjectMemberRoleResponse {
    return new SetProjectMemberRoleResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SetProjectMemberRoleResponse {
    return new SetProjectMemberRoleResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SetProjectMemberRoleResponse | PlainMessage<SetProjectMemberRoleResponse> | undefined, b: SetProjectMemberRoleResponse | PlainMessage<SetProjectMemberRoleResponse> | undefined): boolean {
    return proto3.util.equals(SetProjectMemberRoleResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentUserRequest
 */
export class GetCurrentUserRequest extends Message<GetCurrentUserRequest> {
  constructor(data?: PartialMessage<GetCurrentUserRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentUserRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserRequest {
    return new GetCurrentUserRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined, b: GetCurrentUserRequest | PlainMessage<GetCurrentUserRequest> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetCurrentUserResponse
 */
export class GetCurrentUserResponse extends Message<GetCurrentUserResponse> {
  /**
   * @generated from field: rill.admin.v1.User user = 1;
   */
  user?: User;

  constructor(data?: PartialMessage<GetCurrentUserResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetCurrentUserResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user", kind: "message", T: User },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetCurrentUserResponse {
    return new GetCurrentUserResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined, b: GetCurrentUserResponse | PlainMessage<GetCurrentUserResponse> | undefined): boolean {
    return proto3.util.equals(GetCurrentUserResponse, a, b);
  }
}

/**
 * It can be some string as well so not validating for email here
 *
 * @generated from message rill.admin.v1.SearchUsersRequest
 */
export class SearchUsersRequest extends Message<SearchUsersRequest> {
  /**
   * @generated from field: string email_pattern = 1;
   */
  emailPattern = "";

  /**
   * @generated from field: uint32 page_size = 2;
   */
  pageSize = 0;

  /**
   * @generated from field: string page_token = 3;
   */
  pageToken = "";

  constructor(data?: PartialMessage<SearchUsersRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchUsersRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email_pattern", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "page_size", kind: "scalar", T: 13 /* ScalarType.UINT32 */ },
    { no: 3, name: "page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUsersRequest {
    return new SearchUsersRequest().fromJsonString(jsonString, options);
  }

  static equals(a: SearchUsersRequest | PlainMessage<SearchUsersRequest> | undefined, b: SearchUsersRequest | PlainMessage<SearchUsersRequest> | undefined): boolean {
    return proto3.util.equals(SearchUsersRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.SearchUsersResponse
 */
export class SearchUsersResponse extends Message<SearchUsersResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.User users = 1;
   */
  users: User[] = [];

  /**
   * @generated from field: string next_page_token = 2;
   */
  nextPageToken = "";

  constructor(data?: PartialMessage<SearchUsersResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.SearchUsersResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "users", kind: "message", T: User, repeated: true },
    { no: 2, name: "next_page_token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): SearchUsersResponse {
    return new SearchUsersResponse().fromJsonString(jsonString, options);
  }

  static equals(a: SearchUsersResponse | PlainMessage<SearchUsersResponse> | undefined, b: SearchUsersResponse | PlainMessage<SearchUsersResponse> | undefined): boolean {
    return proto3.util.equals(SearchUsersResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeCurrentAuthTokenRequest
 */
export class RevokeCurrentAuthTokenRequest extends Message<RevokeCurrentAuthTokenRequest> {
  constructor(data?: PartialMessage<RevokeCurrentAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeCurrentAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenRequest {
    return new RevokeCurrentAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeCurrentAuthTokenRequest | PlainMessage<RevokeCurrentAuthTokenRequest> | undefined, b: RevokeCurrentAuthTokenRequest | PlainMessage<RevokeCurrentAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(RevokeCurrentAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RevokeCurrentAuthTokenResponse
 */
export class RevokeCurrentAuthTokenResponse extends Message<RevokeCurrentAuthTokenResponse> {
  /**
   * @generated from field: string token_id = 1;
   */
  tokenId = "";

  constructor(data?: PartialMessage<RevokeCurrentAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RevokeCurrentAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RevokeCurrentAuthTokenResponse {
    return new RevokeCurrentAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RevokeCurrentAuthTokenResponse | PlainMessage<RevokeCurrentAuthTokenResponse> | undefined, b: RevokeCurrentAuthTokenResponse | PlainMessage<RevokeCurrentAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(RevokeCurrentAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueRepresentativeAuthTokenRequest
 */
export class IssueRepresentativeAuthTokenRequest extends Message<IssueRepresentativeAuthTokenRequest> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: int64 ttl_minutes = 2;
   */
  ttlMinutes = protoInt64.zero;

  constructor(data?: PartialMessage<IssueRepresentativeAuthTokenRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueRepresentativeAuthTokenRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "ttl_minutes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenRequest {
    return new IssueRepresentativeAuthTokenRequest().fromJsonString(jsonString, options);
  }

  static equals(a: IssueRepresentativeAuthTokenRequest | PlainMessage<IssueRepresentativeAuthTokenRequest> | undefined, b: IssueRepresentativeAuthTokenRequest | PlainMessage<IssueRepresentativeAuthTokenRequest> | undefined): boolean {
    return proto3.util.equals(IssueRepresentativeAuthTokenRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.IssueRepresentativeAuthTokenResponse
 */
export class IssueRepresentativeAuthTokenResponse extends Message<IssueRepresentativeAuthTokenResponse> {
  /**
   * @generated from field: string token = 1;
   */
  token = "";

  constructor(data?: PartialMessage<IssueRepresentativeAuthTokenResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.IssueRepresentativeAuthTokenResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): IssueRepresentativeAuthTokenResponse {
    return new IssueRepresentativeAuthTokenResponse().fromJsonString(jsonString, options);
  }

  static equals(a: IssueRepresentativeAuthTokenResponse | PlainMessage<IssueRepresentativeAuthTokenResponse> | undefined, b: IssueRepresentativeAuthTokenResponse | PlainMessage<IssueRepresentativeAuthTokenResponse> | undefined): boolean {
    return proto3.util.equals(IssueRepresentativeAuthTokenResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubRepoStatusRequest
 */
export class GetGithubRepoStatusRequest extends Message<GetGithubRepoStatusRequest> {
  /**
   * @generated from field: string github_url = 1;
   */
  githubUrl = "";

  constructor(data?: PartialMessage<GetGithubRepoStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubRepoStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubRepoStatusRequest {
    return new GetGithubRepoStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubRepoStatusRequest | PlainMessage<GetGithubRepoStatusRequest> | undefined, b: GetGithubRepoStatusRequest | PlainMessage<GetGithubRepoStatusRequest> | undefined): boolean {
    return proto3.util.equals(GetGithubRepoStatusRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGithubRepoStatusResponse
 */
export class GetGithubRepoStatusResponse extends Message<GetGithubRepoStatusResponse> {
  /**
   * @generated from field: bool has_access = 1;
   */
  hasAccess = false;

  /**
   * @generated from field: string grant_access_url = 2;
   */
  grantAccessUrl = "";

  /**
   * @generated from field: string default_branch = 3;
   */
  defaultBranch = "";

  constructor(data?: PartialMessage<GetGithubRepoStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGithubRepoStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "has_access", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "grant_access_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "default_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGithubRepoStatusResponse {
    return new GetGithubRepoStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGithubRepoStatusResponse | PlainMessage<GetGithubRepoStatusResponse> | undefined, b: GetGithubRepoStatusResponse | PlainMessage<GetGithubRepoStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetGithubRepoStatusResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGitCredentialsRequest
 */
export class GetGitCredentialsRequest extends Message<GetGitCredentialsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string project = 2;
   */
  project = "";

  constructor(data?: PartialMessage<GetGitCredentialsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGitCredentialsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitCredentialsRequest {
    return new GetGitCredentialsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitCredentialsRequest {
    return new GetGitCredentialsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitCredentialsRequest {
    return new GetGitCredentialsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitCredentialsRequest | PlainMessage<GetGitCredentialsRequest> | undefined, b: GetGitCredentialsRequest | PlainMessage<GetGitCredentialsRequest> | undefined): boolean {
    return proto3.util.equals(GetGitCredentialsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.GetGitCredentialsResponse
 */
export class GetGitCredentialsResponse extends Message<GetGitCredentialsResponse> {
  /**
   * @generated from field: string repo_url = 1;
   */
  repoUrl = "";

  /**
   * @generated from field: string username = 2;
   */
  username = "";

  /**
   * @generated from field: string password = 3;
   */
  password = "";

  /**
   * @generated from field: string subpath = 4;
   */
  subpath = "";

  /**
   * @generated from field: string prod_branch = 5;
   */
  prodBranch = "";

  constructor(data?: PartialMessage<GetGitCredentialsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.GetGitCredentialsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "repo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "username", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "password", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetGitCredentialsResponse {
    return new GetGitCredentialsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetGitCredentialsResponse {
    return new GetGitCredentialsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetGitCredentialsResponse {
    return new GetGitCredentialsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetGitCredentialsResponse | PlainMessage<GetGitCredentialsResponse> | undefined, b: GetGitCredentialsResponse | PlainMessage<GetGitCredentialsResponse> | undefined): boolean {
    return proto3.util.equals(GetGitCredentialsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateWhitelistedDomainRequest
 */
export class CreateWhitelistedDomainRequest extends Message<CreateWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  /**
   * @generated from field: string role = 3;
   */
  role = "";

  constructor(data?: PartialMessage<CreateWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainRequest {
    return new CreateWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWhitelistedDomainRequest | PlainMessage<CreateWhitelistedDomainRequest> | undefined, b: CreateWhitelistedDomainRequest | PlainMessage<CreateWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(CreateWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.CreateWhitelistedDomainResponse
 */
export class CreateWhitelistedDomainResponse extends Message<CreateWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<CreateWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.CreateWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): CreateWhitelistedDomainResponse {
    return new CreateWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: CreateWhitelistedDomainResponse | PlainMessage<CreateWhitelistedDomainResponse> | undefined, b: CreateWhitelistedDomainResponse | PlainMessage<CreateWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(CreateWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveWhitelistedDomainRequest
 */
export class RemoveWhitelistedDomainRequest extends Message<RemoveWhitelistedDomainRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  /**
   * @generated from field: string domain = 2;
   */
  domain = "";

  constructor(data?: PartialMessage<RemoveWhitelistedDomainRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveWhitelistedDomainRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainRequest {
    return new RemoveWhitelistedDomainRequest().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWhitelistedDomainRequest | PlainMessage<RemoveWhitelistedDomainRequest> | undefined, b: RemoveWhitelistedDomainRequest | PlainMessage<RemoveWhitelistedDomainRequest> | undefined): boolean {
    return proto3.util.equals(RemoveWhitelistedDomainRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.RemoveWhitelistedDomainResponse
 */
export class RemoveWhitelistedDomainResponse extends Message<RemoveWhitelistedDomainResponse> {
  constructor(data?: PartialMessage<RemoveWhitelistedDomainResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.RemoveWhitelistedDomainResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): RemoveWhitelistedDomainResponse {
    return new RemoveWhitelistedDomainResponse().fromJsonString(jsonString, options);
  }

  static equals(a: RemoveWhitelistedDomainResponse | PlainMessage<RemoveWhitelistedDomainResponse> | undefined, b: RemoveWhitelistedDomainResponse | PlainMessage<RemoveWhitelistedDomainResponse> | undefined): boolean {
    return proto3.util.equals(RemoveWhitelistedDomainResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListWhitelistedDomainsRequest
 */
export class ListWhitelistedDomainsRequest extends Message<ListWhitelistedDomainsRequest> {
  /**
   * @generated from field: string organization = 1;
   */
  organization = "";

  constructor(data?: PartialMessage<ListWhitelistedDomainsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListWhitelistedDomainsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "organization", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsRequest {
    return new ListWhitelistedDomainsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: ListWhitelistedDomainsRequest | PlainMessage<ListWhitelistedDomainsRequest> | undefined, b: ListWhitelistedDomainsRequest | PlainMessage<ListWhitelistedDomainsRequest> | undefined): boolean {
    return proto3.util.equals(ListWhitelistedDomainsRequest, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ListWhitelistedDomainsResponse
 */
export class ListWhitelistedDomainsResponse extends Message<ListWhitelistedDomainsResponse> {
  /**
   * @generated from field: repeated rill.admin.v1.WhitelistedDomain domains = 1;
   */
  domains: WhitelistedDomain[] = [];

  constructor(data?: PartialMessage<ListWhitelistedDomainsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ListWhitelistedDomainsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domains", kind: "message", T: WhitelistedDomain, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ListWhitelistedDomainsResponse {
    return new ListWhitelistedDomainsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: ListWhitelistedDomainsResponse | PlainMessage<ListWhitelistedDomainsResponse> | undefined, b: ListWhitelistedDomainsResponse | PlainMessage<ListWhitelistedDomainsResponse> | undefined): boolean {
    return proto3.util.equals(ListWhitelistedDomainsResponse, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.User
 */
export class User extends Message<User> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string email = 2;
   */
  email = "";

  /**
   * @generated from field: string display_name = 3;
   */
  displayName = "";

  /**
   * @generated from field: string photo_url = 4;
   */
  photoUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 5;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 6;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<User>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.User";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "display_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "photo_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_on", kind: "message", T: Timestamp },
    { no: 6, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): User {
    return new User().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): User {
    return new User().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): User {
    return new User().fromJsonString(jsonString, options);
  }

  static equals(a: User | PlainMessage<User> | undefined, b: User | PlainMessage<User> | undefined): boolean {
    return proto3.util.equals(User, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Organization
 */
export class Organization extends Message<Organization> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Globally unique
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string description = 3;
   */
  description = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 4;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 5;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Organization>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Organization";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "created_on", kind: "message", T: Timestamp },
    { no: 5, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Organization {
    return new Organization().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Organization {
    return new Organization().fromJsonString(jsonString, options);
  }

  static equals(a: Organization | PlainMessage<Organization> | undefined, b: Organization | PlainMessage<Organization> | undefined): boolean {
    return proto3.util.equals(Organization, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Project
 */
export class Project extends Message<Project> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * Unique in organization
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * @generated from field: string org_id = 3;
   */
  orgId = "";

  /**
   * @generated from field: string org_name = 4;
   */
  orgName = "";

  /**
   * @generated from field: string description = 5;
   */
  description = "";

  /**
   * @generated from field: bool public = 6;
   */
  public = false;

  /**
   * @generated from field: string region = 7;
   */
  region = "";

  /**
   * @generated from field: string github_url = 8;
   */
  githubUrl = "";

  /**
   * @generated from field: string subpath = 17;
   */
  subpath = "";

  /**
   * @generated from field: string prod_branch = 9;
   */
  prodBranch = "";

  /**
   * @generated from field: string prod_olap_driver = 10;
   */
  prodOlapDriver = "";

  /**
   * @generated from field: string prod_olap_dsn = 11;
   */
  prodOlapDsn = "";

  /**
   * @generated from field: int64 prod_slots = 12;
   */
  prodSlots = protoInt64.zero;

  /**
   * @generated from field: string prod_deployment_id = 13;
   */
  prodDeploymentId = "";

  /**
   * @generated from field: string frontend_url = 16;
   */
  frontendUrl = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 14;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 15;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Project>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Project";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "org_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "org_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "description", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "public", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "region", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 8, name: "github_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 17, name: "subpath", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "prod_branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 10, name: "prod_olap_driver", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 11, name: "prod_olap_dsn", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 12, name: "prod_slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 13, name: "prod_deployment_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 16, name: "frontend_url", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 14, name: "created_on", kind: "message", T: Timestamp },
    { no: 15, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Project {
    return new Project().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Project {
    return new Project().fromJsonString(jsonString, options);
  }

  static equals(a: Project | PlainMessage<Project> | undefined, b: Project | PlainMessage<Project> | undefined): boolean {
    return proto3.util.equals(Project, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Deployment
 */
export class Deployment extends Message<Deployment> {
  /**
   * @generated from field: string id = 1;
   */
  id = "";

  /**
   * @generated from field: string project_id = 2;
   */
  projectId = "";

  /**
   * @generated from field: int64 slots = 3;
   */
  slots = protoInt64.zero;

  /**
   * @generated from field: string branch = 4;
   */
  branch = "";

  /**
   * @generated from field: string runtime_host = 5;
   */
  runtimeHost = "";

  /**
   * @generated from field: string runtime_instance_id = 6;
   */
  runtimeInstanceId = "";

  /**
   * @generated from field: rill.admin.v1.DeploymentStatus status = 7;
   */
  status = DeploymentStatus.UNSPECIFIED;

  /**
   * @generated from field: string logs = 8;
   */
  logs = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 9;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 10;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Deployment>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Deployment";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "project_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "slots", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "branch", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "runtime_host", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "runtime_instance_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 7, name: "status", kind: "enum", T: proto3.getEnumType(DeploymentStatus) },
    { no: 8, name: "logs", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 9, name: "created_on", kind: "message", T: Timestamp },
    { no: 10, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Deployment {
    return new Deployment().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Deployment {
    return new Deployment().fromJsonString(jsonString, options);
  }

  static equals(a: Deployment | PlainMessage<Deployment> | undefined, b: Deployment | PlainMessage<Deployment> | undefined): boolean {
    return proto3.util.equals(Deployment, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.OrganizationPermissions
 */
export class OrganizationPermissions extends Message<OrganizationPermissions> {
  /**
   * @generated from field: bool read_org = 1;
   */
  readOrg = false;

  /**
   * @generated from field: bool manage_org = 2;
   */
  manageOrg = false;

  /**
   * @generated from field: bool read_projects = 3;
   */
  readProjects = false;

  /**
   * @generated from field: bool create_projects = 4;
   */
  createProjects = false;

  /**
   * @generated from field: bool manage_projects = 5;
   */
  manageProjects = false;

  /**
   * @generated from field: bool read_org_members = 6;
   */
  readOrgMembers = false;

  /**
   * @generated from field: bool manage_org_members = 7;
   */
  manageOrgMembers = false;

  constructor(data?: PartialMessage<OrganizationPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.OrganizationPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read_org", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "manage_org", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "read_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "create_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "manage_projects", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "read_org_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "manage_org_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): OrganizationPermissions {
    return new OrganizationPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: OrganizationPermissions | PlainMessage<OrganizationPermissions> | undefined, b: OrganizationPermissions | PlainMessage<OrganizationPermissions> | undefined): boolean {
    return proto3.util.equals(OrganizationPermissions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.ProjectPermissions
 */
export class ProjectPermissions extends Message<ProjectPermissions> {
  /**
   * @generated from field: bool read_project = 1;
   */
  readProject = false;

  /**
   * @generated from field: bool manage_project = 2;
   */
  manageProject = false;

  /**
   * @generated from field: bool read_prod = 3;
   */
  readProd = false;

  /**
   * @generated from field: bool read_prod_status = 4;
   */
  readProdStatus = false;

  /**
   * @generated from field: bool manage_prod = 5;
   */
  manageProd = false;

  /**
   * @generated from field: bool read_dev = 6;
   */
  readDev = false;

  /**
   * @generated from field: bool read_dev_status = 7;
   */
  readDevStatus = false;

  /**
   * @generated from field: bool manage_dev = 8;
   */
  manageDev = false;

  /**
   * @generated from field: bool read_project_members = 9;
   */
  readProjectMembers = false;

  /**
   * @generated from field: bool manage_project_members = 10;
   */
  manageProjectMembers = false;

  constructor(data?: PartialMessage<ProjectPermissions>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.ProjectPermissions";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "manage_project", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "read_prod", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "read_prod_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 5, name: "manage_prod", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 6, name: "read_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 7, name: "read_dev_status", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "manage_dev", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "read_project_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "manage_project_members", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): ProjectPermissions {
    return new ProjectPermissions().fromJsonString(jsonString, options);
  }

  static equals(a: ProjectPermissions | PlainMessage<ProjectPermissions> | undefined, b: ProjectPermissions | PlainMessage<ProjectPermissions> | undefined): boolean {
    return proto3.util.equals(ProjectPermissions, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.Member
 */
export class Member extends Message<Member> {
  /**
   * @generated from field: string user_id = 1;
   */
  userId = "";

  /**
   * @generated from field: string user_email = 3;
   */
  userEmail = "";

  /**
   * @generated from field: string user_name = 2;
   */
  userName = "";

  /**
   * @generated from field: string role_name = 4;
   */
  roleName = "";

  /**
   * @generated from field: google.protobuf.Timestamp created_on = 5;
   */
  createdOn?: Timestamp;

  /**
   * @generated from field: google.protobuf.Timestamp updated_on = 6;
   */
  updatedOn?: Timestamp;

  constructor(data?: PartialMessage<Member>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.Member";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "user_id", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "user_email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "user_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "role_name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "created_on", kind: "message", T: Timestamp },
    { no: 6, name: "updated_on", kind: "message", T: Timestamp },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Member {
    return new Member().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Member {
    return new Member().fromJsonString(jsonString, options);
  }

  static equals(a: Member | PlainMessage<Member> | undefined, b: Member | PlainMessage<Member> | undefined): boolean {
    return proto3.util.equals(Member, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.UserInvite
 */
export class UserInvite extends Message<UserInvite> {
  /**
   * @generated from field: string email = 1;
   */
  email = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  /**
   * @generated from field: string invited_by = 3;
   */
  invitedBy = "";

  constructor(data?: PartialMessage<UserInvite>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.UserInvite";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "email", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "invited_by", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): UserInvite {
    return new UserInvite().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): UserInvite {
    return new UserInvite().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): UserInvite {
    return new UserInvite().fromJsonString(jsonString, options);
  }

  static equals(a: UserInvite | PlainMessage<UserInvite> | undefined, b: UserInvite | PlainMessage<UserInvite> | undefined): boolean {
    return proto3.util.equals(UserInvite, a, b);
  }
}

/**
 * @generated from message rill.admin.v1.WhitelistedDomain
 */
export class WhitelistedDomain extends Message<WhitelistedDomain> {
  /**
   * @generated from field: string domain = 1;
   */
  domain = "";

  /**
   * @generated from field: string role = 2;
   */
  role = "";

  constructor(data?: PartialMessage<WhitelistedDomain>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.WhitelistedDomain";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "domain", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "role", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): WhitelistedDomain {
    return new WhitelistedDomain().fromJsonString(jsonString, options);
  }

  static equals(a: WhitelistedDomain | PlainMessage<WhitelistedDomain> | undefined, b: WhitelistedDomain | PlainMessage<WhitelistedDomain> | undefined): boolean {
    return proto3.util.equals(WhitelistedDomain, a, b);
  }
}

