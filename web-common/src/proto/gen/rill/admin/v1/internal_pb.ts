// @generated by protoc-gen-es v1.2.0 with parameter "target=ts"
// @generated from file rill/admin/v1/internal.proto (package rill.admin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";

/**
 * @generated from message rill.admin.v1.PageToken
 */
export class PageToken extends Message<PageToken> {
  /**
   * cursor is kept as an array since it may not be possible to use one field to unqiuely identify in all cases
   *
   * @generated from field: repeated string cursor = 1;
   */
  cursor: string[] = [];

  constructor(data?: PartialMessage<PageToken>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "rill.admin.v1.PageToken";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "cursor", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): PageToken {
    return new PageToken().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PageToken {
    return new PageToken().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): PageToken {
    return new PageToken().fromJsonString(jsonString, options);
  }

  static equals(a: PageToken | PlainMessage<PageToken> | undefined, b: PageToken | PlainMessage<PageToken> | undefined): boolean {
    return proto3.util.equals(PageToken, a, b);
  }
}

