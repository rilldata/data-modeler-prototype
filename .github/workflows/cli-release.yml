# This workflow runs full or nightly releases and continous deployment to Rill Cloud.

# Full Releases
# Full releases are published to brew, CDN (for install script), and Github Releases.
# A full release gets its version number from the Git tag that triggered it.

# Nightly Releases
# Nightly releases are only published to CDN and do not have a version.
# Their version number is "nightly".

# Continous Deployment to Rill Cloud
# Each merge to main branch is build with latest tag and published to Rill Cloud.

# Caching of the release artifacts are intentionally disabled at the bucket level by setting the Cache-Control header of the objects to 'no-store',
# this is done because the files are cached at the CDN layer instead and multiple caching layers makes invalidating the cache difficult.
# The CDN cache is explicitly invalidated as part of the release process, to prevent old versions from being accidentally served after the release is done.

name: Release Rill CLI
on:
  push:
    # Trigger a full release on new Git tag
    tags:
      - "**"
    # Trigger a rill cloud deployment
    branches:
      - main
      - cd
  # Trigger a nightly release at midnight
  schedule:
    - cron: '0 0 * * *'
  # Trigger a rill cloud deployment or nightly release manually
  workflow_dispatch:

env:
  # PUBLISH_RELEASE/PUBLISH_NIGHTLY becomes a string with values 'true' or 'false'
  PUBLISH_NIGHTLY: ${{ contains(fromJSON('["schedule", "workflow_dispatch"]'), github.event_name) }}
  PUBLISH_RELEASE: ${{ contains('refs/tags', github.ref_name) }}
  # Tag image with sha or release tag
  IMAGE_TAG: ${{ fromJSON('["'"${GITHUB_SHA}"'", "${{ github.ref_name }}}"]')[contains('refs/tags', github.ref_name)] }}

jobs:
  release:
    name: Release rill-developer
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Fetch tags required by goreleaser
        run: git fetch --prune --unshallow

      - name: Checkout sysroot for cross compilation
        uses: actions/checkout@v3
        with:
          repository: goreleaser/goreleaser-cross-example-sysroot
          path: sysroot

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.19.2

      - name: Set up NodeJS
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Build and embed static UI
        run: make cli.prepare

      - name: Set up release environment
        run: |-
          echo '${{ secrets.RILL_BINARY_SA }}' > rill-binary-sa.json
          echo 'GITHUB_TOKEN=${{ secrets.GORELEASER_ACCESS_TOKEN }}' > .release-env
          echo 'GOOGLE_APPLICATION_CREDENTIALS=/rill-binary-sa.json' >> .release-env
          echo 'DOCKERHUB_USER=${{ secrets.DOCKERHUB_USER }}' >> .release-env
          echo 'DOCKERHUB_PASS=${{ secrets.DOCKERHUB_PASS }}' >> .release-env

      - name: Build Rill using Goreleaser
        run: |-
          if [[ ${{ env.PUBLISH_RELEASE }} == 'false' ]]; then
            export NIGHTLY="--snapshot"
          fi

          docker run \
              --rm \
              --privileged \
              -e CGO_ENABLED=1 \
              --env-file .release-env \
              -v /var/run/docker.sock:/var/run/docker.sock \
              -v `pwd`:/go/src/rilldata/rill-developer \
              -v `pwd`/sysroot:/sysroot \
              -v `pwd`/rill-binary-sa.json:/rill-binary-sa.json \
              -w /go/src/rilldata/rill-developer \
              goreleaser/goreleaser-cross:v1.19.2 \
              release ${NIGHTLY}

      - name: Publish docker image
        run: |-
          echo '${{ secrets.DOCKERHUB_PASS }}' | docker login -u '${{ secrets.DOCKERHUB_USER }}' --password-stdin

          docker tag rilldata/rill:latest rilldata/rill:${{ env.IMAGE_TAG }}
          docker push rilldata/rill:${{ env.IMAGE_TAG }}

      - name: Trigger Rill Cloud deployment
        run: |-
          curl -X POST https://api.github.com/repos/rilldata/rill-helm-charts/dispatches \
          -H "Accept: application/vnd.github.everest-preview+json" \
          -H "Authorization: token ${{ secrets.GORELEASER_ACCESS_TOKEN }}" \
          --data '{"event_type": "Deploying Tag: ${{ env.IMAGE_TAG }}", "client_payload": { "image_tag": "${{ env.IMAGE_TAG }}", "release": "'"${PUBLISH_RELEASE}"'"}}'

      # Release or Nightly
      - name: Authenticate GCS
        uses: google-github-actions/auth@v0
        if: env.PUBLISH_RELEASE == 'true' || env.PUBLISH_NIGHTLY == 'true'
        with:
          credentials_json: "${{ secrets.RILL_BINARY_SA }}"

      - name: Set up Cloud SDK
        uses: 'google-github-actions/setup-gcloud@v1'
        if: env.PUBLISH_RELEASE == 'true' || env.PUBLISH_NIGHTLY == 'true'


      # Release Process
      - name: Create latest version file for releases
        if: env.PUBLISH_RELEASE == 'true'
        run: |-
          echo '${{ github.ref_name }}' >> latest.txt

      - name: Upload latest version file to CDN bucket
        if: env.PUBLISH_RELEASE == 'true'
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: latest.txt
          destination: prod-cdn.rilldata.com/rill/
          headers: |-
            cache-control: no-store

      - name: Upload install script to CDN bucket
        uses: google-github-actions/upload-cloud-storage@v1
        if: env.PUBLISH_RELEASE == 'true'
        with:
          path: scripts/install.sh
          destination: prod-cdn.rilldata.com/
          headers: |-
            cache-control: no-store

      # Nightly
      - name: Prepare for nightly GCS upload
        if: env.PUBLISH_NIGHTLY == 'true'
        run: |-
          mkdir nightly
          cp dist/*.zip nightly/
          cp dist/checksums.txt nightly/

      - name: Upload nightly to CDN bucket
        if: env.PUBLISH_NIGHTLY == 'true'
        uses: google-github-actions/upload-cloud-storage@v1
        with:
          path: nightly/
          destination: prod-cdn.rilldata.com/rill/
          headers: |-
            cache-control: no-store

      # Invalidate CDN
      - name: Explicitly invalidate the old artifacts from CDN cache
        if: env.PUBLISH_RELEASE == 'true' || env.PUBLISH_NIGHTLY == 'true'
        run: |-
          gcloud compute url-maps invalidate-cdn-cache prod --path "/install.sh" --async
          gcloud compute url-maps invalidate-cdn-cache prod --path "/rill/latest.txt" --async
          if [[ ${{ env.PUBLISH_NIGHTLY }} == 'true' ]]; then
            gcloud compute url-maps invalidate-cdn-cache prod --path "/rill/nightly/*" --async
          fi
