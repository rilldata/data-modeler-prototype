import { Server } from "socket.io";
import type {DataModelerService} from "$common/data-modeler-service/DataModelerService";
import type {DataModelerStateService} from "$common/data-modeler-state-service/DataModelerStateService";
import type { RootConfig } from "$common/config/RootConfig";
import type { ClientToServerEvents, ServerToClientEvents } from "$common/socket/SocketInterfaces";
import type http from "http";
import {
    DataModelerStateSyncService
} from "$common/data-modeler-state-service/sync-service/DataModelerStateSyncService";

/**
 * Socket server that applies actions from the client and emits the immer patches generated by the action back to client.
 */
export class SocketServer {
    private readonly server: Server<ClientToServerEvents, ServerToClientEvents>;
    private readonly dataModelerStateSyncService: DataModelerStateSyncService;

    constructor(private readonly config: RootConfig,
                private readonly dataModelerService: DataModelerService,
                private readonly dataModelerStateService: DataModelerStateService,
                server?: http.Server) {
        this.server = new Server(server ?? {
            cors: { origin: this.config.server.serverUrl, methods: ["GET", "POST"] },
        });
        this.dataModelerStateSyncService = new DataModelerStateSyncService(
            config, dataModelerStateService.entityStateServices,
            dataModelerService, dataModelerStateService);
    }

    public getSocketServer() {
        return this.server;
    }

    public async init(): Promise<void> {
        await this.dataModelerService.init();
        await this.dataModelerStateSyncService.init();

        this.dataModelerStateService.subscribePatches((entityType, stateType, patches) => {
            this.server.emit("patch", entityType, stateType, patches);
        });

        this.server.on("connection", (socket) => {
            console.log("New connection", socket.id);
            socket.emit("initialState", this.dataModelerStateService.getCurrentStates());
            socket.on("action", async (action, args, callback) => {
                if (callback) {
                    callback(await this.dataModelerService.dispatch(action, args));
                }
            });
        });
    }

    public async destroy(): Promise<void> {
        await this.dataModelerStateSyncService.destroy();
        this.server.close();
    }
}
