import { Server } from "socket.io";
import type {DataModelerService} from "$common/data-modeler-service/DataModelerService";
import type {DataModelerStateService} from "$common/data-modeler-state-service/DataModelerStateService";
import type { RootConfig } from "$common/config/RootConfig";
import type { ClientToServerEvents, ServerToClientEvents } from "$common/socket/SocketInterfaces";
import type http from "http";

/**
 * Socket server that applies actions from the client and emits the immer patches generated by the action back to client.
 *
 * Has temporary project management code.
 * 1. Load state from a file and write back to it periodically. (Should also sync on exit)
 * 2. Load .parquet files under the root folder. Looks in sub folders also.
 */
export class SocketServer {
    private readonly server: Server<ClientToServerEvents, ServerToClientEvents>;

    constructor(private readonly dataModelerService: DataModelerService,
                private readonly dataModelerStateService: DataModelerStateService,
                private readonly config: RootConfig, server?: http.Server) {
        this.server = new Server(server ?? {
            cors: { origin: this.config.server.serverUrl, methods: ["GET", "POST"] },
        });
    }

    public getSocketServer() {
        return this.server;
    }

    public async init(): Promise<void> {
        this.dataModelerStateService.subscribePatches((patches) => {
            this.server.emit("patch", patches);
        });

        this.server.on("connection", (socket) => {
            console.log("New connection", socket.id);
            socket.emit("initialState", this.dataModelerStateService.getCurrentState());
            socket.on("action", async (action, args) => {
                await this.dataModelerService.dispatch(action, args);
            });
        });
    }

    public async destroy(): Promise<void> {
        this.server.close();
    }
}
